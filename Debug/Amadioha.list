
Amadioha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b04c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800b1e0  0800b1e0  0000c1e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b714  0800b714  0000d200  2**0
                  CONTENTS
  4 .ARM          00000008  0800b714  0800b714  0000c714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b71c  0800b71c  0000d200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b71c  0800b71c  0000c71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b720  0800b720  0000c720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800b724  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c8  20000200  0800b924  0000d200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008c8  0800b924  0000d8c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b04  00000000  00000000  0000d230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000300e  00000000  00000000  00022d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00025d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e95  00000000  00000000  00027020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000241bf  00000000  00000000  00027eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a34  00000000  00000000  0004c074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc844  00000000  00000000  00062aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f2ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000642c  00000000  00000000  0013f330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0014575c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b1c4 	.word	0x0800b1c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800b1c4 	.word	0x0800b1c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fea:	463b      	mov	r3, r7
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
 8000ff8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ffa:	4b29      	ldr	r3, [pc, #164]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 8000ffc:	4a29      	ldr	r2, [pc, #164]	@ (80010a4 <MX_ADC1_Init+0xc0>)
 8000ffe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001000:	4b27      	ldr	r3, [pc, #156]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 8001002:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001006:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001008:	4b25      	ldr	r3, [pc, #148]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800100e:	4b24      	ldr	r3, [pc, #144]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001014:	4b22      	ldr	r3, [pc, #136]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800101a:	4b21      	ldr	r3, [pc, #132]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 800101c:	2204      	movs	r2, #4
 800101e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001020:	4b1f      	ldr	r3, [pc, #124]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 8001022:	2200      	movs	r2, #0
 8001024:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001026:	4b1e      	ldr	r3, [pc, #120]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 8001028:	2200      	movs	r2, #0
 800102a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800102c:	4b1c      	ldr	r3, [pc, #112]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 800102e:	2201      	movs	r2, #1
 8001030:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001032:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800103a:	4b19      	ldr	r3, [pc, #100]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 800103c:	2200      	movs	r2, #0
 800103e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001040:	4b17      	ldr	r3, [pc, #92]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 8001042:	2200      	movs	r2, #0
 8001044:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001046:	4b16      	ldr	r3, [pc, #88]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800104e:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 8001050:	2200      	movs	r2, #0
 8001052:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001054:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800105c:	4810      	ldr	r0, [pc, #64]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 800105e:	f001 f923 	bl	80022a8 <HAL_ADC_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001068:	f000 fb9c 	bl	80017a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800106c:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <MX_ADC1_Init+0xc4>)
 800106e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001070:	2306      	movs	r3, #6
 8001072:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001078:	237f      	movs	r3, #127	@ 0x7f
 800107a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800107c:	2304      	movs	r3, #4
 800107e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001084:	463b      	mov	r3, r7
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 800108a:	f001 fb4f 	bl	800272c <HAL_ADC_ConfigChannel>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001094:	f000 fb86 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2000021c 	.word	0x2000021c
 80010a4:	50040000 	.word	0x50040000
 80010a8:	1d500080 	.word	0x1d500080

080010ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b09e      	sub	sp, #120	@ 0x78
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	2254      	movs	r2, #84	@ 0x54
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f007 f9ed 	bl	80084ac <memset>
  if(adcHandle->Instance==ADC1)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a25      	ldr	r2, [pc, #148]	@ (800116c <HAL_ADC_MspInit+0xc0>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d143      	bne.n	8001164 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010e0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010e2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80010e6:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80010e8:	2301      	movs	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80010f0:	2310      	movs	r3, #16
 80010f2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010f4:	2307      	movs	r3, #7
 80010f6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001100:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001104:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4618      	mov	r0, r3
 800110c:	f003 f956 	bl	80043bc <HAL_RCCEx_PeriphCLKConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001116:	f000 fb45 	bl	80017a4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <HAL_ADC_MspInit+0xc4>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	4a14      	ldr	r2, [pc, #80]	@ (8001170 <HAL_ADC_MspInit+0xc4>)
 8001120:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001126:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <HAL_ADC_MspInit+0xc4>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <HAL_ADC_MspInit+0xc4>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	4a0e      	ldr	r2, [pc, #56]	@ (8001170 <HAL_ADC_MspInit+0xc4>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113e:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <HAL_ADC_MspInit+0xc4>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800114a:	2304      	movs	r3, #4
 800114c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800114e:	230b      	movs	r3, #11
 8001150:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001160:	f002 f8dc 	bl	800331c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001164:	bf00      	nop
 8001166:	3778      	adds	r7, #120	@ 0x78
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	50040000 	.word	0x50040000
 8001170:	40021000 	.word	0x40021000

08001174 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	4b2c      	ldr	r3, [pc, #176]	@ (800123c <MX_GPIO_Init+0xc8>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118e:	4a2b      	ldr	r2, [pc, #172]	@ (800123c <MX_GPIO_Init+0xc8>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001196:	4b29      	ldr	r3, [pc, #164]	@ (800123c <MX_GPIO_Init+0xc8>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	4b26      	ldr	r3, [pc, #152]	@ (800123c <MX_GPIO_Init+0xc8>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	4a25      	ldr	r2, [pc, #148]	@ (800123c <MX_GPIO_Init+0xc8>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ae:	4b23      	ldr	r3, [pc, #140]	@ (800123c <MX_GPIO_Init+0xc8>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VBase_Pin|Sense_CuttOff_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2118      	movs	r1, #24
 80011be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c2:	f002 fa15 	bl	80035f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2102      	movs	r1, #2
 80011ca:	481d      	ldr	r0, [pc, #116]	@ (8001240 <MX_GPIO_Init+0xcc>)
 80011cc:	f002 fa10 	bl	80035f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VBase_Pin|Sense_CuttOff_Pin;
 80011d0:	2318      	movs	r3, #24
 80011d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	4619      	mov	r1, r3
 80011e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ea:	f002 f897 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Switch_Pin;
 80011ee:	2301      	movs	r3, #1
 80011f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Switch_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	4619      	mov	r1, r3
 8001202:	480f      	ldr	r0, [pc, #60]	@ (8001240 <MX_GPIO_Init+0xcc>)
 8001204:	f002 f88a 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001208:	2302      	movs	r3, #2
 800120a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	4619      	mov	r1, r3
 800121e:	4808      	ldr	r0, [pc, #32]	@ (8001240 <MX_GPIO_Init+0xcc>)
 8001220:	f002 f87c 	bl	800331c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	2100      	movs	r1, #0
 8001228:	2006      	movs	r0, #6
 800122a:	f001 ffc2 	bl	80031b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800122e:	2006      	movs	r0, #6
 8001230:	f001 ffdb 	bl	80031ea <HAL_NVIC_EnableIRQ>

}
 8001234:	bf00      	nop
 8001236:	3720      	adds	r7, #32
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40021000 	.word	0x40021000
 8001240:	48000400 	.word	0x48000400

08001244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001248:	f000 fdcd 	bl	8001de6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124c:	f000 f872 	bl	8001334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001250:	f7ff ff90 	bl	8001174 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001254:	f7ff fec6 	bl	8000fe4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001258:	f000 fc62 	bl	8001b20 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800125c:	f000 fbee 	bl	8001a3c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001260:	482a      	ldr	r0, [pc, #168]	@ (800130c <main+0xc8>)
 8001262:	f003 fbeb 	bl	8004a3c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, &received_byte, 1);  // start IT receiving
 8001266:	2201      	movs	r2, #1
 8001268:	4929      	ldr	r1, [pc, #164]	@ (8001310 <main+0xcc>)
 800126a:	482a      	ldr	r0, [pc, #168]	@ (8001314 <main+0xd0>)
 800126c:	f004 f8a2 	bl	80053b4 <HAL_UART_Receive_IT>
/* XBEE Configuration--------------------------------------------------------*/
  //Request and store XBee Serial Number Low
  if (requestParameter("ATSL\r", mySerialLow, sizeof(mySerialLow)) == XBEE_SUCCESS) {
 8001270:	2208      	movs	r2, #8
 8001272:	4929      	ldr	r1, [pc, #164]	@ (8001318 <main+0xd4>)
 8001274:	4829      	ldr	r0, [pc, #164]	@ (800131c <main+0xd8>)
 8001276:	f000 fce3 	bl	8001c40 <requestParameter>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d008      	beq.n	8001292 <main+0x4e>
      //printf("Serial Number Low: %s\n", serial_number_low);
  } else {
	  //Blink LED in a loop to indicate issue
      while(1){
    	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // turn on LEDs
 8001280:	2102      	movs	r1, #2
 8001282:	4827      	ldr	r0, [pc, #156]	@ (8001320 <main+0xdc>)
 8001284:	f002 f9cc 	bl	8003620 <HAL_GPIO_TogglePin>
    	  HAL_Delay(100);
 8001288:	2064      	movs	r0, #100	@ 0x64
 800128a:	f000 fe21 	bl	8001ed0 <HAL_Delay>
    	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // turn on LEDs
 800128e:	bf00      	nop
 8001290:	e7f6      	b.n	8001280 <main+0x3c>
      }
  }
/* XBEE Configuration Ends--------------------------------------------------*/
  HAL_GPIO_WritePin(GPIOA, Sense_CuttOff_Pin, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	2110      	movs	r1, #16
 8001296:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800129a:	f002 f9a9 	bl	80035f0 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);

	  if (data_received_flag) {
 800129e:	4b21      	ldr	r3, [pc, #132]	@ (8001324 <main+0xe0>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0fa      	beq.n	800129e <main+0x5a>
	           // Check if the message is meant for me
	           if (memcmp(mySerialLow, rx_buffer, 8) == 0) {
 80012a8:	2208      	movs	r2, #8
 80012aa:	491f      	ldr	r1, [pc, #124]	@ (8001328 <main+0xe4>)
 80012ac:	481a      	ldr	r0, [pc, #104]	@ (8001318 <main+0xd4>)
 80012ae:	f007 f8ed 	bl	800848c <memcmp>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d11b      	bne.n	80012f0 <main+0xac>
	               // Extract and handle command and data
	               Control = rx_buffer[8];
 80012b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <main+0xe4>)
 80012ba:	7a1a      	ldrb	r2, [r3, #8]
 80012bc:	4b1b      	ldr	r3, [pc, #108]	@ (800132c <main+0xe8>)
 80012be:	701a      	strb	r2, [r3, #0]
	               Data = rx_buffer[9];
 80012c0:	4b19      	ldr	r3, [pc, #100]	@ (8001328 <main+0xe4>)
 80012c2:	7a5a      	ldrb	r2, [r3, #9]
 80012c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <main+0xec>)
 80012c6:	701a      	strb	r2, [r3, #0]

	               if (Control == 0xC0) {
 80012c8:	4b18      	ldr	r3, [pc, #96]	@ (800132c <main+0xe8>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2bc0      	cmp	r3, #192	@ 0xc0
 80012ce:	d105      	bne.n	80012dc <main+0x98>
	                   handleSwitchControl(Data);
 80012d0:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <main+0xec>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 f965 	bl	80015a4 <handleSwitchControl>
 80012da:	e009      	b.n	80012f0 <main+0xac>
	               } else if (Control == 0xFF && Data == 0x01) {
 80012dc:	4b13      	ldr	r3, [pc, #76]	@ (800132c <main+0xe8>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2bff      	cmp	r3, #255	@ 0xff
 80012e2:	d105      	bne.n	80012f0 <main+0xac>
 80012e4:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <main+0xec>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d101      	bne.n	80012f0 <main+0xac>
	                   handleCurrentControl();
 80012ec:	f000 f978 	bl	80015e0 <handleCurrentControl>
	               }
	           }

	           // Reset flags and buffers after processing
	           data_received_flag = 0;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <main+0xe0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
	           memset(rx_buffer, 0, Data_BUFFER_SIZE);
 80012f6:	220c      	movs	r2, #12
 80012f8:	2100      	movs	r1, #0
 80012fa:	480b      	ldr	r0, [pc, #44]	@ (8001328 <main+0xe4>)
 80012fc:	f007 f8d6 	bl	80084ac <memset>
	           HAL_UART_Receive_IT(&huart1, &received_byte, 1);
 8001300:	2201      	movs	r2, #1
 8001302:	4903      	ldr	r1, [pc, #12]	@ (8001310 <main+0xcc>)
 8001304:	4803      	ldr	r0, [pc, #12]	@ (8001314 <main+0xd0>)
 8001306:	f004 f855 	bl	80053b4 <HAL_UART_Receive_IT>
	  if (data_received_flag) {
 800130a:	e7c8      	b.n	800129e <main+0x5a>
 800130c:	200006a4 	.word	0x200006a4
 8001310:	20000290 	.word	0x20000290
 8001314:	200006f0 	.word	0x200006f0
 8001318:	20000294 	.word	0x20000294
 800131c:	0800b1e0 	.word	0x0800b1e0
 8001320:	48000400 	.word	0x48000400
 8001324:	20000283 	.word	0x20000283
 8001328:	20000284 	.word	0x20000284
 800132c:	2000029c 	.word	0x2000029c
 8001330:	2000029d 	.word	0x2000029d

08001334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b096      	sub	sp, #88	@ 0x58
 8001338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	2244      	movs	r2, #68	@ 0x44
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f007 f8b2 	bl	80084ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001348:	463b      	mov	r3, r7
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001356:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800135a:	f002 f9a1 	bl	80036a0 <HAL_PWREx_ControlVoltageScaling>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001364:	f000 fa1e 	bl	80017a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001368:	2310      	movs	r3, #16
 800136a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800136c:	2301      	movs	r3, #1
 800136e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001374:	2360      	movs	r3, #96	@ 0x60
 8001376:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001378:	2302      	movs	r3, #2
 800137a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800137c:	2301      	movs	r3, #1
 800137e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001380:	2301      	movs	r3, #1
 8001382:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8001384:	2324      	movs	r3, #36	@ 0x24
 8001386:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001388:	2307      	movs	r3, #7
 800138a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800138c:	2302      	movs	r3, #2
 800138e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001390:	2302      	movs	r3, #2
 8001392:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4618      	mov	r0, r3
 800139a:	f002 f9d7 	bl	800374c <HAL_RCC_OscConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80013a4:	f000 f9fe 	bl	80017a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a8:	230f      	movs	r3, #15
 80013aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ac:	2303      	movs	r3, #3
 80013ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013be:	463b      	mov	r3, r7
 80013c0:	2104      	movs	r1, #4
 80013c2:	4618      	mov	r0, r3
 80013c4:	f002 fdd6 	bl	8003f74 <HAL_RCC_ClockConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80013ce:	f000 f9e9 	bl	80017a4 <Error_Handler>
  }
}
 80013d2:	bf00      	nop
 80013d4:	3758      	adds	r7, #88	@ 0x58
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	0000      	movs	r0, r0
 80013dc:	0000      	movs	r0, r0
	...

080013e0 <Read_ADC>:

/* USER CODE BEGIN 4 */

// Function to read ADC value
float Read_ADC(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);  // Start ADC conversion
 80013e6:	4830      	ldr	r0, [pc, #192]	@ (80014a8 <Read_ADC+0xc8>)
 80013e8:	f001 f8a0 	bl	800252c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);  // Wait for conversion to finish
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013f0:	482d      	ldr	r0, [pc, #180]	@ (80014a8 <Read_ADC+0xc8>)
 80013f2:	f001 f8fe 	bl	80025f2 <HAL_ADC_PollForConversion>
     adcValue = HAL_ADC_GetValue(&hadc1);  // Get the ADC value
 80013f6:	482c      	ldr	r0, [pc, #176]	@ (80014a8 <Read_ADC+0xc8>)
 80013f8:	f001 f98a 	bl	8002710 <HAL_ADC_GetValue>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	4b2a      	ldr	r3, [pc, #168]	@ (80014ac <Read_ADC+0xcc>)
 8001402:	801a      	strh	r2, [r3, #0]

    volatile float voltage = (adcValue / ADC_RESOLUTION) * V_REF;  // Convert ADC value to voltage
 8001404:	4b29      	ldr	r3, [pc, #164]	@ (80014ac <Read_ADC+0xcc>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	b29b      	uxth	r3, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f88a 	bl	8000524 <__aeabi_i2d>
 8001410:	a31f      	add	r3, pc, #124	@ (adr r3, 8001490 <Read_ADC+0xb0>)
 8001412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001416:	f7ff fa19 	bl	800084c <__aeabi_ddiv>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	a31d      	add	r3, pc, #116	@ (adr r3, 8001498 <Read_ADC+0xb8>)
 8001424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001428:	f7ff f8e6 	bl	80005f8 <__aeabi_dmul>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff fbd8 	bl	8000be8 <__aeabi_d2f>
 8001438:	4603      	mov	r3, r0
 800143a:	607b      	str	r3, [r7, #4]
    float zeroCurrentVoltage = 2.45;      // Sensor outputs 0.5 * Vcc at zero current
 800143c:	4b1c      	ldr	r3, [pc, #112]	@ (80014b0 <Read_ADC+0xd0>)
 800143e:	60fb      	str	r3, [r7, #12]
    // Calculate current using sensor sensitivity (mV/A)
    float current = (voltage - zeroCurrentVoltage) / SENSITIVITY;  // in Amps
 8001440:	ed97 7a01 	vldr	s14, [r7, #4]
 8001444:	edd7 7a03 	vldr	s15, [r7, #12]
 8001448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800144c:	ee17 0a90 	vmov	r0, s15
 8001450:	f7ff f87a 	bl	8000548 <__aeabi_f2d>
 8001454:	a312      	add	r3, pc, #72	@ (adr r3, 80014a0 <Read_ADC+0xc0>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7ff f9f7 	bl	800084c <__aeabi_ddiv>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f7ff fbbf 	bl	8000be8 <__aeabi_d2f>
 800146a:	4603      	mov	r3, r0
 800146c:	60bb      	str	r3, [r7, #8]
    test = voltage;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a10      	ldr	r2, [pc, #64]	@ (80014b4 <Read_ADC+0xd4>)
 8001472:	6013      	str	r3, [r2, #0]
    test2= current;
 8001474:	4a10      	ldr	r2, [pc, #64]	@ (80014b8 <Read_ADC+0xd8>)
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	6013      	str	r3, [r2, #0]
    return current;
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	ee07 3a90 	vmov	s15, r3
}
 8001480:	eeb0 0a67 	vmov.f32	s0, s15
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	f3af 8000 	nop.w
 8001490:	00000000 	.word	0x00000000
 8001494:	40affe00 	.word	0x40affe00
 8001498:	66666666 	.word	0x66666666
 800149c:	400a6666 	.word	0x400a6666
 80014a0:	7ae147ae 	.word	0x7ae147ae
 80014a4:	3fc7ae14 	.word	0x3fc7ae14
 80014a8:	2000021c 	.word	0x2000021c
 80014ac:	200002a4 	.word	0x200002a4
 80014b0:	401ccccd 	.word	0x401ccccd
 80014b4:	20000694 	.word	0x20000694
 80014b8:	20000698 	.word	0x20000698

080014bc <Calculate_RMS>:
// Function to calculate the RMS value of the sampled current
float Calculate_RMS(float samples[], int sampleCount) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
    float sumSquares = 0;
 80014c6:	f04f 0300 	mov.w	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < sampleCount; i++) {
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	e016      	b.n	8001500 <Calculate_RMS+0x44>
        sumSquares += samples[i] * samples[i];
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	ed93 7a00 	vldr	s14, [r3]
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	edd3 7a00 	vldr	s15, [r3]
 80014ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80014f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f6:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i = 0; i < sampleCount; i++) {
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	3301      	adds	r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	dbe4      	blt.n	80014d2 <Calculate_RMS+0x16>
    }

    // Return the square root of the mean of the squares (RMS value)
    return sqrt(sumSquares / sampleCount);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	ee07 3a90 	vmov	s15, r3
 800150e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001512:	ed97 7a03 	vldr	s14, [r7, #12]
 8001516:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800151a:	ee16 0a90 	vmov	r0, s13
 800151e:	f7ff f813 	bl	8000548 <__aeabi_f2d>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	ec43 2b10 	vmov	d0, r2, r3
 800152a:	f009 fd45 	bl	800afb8 <sqrt>
 800152e:	ec53 2b10 	vmov	r2, r3, d0
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	f7ff fb57 	bl	8000be8 <__aeabi_d2f>
 800153a:	4603      	mov	r3, r0
 800153c:	ee07 3a90 	vmov	s15, r3
}
 8001540:	eeb0 0a67 	vmov.f32	s0, s15
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <CheckAndTransmitLoadChange>:

/*
 * checks if load changed state and transmits new state to motion sensor
 */
void CheckAndTransmitLoadChange(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
    if (loadActive != previousLoadActive) {
 8001550:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <CheckAndTransmitLoadChange+0x44>)
 8001552:	781a      	ldrb	r2, [r3, #0]
 8001554:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <CheckAndTransmitLoadChange+0x48>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d016      	beq.n	800158a <CheckAndTransmitLoadChange+0x3e>
        if (loadActive) {
 800155c:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <CheckAndTransmitLoadChange+0x44>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d007      	beq.n	8001574 <CheckAndTransmitLoadChange+0x28>
            HAL_UART_Transmit(&huart1, Load_Active, sizeof(Load_Active), HAL_MAX_DELAY);  // Send "load active" message
 8001564:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001568:	220b      	movs	r2, #11
 800156a:	490b      	ldr	r1, [pc, #44]	@ (8001598 <CheckAndTransmitLoadChange+0x4c>)
 800156c:	480b      	ldr	r0, [pc, #44]	@ (800159c <CheckAndTransmitLoadChange+0x50>)
 800156e:	f003 fe97 	bl	80052a0 <HAL_UART_Transmit>
 8001572:	e006      	b.n	8001582 <CheckAndTransmitLoadChange+0x36>
        } else {
            HAL_UART_Transmit(&huart1, Load_Inactive, sizeof(Load_Inactive), HAL_MAX_DELAY);  // Send "load inactive" message
 8001574:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001578:	220b      	movs	r2, #11
 800157a:	4909      	ldr	r1, [pc, #36]	@ (80015a0 <CheckAndTransmitLoadChange+0x54>)
 800157c:	4807      	ldr	r0, [pc, #28]	@ (800159c <CheckAndTransmitLoadChange+0x50>)
 800157e:	f003 fe8f 	bl	80052a0 <HAL_UART_Transmit>
        }
       // Update the previous state
        previousLoadActive = loadActive;
 8001582:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <CheckAndTransmitLoadChange+0x44>)
 8001584:	781a      	ldrb	r2, [r3, #0]
 8001586:	4b03      	ldr	r3, [pc, #12]	@ (8001594 <CheckAndTransmitLoadChange+0x48>)
 8001588:	701a      	strb	r2, [r3, #0]
    }
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000280 	.word	0x20000280
 8001594:	20000281 	.word	0x20000281
 8001598:	20000000 	.word	0x20000000
 800159c:	200006f0 	.word	0x200006f0
 80015a0:	2000000c 	.word	0x2000000c

080015a4 <handleSwitchControl>:
/*
 * @func processes information for load control
 * @param Data section of Rx transmission
 */
void handleSwitchControl(uint8_t Data)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
    if (Data == 0x0F) {
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d106      	bne.n	80015c2 <handleSwitchControl+0x1e>
        if (!loadActive) {
 80015b4:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <handleSwitchControl+0x38>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10b      	bne.n	80015d4 <handleSwitchControl+0x30>
            Enable_Load();
 80015bc:	f000 f856 	bl	800166c <Enable_Load>
    } else if (Data == 0x0A) {
        if (loadActive) {
            Disable_Load();
        }
    }
}
 80015c0:	e008      	b.n	80015d4 <handleSwitchControl+0x30>
    } else if (Data == 0x0A) {
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b0a      	cmp	r3, #10
 80015c6:	d105      	bne.n	80015d4 <handleSwitchControl+0x30>
        if (loadActive) {
 80015c8:	4b04      	ldr	r3, [pc, #16]	@ (80015dc <handleSwitchControl+0x38>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <handleSwitchControl+0x30>
            Disable_Load();
 80015d0:	f000 f864 	bl	800169c <Disable_Load>
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000280 	.word	0x20000280

080015e0 <handleCurrentControl>:

// Function to handle Control == 0xFF and Data == 0x01
void handleCurrentControl()
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	@ 0x28
 80015e4:	af00      	add	r7, sp, #0
    // Take sample of 500 current readings
    for (int i = 0; i < SAMPLE_COUNT; i++) {
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80015ea:	e00f      	b.n	800160c <handleCurrentControl+0x2c>
        samples[i] = Read_ADC();
 80015ec:	f7ff fef8 	bl	80013e0 <Read_ADC>
 80015f0:	eef0 7a40 	vmov.f32	s15, s0
 80015f4:	4a19      	ldr	r2, [pc, #100]	@ (800165c <handleCurrentControl+0x7c>)
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	edc3 7a00 	vstr	s15, [r3]
        HAL_Delay(1);
 8001600:	2001      	movs	r0, #1
 8001602:	f000 fc65 	bl	8001ed0 <HAL_Delay>
    for (int i = 0; i < SAMPLE_COUNT; i++) {
 8001606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001608:	3301      	adds	r3, #1
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
 800160c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160e:	2bf9      	cmp	r3, #249	@ 0xf9
 8001610:	ddec      	ble.n	80015ec <handleCurrentControl+0xc>
    }
    currentRMS = Calculate_RMS(samples, SAMPLE_COUNT); // Calculate the RMS value
 8001612:	21fa      	movs	r1, #250	@ 0xfa
 8001614:	4811      	ldr	r0, [pc, #68]	@ (800165c <handleCurrentControl+0x7c>)
 8001616:	f7ff ff51 	bl	80014bc <Calculate_RMS>
 800161a:	eef0 7a40 	vmov.f32	s15, s0
 800161e:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <handleCurrentControl+0x80>)
 8001620:	edc3 7a00 	vstr	s15, [r3]

    char buffer[32];
    sprintf(buffer, "%.2f", currentRMS); // Format float to a string
 8001624:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <handleCurrentControl+0x80>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff8d 	bl	8000548 <__aeabi_f2d>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	1d38      	adds	r0, r7, #4
 8001634:	490b      	ldr	r1, [pc, #44]	@ (8001664 <handleCurrentControl+0x84>)
 8001636:	f005 ffaf 	bl	8007598 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe fe17 	bl	8000270 <strlen>
 8001642:	4603      	mov	r3, r0
 8001644:	b29a      	uxth	r2, r3
 8001646:	1d39      	adds	r1, r7, #4
 8001648:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800164c:	4806      	ldr	r0, [pc, #24]	@ (8001668 <handleCurrentControl+0x88>)
 800164e:	f003 fe27 	bl	80052a0 <HAL_UART_Transmit>
}
 8001652:	bf00      	nop
 8001654:	3728      	adds	r7, #40	@ 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200002ac 	.word	0x200002ac
 8001660:	200002a0 	.word	0x200002a0
 8001664:	0800b1e8 	.word	0x0800b1e8
 8001668:	200006f0 	.word	0x200006f0

0800166c <Enable_Load>:
/*
 * Enable Load when Load is disabled
 * Turn on Onboard LED
 */
void Enable_Load(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	loadActive = 1;
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <Enable_Load+0x28>)
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET); // turn on LEDs
 8001676:	2201      	movs	r2, #1
 8001678:	2102      	movs	r1, #2
 800167a:	4807      	ldr	r0, [pc, #28]	@ (8001698 <Enable_Load+0x2c>)
 800167c:	f001 ffb8 	bl	80035f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, VBase_Pin, SET); //engage relay
 8001680:	2201      	movs	r2, #1
 8001682:	2108      	movs	r1, #8
 8001684:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001688:	f001 ffb2 	bl	80035f0 <HAL_GPIO_WritePin>
	CheckAndTransmitLoadChange();
 800168c:	f7ff ff5e 	bl	800154c <CheckAndTransmitLoadChange>
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000280 	.word	0x20000280
 8001698:	48000400 	.word	0x48000400

0800169c <Disable_Load>:
/*
 * Disable Load when Load is active
 * Turn off Onboard LED
 */
void Disable_Load(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	loadActive = 0;
 80016a0:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <Disable_Load+0x28>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET); // turn off LEDs
 80016a6:	2200      	movs	r2, #0
 80016a8:	2102      	movs	r1, #2
 80016aa:	4807      	ldr	r0, [pc, #28]	@ (80016c8 <Disable_Load+0x2c>)
 80016ac:	f001 ffa0 	bl	80035f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, VBase_Pin, RESET); // disengage relay
 80016b0:	2200      	movs	r2, #0
 80016b2:	2108      	movs	r1, #8
 80016b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016b8:	f001 ff9a 	bl	80035f0 <HAL_GPIO_WritePin>
	CheckAndTransmitLoadChange();
 80016bc:	f7ff ff46 	bl	800154c <CheckAndTransmitLoadChange>
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000280 	.word	0x20000280
 80016c8:	48000400 	.word	0x48000400

080016cc <HAL_GPIO_EXTI_Callback>:

/* Check if the power on button is pushed
 * if pushed when the load is active, it turns off the load and vice-versa
*/
 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	80fb      	strh	r3, [r7, #6]

	 if(GPIO_Pin == Switch_Pin)
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d114      	bne.n	8001706 <HAL_GPIO_EXTI_Callback+0x3a>
	     {
	         /* Get the current time (in milliseconds) */
	         uint32_t currentTime = HAL_GetTick(); // HAL_GetTick() returns the system time in ms
 80016dc:	f000 fbec 	bl	8001eb8 <HAL_GetTick>
 80016e0:	60f8      	str	r0, [r7, #12]
	         /* Check if enough time has passed since the last press to consider this a valid press */
	         if((currentTime - lastDebounceTime) >= DEBOUNCE_DELAY_MS)
 80016e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <HAL_GPIO_EXTI_Callback+0x44>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b31      	cmp	r3, #49	@ 0x31
 80016ec:	d90b      	bls.n	8001706 <HAL_GPIO_EXTI_Callback+0x3a>
	         {
	             /* Toggle the load state */
	             (loadActive) ? Disable_Load(): Enable_Load();
 80016ee:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <HAL_GPIO_EXTI_Callback+0x48>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <HAL_GPIO_EXTI_Callback+0x30>
 80016f6:	f7ff ffd1 	bl	800169c <Disable_Load>
 80016fa:	e001      	b.n	8001700 <HAL_GPIO_EXTI_Callback+0x34>
 80016fc:	f7ff ffb6 	bl	800166c <Enable_Load>
	             /* Update the last debounce time */
	             lastDebounceTime = currentTime;
 8001700:	4a03      	ldr	r2, [pc, #12]	@ (8001710 <HAL_GPIO_EXTI_Callback+0x44>)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6013      	str	r3, [r2, #0]
	         }
	     }
}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200002a8 	.word	0x200002a8
 8001714:	20000280 	.word	0x20000280

08001718 <HAL_UART_RxCpltCallback>:

 /*
  * Receive interrupt callback function
  */

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
     static uint8_t index = 0;

     if (huart->Instance == USART1) {
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a18      	ldr	r2, [pc, #96]	@ (8001788 <HAL_UART_RxCpltCallback+0x70>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d12a      	bne.n	8001780 <HAL_UART_RxCpltCallback+0x68>
         if (index < Data_BUFFER_SIZE - 1) {
 800172a:	4b18      	ldr	r3, [pc, #96]	@ (800178c <HAL_UART_RxCpltCallback+0x74>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b0a      	cmp	r3, #10
 8001730:	d81b      	bhi.n	800176a <HAL_UART_RxCpltCallback+0x52>
             rx_buffer[index++] = received_byte;
 8001732:	4b16      	ldr	r3, [pc, #88]	@ (800178c <HAL_UART_RxCpltCallback+0x74>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	b2d1      	uxtb	r1, r2
 800173a:	4a14      	ldr	r2, [pc, #80]	@ (800178c <HAL_UART_RxCpltCallback+0x74>)
 800173c:	7011      	strb	r1, [r2, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <HAL_UART_RxCpltCallback+0x78>)
 8001742:	7819      	ldrb	r1, [r3, #0]
 8001744:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <HAL_UART_RxCpltCallback+0x7c>)
 8001746:	5499      	strb	r1, [r3, r2]

             if (received_byte == '\r') {  // End of response
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <HAL_UART_RxCpltCallback+0x78>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b0d      	cmp	r3, #13
 800174e:	d112      	bne.n	8001776 <HAL_UART_RxCpltCallback+0x5e>
                 data_received_flag = 1;
 8001750:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <HAL_UART_RxCpltCallback+0x80>)
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
                 rx_buffer[index] = '\0';  // Null-terminate
 8001756:	4b0d      	ldr	r3, [pc, #52]	@ (800178c <HAL_UART_RxCpltCallback+0x74>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <HAL_UART_RxCpltCallback+0x7c>)
 800175e:	2100      	movs	r1, #0
 8001760:	5499      	strb	r1, [r3, r2]
                 index = 0;  // Reset for next reception
 8001762:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <HAL_UART_RxCpltCallback+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
 8001768:	e005      	b.n	8001776 <HAL_UART_RxCpltCallback+0x5e>
             }
         } else {
             overflow_flag = 1;  // Signal buffer overflow
 800176a:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <HAL_UART_RxCpltCallback+0x84>)
 800176c:	2201      	movs	r2, #1
 800176e:	701a      	strb	r2, [r3, #0]
             index = 0;  // Optionally reset the buffer
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <HAL_UART_RxCpltCallback+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
         }

         HAL_UART_Receive_IT(&huart1, &received_byte, 1);  // Continue receiving
 8001776:	2201      	movs	r2, #1
 8001778:	4905      	ldr	r1, [pc, #20]	@ (8001790 <HAL_UART_RxCpltCallback+0x78>)
 800177a:	4809      	ldr	r0, [pc, #36]	@ (80017a0 <HAL_UART_RxCpltCallback+0x88>)
 800177c:	f003 fe1a 	bl	80053b4 <HAL_UART_Receive_IT>
     }
 }
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40013800 	.word	0x40013800
 800178c:	2000069c 	.word	0x2000069c
 8001790:	20000290 	.word	0x20000290
 8001794:	20000284 	.word	0x20000284
 8001798:	20000283 	.word	0x20000283
 800179c:	20000282 	.word	0x20000282
 80017a0:	200006f0 	.word	0x200006f0

080017a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a8:	b672      	cpsid	i
}
 80017aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <Error_Handler+0x8>

080017b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b6:	4b0f      	ldr	r3, [pc, #60]	@ (80017f4 <HAL_MspInit+0x44>)
 80017b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ba:	4a0e      	ldr	r2, [pc, #56]	@ (80017f4 <HAL_MspInit+0x44>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80017c2:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <HAL_MspInit+0x44>)
 80017c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	4b09      	ldr	r3, [pc, #36]	@ (80017f4 <HAL_MspInit+0x44>)
 80017d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d2:	4a08      	ldr	r2, [pc, #32]	@ (80017f4 <HAL_MspInit+0x44>)
 80017d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_MspInit+0x44>)
 80017dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000

080017f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <NMI_Handler+0x4>

08001800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <HardFault_Handler+0x4>

08001808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <MemManage_Handler+0x4>

08001810 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <BusFault_Handler+0x4>

08001818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <UsageFault_Handler+0x4>

08001820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800184e:	f000 fb1f 	bl	8001e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}

08001856 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Switch_Pin);
 800185a:	2001      	movs	r0, #1
 800185c:	f001 fefa 	bl	8003654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001868:	4802      	ldr	r0, [pc, #8]	@ (8001874 <TIM2_IRQHandler+0x10>)
 800186a:	f003 f93b 	bl	8004ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200006a4 	.word	0x200006a4

08001878 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800187c:	4802      	ldr	r0, [pc, #8]	@ (8001888 <USART1_IRQHandler+0x10>)
 800187e:	f003 fde5 	bl	800544c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200006f0 	.word	0x200006f0

0800188c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return 1;
 8001890:	2301      	movs	r3, #1
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_kill>:

int _kill(int pid, int sig)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018a6:	f006 fe0d 	bl	80084c4 <__errno>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2216      	movs	r2, #22
 80018ae:	601a      	str	r2, [r3, #0]
  return -1;
 80018b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_exit>:

void _exit (int status)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ffe7 	bl	800189c <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ce:	bf00      	nop
 80018d0:	e7fd      	b.n	80018ce <_exit+0x12>

080018d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b086      	sub	sp, #24
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	e00a      	b.n	80018fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018e4:	f3af 8000 	nop.w
 80018e8:	4601      	mov	r1, r0
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	1c5a      	adds	r2, r3, #1
 80018ee:	60ba      	str	r2, [r7, #8]
 80018f0:	b2ca      	uxtb	r2, r1
 80018f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	3301      	adds	r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	429a      	cmp	r2, r3
 8001900:	dbf0      	blt.n	80018e4 <_read+0x12>
  }

  return len;
 8001902:	687b      	ldr	r3, [r7, #4]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e009      	b.n	8001932 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	60ba      	str	r2, [r7, #8]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	3301      	adds	r3, #1
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	429a      	cmp	r2, r3
 8001938:	dbf1      	blt.n	800191e <_write+0x12>
  }
  return len;
 800193a:	687b      	ldr	r3, [r7, #4]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <_close>:

int _close(int file)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800194c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800196c:	605a      	str	r2, [r3, #4]
  return 0;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_isatty>:

int _isatty(int file)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001984:	2301      	movs	r3, #1
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001992:	b480      	push	{r7}
 8001994:	b085      	sub	sp, #20
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b4:	4a14      	ldr	r2, [pc, #80]	@ (8001a08 <_sbrk+0x5c>)
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <_sbrk+0x60>)
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c0:	4b13      	ldr	r3, [pc, #76]	@ (8001a10 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c8:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <_sbrk+0x64>)
 80019ca:	4a12      	ldr	r2, [pc, #72]	@ (8001a14 <_sbrk+0x68>)
 80019cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ce:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d207      	bcs.n	80019ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019dc:	f006 fd72 	bl	80084c4 <__errno>
 80019e0:	4603      	mov	r3, r0
 80019e2:	220c      	movs	r2, #12
 80019e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019ea:	e009      	b.n	8001a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ec:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f2:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	4a05      	ldr	r2, [pc, #20]	@ (8001a10 <_sbrk+0x64>)
 80019fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20010000 	.word	0x20010000
 8001a0c:	00000400 	.word	0x00000400
 8001a10:	200006a0 	.word	0x200006a0
 8001a14:	200008c8 	.word	0x200008c8

08001a18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a1c:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <SystemInit+0x20>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a22:	4a05      	ldr	r2, [pc, #20]	@ (8001a38 <SystemInit+0x20>)
 8001a24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a42:	f107 0310 	add.w	r3, r7, #16
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad4 <MX_TIM2_Init+0x98>)
 8001a5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8001a62:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad4 <MX_TIM2_Init+0x98>)
 8001a64:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad4 <MX_TIM2_Init+0x98>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7199;
 8001a70:	4b18      	ldr	r3, [pc, #96]	@ (8001ad4 <MX_TIM2_Init+0x98>)
 8001a72:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001a76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a78:	4b16      	ldr	r3, [pc, #88]	@ (8001ad4 <MX_TIM2_Init+0x98>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ad4 <MX_TIM2_Init+0x98>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a84:	4813      	ldr	r0, [pc, #76]	@ (8001ad4 <MX_TIM2_Init+0x98>)
 8001a86:	f002 ff81 	bl	800498c <HAL_TIM_Base_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001a90:	f7ff fe88 	bl	80017a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	480c      	ldr	r0, [pc, #48]	@ (8001ad4 <MX_TIM2_Init+0x98>)
 8001aa2:	f003 f926 	bl	8004cf2 <HAL_TIM_ConfigClockSource>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001aac:	f7ff fe7a 	bl	80017a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	4619      	mov	r1, r3
 8001abc:	4805      	ldr	r0, [pc, #20]	@ (8001ad4 <MX_TIM2_Init+0x98>)
 8001abe:	f003 fb1d 	bl	80050fc <HAL_TIMEx_MasterConfigSynchronization>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001ac8:	f7ff fe6c 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001acc:	bf00      	nop
 8001ace:	3720      	adds	r7, #32
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	200006a4 	.word	0x200006a4

08001ad8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ae8:	d113      	bne.n	8001b12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aea:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <HAL_TIM_Base_MspInit+0x44>)
 8001aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aee:	4a0b      	ldr	r2, [pc, #44]	@ (8001b1c <HAL_TIM_Base_MspInit+0x44>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001af6:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <HAL_TIM_Base_MspInit+0x44>)
 8001af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	201c      	movs	r0, #28
 8001b08:	f001 fb53 	bl	80031b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b0c:	201c      	movs	r0, #28
 8001b0e:	f001 fb6c 	bl	80031ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000

08001b20 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b24:	4b14      	ldr	r3, [pc, #80]	@ (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b26:	4a15      	ldr	r2, [pc, #84]	@ (8001b7c <MX_USART1_UART_Init+0x5c>)
 8001b28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b2a:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b2c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001b30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b32:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	@ (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b46:	220c      	movs	r2, #12
 8001b48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b50:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b56:	4b08      	ldr	r3, [pc, #32]	@ (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b62:	4805      	ldr	r0, [pc, #20]	@ (8001b78 <MX_USART1_UART_Init+0x58>)
 8001b64:	f003 fb4e 	bl	8005204 <HAL_UART_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b6e:	f7ff fe19 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200006f0 	.word	0x200006f0
 8001b7c:	40013800 	.word	0x40013800

08001b80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b09e      	sub	sp, #120	@ 0x78
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	2254      	movs	r2, #84	@ 0x54
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f006 fc83 	bl	80084ac <memset>
  if(uartHandle->Instance==USART1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a23      	ldr	r2, [pc, #140]	@ (8001c38 <HAL_UART_MspInit+0xb8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d13f      	bne.n	8001c30 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f002 fbfd 	bl	80043bc <HAL_RCCEx_PeriphCLKConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bc8:	f7ff fdec 	bl	80017a4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c3c <HAL_UART_MspInit+0xbc>)
 8001bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c3c <HAL_UART_MspInit+0xbc>)
 8001bd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bd6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bd8:	4b18      	ldr	r3, [pc, #96]	@ (8001c3c <HAL_UART_MspInit+0xbc>)
 8001bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be4:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <HAL_UART_MspInit+0xbc>)
 8001be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be8:	4a14      	ldr	r2, [pc, #80]	@ (8001c3c <HAL_UART_MspInit+0xbc>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bf0:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <HAL_UART_MspInit+0xbc>)
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bfc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c00:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c0e:	2307      	movs	r3, #7
 8001c10:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c12:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c16:	4619      	mov	r1, r3
 8001c18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c1c:	f001 fb7e 	bl	800331c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2100      	movs	r1, #0
 8001c24:	2025      	movs	r0, #37	@ 0x25
 8001c26:	f001 fac4 	bl	80031b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c2a:	2025      	movs	r0, #37	@ 0x25
 8001c2c:	f001 fadd 	bl	80031ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c30:	bf00      	nop
 8001c32:	3778      	adds	r7, #120	@ 0x78
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40013800 	.word	0x40013800
 8001c3c:	40021000 	.word	0x40021000

08001c40 <requestParameter>:
 * Request XBee Serial Number Low (ATSL)
 * Exit AT command mode
 */


int requestParameter(const char *at_command, uint8_t *output_buffer, size_t length) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
    // Clear buffer and reset flag
    memset(rx_buffer, 0, Data_BUFFER_SIZE);
 8001c4c:	220c      	movs	r2, #12
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4849      	ldr	r0, [pc, #292]	@ (8001d78 <requestParameter+0x138>)
 8001c52:	f006 fc2b 	bl	80084ac <memset>
    data_received_flag = 0;
 8001c56:	4b49      	ldr	r3, [pc, #292]	@ (8001d7c <requestParameter+0x13c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]

    char command_mode[] = "+++";
 8001c5c:	4b48      	ldr	r3, [pc, #288]	@ (8001d80 <requestParameter+0x140>)
 8001c5e:	61fb      	str	r3, [r7, #28]
    char exit_command[] = "ATCN\r";
 8001c60:	4a48      	ldr	r2, [pc, #288]	@ (8001d84 <requestParameter+0x144>)
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c6a:	6018      	str	r0, [r3, #0]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	8019      	strh	r1, [r3, #0]

    // Enter AT command mode
    HAL_UART_Transmit(&huart1, (uint8_t *)command_mode, strlen(command_mode), HAL_MAX_DELAY);
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fafb 	bl	8000270 <strlen>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	f107 011c 	add.w	r1, r7, #28
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c86:	4840      	ldr	r0, [pc, #256]	@ (8001d88 <requestParameter+0x148>)
 8001c88:	f003 fb0a 	bl	80052a0 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8001c8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c90:	f000 f91e 	bl	8001ed0 <HAL_Delay>
    HAL_UART_Receive_IT(&huart1, &received_byte, 1);
 8001c94:	2201      	movs	r2, #1
 8001c96:	493d      	ldr	r1, [pc, #244]	@ (8001d8c <requestParameter+0x14c>)
 8001c98:	483b      	ldr	r0, [pc, #236]	@ (8001d88 <requestParameter+0x148>)
 8001c9a:	f003 fb8b 	bl	80053b4 <HAL_UART_Receive_IT>

    while (!data_received_flag);
 8001c9e:	bf00      	nop
 8001ca0:	4b36      	ldr	r3, [pc, #216]	@ (8001d7c <requestParameter+0x13c>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0fa      	beq.n	8001ca0 <requestParameter+0x60>
    if (strncmp((char *)rx_buffer, "OK", 2) != 0) return XBEE_ERROR_RESPONSE;
 8001caa:	2202      	movs	r2, #2
 8001cac:	4938      	ldr	r1, [pc, #224]	@ (8001d90 <requestParameter+0x150>)
 8001cae:	4832      	ldr	r0, [pc, #200]	@ (8001d78 <requestParameter+0x138>)
 8001cb0:	f006 fbda 	bl	8008468 <strncmp>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <requestParameter+0x7e>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e057      	b.n	8001d6e <requestParameter+0x12e>

    // Send the parameter request command
    data_received_flag = 0;
 8001cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8001d7c <requestParameter+0x13c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
    memset(rx_buffer, 0, Data_BUFFER_SIZE);
 8001cc4:	220c      	movs	r2, #12
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	482b      	ldr	r0, [pc, #172]	@ (8001d78 <requestParameter+0x138>)
 8001cca:	f006 fbef 	bl	80084ac <memset>
    HAL_UART_Transmit(&huart1, (uint8_t *)at_command, strlen(at_command), HAL_MAX_DELAY);
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f7fe face 	bl	8000270 <strlen>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cdc:	68f9      	ldr	r1, [r7, #12]
 8001cde:	482a      	ldr	r0, [pc, #168]	@ (8001d88 <requestParameter+0x148>)
 8001ce0:	f003 fade 	bl	80052a0 <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart1, &received_byte, 1);
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4929      	ldr	r1, [pc, #164]	@ (8001d8c <requestParameter+0x14c>)
 8001ce8:	4827      	ldr	r0, [pc, #156]	@ (8001d88 <requestParameter+0x148>)
 8001cea:	f003 fb63 	bl	80053b4 <HAL_UART_Receive_IT>

    while (!data_received_flag);
 8001cee:	bf00      	nop
 8001cf0:	4b22      	ldr	r3, [pc, #136]	@ (8001d7c <requestParameter+0x13c>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0fa      	beq.n	8001cf0 <requestParameter+0xb0>
    if (strlen((char *)rx_buffer) < length) return XBEE_ERROR_RESPONSE;
 8001cfa:	481f      	ldr	r0, [pc, #124]	@ (8001d78 <requestParameter+0x138>)
 8001cfc:	f7fe fab8 	bl	8000270 <strlen>
 8001d00:	4602      	mov	r2, r0
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d901      	bls.n	8001d0c <requestParameter+0xcc>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e030      	b.n	8001d6e <requestParameter+0x12e>
    memcpy(output_buffer, rx_buffer, length);
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	491a      	ldr	r1, [pc, #104]	@ (8001d78 <requestParameter+0x138>)
 8001d10:	68b8      	ldr	r0, [r7, #8]
 8001d12:	f006 fc04 	bl	800851e <memcpy>

    // Exit AT command mode
    data_received_flag = 0;
 8001d16:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <requestParameter+0x13c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
    memset(rx_buffer, 0, Data_BUFFER_SIZE);
 8001d1c:	220c      	movs	r2, #12
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4815      	ldr	r0, [pc, #84]	@ (8001d78 <requestParameter+0x138>)
 8001d22:	f006 fbc3 	bl	80084ac <memset>
    HAL_UART_Transmit(&huart1, (uint8_t *)exit_command, strlen(exit_command), HAL_MAX_DELAY);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe faa0 	bl	8000270 <strlen>
 8001d30:	4603      	mov	r3, r0
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	f107 0114 	add.w	r1, r7, #20
 8001d38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d3c:	4812      	ldr	r0, [pc, #72]	@ (8001d88 <requestParameter+0x148>)
 8001d3e:	f003 faaf 	bl	80052a0 <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart1, &received_byte, 1);
 8001d42:	2201      	movs	r2, #1
 8001d44:	4911      	ldr	r1, [pc, #68]	@ (8001d8c <requestParameter+0x14c>)
 8001d46:	4810      	ldr	r0, [pc, #64]	@ (8001d88 <requestParameter+0x148>)
 8001d48:	f003 fb34 	bl	80053b4 <HAL_UART_Receive_IT>

    while (!data_received_flag);
 8001d4c:	bf00      	nop
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <requestParameter+0x13c>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0fa      	beq.n	8001d4e <requestParameter+0x10e>
    return strncmp((char *)rx_buffer, "OK", 2) == 0 ? XBEE_SUCCESS : XBEE_ERROR_RESPONSE;
 8001d58:	2202      	movs	r2, #2
 8001d5a:	490d      	ldr	r1, [pc, #52]	@ (8001d90 <requestParameter+0x150>)
 8001d5c:	4806      	ldr	r0, [pc, #24]	@ (8001d78 <requestParameter+0x138>)
 8001d5e:	f006 fb83 	bl	8008468 <strncmp>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	bf14      	ite	ne
 8001d68:	2301      	movne	r3, #1
 8001d6a:	2300      	moveq	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3720      	adds	r7, #32
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000284 	.word	0x20000284
 8001d7c:	20000283 	.word	0x20000283
 8001d80:	002b2b2b 	.word	0x002b2b2b
 8001d84:	0800b1f4 	.word	0x0800b1f4
 8001d88:	200006f0 	.word	0x200006f0
 8001d8c:	20000290 	.word	0x20000290
 8001d90:	0800b1f0 	.word	0x0800b1f0

08001d94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d98:	f7ff fe3e 	bl	8001a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d9c:	480c      	ldr	r0, [pc, #48]	@ (8001dd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d9e:	490d      	ldr	r1, [pc, #52]	@ (8001dd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001da0:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd8 <LoopForever+0xe>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da4:	e002      	b.n	8001dac <LoopCopyDataInit>

08001da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001daa:	3304      	adds	r3, #4

08001dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db0:	d3f9      	bcc.n	8001da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ddc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001db4:	4c0a      	ldr	r4, [pc, #40]	@ (8001de0 <LoopForever+0x16>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db8:	e001      	b.n	8001dbe <LoopFillZerobss>

08001dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dbc:	3204      	adds	r2, #4

08001dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc0:	d3fb      	bcc.n	8001dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dc2:	f006 fb85 	bl	80084d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dc6:	f7ff fa3d 	bl	8001244 <main>

08001dca <LoopForever>:

LoopForever:
    b LoopForever
 8001dca:	e7fe      	b.n	8001dca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dcc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd4:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8001dd8:	0800b724 	.word	0x0800b724
  ldr r2, =_sbss
 8001ddc:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001de0:	200008c8 	.word	0x200008c8

08001de4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001de4:	e7fe      	b.n	8001de4 <ADC1_IRQHandler>

08001de6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df0:	2003      	movs	r0, #3
 8001df2:	f001 f9d3 	bl	800319c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001df6:	200f      	movs	r0, #15
 8001df8:	f000 f80e 	bl	8001e18 <HAL_InitTick>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	71fb      	strb	r3, [r7, #7]
 8001e06:	e001      	b.n	8001e0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e08:	f7ff fcd2 	bl	80017b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e24:	4b17      	ldr	r3, [pc, #92]	@ (8001e84 <HAL_InitTick+0x6c>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d023      	beq.n	8001e74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e2c:	4b16      	ldr	r3, [pc, #88]	@ (8001e88 <HAL_InitTick+0x70>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <HAL_InitTick+0x6c>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	4619      	mov	r1, r3
 8001e36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	f001 f9df 	bl	8003206 <HAL_SYSTICK_Config>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10f      	bne.n	8001e6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b0f      	cmp	r3, #15
 8001e52:	d809      	bhi.n	8001e68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e54:	2200      	movs	r2, #0
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e5c:	f001 f9a9 	bl	80031b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e60:	4a0a      	ldr	r2, [pc, #40]	@ (8001e8c <HAL_InitTick+0x74>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	e007      	b.n	8001e78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
 8001e6c:	e004      	b.n	8001e78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	73fb      	strb	r3, [r7, #15]
 8001e72:	e001      	b.n	8001e78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000020 	.word	0x20000020
 8001e88:	20000018 	.word	0x20000018
 8001e8c:	2000001c 	.word	0x2000001c

08001e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_IncTick+0x20>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <HAL_IncTick+0x24>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a04      	ldr	r2, [pc, #16]	@ (8001eb4 <HAL_IncTick+0x24>)
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000020 	.word	0x20000020
 8001eb4:	20000778 	.word	0x20000778

08001eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return uwTick;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	@ (8001ecc <HAL_GetTick+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000778 	.word	0x20000778

08001ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff ffee 	bl	8001eb8 <HAL_GetTick>
 8001edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ee8:	d005      	beq.n	8001ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001eea:	4b0a      	ldr	r3, [pc, #40]	@ (8001f14 <HAL_Delay+0x44>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ef6:	bf00      	nop
 8001ef8:	f7ff ffde 	bl	8001eb8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d8f7      	bhi.n	8001ef8 <HAL_Delay+0x28>
  {
  }
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000020 	.word	0x20000020

08001f18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	609a      	str	r2, [r3, #8]
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	609a      	str	r2, [r3, #8]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b087      	sub	sp, #28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	3360      	adds	r3, #96	@ 0x60
 8001f92:	461a      	mov	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b08      	ldr	r3, [pc, #32]	@ (8001fc4 <LL_ADC_SetOffset+0x44>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001fb8:	bf00      	nop
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	03fff000 	.word	0x03fff000

08001fc8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3360      	adds	r3, #96	@ 0x60
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	3360      	adds	r3, #96	@ 0x60
 8002004:	461a      	mov	r2, r3
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	431a      	orrs	r2, r3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800201e:	bf00      	nop
 8002020:	371c      	adds	r7, #28
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3330      	adds	r3, #48	@ 0x30
 8002060:	461a      	mov	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	f003 030c 	and.w	r3, r3, #12
 800206c:	4413      	add	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	211f      	movs	r1, #31
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	401a      	ands	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	0e9b      	lsrs	r3, r3, #26
 8002088:	f003 011f 	and.w	r1, r3, #31
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f003 031f 	and.w	r3, r3, #31
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	431a      	orrs	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800209c:	bf00      	nop
 800209e:	371c      	adds	r7, #28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b087      	sub	sp, #28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	3314      	adds	r3, #20
 80020b8:	461a      	mov	r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	0e5b      	lsrs	r3, r3, #25
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	4413      	add	r3, r2
 80020c6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	0d1b      	lsrs	r3, r3, #20
 80020d0:	f003 031f 	and.w	r3, r3, #31
 80020d4:	2107      	movs	r1, #7
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	401a      	ands	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	0d1b      	lsrs	r3, r3, #20
 80020e2:	f003 031f 	and.w	r3, r3, #31
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	431a      	orrs	r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020f2:	bf00      	nop
 80020f4:	371c      	adds	r7, #28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002118:	43db      	mvns	r3, r3
 800211a:	401a      	ands	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f003 0318 	and.w	r3, r3, #24
 8002122:	4908      	ldr	r1, [pc, #32]	@ (8002144 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002124:	40d9      	lsrs	r1, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	400b      	ands	r3, r1
 800212a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212e:	431a      	orrs	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	0007ffff 	.word	0x0007ffff

08002148 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002158:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6093      	str	r3, [r2, #8]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800217c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002180:	d101      	bne.n	8002186 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80021a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021a8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021d0:	d101      	bne.n	80021d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021f8:	f043 0201 	orr.w	r2, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <LL_ADC_IsEnabled+0x18>
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <LL_ADC_IsEnabled+0x1a>
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002242:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002246:	f043 0204 	orr.w	r2, r3, #4
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b04      	cmp	r3, #4
 800226c:	d101      	bne.n	8002272 <LL_ADC_REG_IsConversionOngoing+0x18>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b08      	cmp	r3, #8
 8002292:	d101      	bne.n	8002298 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e126      	b.n	8002510 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d109      	bne.n	80022e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7fe feeb 	bl	80010ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff3f 	bl	800216c <LL_ADC_IsDeepPowerDownEnabled>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d004      	beq.n	80022fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff25 	bl	8002148 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff ff5a 	bl	80021bc <LL_ADC_IsInternalRegulatorEnabled>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d115      	bne.n	800233a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff ff3e 	bl	8002194 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002318:	4b7f      	ldr	r3, [pc, #508]	@ (8002518 <HAL_ADC_Init+0x270>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	099b      	lsrs	r3, r3, #6
 800231e:	4a7f      	ldr	r2, [pc, #508]	@ (800251c <HAL_ADC_Init+0x274>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	099b      	lsrs	r3, r3, #6
 8002326:	3301      	adds	r3, #1
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800232c:	e002      	b.n	8002334 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	3b01      	subs	r3, #1
 8002332:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f9      	bne.n	800232e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff ff3c 	bl	80021bc <LL_ADC_IsInternalRegulatorEnabled>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10d      	bne.n	8002366 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234e:	f043 0210 	orr.w	r2, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235a:	f043 0201 	orr.w	r2, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff75 	bl	800225a <LL_ADC_REG_IsConversionOngoing>
 8002370:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	f040 80bf 	bne.w	80024fe <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f040 80bb 	bne.w	80024fe <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002390:	f043 0202 	orr.w	r2, r3, #2
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff35 	bl	800220c <LL_ADC_IsEnabled>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10b      	bne.n	80023c0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023a8:	485d      	ldr	r0, [pc, #372]	@ (8002520 <HAL_ADC_Init+0x278>)
 80023aa:	f7ff ff2f 	bl	800220c <LL_ADC_IsEnabled>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d105      	bne.n	80023c0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4619      	mov	r1, r3
 80023ba:	485a      	ldr	r0, [pc, #360]	@ (8002524 <HAL_ADC_Init+0x27c>)
 80023bc:	f7ff fdac 	bl	8001f18 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	7e5b      	ldrb	r3, [r3, #25]
 80023c4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023ca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80023d0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80023d6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023de:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d106      	bne.n	80023fc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	3b01      	subs	r3, #1
 80023f4:	045b      	lsls	r3, r3, #17
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002400:	2b00      	cmp	r3, #0
 8002402:	d009      	beq.n	8002418 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002408:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002410:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	4b42      	ldr	r3, [pc, #264]	@ (8002528 <HAL_ADC_Init+0x280>)
 8002420:	4013      	ands	r3, r2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	69b9      	ldr	r1, [r7, #24]
 8002428:	430b      	orrs	r3, r1
 800242a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff25 	bl	8002280 <LL_ADC_INJ_IsConversionOngoing>
 8002436:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d13d      	bne.n	80024ba <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d13a      	bne.n	80024ba <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002448:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002450:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002460:	f023 0302 	bic.w	r3, r3, #2
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	69b9      	ldr	r1, [r7, #24]
 800246a:	430b      	orrs	r3, r1
 800246c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002474:	2b01      	cmp	r3, #1
 8002476:	d118      	bne.n	80024aa <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002482:	f023 0304 	bic.w	r3, r3, #4
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800248e:	4311      	orrs	r1, r2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002494:	4311      	orrs	r1, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800249a:	430a      	orrs	r2, r1
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	611a      	str	r2, [r3, #16]
 80024a8:	e007      	b.n	80024ba <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0201 	bic.w	r2, r2, #1
 80024b8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d10c      	bne.n	80024dc <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c8:	f023 010f 	bic.w	r1, r3, #15
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	1e5a      	subs	r2, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80024da:	e007      	b.n	80024ec <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 020f 	bic.w	r2, r2, #15
 80024ea:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f0:	f023 0303 	bic.w	r3, r3, #3
 80024f4:	f043 0201 	orr.w	r2, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	655a      	str	r2, [r3, #84]	@ 0x54
 80024fc:	e007      	b.n	800250e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002502:	f043 0210 	orr.w	r2, r3, #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800250e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3720      	adds	r7, #32
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000018 	.word	0x20000018
 800251c:	053e2d63 	.word	0x053e2d63
 8002520:	50040000 	.word	0x50040000
 8002524:	50040300 	.word	0x50040300
 8002528:	fff0c007 	.word	0xfff0c007

0800252c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fe8e 	bl	800225a <LL_ADC_REG_IsConversionOngoing>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d14f      	bne.n	80025e4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_ADC_Start+0x26>
 800254e:	2302      	movs	r3, #2
 8002550:	e04b      	b.n	80025ea <HAL_ADC_Start+0xbe>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 fcc8 	bl	8002ef0 <ADC_Enable>
 8002560:	4603      	mov	r3, r0
 8002562:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d137      	bne.n	80025da <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002572:	f023 0301 	bic.w	r3, r3, #1
 8002576:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002582:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800258a:	d106      	bne.n	800259a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002590:	f023 0206 	bic.w	r2, r3, #6
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	659a      	str	r2, [r3, #88]	@ 0x58
 8002598:	e002      	b.n	80025a0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	221c      	movs	r2, #28
 80025a6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d007      	beq.n	80025ce <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025c6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fe2d 	bl	8002232 <LL_ADC_REG_StartConversion>
 80025d8:	e006      	b.n	80025e8 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80025e2:	e001      	b.n	80025e8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025e4:	2302      	movs	r3, #2
 80025e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b086      	sub	sp, #24
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	2b08      	cmp	r3, #8
 8002602:	d102      	bne.n	800260a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002604:	2308      	movs	r3, #8
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	e010      	b.n	800262c <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d007      	beq.n	8002628 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261c:	f043 0220 	orr.w	r2, r3, #32
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e06f      	b.n	8002708 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002628:	2304      	movs	r3, #4
 800262a:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800262c:	f7ff fc44 	bl	8001eb8 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002632:	e021      	b.n	8002678 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800263a:	d01d      	beq.n	8002678 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800263c:	f7ff fc3c 	bl	8001eb8 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d302      	bcc.n	8002652 <HAL_ADC_PollForConversion+0x60>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d112      	bne.n	8002678 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10b      	bne.n	8002678 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002664:	f043 0204 	orr.w	r2, r3, #4
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e047      	b.n	8002708 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0d6      	beq.n	8002634 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fcc7 	bl	800202a <LL_ADC_REG_IsTriggerSourceSWStart>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d01c      	beq.n	80026dc <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	7e5b      	ldrb	r3, [r3, #25]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d118      	bne.n	80026dc <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d111      	bne.n	80026dc <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d105      	bne.n	80026dc <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d4:	f043 0201 	orr.w	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d104      	bne.n	80026f4 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2208      	movs	r2, #8
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	e008      	b.n	8002706 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d103      	bne.n	8002706 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	220c      	movs	r2, #12
 8002704:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b0b6      	sub	sp, #216	@ 0xd8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800273c:	2300      	movs	r3, #0
 800273e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_ADC_ConfigChannel+0x22>
 800274a:	2302      	movs	r3, #2
 800274c:	e3bb      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x79a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fd7d 	bl	800225a <LL_ADC_REG_IsConversionOngoing>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	f040 83a0 	bne.w	8002ea8 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b05      	cmp	r3, #5
 8002776:	d824      	bhi.n	80027c2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	3b02      	subs	r3, #2
 800277e:	2b03      	cmp	r3, #3
 8002780:	d81b      	bhi.n	80027ba <HAL_ADC_ConfigChannel+0x8e>
 8002782:	a201      	add	r2, pc, #4	@ (adr r2, 8002788 <HAL_ADC_ConfigChannel+0x5c>)
 8002784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002788:	08002799 	.word	0x08002799
 800278c:	080027a1 	.word	0x080027a1
 8002790:	080027a9 	.word	0x080027a9
 8002794:	080027b1 	.word	0x080027b1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002798:	230c      	movs	r3, #12
 800279a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800279e:	e010      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80027a0:	2312      	movs	r3, #18
 80027a2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027a6:	e00c      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80027a8:	2318      	movs	r3, #24
 80027aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027ae:	e008      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80027b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027b8:	e003      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80027ba:	2306      	movs	r3, #6
 80027bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027c0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80027d0:	f7ff fc3e 	bl	8002050 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fd3e 	bl	800225a <LL_ADC_REG_IsConversionOngoing>
 80027de:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fd4a 	bl	8002280 <LL_ADC_INJ_IsConversionOngoing>
 80027ec:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f040 81a4 	bne.w	8002b42 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f040 819f 	bne.w	8002b42 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6818      	ldr	r0, [r3, #0]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	6819      	ldr	r1, [r3, #0]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	461a      	mov	r2, r3
 8002812:	f7ff fc49 	bl	80020a8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	08db      	lsrs	r3, r3, #3
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	2b04      	cmp	r3, #4
 8002836:	d00a      	beq.n	800284e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	6919      	ldr	r1, [r3, #16]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002848:	f7ff fb9a 	bl	8001f80 <LL_ADC_SetOffset>
 800284c:	e179      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fbb7 	bl	8001fc8 <LL_ADC_GetOffsetChannel>
 800285a:	4603      	mov	r3, r0
 800285c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10a      	bne.n	800287a <HAL_ADC_ConfigChannel+0x14e>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fbac 	bl	8001fc8 <LL_ADC_GetOffsetChannel>
 8002870:	4603      	mov	r3, r0
 8002872:	0e9b      	lsrs	r3, r3, #26
 8002874:	f003 021f 	and.w	r2, r3, #31
 8002878:	e01e      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x18c>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2100      	movs	r1, #0
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fba1 	bl	8001fc8 <LL_ADC_GetOffsetChannel>
 8002886:	4603      	mov	r3, r0
 8002888:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002898:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800289c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80028a8:	2320      	movs	r3, #32
 80028aa:	e004      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80028ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80028b0:	fab3 f383 	clz	r3, r3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d105      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x1a4>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	0e9b      	lsrs	r3, r3, #26
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	e018      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1d6>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028dc:	fa93 f3a3 	rbit	r3, r3
 80028e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80028e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80028ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80028f4:	2320      	movs	r3, #32
 80028f6:	e004      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80028f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80028fc:	fab3 f383 	clz	r3, r3
 8002900:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002902:	429a      	cmp	r2, r3
 8002904:	d106      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2200      	movs	r2, #0
 800290c:	2100      	movs	r1, #0
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fb70 	bl	8001ff4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2101      	movs	r1, #1
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fb54 	bl	8001fc8 <LL_ADC_GetOffsetChannel>
 8002920:	4603      	mov	r3, r0
 8002922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10a      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x214>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2101      	movs	r1, #1
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fb49 	bl	8001fc8 <LL_ADC_GetOffsetChannel>
 8002936:	4603      	mov	r3, r0
 8002938:	0e9b      	lsrs	r3, r3, #26
 800293a:	f003 021f 	and.w	r2, r3, #31
 800293e:	e01e      	b.n	800297e <HAL_ADC_ConfigChannel+0x252>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2101      	movs	r1, #1
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fb3e 	bl	8001fc8 <LL_ADC_GetOffsetChannel>
 800294c:	4603      	mov	r3, r0
 800294e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800295e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002962:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002966:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800296e:	2320      	movs	r3, #32
 8002970:	e004      	b.n	800297c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002972:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002986:	2b00      	cmp	r3, #0
 8002988:	d105      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x26a>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	0e9b      	lsrs	r3, r3, #26
 8002990:	f003 031f 	and.w	r3, r3, #31
 8002994:	e018      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x29c>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80029aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80029b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80029ba:	2320      	movs	r3, #32
 80029bc:	e004      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80029be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d106      	bne.n	80029da <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2200      	movs	r2, #0
 80029d2:	2101      	movs	r1, #1
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fb0d 	bl	8001ff4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2102      	movs	r1, #2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff faf1 	bl	8001fc8 <LL_ADC_GetOffsetChannel>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x2da>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2102      	movs	r1, #2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fae6 	bl	8001fc8 <LL_ADC_GetOffsetChannel>
 80029fc:	4603      	mov	r3, r0
 80029fe:	0e9b      	lsrs	r3, r3, #26
 8002a00:	f003 021f 	and.w	r2, r3, #31
 8002a04:	e01e      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x318>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2102      	movs	r1, #2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fadb 	bl	8001fc8 <LL_ADC_GetOffsetChannel>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e004      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002a38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x330>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	0e9b      	lsrs	r3, r3, #26
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	e014      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x35a>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002a6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002a70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002a78:	2320      	movs	r3, #32
 8002a7a:	e004      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002a7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a80:	fab3 f383 	clz	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d106      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2102      	movs	r1, #2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff faae 	bl	8001ff4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2103      	movs	r1, #3
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fa92 	bl	8001fc8 <LL_ADC_GetOffsetChannel>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10a      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x398>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2103      	movs	r1, #3
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fa87 	bl	8001fc8 <LL_ADC_GetOffsetChannel>
 8002aba:	4603      	mov	r3, r0
 8002abc:	0e9b      	lsrs	r3, r3, #26
 8002abe:	f003 021f 	and.w	r2, r3, #31
 8002ac2:	e017      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x3c8>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2103      	movs	r1, #3
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fa7c 	bl	8001fc8 <LL_ADC_GetOffsetChannel>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002adc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ade:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002ae0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002ae6:	2320      	movs	r3, #32
 8002ae8:	e003      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002aea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d105      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x3e0>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	0e9b      	lsrs	r3, r3, #26
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	e011      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x404>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002b1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002b1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002b24:	2320      	movs	r3, #32
 8002b26:	e003      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002b28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d106      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2103      	movs	r1, #3
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fa59 	bl	8001ff4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fb60 	bl	800220c <LL_ADC_IsEnabled>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 8140 	bne.w	8002dd4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6819      	ldr	r1, [r3, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	461a      	mov	r2, r3
 8002b62:	f7ff facd 	bl	8002100 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	4a8f      	ldr	r2, [pc, #572]	@ (8002da8 <HAL_ADC_ConfigChannel+0x67c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	f040 8131 	bne.w	8002dd4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10b      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x46e>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	0e9b      	lsrs	r3, r3, #26
 8002b88:	3301      	adds	r3, #1
 8002b8a:	f003 031f 	and.w	r3, r3, #31
 8002b8e:	2b09      	cmp	r3, #9
 8002b90:	bf94      	ite	ls
 8002b92:	2301      	movls	r3, #1
 8002b94:	2300      	movhi	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	e019      	b.n	8002bce <HAL_ADC_ConfigChannel+0x4a2>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002baa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002bac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002bb2:	2320      	movs	r3, #32
 8002bb4:	e003      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002bb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bb8:	fab3 f383 	clz	r3, r3
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	2b09      	cmp	r3, #9
 8002bc6:	bf94      	ite	ls
 8002bc8:	2301      	movls	r3, #1
 8002bca:	2300      	movhi	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d079      	beq.n	8002cc6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d107      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x4c2>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	0e9b      	lsrs	r3, r3, #26
 8002be4:	3301      	adds	r3, #1
 8002be6:	069b      	lsls	r3, r3, #26
 8002be8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bec:	e015      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x4ee>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002bfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bfe:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002c00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002c06:	2320      	movs	r3, #32
 8002c08:	e003      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c0c:	fab3 f383 	clz	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	3301      	adds	r3, #1
 8002c14:	069b      	lsls	r3, r3, #26
 8002c16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x50e>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	0e9b      	lsrs	r3, r3, #26
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	f003 031f 	and.w	r3, r3, #31
 8002c32:	2101      	movs	r1, #1
 8002c34:	fa01 f303 	lsl.w	r3, r1, r3
 8002c38:	e017      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x53e>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c4a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002c4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002c52:	2320      	movs	r3, #32
 8002c54:	e003      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002c56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c58:	fab3 f383 	clz	r3, r3
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	2101      	movs	r1, #1
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	ea42 0103 	orr.w	r1, r2, r3
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10a      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x564>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	0e9b      	lsrs	r3, r3, #26
 8002c80:	3301      	adds	r3, #1
 8002c82:	f003 021f 	and.w	r2, r3, #31
 8002c86:	4613      	mov	r3, r2
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	4413      	add	r3, r2
 8002c8c:	051b      	lsls	r3, r3, #20
 8002c8e:	e018      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x596>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c98:	fa93 f3a3 	rbit	r3, r3
 8002c9c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002ca8:	2320      	movs	r3, #32
 8002caa:	e003      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	f003 021f 	and.w	r2, r3, #31
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	e081      	b.n	8002dca <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d107      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x5b6>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	0e9b      	lsrs	r3, r3, #26
 8002cd8:	3301      	adds	r3, #1
 8002cda:	069b      	lsls	r3, r3, #26
 8002cdc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ce0:	e015      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x5e2>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002cfa:	2320      	movs	r3, #32
 8002cfc:	e003      	b.n	8002d06 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d00:	fab3 f383 	clz	r3, r3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	3301      	adds	r3, #1
 8002d08:	069b      	lsls	r3, r3, #26
 8002d0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x602>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	0e9b      	lsrs	r3, r3, #26
 8002d20:	3301      	adds	r3, #1
 8002d22:	f003 031f 	and.w	r3, r3, #31
 8002d26:	2101      	movs	r1, #1
 8002d28:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2c:	e017      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x632>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	61bb      	str	r3, [r7, #24]
  return result;
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002d46:	2320      	movs	r3, #32
 8002d48:	e003      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	fab3 f383 	clz	r3, r3
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	2101      	movs	r1, #1
 8002d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5e:	ea42 0103 	orr.w	r1, r2, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10d      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x65e>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	0e9b      	lsrs	r3, r3, #26
 8002d74:	3301      	adds	r3, #1
 8002d76:	f003 021f 	and.w	r2, r3, #31
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4413      	add	r3, r2
 8002d80:	3b1e      	subs	r3, #30
 8002d82:	051b      	lsls	r3, r3, #20
 8002d84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d88:	e01e      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x69c>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	60fb      	str	r3, [r7, #12]
  return result;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d104      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002da2:	2320      	movs	r3, #32
 8002da4:	e006      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x688>
 8002da6:	bf00      	nop
 8002da8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	3301      	adds	r3, #1
 8002db6:	f003 021f 	and.w	r2, r3, #31
 8002dba:	4613      	mov	r3, r2
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3b1e      	subs	r3, #30
 8002dc2:	051b      	lsls	r3, r3, #20
 8002dc4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dc8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f7ff f96a 	bl	80020a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ed0 <HAL_ADC_ConfigChannel+0x7a4>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d06c      	beq.n	8002eba <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002de0:	483c      	ldr	r0, [pc, #240]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x7a8>)
 8002de2:	f7ff f8bf 	bl	8001f64 <LL_ADC_GetCommonPathInternalCh>
 8002de6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a3a      	ldr	r2, [pc, #232]	@ (8002ed8 <HAL_ADC_ConfigChannel+0x7ac>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d127      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002df4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002df8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d121      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a35      	ldr	r2, [pc, #212]	@ (8002edc <HAL_ADC_ConfigChannel+0x7b0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d157      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e0e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e12:	4619      	mov	r1, r3
 8002e14:	482f      	ldr	r0, [pc, #188]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x7a8>)
 8002e16:	f7ff f892 	bl	8001f3e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e1a:	4b31      	ldr	r3, [pc, #196]	@ (8002ee0 <HAL_ADC_ConfigChannel+0x7b4>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	099b      	lsrs	r3, r3, #6
 8002e20:	4a30      	ldr	r2, [pc, #192]	@ (8002ee4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	099b      	lsrs	r3, r3, #6
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e34:	e002      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f9      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e42:	e03a      	b.n	8002eba <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a27      	ldr	r2, [pc, #156]	@ (8002ee8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d113      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10d      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8002edc <HAL_ADC_ConfigChannel+0x7b0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d12a      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4819      	ldr	r0, [pc, #100]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x7a8>)
 8002e70:	f7ff f865 	bl	8001f3e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e74:	e021      	b.n	8002eba <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8002eec <HAL_ADC_ConfigChannel+0x7c0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d11c      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d116      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a12      	ldr	r2, [pc, #72]	@ (8002edc <HAL_ADC_ConfigChannel+0x7b0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d111      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	480c      	ldr	r0, [pc, #48]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x7a8>)
 8002ea2:	f7ff f84c 	bl	8001f3e <LL_ADC_SetCommonPathInternalCh>
 8002ea6:	e008      	b.n	8002eba <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eac:	f043 0220 	orr.w	r2, r3, #32
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ec2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	37d8      	adds	r7, #216	@ 0xd8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	80080000 	.word	0x80080000
 8002ed4:	50040300 	.word	0x50040300
 8002ed8:	c7520000 	.word	0xc7520000
 8002edc:	50040000 	.word	0x50040000
 8002ee0:	20000018 	.word	0x20000018
 8002ee4:	053e2d63 	.word	0x053e2d63
 8002ee8:	cb840000 	.word	0xcb840000
 8002eec:	80000001 	.word	0x80000001

08002ef0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff f983 	bl	800220c <LL_ADC_IsEnabled>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d169      	bne.n	8002fe0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	4b36      	ldr	r3, [pc, #216]	@ (8002fec <ADC_Enable+0xfc>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00d      	beq.n	8002f36 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f1e:	f043 0210 	orr.w	r2, r3, #16
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2a:	f043 0201 	orr.w	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e055      	b.n	8002fe2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff f952 	bl	80021e4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f40:	482b      	ldr	r0, [pc, #172]	@ (8002ff0 <ADC_Enable+0x100>)
 8002f42:	f7ff f80f 	bl	8001f64 <LL_ADC_GetCommonPathInternalCh>
 8002f46:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d013      	beq.n	8002f78 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f50:	4b28      	ldr	r3, [pc, #160]	@ (8002ff4 <ADC_Enable+0x104>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	099b      	lsrs	r3, r3, #6
 8002f56:	4a28      	ldr	r2, [pc, #160]	@ (8002ff8 <ADC_Enable+0x108>)
 8002f58:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5c:	099b      	lsrs	r3, r3, #6
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	4613      	mov	r3, r2
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f6a:	e002      	b.n	8002f72 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f9      	bne.n	8002f6c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f78:	f7fe ff9e 	bl	8001eb8 <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f7e:	e028      	b.n	8002fd2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff f941 	bl	800220c <LL_ADC_IsEnabled>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d104      	bne.n	8002f9a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff f925 	bl	80021e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f9a:	f7fe ff8d 	bl	8001eb8 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d914      	bls.n	8002fd2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d00d      	beq.n	8002fd2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fba:	f043 0210 	orr.w	r2, r3, #16
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc6:	f043 0201 	orr.w	r2, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e007      	b.n	8002fe2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d1cf      	bne.n	8002f80 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	8000003f 	.word	0x8000003f
 8002ff0:	50040300 	.word	0x50040300
 8002ff4:	20000018 	.word	0x20000018
 8002ff8:	053e2d63 	.word	0x053e2d63

08002ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800300c:	4b0c      	ldr	r3, [pc, #48]	@ (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003018:	4013      	ands	r3, r2
 800301a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003024:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800302c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800302e:	4a04      	ldr	r2, [pc, #16]	@ (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	60d3      	str	r3, [r2, #12]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003048:	4b04      	ldr	r3, [pc, #16]	@ (800305c <__NVIC_GetPriorityGrouping+0x18>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	0a1b      	lsrs	r3, r3, #8
 800304e:	f003 0307 	and.w	r3, r3, #7
}
 8003052:	4618      	mov	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	2b00      	cmp	r3, #0
 8003070:	db0b      	blt.n	800308a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	f003 021f 	and.w	r2, r3, #31
 8003078:	4907      	ldr	r1, [pc, #28]	@ (8003098 <__NVIC_EnableIRQ+0x38>)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	2001      	movs	r0, #1
 8003082:	fa00 f202 	lsl.w	r2, r0, r2
 8003086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	e000e100 	.word	0xe000e100

0800309c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	6039      	str	r1, [r7, #0]
 80030a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	db0a      	blt.n	80030c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	490c      	ldr	r1, [pc, #48]	@ (80030e8 <__NVIC_SetPriority+0x4c>)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	0112      	lsls	r2, r2, #4
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	440b      	add	r3, r1
 80030c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030c4:	e00a      	b.n	80030dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	4908      	ldr	r1, [pc, #32]	@ (80030ec <__NVIC_SetPriority+0x50>)
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	3b04      	subs	r3, #4
 80030d4:	0112      	lsls	r2, r2, #4
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	440b      	add	r3, r1
 80030da:	761a      	strb	r2, [r3, #24]
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000e100 	.word	0xe000e100
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b089      	sub	sp, #36	@ 0x24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f1c3 0307 	rsb	r3, r3, #7
 800310a:	2b04      	cmp	r3, #4
 800310c:	bf28      	it	cs
 800310e:	2304      	movcs	r3, #4
 8003110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3304      	adds	r3, #4
 8003116:	2b06      	cmp	r3, #6
 8003118:	d902      	bls.n	8003120 <NVIC_EncodePriority+0x30>
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3b03      	subs	r3, #3
 800311e:	e000      	b.n	8003122 <NVIC_EncodePriority+0x32>
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003124:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43da      	mvns	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	401a      	ands	r2, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003138:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	fa01 f303 	lsl.w	r3, r1, r3
 8003142:	43d9      	mvns	r1, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003148:	4313      	orrs	r3, r2
         );
}
 800314a:	4618      	mov	r0, r3
 800314c:	3724      	adds	r7, #36	@ 0x24
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3b01      	subs	r3, #1
 8003164:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003168:	d301      	bcc.n	800316e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800316a:	2301      	movs	r3, #1
 800316c:	e00f      	b.n	800318e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800316e:	4a0a      	ldr	r2, [pc, #40]	@ (8003198 <SysTick_Config+0x40>)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3b01      	subs	r3, #1
 8003174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003176:	210f      	movs	r1, #15
 8003178:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800317c:	f7ff ff8e 	bl	800309c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003180:	4b05      	ldr	r3, [pc, #20]	@ (8003198 <SysTick_Config+0x40>)
 8003182:	2200      	movs	r2, #0
 8003184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003186:	4b04      	ldr	r3, [pc, #16]	@ (8003198 <SysTick_Config+0x40>)
 8003188:	2207      	movs	r2, #7
 800318a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	e000e010 	.word	0xe000e010

0800319c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff ff29 	bl	8002ffc <__NVIC_SetPriorityGrouping>
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b086      	sub	sp, #24
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	4603      	mov	r3, r0
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
 80031be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031c4:	f7ff ff3e 	bl	8003044 <__NVIC_GetPriorityGrouping>
 80031c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	6978      	ldr	r0, [r7, #20]
 80031d0:	f7ff ff8e 	bl	80030f0 <NVIC_EncodePriority>
 80031d4:	4602      	mov	r2, r0
 80031d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031da:	4611      	mov	r1, r2
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff5d 	bl	800309c <__NVIC_SetPriority>
}
 80031e2:	bf00      	nop
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	4603      	mov	r3, r0
 80031f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff ff31 	bl	8003060 <__NVIC_EnableIRQ>
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff ffa2 	bl	8003158 <SysTick_Config>
 8003214:	4603      	mov	r3, r0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800321e:	b480      	push	{r7}
 8003220:	b085      	sub	sp, #20
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d008      	beq.n	8003248 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2204      	movs	r2, #4
 800323a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e022      	b.n	800328e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 020e 	bic.w	r2, r2, #14
 8003256:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0201 	bic.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326c:	f003 021c 	and.w	r2, r3, #28
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003274:	2101      	movs	r1, #1
 8003276:	fa01 f202 	lsl.w	r2, r1, r2
 800327a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800328c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d005      	beq.n	80032be <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2204      	movs	r2, #4
 80032b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]
 80032bc:	e029      	b.n	8003312 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 020e 	bic.w	r2, r2, #14
 80032cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0201 	bic.w	r2, r2, #1
 80032dc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e2:	f003 021c 	and.w	r2, r3, #28
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ea:	2101      	movs	r1, #1
 80032ec:	fa01 f202 	lsl.w	r2, r1, r2
 80032f0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	4798      	blx	r3
    }
  }
  return status;
 8003312:	7bfb      	ldrb	r3, [r7, #15]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800332a:	e148      	b.n	80035be <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	2101      	movs	r1, #1
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	fa01 f303 	lsl.w	r3, r1, r3
 8003338:	4013      	ands	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 813a 	beq.w	80035b8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	2b01      	cmp	r3, #1
 800334e:	d005      	beq.n	800335c <HAL_GPIO_Init+0x40>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d130      	bne.n	80033be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	2203      	movs	r2, #3
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4013      	ands	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003392:	2201      	movs	r2, #1
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4013      	ands	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	091b      	lsrs	r3, r3, #4
 80033a8:	f003 0201 	and.w	r2, r3, #1
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	d017      	beq.n	80033fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	2203      	movs	r2, #3
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43db      	mvns	r3, r3
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4013      	ands	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d123      	bne.n	800344e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	08da      	lsrs	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3208      	adds	r2, #8
 800340e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003412:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	220f      	movs	r2, #15
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4013      	ands	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	08da      	lsrs	r2, r3, #3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3208      	adds	r2, #8
 8003448:	6939      	ldr	r1, [r7, #16]
 800344a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	2203      	movs	r2, #3
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	4013      	ands	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 0203 	and.w	r2, r3, #3
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 8094 	beq.w	80035b8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003490:	4b52      	ldr	r3, [pc, #328]	@ (80035dc <HAL_GPIO_Init+0x2c0>)
 8003492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003494:	4a51      	ldr	r2, [pc, #324]	@ (80035dc <HAL_GPIO_Init+0x2c0>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	6613      	str	r3, [r2, #96]	@ 0x60
 800349c:	4b4f      	ldr	r3, [pc, #316]	@ (80035dc <HAL_GPIO_Init+0x2c0>)
 800349e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034a8:	4a4d      	ldr	r2, [pc, #308]	@ (80035e0 <HAL_GPIO_Init+0x2c4>)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	089b      	lsrs	r3, r3, #2
 80034ae:	3302      	adds	r3, #2
 80034b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	220f      	movs	r2, #15
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4013      	ands	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80034d2:	d00d      	beq.n	80034f0 <HAL_GPIO_Init+0x1d4>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a43      	ldr	r2, [pc, #268]	@ (80035e4 <HAL_GPIO_Init+0x2c8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d007      	beq.n	80034ec <HAL_GPIO_Init+0x1d0>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a42      	ldr	r2, [pc, #264]	@ (80035e8 <HAL_GPIO_Init+0x2cc>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d101      	bne.n	80034e8 <HAL_GPIO_Init+0x1cc>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e004      	b.n	80034f2 <HAL_GPIO_Init+0x1d6>
 80034e8:	2307      	movs	r3, #7
 80034ea:	e002      	b.n	80034f2 <HAL_GPIO_Init+0x1d6>
 80034ec:	2301      	movs	r3, #1
 80034ee:	e000      	b.n	80034f2 <HAL_GPIO_Init+0x1d6>
 80034f0:	2300      	movs	r3, #0
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	f002 0203 	and.w	r2, r2, #3
 80034f8:	0092      	lsls	r2, r2, #2
 80034fa:	4093      	lsls	r3, r2
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003502:	4937      	ldr	r1, [pc, #220]	@ (80035e0 <HAL_GPIO_Init+0x2c4>)
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	089b      	lsrs	r3, r3, #2
 8003508:	3302      	adds	r3, #2
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003510:	4b36      	ldr	r3, [pc, #216]	@ (80035ec <HAL_GPIO_Init+0x2d0>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	43db      	mvns	r3, r3
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4013      	ands	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003534:	4a2d      	ldr	r2, [pc, #180]	@ (80035ec <HAL_GPIO_Init+0x2d0>)
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800353a:	4b2c      	ldr	r3, [pc, #176]	@ (80035ec <HAL_GPIO_Init+0x2d0>)
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	43db      	mvns	r3, r3
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4013      	ands	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800355e:	4a23      	ldr	r2, [pc, #140]	@ (80035ec <HAL_GPIO_Init+0x2d0>)
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003564:	4b21      	ldr	r3, [pc, #132]	@ (80035ec <HAL_GPIO_Init+0x2d0>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	43db      	mvns	r3, r3
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4013      	ands	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003588:	4a18      	ldr	r2, [pc, #96]	@ (80035ec <HAL_GPIO_Init+0x2d0>)
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800358e:	4b17      	ldr	r3, [pc, #92]	@ (80035ec <HAL_GPIO_Init+0x2d0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	43db      	mvns	r3, r3
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4013      	ands	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035b2:	4a0e      	ldr	r2, [pc, #56]	@ (80035ec <HAL_GPIO_Init+0x2d0>)
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	3301      	adds	r3, #1
 80035bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	fa22 f303 	lsr.w	r3, r2, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f47f aeaf 	bne.w	800332c <HAL_GPIO_Init+0x10>
  }
}
 80035ce:	bf00      	nop
 80035d0:	bf00      	nop
 80035d2:	371c      	adds	r7, #28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	40021000 	.word	0x40021000
 80035e0:	40010000 	.word	0x40010000
 80035e4:	48000400 	.word	0x48000400
 80035e8:	48000800 	.word	0x48000800
 80035ec:	40010400 	.word	0x40010400

080035f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	807b      	strh	r3, [r7, #2]
 80035fc:	4613      	mov	r3, r2
 80035fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003600:	787b      	ldrb	r3, [r7, #1]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003606:	887a      	ldrh	r2, [r7, #2]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800360c:	e002      	b.n	8003614 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800360e:	887a      	ldrh	r2, [r7, #2]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003632:	887a      	ldrh	r2, [r7, #2]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4013      	ands	r3, r2
 8003638:	041a      	lsls	r2, r3, #16
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	43d9      	mvns	r1, r3
 800363e:	887b      	ldrh	r3, [r7, #2]
 8003640:	400b      	ands	r3, r1
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	619a      	str	r2, [r3, #24]
}
 8003648:	bf00      	nop
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800365e:	4b08      	ldr	r3, [pc, #32]	@ (8003680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003660:	695a      	ldr	r2, [r3, #20]
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	4013      	ands	r3, r2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d006      	beq.n	8003678 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800366a:	4a05      	ldr	r2, [pc, #20]	@ (8003680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800366c:	88fb      	ldrh	r3, [r7, #6]
 800366e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003670:	88fb      	ldrh	r3, [r7, #6]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe f82a 	bl	80016cc <HAL_GPIO_EXTI_Callback>
  }
}
 8003678:	bf00      	nop
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40010400 	.word	0x40010400

08003684 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003688:	4b04      	ldr	r3, [pc, #16]	@ (800369c <HAL_PWREx_GetVoltageRange+0x18>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003690:	4618      	mov	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40007000 	.word	0x40007000

080036a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036ae:	d130      	bne.n	8003712 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036b0:	4b23      	ldr	r3, [pc, #140]	@ (8003740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036bc:	d038      	beq.n	8003730 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036be:	4b20      	ldr	r3, [pc, #128]	@ (8003740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003744 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2232      	movs	r2, #50	@ 0x32
 80036d4:	fb02 f303 	mul.w	r3, r2, r3
 80036d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003748 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	0c9b      	lsrs	r3, r3, #18
 80036e0:	3301      	adds	r3, #1
 80036e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036e4:	e002      	b.n	80036ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ec:	4b14      	ldr	r3, [pc, #80]	@ (8003740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036f8:	d102      	bne.n	8003700 <HAL_PWREx_ControlVoltageScaling+0x60>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1f2      	bne.n	80036e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003700:	4b0f      	ldr	r3, [pc, #60]	@ (8003740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800370c:	d110      	bne.n	8003730 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e00f      	b.n	8003732 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003712:	4b0b      	ldr	r3, [pc, #44]	@ (8003740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800371a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800371e:	d007      	beq.n	8003730 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003720:	4b07      	ldr	r3, [pc, #28]	@ (8003740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003728:	4a05      	ldr	r2, [pc, #20]	@ (8003740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800372a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800372e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40007000 	.word	0x40007000
 8003744:	20000018 	.word	0x20000018
 8003748:	431bde83 	.word	0x431bde83

0800374c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d102      	bne.n	8003760 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	f000 bc02 	b.w	8003f64 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003760:	4b96      	ldr	r3, [pc, #600]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 030c 	and.w	r3, r3, #12
 8003768:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800376a:	4b94      	ldr	r3, [pc, #592]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0310 	and.w	r3, r3, #16
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80e4 	beq.w	800394a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d007      	beq.n	8003798 <HAL_RCC_OscConfig+0x4c>
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	2b0c      	cmp	r3, #12
 800378c:	f040 808b 	bne.w	80038a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	2b01      	cmp	r3, #1
 8003794:	f040 8087 	bne.w	80038a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003798:	4b88      	ldr	r3, [pc, #544]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_OscConfig+0x64>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e3d9      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	4b81      	ldr	r3, [pc, #516]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d004      	beq.n	80037ca <HAL_RCC_OscConfig+0x7e>
 80037c0:	4b7e      	ldr	r3, [pc, #504]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037c8:	e005      	b.n	80037d6 <HAL_RCC_OscConfig+0x8a>
 80037ca:	4b7c      	ldr	r3, [pc, #496]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80037cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d223      	bcs.n	8003822 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fd8c 	bl	80042fc <RCC_SetFlashLatencyFromMSIRange>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e3ba      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ee:	4b73      	ldr	r3, [pc, #460]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a72      	ldr	r2, [pc, #456]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80037f4:	f043 0308 	orr.w	r3, r3, #8
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	4b70      	ldr	r3, [pc, #448]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	496d      	ldr	r1, [pc, #436]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003808:	4313      	orrs	r3, r2
 800380a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800380c:	4b6b      	ldr	r3, [pc, #428]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	021b      	lsls	r3, r3, #8
 800381a:	4968      	ldr	r1, [pc, #416]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 800381c:	4313      	orrs	r3, r2
 800381e:	604b      	str	r3, [r1, #4]
 8003820:	e025      	b.n	800386e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003822:	4b66      	ldr	r3, [pc, #408]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a65      	ldr	r2, [pc, #404]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003828:	f043 0308 	orr.w	r3, r3, #8
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	4b63      	ldr	r3, [pc, #396]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	4960      	ldr	r1, [pc, #384]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 800383c:	4313      	orrs	r3, r2
 800383e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003840:	4b5e      	ldr	r3, [pc, #376]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	021b      	lsls	r3, r3, #8
 800384e:	495b      	ldr	r1, [pc, #364]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003850:	4313      	orrs	r3, r2
 8003852:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fd4c 	bl	80042fc <RCC_SetFlashLatencyFromMSIRange>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e37a      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800386e:	f000 fc81 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 8003872:	4602      	mov	r2, r0
 8003874:	4b51      	ldr	r3, [pc, #324]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	4950      	ldr	r1, [pc, #320]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 8003880:	5ccb      	ldrb	r3, [r1, r3]
 8003882:	f003 031f 	and.w	r3, r3, #31
 8003886:	fa22 f303 	lsr.w	r3, r2, r3
 800388a:	4a4e      	ldr	r2, [pc, #312]	@ (80039c4 <HAL_RCC_OscConfig+0x278>)
 800388c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800388e:	4b4e      	ldr	r3, [pc, #312]	@ (80039c8 <HAL_RCC_OscConfig+0x27c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe fac0 	bl	8001e18 <HAL_InitTick>
 8003898:	4603      	mov	r3, r0
 800389a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d052      	beq.n	8003948 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	e35e      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d032      	beq.n	8003914 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038ae:	4b43      	ldr	r3, [pc, #268]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a42      	ldr	r2, [pc, #264]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038ba:	f7fe fafd 	bl	8001eb8 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038c2:	f7fe faf9 	bl	8001eb8 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e347      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038d4:	4b39      	ldr	r3, [pc, #228]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0f0      	beq.n	80038c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038e0:	4b36      	ldr	r3, [pc, #216]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a35      	ldr	r2, [pc, #212]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80038e6:	f043 0308 	orr.w	r3, r3, #8
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	4b33      	ldr	r3, [pc, #204]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	4930      	ldr	r1, [pc, #192]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038fe:	4b2f      	ldr	r3, [pc, #188]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	021b      	lsls	r3, r3, #8
 800390c:	492b      	ldr	r1, [pc, #172]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 800390e:	4313      	orrs	r3, r2
 8003910:	604b      	str	r3, [r1, #4]
 8003912:	e01a      	b.n	800394a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003914:	4b29      	ldr	r3, [pc, #164]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a28      	ldr	r2, [pc, #160]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 800391a:	f023 0301 	bic.w	r3, r3, #1
 800391e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003920:	f7fe faca 	bl	8001eb8 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003928:	f7fe fac6 	bl	8001eb8 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e314      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800393a:	4b20      	ldr	r3, [pc, #128]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x1dc>
 8003946:	e000      	b.n	800394a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003948:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d073      	beq.n	8003a3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	2b08      	cmp	r3, #8
 800395a:	d005      	beq.n	8003968 <HAL_RCC_OscConfig+0x21c>
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	2b0c      	cmp	r3, #12
 8003960:	d10e      	bne.n	8003980 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b03      	cmp	r3, #3
 8003966:	d10b      	bne.n	8003980 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003968:	4b14      	ldr	r3, [pc, #80]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d063      	beq.n	8003a3c <HAL_RCC_OscConfig+0x2f0>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d15f      	bne.n	8003a3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e2f1      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003988:	d106      	bne.n	8003998 <HAL_RCC_OscConfig+0x24c>
 800398a:	4b0c      	ldr	r3, [pc, #48]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a0b      	ldr	r2, [pc, #44]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 8003990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e025      	b.n	80039e4 <HAL_RCC_OscConfig+0x298>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039a0:	d114      	bne.n	80039cc <HAL_RCC_OscConfig+0x280>
 80039a2:	4b06      	ldr	r3, [pc, #24]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a05      	ldr	r2, [pc, #20]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80039a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	4b03      	ldr	r3, [pc, #12]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a02      	ldr	r2, [pc, #8]	@ (80039bc <HAL_RCC_OscConfig+0x270>)
 80039b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	e013      	b.n	80039e4 <HAL_RCC_OscConfig+0x298>
 80039bc:	40021000 	.word	0x40021000
 80039c0:	0800b2a4 	.word	0x0800b2a4
 80039c4:	20000018 	.word	0x20000018
 80039c8:	2000001c 	.word	0x2000001c
 80039cc:	4ba0      	ldr	r3, [pc, #640]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a9f      	ldr	r2, [pc, #636]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 80039d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	4b9d      	ldr	r3, [pc, #628]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a9c      	ldr	r2, [pc, #624]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 80039de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d013      	beq.n	8003a14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ec:	f7fe fa64 	bl	8001eb8 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f4:	f7fe fa60 	bl	8001eb8 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	@ 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e2ae      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a06:	4b92      	ldr	r3, [pc, #584]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f0      	beq.n	80039f4 <HAL_RCC_OscConfig+0x2a8>
 8003a12:	e014      	b.n	8003a3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a14:	f7fe fa50 	bl	8001eb8 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a1c:	f7fe fa4c 	bl	8001eb8 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	@ 0x64
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e29a      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a2e:	4b88      	ldr	r3, [pc, #544]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <HAL_RCC_OscConfig+0x2d0>
 8003a3a:	e000      	b.n	8003a3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d060      	beq.n	8003b0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_OscConfig+0x310>
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2b0c      	cmp	r3, #12
 8003a54:	d119      	bne.n	8003a8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d116      	bne.n	8003a8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a5c:	4b7c      	ldr	r3, [pc, #496]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_OscConfig+0x328>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e277      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a74:	4b76      	ldr	r3, [pc, #472]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	061b      	lsls	r3, r3, #24
 8003a82:	4973      	ldr	r1, [pc, #460]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a88:	e040      	b.n	8003b0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d023      	beq.n	8003ada <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a92:	4b6f      	ldr	r3, [pc, #444]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a6e      	ldr	r2, [pc, #440]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003a98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9e:	f7fe fa0b 	bl	8001eb8 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa6:	f7fe fa07 	bl	8001eb8 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e255      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ab8:	4b65      	ldr	r3, [pc, #404]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f0      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac4:	4b62      	ldr	r3, [pc, #392]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	061b      	lsls	r3, r3, #24
 8003ad2:	495f      	ldr	r1, [pc, #380]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	604b      	str	r3, [r1, #4]
 8003ad8:	e018      	b.n	8003b0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ada:	4b5d      	ldr	r3, [pc, #372]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a5c      	ldr	r2, [pc, #368]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003ae0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae6:	f7fe f9e7 	bl	8001eb8 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aee:	f7fe f9e3 	bl	8001eb8 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e231      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b00:	4b53      	ldr	r3, [pc, #332]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1f0      	bne.n	8003aee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d03c      	beq.n	8003b92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01c      	beq.n	8003b5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b20:	4b4b      	ldr	r3, [pc, #300]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b26:	4a4a      	ldr	r2, [pc, #296]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b30:	f7fe f9c2 	bl	8001eb8 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b38:	f7fe f9be 	bl	8001eb8 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e20c      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b4a:	4b41      	ldr	r3, [pc, #260]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0ef      	beq.n	8003b38 <HAL_RCC_OscConfig+0x3ec>
 8003b58:	e01b      	b.n	8003b92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b5a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b60:	4a3b      	ldr	r2, [pc, #236]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003b62:	f023 0301 	bic.w	r3, r3, #1
 8003b66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6a:	f7fe f9a5 	bl	8001eb8 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b72:	f7fe f9a1 	bl	8001eb8 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e1ef      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b84:	4b32      	ldr	r3, [pc, #200]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1ef      	bne.n	8003b72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 80a6 	beq.w	8003cec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10d      	bne.n	8003bcc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb0:	4b27      	ldr	r3, [pc, #156]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb4:	4a26      	ldr	r2, [pc, #152]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bba:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bbc:	4b24      	ldr	r3, [pc, #144]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bcc:	4b21      	ldr	r3, [pc, #132]	@ (8003c54 <HAL_RCC_OscConfig+0x508>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d118      	bne.n	8003c0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8003c54 <HAL_RCC_OscConfig+0x508>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8003c54 <HAL_RCC_OscConfig+0x508>)
 8003bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003be2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003be4:	f7fe f968 	bl	8001eb8 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bec:	f7fe f964 	bl	8001eb8 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e1b2      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bfe:	4b15      	ldr	r3, [pc, #84]	@ (8003c54 <HAL_RCC_OscConfig+0x508>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d108      	bne.n	8003c24 <HAL_RCC_OscConfig+0x4d8>
 8003c12:	4b0f      	ldr	r3, [pc, #60]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c18:	4a0d      	ldr	r2, [pc, #52]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c22:	e029      	b.n	8003c78 <HAL_RCC_OscConfig+0x52c>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b05      	cmp	r3, #5
 8003c2a:	d115      	bne.n	8003c58 <HAL_RCC_OscConfig+0x50c>
 8003c2c:	4b08      	ldr	r3, [pc, #32]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c32:	4a07      	ldr	r2, [pc, #28]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003c34:	f043 0304 	orr.w	r3, r3, #4
 8003c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c3c:	4b04      	ldr	r3, [pc, #16]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c42:	4a03      	ldr	r2, [pc, #12]	@ (8003c50 <HAL_RCC_OscConfig+0x504>)
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c4c:	e014      	b.n	8003c78 <HAL_RCC_OscConfig+0x52c>
 8003c4e:	bf00      	nop
 8003c50:	40021000 	.word	0x40021000
 8003c54:	40007000 	.word	0x40007000
 8003c58:	4b9a      	ldr	r3, [pc, #616]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5e:	4a99      	ldr	r2, [pc, #612]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c68:	4b96      	ldr	r3, [pc, #600]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6e:	4a95      	ldr	r2, [pc, #596]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003c70:	f023 0304 	bic.w	r3, r3, #4
 8003c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d016      	beq.n	8003cae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c80:	f7fe f91a 	bl	8001eb8 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c88:	f7fe f916 	bl	8001eb8 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e162      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c9e:	4b89      	ldr	r3, [pc, #548]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0ed      	beq.n	8003c88 <HAL_RCC_OscConfig+0x53c>
 8003cac:	e015      	b.n	8003cda <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cae:	f7fe f903 	bl	8001eb8 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cb4:	e00a      	b.n	8003ccc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb6:	f7fe f8ff 	bl	8001eb8 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e14b      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ccc:	4b7d      	ldr	r3, [pc, #500]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1ed      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cda:	7ffb      	ldrb	r3, [r7, #31]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d105      	bne.n	8003cec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce0:	4b78      	ldr	r3, [pc, #480]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce4:	4a77      	ldr	r2, [pc, #476]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003ce6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d03c      	beq.n	8003d72 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d01c      	beq.n	8003d3a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d00:	4b70      	ldr	r3, [pc, #448]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003d02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d06:	4a6f      	ldr	r2, [pc, #444]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d10:	f7fe f8d2 	bl	8001eb8 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d18:	f7fe f8ce 	bl	8001eb8 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e11c      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d2a:	4b66      	ldr	r3, [pc, #408]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003d2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0ef      	beq.n	8003d18 <HAL_RCC_OscConfig+0x5cc>
 8003d38:	e01b      	b.n	8003d72 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d3a:	4b62      	ldr	r3, [pc, #392]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003d3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d40:	4a60      	ldr	r2, [pc, #384]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003d42:	f023 0301 	bic.w	r3, r3, #1
 8003d46:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4a:	f7fe f8b5 	bl	8001eb8 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d52:	f7fe f8b1 	bl	8001eb8 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e0ff      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d64:	4b57      	ldr	r3, [pc, #348]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003d66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1ef      	bne.n	8003d52 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 80f3 	beq.w	8003f62 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	f040 80c9 	bne.w	8003f18 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d86:	4b4f      	ldr	r3, [pc, #316]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f003 0203 	and.w	r2, r3, #3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d12c      	bne.n	8003df4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da4:	3b01      	subs	r3, #1
 8003da6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d123      	bne.n	8003df4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d11b      	bne.n	8003df4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d113      	bne.n	8003df4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd6:	085b      	lsrs	r3, r3, #1
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d109      	bne.n	8003df4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dea:	085b      	lsrs	r3, r3, #1
 8003dec:	3b01      	subs	r3, #1
 8003dee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d06b      	beq.n	8003ecc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	2b0c      	cmp	r3, #12
 8003df8:	d062      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003dfa:	4b32      	ldr	r3, [pc, #200]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e0ac      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e0a:	4b2e      	ldr	r3, [pc, #184]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a2d      	ldr	r2, [pc, #180]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003e10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e16:	f7fe f84f 	bl	8001eb8 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1e:	f7fe f84b 	bl	8001eb8 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e099      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e30:	4b24      	ldr	r3, [pc, #144]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1f0      	bne.n	8003e1e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e3c:	4b21      	ldr	r3, [pc, #132]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	4b21      	ldr	r3, [pc, #132]	@ (8003ec8 <HAL_RCC_OscConfig+0x77c>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003e4c:	3a01      	subs	r2, #1
 8003e4e:	0112      	lsls	r2, r2, #4
 8003e50:	4311      	orrs	r1, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e56:	0212      	lsls	r2, r2, #8
 8003e58:	4311      	orrs	r1, r2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e5e:	0852      	lsrs	r2, r2, #1
 8003e60:	3a01      	subs	r2, #1
 8003e62:	0552      	lsls	r2, r2, #21
 8003e64:	4311      	orrs	r1, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003e6a:	0852      	lsrs	r2, r2, #1
 8003e6c:	3a01      	subs	r2, #1
 8003e6e:	0652      	lsls	r2, r2, #25
 8003e70:	4311      	orrs	r1, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e76:	06d2      	lsls	r2, r2, #27
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	4912      	ldr	r1, [pc, #72]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e80:	4b10      	ldr	r3, [pc, #64]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a0f      	ldr	r2, [pc, #60]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003e86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4a0c      	ldr	r2, [pc, #48]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003e92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e98:	f7fe f80e 	bl	8001eb8 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea0:	f7fe f80a 	bl	8001eb8 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e058      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eb2:	4b04      	ldr	r3, [pc, #16]	@ (8003ec4 <HAL_RCC_OscConfig+0x778>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ebe:	e050      	b.n	8003f62 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e04f      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ecc:	4b27      	ldr	r3, [pc, #156]	@ (8003f6c <HAL_RCC_OscConfig+0x820>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d144      	bne.n	8003f62 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ed8:	4b24      	ldr	r3, [pc, #144]	@ (8003f6c <HAL_RCC_OscConfig+0x820>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a23      	ldr	r2, [pc, #140]	@ (8003f6c <HAL_RCC_OscConfig+0x820>)
 8003ede:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ee2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ee4:	4b21      	ldr	r3, [pc, #132]	@ (8003f6c <HAL_RCC_OscConfig+0x820>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	4a20      	ldr	r2, [pc, #128]	@ (8003f6c <HAL_RCC_OscConfig+0x820>)
 8003eea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003eee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ef0:	f7fd ffe2 	bl	8001eb8 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef8:	f7fd ffde 	bl	8001eb8 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e02c      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f0a:	4b18      	ldr	r3, [pc, #96]	@ (8003f6c <HAL_RCC_OscConfig+0x820>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0f0      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x7ac>
 8003f16:	e024      	b.n	8003f62 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	2b0c      	cmp	r3, #12
 8003f1c:	d01f      	beq.n	8003f5e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f1e:	4b13      	ldr	r3, [pc, #76]	@ (8003f6c <HAL_RCC_OscConfig+0x820>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a12      	ldr	r2, [pc, #72]	@ (8003f6c <HAL_RCC_OscConfig+0x820>)
 8003f24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2a:	f7fd ffc5 	bl	8001eb8 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f32:	f7fd ffc1 	bl	8001eb8 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e00f      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f44:	4b09      	ldr	r3, [pc, #36]	@ (8003f6c <HAL_RCC_OscConfig+0x820>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1f0      	bne.n	8003f32 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003f50:	4b06      	ldr	r3, [pc, #24]	@ (8003f6c <HAL_RCC_OscConfig+0x820>)
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	4905      	ldr	r1, [pc, #20]	@ (8003f6c <HAL_RCC_OscConfig+0x820>)
 8003f56:	4b06      	ldr	r3, [pc, #24]	@ (8003f70 <HAL_RCC_OscConfig+0x824>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	60cb      	str	r3, [r1, #12]
 8003f5c:	e001      	b.n	8003f62 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3720      	adds	r7, #32
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	feeefffc 	.word	0xfeeefffc

08003f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0e7      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f88:	4b75      	ldr	r3, [pc, #468]	@ (8004160 <HAL_RCC_ClockConfig+0x1ec>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d910      	bls.n	8003fb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b72      	ldr	r3, [pc, #456]	@ (8004160 <HAL_RCC_ClockConfig+0x1ec>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 0207 	bic.w	r2, r3, #7
 8003f9e:	4970      	ldr	r1, [pc, #448]	@ (8004160 <HAL_RCC_ClockConfig+0x1ec>)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	4b6e      	ldr	r3, [pc, #440]	@ (8004160 <HAL_RCC_ClockConfig+0x1ec>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0cf      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d010      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	4b66      	ldr	r3, [pc, #408]	@ (8004164 <HAL_RCC_ClockConfig+0x1f0>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d908      	bls.n	8003fe6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd4:	4b63      	ldr	r3, [pc, #396]	@ (8004164 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	4960      	ldr	r1, [pc, #384]	@ (8004164 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d04c      	beq.n	800408c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d107      	bne.n	800400a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ffa:	4b5a      	ldr	r3, [pc, #360]	@ (8004164 <HAL_RCC_ClockConfig+0x1f0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d121      	bne.n	800404a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e0a6      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d107      	bne.n	8004022 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004012:	4b54      	ldr	r3, [pc, #336]	@ (8004164 <HAL_RCC_ClockConfig+0x1f0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d115      	bne.n	800404a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e09a      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d107      	bne.n	800403a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800402a:	4b4e      	ldr	r3, [pc, #312]	@ (8004164 <HAL_RCC_ClockConfig+0x1f0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d109      	bne.n	800404a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e08e      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800403a:	4b4a      	ldr	r3, [pc, #296]	@ (8004164 <HAL_RCC_ClockConfig+0x1f0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e086      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800404a:	4b46      	ldr	r3, [pc, #280]	@ (8004164 <HAL_RCC_ClockConfig+0x1f0>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f023 0203 	bic.w	r2, r3, #3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	4943      	ldr	r1, [pc, #268]	@ (8004164 <HAL_RCC_ClockConfig+0x1f0>)
 8004058:	4313      	orrs	r3, r2
 800405a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800405c:	f7fd ff2c 	bl	8001eb8 <HAL_GetTick>
 8004060:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004062:	e00a      	b.n	800407a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004064:	f7fd ff28 	bl	8001eb8 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004072:	4293      	cmp	r3, r2
 8004074:	d901      	bls.n	800407a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e06e      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407a:	4b3a      	ldr	r3, [pc, #232]	@ (8004164 <HAL_RCC_ClockConfig+0x1f0>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 020c 	and.w	r2, r3, #12
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	429a      	cmp	r2, r3
 800408a:	d1eb      	bne.n	8004064 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d010      	beq.n	80040ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	4b31      	ldr	r3, [pc, #196]	@ (8004164 <HAL_RCC_ClockConfig+0x1f0>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d208      	bcs.n	80040ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004164 <HAL_RCC_ClockConfig+0x1f0>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	492b      	ldr	r1, [pc, #172]	@ (8004164 <HAL_RCC_ClockConfig+0x1f0>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040ba:	4b29      	ldr	r3, [pc, #164]	@ (8004160 <HAL_RCC_ClockConfig+0x1ec>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d210      	bcs.n	80040ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c8:	4b25      	ldr	r3, [pc, #148]	@ (8004160 <HAL_RCC_ClockConfig+0x1ec>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f023 0207 	bic.w	r2, r3, #7
 80040d0:	4923      	ldr	r1, [pc, #140]	@ (8004160 <HAL_RCC_ClockConfig+0x1ec>)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d8:	4b21      	ldr	r3, [pc, #132]	@ (8004160 <HAL_RCC_ClockConfig+0x1ec>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d001      	beq.n	80040ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e036      	b.n	8004158 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d008      	beq.n	8004108 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004164 <HAL_RCC_ClockConfig+0x1f0>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	4918      	ldr	r1, [pc, #96]	@ (8004164 <HAL_RCC_ClockConfig+0x1f0>)
 8004104:	4313      	orrs	r3, r2
 8004106:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d009      	beq.n	8004128 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004114:	4b13      	ldr	r3, [pc, #76]	@ (8004164 <HAL_RCC_ClockConfig+0x1f0>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	4910      	ldr	r1, [pc, #64]	@ (8004164 <HAL_RCC_ClockConfig+0x1f0>)
 8004124:	4313      	orrs	r3, r2
 8004126:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004128:	f000 f824 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 800412c:	4602      	mov	r2, r0
 800412e:	4b0d      	ldr	r3, [pc, #52]	@ (8004164 <HAL_RCC_ClockConfig+0x1f0>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	091b      	lsrs	r3, r3, #4
 8004134:	f003 030f 	and.w	r3, r3, #15
 8004138:	490b      	ldr	r1, [pc, #44]	@ (8004168 <HAL_RCC_ClockConfig+0x1f4>)
 800413a:	5ccb      	ldrb	r3, [r1, r3]
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
 8004144:	4a09      	ldr	r2, [pc, #36]	@ (800416c <HAL_RCC_ClockConfig+0x1f8>)
 8004146:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004148:	4b09      	ldr	r3, [pc, #36]	@ (8004170 <HAL_RCC_ClockConfig+0x1fc>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f7fd fe63 	bl	8001e18 <HAL_InitTick>
 8004152:	4603      	mov	r3, r0
 8004154:	72fb      	strb	r3, [r7, #11]

  return status;
 8004156:	7afb      	ldrb	r3, [r7, #11]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40022000 	.word	0x40022000
 8004164:	40021000 	.word	0x40021000
 8004168:	0800b2a4 	.word	0x0800b2a4
 800416c:	20000018 	.word	0x20000018
 8004170:	2000001c 	.word	0x2000001c

08004174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004174:	b480      	push	{r7}
 8004176:	b089      	sub	sp, #36	@ 0x24
 8004178:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	2300      	movs	r3, #0
 8004180:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004182:	4b3e      	ldr	r3, [pc, #248]	@ (800427c <HAL_RCC_GetSysClockFreq+0x108>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800418c:	4b3b      	ldr	r3, [pc, #236]	@ (800427c <HAL_RCC_GetSysClockFreq+0x108>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_GetSysClockFreq+0x34>
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	2b0c      	cmp	r3, #12
 80041a0:	d121      	bne.n	80041e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d11e      	bne.n	80041e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041a8:	4b34      	ldr	r3, [pc, #208]	@ (800427c <HAL_RCC_GetSysClockFreq+0x108>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d107      	bne.n	80041c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041b4:	4b31      	ldr	r3, [pc, #196]	@ (800427c <HAL_RCC_GetSysClockFreq+0x108>)
 80041b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041ba:	0a1b      	lsrs	r3, r3, #8
 80041bc:	f003 030f 	and.w	r3, r3, #15
 80041c0:	61fb      	str	r3, [r7, #28]
 80041c2:	e005      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041c4:	4b2d      	ldr	r3, [pc, #180]	@ (800427c <HAL_RCC_GetSysClockFreq+0x108>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	091b      	lsrs	r3, r3, #4
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x10c>)
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10d      	bne.n	80041fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041e4:	e00a      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d102      	bne.n	80041f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041ec:	4b25      	ldr	r3, [pc, #148]	@ (8004284 <HAL_RCC_GetSysClockFreq+0x110>)
 80041ee:	61bb      	str	r3, [r7, #24]
 80041f0:	e004      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d101      	bne.n	80041fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041f8:	4b23      	ldr	r3, [pc, #140]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x114>)
 80041fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	2b0c      	cmp	r3, #12
 8004200:	d134      	bne.n	800426c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004202:	4b1e      	ldr	r3, [pc, #120]	@ (800427c <HAL_RCC_GetSysClockFreq+0x108>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b02      	cmp	r3, #2
 8004210:	d003      	beq.n	800421a <HAL_RCC_GetSysClockFreq+0xa6>
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2b03      	cmp	r3, #3
 8004216:	d003      	beq.n	8004220 <HAL_RCC_GetSysClockFreq+0xac>
 8004218:	e005      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800421a:	4b1a      	ldr	r3, [pc, #104]	@ (8004284 <HAL_RCC_GetSysClockFreq+0x110>)
 800421c:	617b      	str	r3, [r7, #20]
      break;
 800421e:	e005      	b.n	800422c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004220:	4b19      	ldr	r3, [pc, #100]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x114>)
 8004222:	617b      	str	r3, [r7, #20]
      break;
 8004224:	e002      	b.n	800422c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	617b      	str	r3, [r7, #20]
      break;
 800422a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800422c:	4b13      	ldr	r3, [pc, #76]	@ (800427c <HAL_RCC_GetSysClockFreq+0x108>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	3301      	adds	r3, #1
 8004238:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800423a:	4b10      	ldr	r3, [pc, #64]	@ (800427c <HAL_RCC_GetSysClockFreq+0x108>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	0a1b      	lsrs	r3, r3, #8
 8004240:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	fb03 f202 	mul.w	r2, r3, r2
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004250:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004252:	4b0a      	ldr	r3, [pc, #40]	@ (800427c <HAL_RCC_GetSysClockFreq+0x108>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	0e5b      	lsrs	r3, r3, #25
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	3301      	adds	r3, #1
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800426c:	69bb      	ldr	r3, [r7, #24]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3724      	adds	r7, #36	@ 0x24
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40021000 	.word	0x40021000
 8004280:	0800b2bc 	.word	0x0800b2bc
 8004284:	00f42400 	.word	0x00f42400
 8004288:	007a1200 	.word	0x007a1200

0800428c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004290:	4b03      	ldr	r3, [pc, #12]	@ (80042a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004292:	681b      	ldr	r3, [r3, #0]
}
 8004294:	4618      	mov	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20000018 	.word	0x20000018

080042a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042a8:	f7ff fff0 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042ac:	4602      	mov	r2, r0
 80042ae:	4b06      	ldr	r3, [pc, #24]	@ (80042c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	0a1b      	lsrs	r3, r3, #8
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	4904      	ldr	r1, [pc, #16]	@ (80042cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80042ba:	5ccb      	ldrb	r3, [r1, r3]
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40021000 	.word	0x40021000
 80042cc:	0800b2b4 	.word	0x0800b2b4

080042d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042d4:	f7ff ffda 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042d8:	4602      	mov	r2, r0
 80042da:	4b06      	ldr	r3, [pc, #24]	@ (80042f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	0adb      	lsrs	r3, r3, #11
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	4904      	ldr	r1, [pc, #16]	@ (80042f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042e6:	5ccb      	ldrb	r3, [r1, r3]
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40021000 	.word	0x40021000
 80042f8:	0800b2b4 	.word	0x0800b2b4

080042fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004304:	2300      	movs	r3, #0
 8004306:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004308:	4b2a      	ldr	r3, [pc, #168]	@ (80043b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800430a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004314:	f7ff f9b6 	bl	8003684 <HAL_PWREx_GetVoltageRange>
 8004318:	6178      	str	r0, [r7, #20]
 800431a:	e014      	b.n	8004346 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800431c:	4b25      	ldr	r3, [pc, #148]	@ (80043b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800431e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004320:	4a24      	ldr	r2, [pc, #144]	@ (80043b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004326:	6593      	str	r3, [r2, #88]	@ 0x58
 8004328:	4b22      	ldr	r3, [pc, #136]	@ (80043b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800432a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004334:	f7ff f9a6 	bl	8003684 <HAL_PWREx_GetVoltageRange>
 8004338:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800433a:	4b1e      	ldr	r3, [pc, #120]	@ (80043b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800433c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800433e:	4a1d      	ldr	r2, [pc, #116]	@ (80043b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004340:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004344:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800434c:	d10b      	bne.n	8004366 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b80      	cmp	r3, #128	@ 0x80
 8004352:	d919      	bls.n	8004388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2ba0      	cmp	r3, #160	@ 0xa0
 8004358:	d902      	bls.n	8004360 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800435a:	2302      	movs	r3, #2
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	e013      	b.n	8004388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004360:	2301      	movs	r3, #1
 8004362:	613b      	str	r3, [r7, #16]
 8004364:	e010      	b.n	8004388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b80      	cmp	r3, #128	@ 0x80
 800436a:	d902      	bls.n	8004372 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800436c:	2303      	movs	r3, #3
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	e00a      	b.n	8004388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b80      	cmp	r3, #128	@ 0x80
 8004376:	d102      	bne.n	800437e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004378:	2302      	movs	r3, #2
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	e004      	b.n	8004388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b70      	cmp	r3, #112	@ 0x70
 8004382:	d101      	bne.n	8004388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004384:	2301      	movs	r3, #1
 8004386:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004388:	4b0b      	ldr	r3, [pc, #44]	@ (80043b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f023 0207 	bic.w	r2, r3, #7
 8004390:	4909      	ldr	r1, [pc, #36]	@ (80043b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004398:	4b07      	ldr	r3, [pc, #28]	@ (80043b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d001      	beq.n	80043aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40021000 	.word	0x40021000
 80043b8:	40022000 	.word	0x40022000

080043bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043c4:	2300      	movs	r3, #0
 80043c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043c8:	2300      	movs	r3, #0
 80043ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d031      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80043e0:	d01a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80043e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80043e6:	d814      	bhi.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d009      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80043ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80043f0:	d10f      	bne.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80043f2:	4b5d      	ldr	r3, [pc, #372]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	4a5c      	ldr	r2, [pc, #368]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043fc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043fe:	e00c      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3304      	adds	r3, #4
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f000 f9ce 	bl	80047a8 <RCCEx_PLLSAI1_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004410:	e003      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	74fb      	strb	r3, [r7, #19]
      break;
 8004416:	e000      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004418:	bf00      	nop
    }

    if(ret == HAL_OK)
 800441a:	7cfb      	ldrb	r3, [r7, #19]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10b      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004420:	4b51      	ldr	r3, [pc, #324]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004426:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442e:	494e      	ldr	r1, [pc, #312]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004436:	e001      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004438:	7cfb      	ldrb	r3, [r7, #19]
 800443a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 809e 	beq.w	8004586 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444a:	2300      	movs	r3, #0
 800444c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800444e:	4b46      	ldr	r3, [pc, #280]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800445e:	2300      	movs	r3, #0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00d      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004464:	4b40      	ldr	r3, [pc, #256]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004468:	4a3f      	ldr	r2, [pc, #252]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800446a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800446e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004470:	4b3d      	ldr	r3, [pc, #244]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800447c:	2301      	movs	r3, #1
 800447e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004480:	4b3a      	ldr	r3, [pc, #232]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a39      	ldr	r2, [pc, #228]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004486:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800448a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800448c:	f7fd fd14 	bl	8001eb8 <HAL_GetTick>
 8004490:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004492:	e009      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004494:	f7fd fd10 	bl	8001eb8 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d902      	bls.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	74fb      	strb	r3, [r7, #19]
        break;
 80044a6:	e005      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044a8:	4b30      	ldr	r3, [pc, #192]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0ef      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80044b4:	7cfb      	ldrb	r3, [r7, #19]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d15a      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044ba:	4b2b      	ldr	r3, [pc, #172]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01e      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d019      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044d6:	4b24      	ldr	r3, [pc, #144]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044e2:	4b21      	ldr	r3, [pc, #132]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004502:	4a19      	ldr	r2, [pc, #100]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d016      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004514:	f7fd fcd0 	bl	8001eb8 <HAL_GetTick>
 8004518:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800451a:	e00b      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451c:	f7fd fccc 	bl	8001eb8 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800452a:	4293      	cmp	r3, r2
 800452c:	d902      	bls.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	74fb      	strb	r3, [r7, #19]
            break;
 8004532:	e006      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004534:	4b0c      	ldr	r3, [pc, #48]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0ec      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004542:	7cfb      	ldrb	r3, [r7, #19]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10b      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004548:	4b07      	ldr	r3, [pc, #28]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800454e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004556:	4904      	ldr	r1, [pc, #16]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004558:	4313      	orrs	r3, r2
 800455a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800455e:	e009      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004560:	7cfb      	ldrb	r3, [r7, #19]
 8004562:	74bb      	strb	r3, [r7, #18]
 8004564:	e006      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004566:	bf00      	nop
 8004568:	40021000 	.word	0x40021000
 800456c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004570:	7cfb      	ldrb	r3, [r7, #19]
 8004572:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004574:	7c7b      	ldrb	r3, [r7, #17]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d105      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800457a:	4b8a      	ldr	r3, [pc, #552]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800457c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800457e:	4a89      	ldr	r2, [pc, #548]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004580:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004584:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004592:	4b84      	ldr	r3, [pc, #528]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004598:	f023 0203 	bic.w	r2, r3, #3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	4980      	ldr	r1, [pc, #512]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00a      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045b4:	4b7b      	ldr	r3, [pc, #492]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ba:	f023 020c 	bic.w	r2, r3, #12
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c2:	4978      	ldr	r1, [pc, #480]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045d6:	4b73      	ldr	r3, [pc, #460]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045dc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e4:	496f      	ldr	r1, [pc, #444]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045f8:	4b6a      	ldr	r3, [pc, #424]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fe:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004606:	4967      	ldr	r1, [pc, #412]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800461a:	4b62      	ldr	r3, [pc, #392]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004620:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004628:	495e      	ldr	r1, [pc, #376]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800463c:	4b59      	ldr	r3, [pc, #356]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800463e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004642:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464a:	4956      	ldr	r1, [pc, #344]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800465e:	4b51      	ldr	r3, [pc, #324]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004664:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466c:	494d      	ldr	r1, [pc, #308]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d028      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004680:	4b48      	ldr	r3, [pc, #288]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004686:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468e:	4945      	ldr	r1, [pc, #276]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800469e:	d106      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046a0:	4b40      	ldr	r3, [pc, #256]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	4a3f      	ldr	r2, [pc, #252]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046aa:	60d3      	str	r3, [r2, #12]
 80046ac:	e011      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046b6:	d10c      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3304      	adds	r3, #4
 80046bc:	2101      	movs	r1, #1
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 f872 	bl	80047a8 <RCCEx_PLLSAI1_Config>
 80046c4:	4603      	mov	r3, r0
 80046c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046c8:	7cfb      	ldrb	r3, [r7, #19]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80046ce:	7cfb      	ldrb	r3, [r7, #19]
 80046d0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d028      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046de:	4b31      	ldr	r3, [pc, #196]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ec:	492d      	ldr	r1, [pc, #180]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046fc:	d106      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046fe:	4b29      	ldr	r3, [pc, #164]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	4a28      	ldr	r2, [pc, #160]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004704:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004708:	60d3      	str	r3, [r2, #12]
 800470a:	e011      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004710:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004714:	d10c      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3304      	adds	r3, #4
 800471a:	2101      	movs	r1, #1
 800471c:	4618      	mov	r0, r3
 800471e:	f000 f843 	bl	80047a8 <RCCEx_PLLSAI1_Config>
 8004722:	4603      	mov	r3, r0
 8004724:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004726:	7cfb      	ldrb	r3, [r7, #19]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800472c:	7cfb      	ldrb	r3, [r7, #19]
 800472e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01c      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800473c:	4b19      	ldr	r3, [pc, #100]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800473e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004742:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800474a:	4916      	ldr	r1, [pc, #88]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800474c:	4313      	orrs	r3, r2
 800474e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004756:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800475a:	d10c      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3304      	adds	r3, #4
 8004760:	2102      	movs	r1, #2
 8004762:	4618      	mov	r0, r3
 8004764:	f000 f820 	bl	80047a8 <RCCEx_PLLSAI1_Config>
 8004768:	4603      	mov	r3, r0
 800476a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800476c:	7cfb      	ldrb	r3, [r7, #19]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004772:	7cfb      	ldrb	r3, [r7, #19]
 8004774:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004782:	4b08      	ldr	r3, [pc, #32]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004788:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004790:	4904      	ldr	r1, [pc, #16]	@ (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004798:	7cbb      	ldrb	r3, [r7, #18]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40021000 	.word	0x40021000

080047a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047b6:	4b74      	ldr	r3, [pc, #464]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f003 0303 	and.w	r3, r3, #3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d018      	beq.n	80047f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047c2:	4b71      	ldr	r3, [pc, #452]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f003 0203 	and.w	r2, r3, #3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d10d      	bne.n	80047ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
       ||
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d009      	beq.n	80047ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047da:	4b6b      	ldr	r3, [pc, #428]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	091b      	lsrs	r3, r3, #4
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
       ||
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d047      	beq.n	800487e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	73fb      	strb	r3, [r7, #15]
 80047f2:	e044      	b.n	800487e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b03      	cmp	r3, #3
 80047fa:	d018      	beq.n	800482e <RCCEx_PLLSAI1_Config+0x86>
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d825      	bhi.n	800484c <RCCEx_PLLSAI1_Config+0xa4>
 8004800:	2b01      	cmp	r3, #1
 8004802:	d002      	beq.n	800480a <RCCEx_PLLSAI1_Config+0x62>
 8004804:	2b02      	cmp	r3, #2
 8004806:	d009      	beq.n	800481c <RCCEx_PLLSAI1_Config+0x74>
 8004808:	e020      	b.n	800484c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800480a:	4b5f      	ldr	r3, [pc, #380]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d11d      	bne.n	8004852 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800481a:	e01a      	b.n	8004852 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800481c:	4b5a      	ldr	r3, [pc, #360]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004824:	2b00      	cmp	r3, #0
 8004826:	d116      	bne.n	8004856 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800482c:	e013      	b.n	8004856 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800482e:	4b56      	ldr	r3, [pc, #344]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10f      	bne.n	800485a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800483a:	4b53      	ldr	r3, [pc, #332]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d109      	bne.n	800485a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800484a:	e006      	b.n	800485a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	73fb      	strb	r3, [r7, #15]
      break;
 8004850:	e004      	b.n	800485c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004852:	bf00      	nop
 8004854:	e002      	b.n	800485c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004856:	bf00      	nop
 8004858:	e000      	b.n	800485c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800485a:	bf00      	nop
    }

    if(status == HAL_OK)
 800485c:	7bfb      	ldrb	r3, [r7, #15]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10d      	bne.n	800487e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004862:	4b49      	ldr	r3, [pc, #292]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6819      	ldr	r1, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	3b01      	subs	r3, #1
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	430b      	orrs	r3, r1
 8004878:	4943      	ldr	r1, [pc, #268]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 800487a:	4313      	orrs	r3, r2
 800487c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d17c      	bne.n	800497e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004884:	4b40      	ldr	r3, [pc, #256]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a3f      	ldr	r2, [pc, #252]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 800488a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800488e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004890:	f7fd fb12 	bl	8001eb8 <HAL_GetTick>
 8004894:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004896:	e009      	b.n	80048ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004898:	f7fd fb0e 	bl	8001eb8 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d902      	bls.n	80048ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	73fb      	strb	r3, [r7, #15]
        break;
 80048aa:	e005      	b.n	80048b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048ac:	4b36      	ldr	r3, [pc, #216]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1ef      	bne.n	8004898 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d15f      	bne.n	800497e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d110      	bne.n	80048e6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048c4:	4b30      	ldr	r3, [pc, #192]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80048cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6892      	ldr	r2, [r2, #8]
 80048d4:	0211      	lsls	r1, r2, #8
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	68d2      	ldr	r2, [r2, #12]
 80048da:	06d2      	lsls	r2, r2, #27
 80048dc:	430a      	orrs	r2, r1
 80048de:	492a      	ldr	r1, [pc, #168]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	610b      	str	r3, [r1, #16]
 80048e4:	e027      	b.n	8004936 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d112      	bne.n	8004912 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048ec:	4b26      	ldr	r3, [pc, #152]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80048f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6892      	ldr	r2, [r2, #8]
 80048fc:	0211      	lsls	r1, r2, #8
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6912      	ldr	r2, [r2, #16]
 8004902:	0852      	lsrs	r2, r2, #1
 8004904:	3a01      	subs	r2, #1
 8004906:	0552      	lsls	r2, r2, #21
 8004908:	430a      	orrs	r2, r1
 800490a:	491f      	ldr	r1, [pc, #124]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 800490c:	4313      	orrs	r3, r2
 800490e:	610b      	str	r3, [r1, #16]
 8004910:	e011      	b.n	8004936 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004912:	4b1d      	ldr	r3, [pc, #116]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800491a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6892      	ldr	r2, [r2, #8]
 8004922:	0211      	lsls	r1, r2, #8
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6952      	ldr	r2, [r2, #20]
 8004928:	0852      	lsrs	r2, r2, #1
 800492a:	3a01      	subs	r2, #1
 800492c:	0652      	lsls	r2, r2, #25
 800492e:	430a      	orrs	r2, r1
 8004930:	4915      	ldr	r1, [pc, #84]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004932:	4313      	orrs	r3, r2
 8004934:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004936:	4b14      	ldr	r3, [pc, #80]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a13      	ldr	r2, [pc, #76]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 800493c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004940:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004942:	f7fd fab9 	bl	8001eb8 <HAL_GetTick>
 8004946:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004948:	e009      	b.n	800495e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800494a:	f7fd fab5 	bl	8001eb8 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d902      	bls.n	800495e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	73fb      	strb	r3, [r7, #15]
          break;
 800495c:	e005      	b.n	800496a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800495e:	4b0a      	ldr	r3, [pc, #40]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0ef      	beq.n	800494a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d106      	bne.n	800497e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004970:	4b05      	ldr	r3, [pc, #20]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	4903      	ldr	r1, [pc, #12]	@ (8004988 <RCCEx_PLLSAI1_Config+0x1e0>)
 800497a:	4313      	orrs	r3, r2
 800497c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800497e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40021000 	.word	0x40021000

0800498c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e049      	b.n	8004a32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7fd f890 	bl	8001ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3304      	adds	r3, #4
 80049c8:	4619      	mov	r1, r3
 80049ca:	4610      	mov	r0, r2
 80049cc:	f000 fa8c 	bl	8004ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d001      	beq.n	8004a54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e03b      	b.n	8004acc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a19      	ldr	r2, [pc, #100]	@ (8004ad8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d009      	beq.n	8004a8a <HAL_TIM_Base_Start_IT+0x4e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a7e:	d004      	beq.n	8004a8a <HAL_TIM_Base_Start_IT+0x4e>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a15      	ldr	r2, [pc, #84]	@ (8004adc <HAL_TIM_Base_Start_IT+0xa0>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d115      	bne.n	8004ab6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	4b13      	ldr	r3, [pc, #76]	@ (8004ae0 <HAL_TIM_Base_Start_IT+0xa4>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b06      	cmp	r3, #6
 8004a9a:	d015      	beq.n	8004ac8 <HAL_TIM_Base_Start_IT+0x8c>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa2:	d011      	beq.n	8004ac8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab4:	e008      	b.n	8004ac8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0201 	orr.w	r2, r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	e000      	b.n	8004aca <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	40012c00 	.word	0x40012c00
 8004adc:	40014000 	.word	0x40014000
 8004ae0:	00010007 	.word	0x00010007

08004ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d020      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01b      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0202 	mvn.w	r2, #2
 8004b18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f9bc 	bl	8004eac <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f9ae 	bl	8004e98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f9bf 	bl	8004ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d020      	beq.n	8004b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01b      	beq.n	8004b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f06f 0204 	mvn.w	r2, #4
 8004b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f996 	bl	8004eac <HAL_TIM_IC_CaptureCallback>
 8004b80:	e005      	b.n	8004b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f988 	bl	8004e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f999 	bl	8004ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d020      	beq.n	8004be0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01b      	beq.n	8004be0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0208 	mvn.w	r2, #8
 8004bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f970 	bl	8004eac <HAL_TIM_IC_CaptureCallback>
 8004bcc:	e005      	b.n	8004bda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f962 	bl	8004e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f973 	bl	8004ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d020      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f003 0310 	and.w	r3, r3, #16
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01b      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0210 	mvn.w	r2, #16
 8004bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2208      	movs	r2, #8
 8004c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f94a 	bl	8004eac <HAL_TIM_IC_CaptureCallback>
 8004c18:	e005      	b.n	8004c26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f93c 	bl	8004e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f94d 	bl	8004ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00c      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d007      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0201 	mvn.w	r2, #1
 8004c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f91a 	bl	8004e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d104      	bne.n	8004c64 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00c      	beq.n	8004c7e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d007      	beq.n	8004c7e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 faaf 	bl	80051dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00c      	beq.n	8004ca2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d007      	beq.n	8004ca2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 faa7 	bl	80051f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00c      	beq.n	8004cc6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d007      	beq.n	8004cc6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f907 	bl	8004ed4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00c      	beq.n	8004cea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d007      	beq.n	8004cea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f06f 0220 	mvn.w	r2, #32
 8004ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fa6f 	bl	80051c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cea:	bf00      	nop
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b084      	sub	sp, #16
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <HAL_TIM_ConfigClockSource+0x1c>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	e0b6      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x18a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d2c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d30:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d38:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d4a:	d03e      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0xd8>
 8004d4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d50:	f200 8087 	bhi.w	8004e62 <HAL_TIM_ConfigClockSource+0x170>
 8004d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d58:	f000 8086 	beq.w	8004e68 <HAL_TIM_ConfigClockSource+0x176>
 8004d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d60:	d87f      	bhi.n	8004e62 <HAL_TIM_ConfigClockSource+0x170>
 8004d62:	2b70      	cmp	r3, #112	@ 0x70
 8004d64:	d01a      	beq.n	8004d9c <HAL_TIM_ConfigClockSource+0xaa>
 8004d66:	2b70      	cmp	r3, #112	@ 0x70
 8004d68:	d87b      	bhi.n	8004e62 <HAL_TIM_ConfigClockSource+0x170>
 8004d6a:	2b60      	cmp	r3, #96	@ 0x60
 8004d6c:	d050      	beq.n	8004e10 <HAL_TIM_ConfigClockSource+0x11e>
 8004d6e:	2b60      	cmp	r3, #96	@ 0x60
 8004d70:	d877      	bhi.n	8004e62 <HAL_TIM_ConfigClockSource+0x170>
 8004d72:	2b50      	cmp	r3, #80	@ 0x50
 8004d74:	d03c      	beq.n	8004df0 <HAL_TIM_ConfigClockSource+0xfe>
 8004d76:	2b50      	cmp	r3, #80	@ 0x50
 8004d78:	d873      	bhi.n	8004e62 <HAL_TIM_ConfigClockSource+0x170>
 8004d7a:	2b40      	cmp	r3, #64	@ 0x40
 8004d7c:	d058      	beq.n	8004e30 <HAL_TIM_ConfigClockSource+0x13e>
 8004d7e:	2b40      	cmp	r3, #64	@ 0x40
 8004d80:	d86f      	bhi.n	8004e62 <HAL_TIM_ConfigClockSource+0x170>
 8004d82:	2b30      	cmp	r3, #48	@ 0x30
 8004d84:	d064      	beq.n	8004e50 <HAL_TIM_ConfigClockSource+0x15e>
 8004d86:	2b30      	cmp	r3, #48	@ 0x30
 8004d88:	d86b      	bhi.n	8004e62 <HAL_TIM_ConfigClockSource+0x170>
 8004d8a:	2b20      	cmp	r3, #32
 8004d8c:	d060      	beq.n	8004e50 <HAL_TIM_ConfigClockSource+0x15e>
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	d867      	bhi.n	8004e62 <HAL_TIM_ConfigClockSource+0x170>
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d05c      	beq.n	8004e50 <HAL_TIM_ConfigClockSource+0x15e>
 8004d96:	2b10      	cmp	r3, #16
 8004d98:	d05a      	beq.n	8004e50 <HAL_TIM_ConfigClockSource+0x15e>
 8004d9a:	e062      	b.n	8004e62 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dac:	f000 f986 	bl	80050bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004dbe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	609a      	str	r2, [r3, #8]
      break;
 8004dc8:	e04f      	b.n	8004e6a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dda:	f000 f96f 	bl	80050bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dec:	609a      	str	r2, [r3, #8]
      break;
 8004dee:	e03c      	b.n	8004e6a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	f000 f8e3 	bl	8004fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2150      	movs	r1, #80	@ 0x50
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 f93c 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004e0e:	e02c      	b.n	8004e6a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	f000 f902 	bl	8005026 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2160      	movs	r1, #96	@ 0x60
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 f92c 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004e2e:	e01c      	b.n	8004e6a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	f000 f8c3 	bl	8004fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2140      	movs	r1, #64	@ 0x40
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 f91c 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004e4e:	e00c      	b.n	8004e6a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	f000 f913 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004e60:	e003      	b.n	8004e6a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	73fb      	strb	r3, [r7, #15]
      break;
 8004e66:	e000      	b.n	8004e6a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004e68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a30      	ldr	r2, [pc, #192]	@ (8004fbc <TIM_Base_SetConfig+0xd4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d003      	beq.n	8004f08 <TIM_Base_SetConfig+0x20>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f06:	d108      	bne.n	8004f1a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a27      	ldr	r2, [pc, #156]	@ (8004fbc <TIM_Base_SetConfig+0xd4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00b      	beq.n	8004f3a <TIM_Base_SetConfig+0x52>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f28:	d007      	beq.n	8004f3a <TIM_Base_SetConfig+0x52>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a24      	ldr	r2, [pc, #144]	@ (8004fc0 <TIM_Base_SetConfig+0xd8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d003      	beq.n	8004f3a <TIM_Base_SetConfig+0x52>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a23      	ldr	r2, [pc, #140]	@ (8004fc4 <TIM_Base_SetConfig+0xdc>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d108      	bne.n	8004f4c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a12      	ldr	r2, [pc, #72]	@ (8004fbc <TIM_Base_SetConfig+0xd4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d007      	beq.n	8004f88 <TIM_Base_SetConfig+0xa0>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a11      	ldr	r2, [pc, #68]	@ (8004fc0 <TIM_Base_SetConfig+0xd8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d003      	beq.n	8004f88 <TIM_Base_SetConfig+0xa0>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a10      	ldr	r2, [pc, #64]	@ (8004fc4 <TIM_Base_SetConfig+0xdc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d103      	bne.n	8004f90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d105      	bne.n	8004fae <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	f023 0201 	bic.w	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	611a      	str	r2, [r3, #16]
  }
}
 8004fae:	bf00      	nop
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40012c00 	.word	0x40012c00
 8004fc0:	40014000 	.word	0x40014000
 8004fc4:	40014400 	.word	0x40014400

08004fc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f023 0201 	bic.w	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f023 030a 	bic.w	r3, r3, #10
 8005004:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4313      	orrs	r3, r2
 800500c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	621a      	str	r2, [r3, #32]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005026:	b480      	push	{r7}
 8005028:	b087      	sub	sp, #28
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	f023 0210 	bic.w	r2, r3, #16
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005050:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	031b      	lsls	r3, r3, #12
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005062:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	4313      	orrs	r3, r2
 800506c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	621a      	str	r2, [r3, #32]
}
 800507a:	bf00      	nop
 800507c:	371c      	adds	r7, #28
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005086:	b480      	push	{r7}
 8005088:	b085      	sub	sp, #20
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800509c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f043 0307 	orr.w	r3, r3, #7
 80050a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	609a      	str	r2, [r3, #8]
}
 80050b0:	bf00      	nop
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	021a      	lsls	r2, r3, #8
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	431a      	orrs	r2, r3
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	609a      	str	r2, [r3, #8]
}
 80050f0:	bf00      	nop
 80050f2:	371c      	adds	r7, #28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005110:	2302      	movs	r3, #2
 8005112:	e04f      	b.n	80051b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a21      	ldr	r2, [pc, #132]	@ (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d108      	bne.n	8005150 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005144:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	4313      	orrs	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005156:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a14      	ldr	r2, [pc, #80]	@ (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d009      	beq.n	8005188 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800517c:	d004      	beq.n	8005188 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a10      	ldr	r2, [pc, #64]	@ (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d10c      	bne.n	80051a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800518e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	4313      	orrs	r3, r2
 8005198:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	40012c00 	.word	0x40012c00
 80051c4:	40014000 	.word	0x40014000

080051c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e040      	b.n	8005298 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800521a:	2b00      	cmp	r3, #0
 800521c:	d106      	bne.n	800522c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7fc fcaa 	bl	8001b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2224      	movs	r2, #36	@ 0x24
 8005230:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0201 	bic.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fe50 	bl	8005ef0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fc21 	bl	8005a98 <UART_SetConfig>
 8005256:	4603      	mov	r3, r0
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e01b      	b.n	8005298 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800526e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800527e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0201 	orr.w	r2, r2, #1
 800528e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fecf 	bl	8006034 <UART_CheckIdleState>
 8005296:	4603      	mov	r3, r0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08a      	sub	sp, #40	@ 0x28
 80052a4:	af02      	add	r7, sp, #8
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	603b      	str	r3, [r7, #0]
 80052ac:	4613      	mov	r3, r2
 80052ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d177      	bne.n	80053a8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d002      	beq.n	80052c4 <HAL_UART_Transmit+0x24>
 80052be:	88fb      	ldrh	r3, [r7, #6]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e070      	b.n	80053aa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2221      	movs	r2, #33	@ 0x21
 80052d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052d6:	f7fc fdef 	bl	8001eb8 <HAL_GetTick>
 80052da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	88fa      	ldrh	r2, [r7, #6]
 80052e0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	88fa      	ldrh	r2, [r7, #6]
 80052e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052f4:	d108      	bne.n	8005308 <HAL_UART_Transmit+0x68>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d104      	bne.n	8005308 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80052fe:	2300      	movs	r3, #0
 8005300:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	61bb      	str	r3, [r7, #24]
 8005306:	e003      	b.n	8005310 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800530c:	2300      	movs	r3, #0
 800530e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005310:	e02f      	b.n	8005372 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2200      	movs	r2, #0
 800531a:	2180      	movs	r1, #128	@ 0x80
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 ff31 	bl	8006184 <UART_WaitOnFlagUntilTimeout>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d004      	beq.n	8005332 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2220      	movs	r2, #32
 800532c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e03b      	b.n	80053aa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10b      	bne.n	8005350 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	881a      	ldrh	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005344:	b292      	uxth	r2, r2
 8005346:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	3302      	adds	r3, #2
 800534c:	61bb      	str	r3, [r7, #24]
 800534e:	e007      	b.n	8005360 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	781a      	ldrb	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	3301      	adds	r3, #1
 800535e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005366:	b29b      	uxth	r3, r3
 8005368:	3b01      	subs	r3, #1
 800536a:	b29a      	uxth	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005378:	b29b      	uxth	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1c9      	bne.n	8005312 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2200      	movs	r2, #0
 8005386:	2140      	movs	r1, #64	@ 0x40
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 fefb 	bl	8006184 <UART_WaitOnFlagUntilTimeout>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d004      	beq.n	800539e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e005      	b.n	80053aa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2220      	movs	r2, #32
 80053a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	e000      	b.n	80053aa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80053a8:	2302      	movs	r3, #2
  }
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3720      	adds	r7, #32
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08a      	sub	sp, #40	@ 0x28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	4613      	mov	r3, r2
 80053c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d137      	bne.n	800543c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <HAL_UART_Receive_IT+0x24>
 80053d2:	88fb      	ldrh	r3, [r7, #6]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e030      	b.n	800543e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a18      	ldr	r2, [pc, #96]	@ (8005448 <HAL_UART_Receive_IT+0x94>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d01f      	beq.n	800542c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d018      	beq.n	800542c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	e853 3f00 	ldrex	r3, [r3]
 8005406:	613b      	str	r3, [r7, #16]
   return(result);
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800540e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	461a      	mov	r2, r3
 8005416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005418:	623b      	str	r3, [r7, #32]
 800541a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	69f9      	ldr	r1, [r7, #28]
 800541e:	6a3a      	ldr	r2, [r7, #32]
 8005420:	e841 2300 	strex	r3, r2, [r1]
 8005424:	61bb      	str	r3, [r7, #24]
   return(result);
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e6      	bne.n	80053fa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800542c:	88fb      	ldrh	r3, [r7, #6]
 800542e:	461a      	mov	r2, r3
 8005430:	68b9      	ldr	r1, [r7, #8]
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 ff14 	bl	8006260 <UART_Start_Receive_IT>
 8005438:	4603      	mov	r3, r0
 800543a:	e000      	b.n	800543e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800543c:	2302      	movs	r3, #2
  }
}
 800543e:	4618      	mov	r0, r3
 8005440:	3728      	adds	r7, #40	@ 0x28
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40008000 	.word	0x40008000

0800544c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b0ba      	sub	sp, #232	@ 0xe8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005472:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005476:	f640 030f 	movw	r3, #2063	@ 0x80f
 800547a:	4013      	ands	r3, r2
 800547c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005480:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005484:	2b00      	cmp	r3, #0
 8005486:	d115      	bne.n	80054b4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800548c:	f003 0320 	and.w	r3, r3, #32
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00f      	beq.n	80054b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005498:	f003 0320 	and.w	r3, r3, #32
 800549c:	2b00      	cmp	r3, #0
 800549e:	d009      	beq.n	80054b4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 82ca 	beq.w	8005a3e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	4798      	blx	r3
      }
      return;
 80054b2:	e2c4      	b.n	8005a3e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80054b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 8117 	beq.w	80056ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80054be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80054ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80054ce:	4b85      	ldr	r3, [pc, #532]	@ (80056e4 <HAL_UART_IRQHandler+0x298>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 810a 	beq.w	80056ec <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d011      	beq.n	8005508 <HAL_UART_IRQHandler+0xbc>
 80054e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00b      	beq.n	8005508 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2201      	movs	r2, #1
 80054f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054fe:	f043 0201 	orr.w	r2, r3, #1
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d011      	beq.n	8005538 <HAL_UART_IRQHandler+0xec>
 8005514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00b      	beq.n	8005538 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2202      	movs	r2, #2
 8005526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800552e:	f043 0204 	orr.w	r2, r3, #4
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	d011      	beq.n	8005568 <HAL_UART_IRQHandler+0x11c>
 8005544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00b      	beq.n	8005568 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2204      	movs	r2, #4
 8005556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800555e:	f043 0202 	orr.w	r2, r3, #2
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b00      	cmp	r3, #0
 8005572:	d017      	beq.n	80055a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b00      	cmp	r3, #0
 800557e:	d105      	bne.n	800558c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005584:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00b      	beq.n	80055a4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2208      	movs	r2, #8
 8005592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800559a:	f043 0208 	orr.w	r2, r3, #8
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80055a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d012      	beq.n	80055d6 <HAL_UART_IRQHandler+0x18a>
 80055b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00c      	beq.n	80055d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055cc:	f043 0220 	orr.w	r2, r3, #32
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 8230 	beq.w	8005a42 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80055e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00d      	beq.n	800560a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055f2:	f003 0320 	and.w	r3, r3, #32
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d007      	beq.n	800560a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005610:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800561e:	2b40      	cmp	r3, #64	@ 0x40
 8005620:	d005      	beq.n	800562e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005626:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800562a:	2b00      	cmp	r3, #0
 800562c:	d04f      	beq.n	80056ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fedc 	bl	80063ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563e:	2b40      	cmp	r3, #64	@ 0x40
 8005640:	d141      	bne.n	80056c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	3308      	adds	r3, #8
 8005648:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005650:	e853 3f00 	ldrex	r3, [r3]
 8005654:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005658:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800565c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005660:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3308      	adds	r3, #8
 800566a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800566e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005672:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005676:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800567a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1d9      	bne.n	8005642 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005692:	2b00      	cmp	r3, #0
 8005694:	d013      	beq.n	80056be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800569a:	4a13      	ldr	r2, [pc, #76]	@ (80056e8 <HAL_UART_IRQHandler+0x29c>)
 800569c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fd fdf9 	bl	800329a <HAL_DMA_Abort_IT>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d017      	beq.n	80056de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80056b8:	4610      	mov	r0, r2
 80056ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056bc:	e00f      	b.n	80056de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f9d4 	bl	8005a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c4:	e00b      	b.n	80056de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f9d0 	bl	8005a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056cc:	e007      	b.n	80056de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f9cc 	bl	8005a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80056dc:	e1b1      	b.n	8005a42 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056de:	bf00      	nop
    return;
 80056e0:	e1af      	b.n	8005a42 <HAL_UART_IRQHandler+0x5f6>
 80056e2:	bf00      	nop
 80056e4:	04000120 	.word	0x04000120
 80056e8:	080064b5 	.word	0x080064b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	f040 816a 	bne.w	80059ca <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80056f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056fa:	f003 0310 	and.w	r3, r3, #16
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 8163 	beq.w	80059ca <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005708:	f003 0310 	and.w	r3, r3, #16
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 815c 	beq.w	80059ca <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2210      	movs	r2, #16
 8005718:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005724:	2b40      	cmp	r3, #64	@ 0x40
 8005726:	f040 80d4 	bne.w	80058d2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005736:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 80ad 	beq.w	800589a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800574a:	429a      	cmp	r2, r3
 800574c:	f080 80a5 	bcs.w	800589a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005756:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b00      	cmp	r3, #0
 8005768:	f040 8086 	bne.w	8005878 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005780:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005788:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	461a      	mov	r2, r3
 8005792:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005796:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800579a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80057a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80057a6:	e841 2300 	strex	r3, r2, [r1]
 80057aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80057ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1da      	bne.n	800576c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3308      	adds	r3, #8
 80057bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80057c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057c8:	f023 0301 	bic.w	r3, r3, #1
 80057cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3308      	adds	r3, #8
 80057d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80057de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80057e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80057e6:	e841 2300 	strex	r3, r2, [r1]
 80057ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80057ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1e1      	bne.n	80057b6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3308      	adds	r3, #8
 80057f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057fc:	e853 3f00 	ldrex	r3, [r3]
 8005800:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005802:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005808:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	3308      	adds	r3, #8
 8005812:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005816:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005818:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800581c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1e3      	bne.n	80057f2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2220      	movs	r2, #32
 800582e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005848:	f023 0310 	bic.w	r3, r3, #16
 800584c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	461a      	mov	r2, r3
 8005856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800585a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800585c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005860:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005862:	e841 2300 	strex	r3, r2, [r1]
 8005866:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005868:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1e4      	bne.n	8005838 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005872:	4618      	mov	r0, r3
 8005874:	f7fd fcd3 	bl	800321e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800588a:	b29b      	uxth	r3, r3
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	b29b      	uxth	r3, r3
 8005890:	4619      	mov	r1, r3
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f8f4 	bl	8005a80 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005898:	e0d5      	b.n	8005a46 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80058a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058a4:	429a      	cmp	r2, r3
 80058a6:	f040 80ce 	bne.w	8005a46 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0320 	and.w	r3, r3, #32
 80058b6:	2b20      	cmp	r3, #32
 80058b8:	f040 80c5 	bne.w	8005a46 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80058c8:	4619      	mov	r1, r3
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f8d8 	bl	8005a80 <HAL_UARTEx_RxEventCallback>
      return;
 80058d0:	e0b9      	b.n	8005a46 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80058de:	b29b      	uxth	r3, r3
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 80ab 	beq.w	8005a4a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80058f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 80a6 	beq.w	8005a4a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005906:	e853 3f00 	ldrex	r3, [r3]
 800590a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800590c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800590e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005912:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005920:	647b      	str	r3, [r7, #68]	@ 0x44
 8005922:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005924:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005926:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005928:	e841 2300 	strex	r3, r2, [r1]
 800592c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800592e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1e4      	bne.n	80058fe <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	3308      	adds	r3, #8
 800593a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593e:	e853 3f00 	ldrex	r3, [r3]
 8005942:	623b      	str	r3, [r7, #32]
   return(result);
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	f023 0301 	bic.w	r3, r3, #1
 800594a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3308      	adds	r3, #8
 8005954:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005958:	633a      	str	r2, [r7, #48]	@ 0x30
 800595a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800595e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005960:	e841 2300 	strex	r3, r2, [r1]
 8005964:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e3      	bne.n	8005934 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2220      	movs	r2, #32
 8005970:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	60fb      	str	r3, [r7, #12]
   return(result);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f023 0310 	bic.w	r3, r3, #16
 8005994:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80059a2:	61fb      	str	r3, [r7, #28]
 80059a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	69b9      	ldr	r1, [r7, #24]
 80059a8:	69fa      	ldr	r2, [r7, #28]
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	617b      	str	r3, [r7, #20]
   return(result);
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1e4      	bne.n	8005980 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2202      	movs	r2, #2
 80059ba:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f85c 	bl	8005a80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059c8:	e03f      	b.n	8005a4a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80059ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00e      	beq.n	80059f4 <HAL_UART_IRQHandler+0x5a8>
 80059d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d008      	beq.n	80059f4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80059ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 ff5d 	bl	80068ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059f2:	e02d      	b.n	8005a50 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80059f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00e      	beq.n	8005a1e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d008      	beq.n	8005a1e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d01c      	beq.n	8005a4e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	4798      	blx	r3
    }
    return;
 8005a1c:	e017      	b.n	8005a4e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d012      	beq.n	8005a50 <HAL_UART_IRQHandler+0x604>
 8005a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00c      	beq.n	8005a50 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fd52 	bl	80064e0 <UART_EndTransmit_IT>
    return;
 8005a3c:	e008      	b.n	8005a50 <HAL_UART_IRQHandler+0x604>
      return;
 8005a3e:	bf00      	nop
 8005a40:	e006      	b.n	8005a50 <HAL_UART_IRQHandler+0x604>
    return;
 8005a42:	bf00      	nop
 8005a44:	e004      	b.n	8005a50 <HAL_UART_IRQHandler+0x604>
      return;
 8005a46:	bf00      	nop
 8005a48:	e002      	b.n	8005a50 <HAL_UART_IRQHandler+0x604>
      return;
 8005a4a:	bf00      	nop
 8005a4c:	e000      	b.n	8005a50 <HAL_UART_IRQHandler+0x604>
    return;
 8005a4e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005a50:	37e8      	adds	r7, #232	@ 0xe8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop

08005a58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a9c:	b08a      	sub	sp, #40	@ 0x28
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	4bb4      	ldr	r3, [pc, #720]	@ (8005d98 <UART_SetConfig+0x300>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	6812      	ldr	r2, [r2, #0]
 8005ace:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4aa9      	ldr	r2, [pc, #676]	@ (8005d9c <UART_SetConfig+0x304>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d004      	beq.n	8005b04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b00:	4313      	orrs	r3, r2
 8005b02:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b14:	430a      	orrs	r2, r1
 8005b16:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4aa0      	ldr	r2, [pc, #640]	@ (8005da0 <UART_SetConfig+0x308>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d126      	bne.n	8005b70 <UART_SetConfig+0xd8>
 8005b22:	4ba0      	ldr	r3, [pc, #640]	@ (8005da4 <UART_SetConfig+0x30c>)
 8005b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b28:	f003 0303 	and.w	r3, r3, #3
 8005b2c:	2b03      	cmp	r3, #3
 8005b2e:	d81b      	bhi.n	8005b68 <UART_SetConfig+0xd0>
 8005b30:	a201      	add	r2, pc, #4	@ (adr r2, 8005b38 <UART_SetConfig+0xa0>)
 8005b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b36:	bf00      	nop
 8005b38:	08005b49 	.word	0x08005b49
 8005b3c:	08005b59 	.word	0x08005b59
 8005b40:	08005b51 	.word	0x08005b51
 8005b44:	08005b61 	.word	0x08005b61
 8005b48:	2301      	movs	r3, #1
 8005b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b4e:	e080      	b.n	8005c52 <UART_SetConfig+0x1ba>
 8005b50:	2302      	movs	r3, #2
 8005b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b56:	e07c      	b.n	8005c52 <UART_SetConfig+0x1ba>
 8005b58:	2304      	movs	r3, #4
 8005b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b5e:	e078      	b.n	8005c52 <UART_SetConfig+0x1ba>
 8005b60:	2308      	movs	r3, #8
 8005b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b66:	e074      	b.n	8005c52 <UART_SetConfig+0x1ba>
 8005b68:	2310      	movs	r3, #16
 8005b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b6e:	e070      	b.n	8005c52 <UART_SetConfig+0x1ba>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a8c      	ldr	r2, [pc, #560]	@ (8005da8 <UART_SetConfig+0x310>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d138      	bne.n	8005bec <UART_SetConfig+0x154>
 8005b7a:	4b8a      	ldr	r3, [pc, #552]	@ (8005da4 <UART_SetConfig+0x30c>)
 8005b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b80:	f003 030c 	and.w	r3, r3, #12
 8005b84:	2b0c      	cmp	r3, #12
 8005b86:	d82d      	bhi.n	8005be4 <UART_SetConfig+0x14c>
 8005b88:	a201      	add	r2, pc, #4	@ (adr r2, 8005b90 <UART_SetConfig+0xf8>)
 8005b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8e:	bf00      	nop
 8005b90:	08005bc5 	.word	0x08005bc5
 8005b94:	08005be5 	.word	0x08005be5
 8005b98:	08005be5 	.word	0x08005be5
 8005b9c:	08005be5 	.word	0x08005be5
 8005ba0:	08005bd5 	.word	0x08005bd5
 8005ba4:	08005be5 	.word	0x08005be5
 8005ba8:	08005be5 	.word	0x08005be5
 8005bac:	08005be5 	.word	0x08005be5
 8005bb0:	08005bcd 	.word	0x08005bcd
 8005bb4:	08005be5 	.word	0x08005be5
 8005bb8:	08005be5 	.word	0x08005be5
 8005bbc:	08005be5 	.word	0x08005be5
 8005bc0:	08005bdd 	.word	0x08005bdd
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bca:	e042      	b.n	8005c52 <UART_SetConfig+0x1ba>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bd2:	e03e      	b.n	8005c52 <UART_SetConfig+0x1ba>
 8005bd4:	2304      	movs	r3, #4
 8005bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bda:	e03a      	b.n	8005c52 <UART_SetConfig+0x1ba>
 8005bdc:	2308      	movs	r3, #8
 8005bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005be2:	e036      	b.n	8005c52 <UART_SetConfig+0x1ba>
 8005be4:	2310      	movs	r3, #16
 8005be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bea:	e032      	b.n	8005c52 <UART_SetConfig+0x1ba>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a6a      	ldr	r2, [pc, #424]	@ (8005d9c <UART_SetConfig+0x304>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d12a      	bne.n	8005c4c <UART_SetConfig+0x1b4>
 8005bf6:	4b6b      	ldr	r3, [pc, #428]	@ (8005da4 <UART_SetConfig+0x30c>)
 8005bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bfc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c04:	d01a      	beq.n	8005c3c <UART_SetConfig+0x1a4>
 8005c06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c0a:	d81b      	bhi.n	8005c44 <UART_SetConfig+0x1ac>
 8005c0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c10:	d00c      	beq.n	8005c2c <UART_SetConfig+0x194>
 8005c12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c16:	d815      	bhi.n	8005c44 <UART_SetConfig+0x1ac>
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <UART_SetConfig+0x18c>
 8005c1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c20:	d008      	beq.n	8005c34 <UART_SetConfig+0x19c>
 8005c22:	e00f      	b.n	8005c44 <UART_SetConfig+0x1ac>
 8005c24:	2300      	movs	r3, #0
 8005c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c2a:	e012      	b.n	8005c52 <UART_SetConfig+0x1ba>
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c32:	e00e      	b.n	8005c52 <UART_SetConfig+0x1ba>
 8005c34:	2304      	movs	r3, #4
 8005c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c3a:	e00a      	b.n	8005c52 <UART_SetConfig+0x1ba>
 8005c3c:	2308      	movs	r3, #8
 8005c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c42:	e006      	b.n	8005c52 <UART_SetConfig+0x1ba>
 8005c44:	2310      	movs	r3, #16
 8005c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c4a:	e002      	b.n	8005c52 <UART_SetConfig+0x1ba>
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a51      	ldr	r2, [pc, #324]	@ (8005d9c <UART_SetConfig+0x304>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d17a      	bne.n	8005d52 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d824      	bhi.n	8005cae <UART_SetConfig+0x216>
 8005c64:	a201      	add	r2, pc, #4	@ (adr r2, 8005c6c <UART_SetConfig+0x1d4>)
 8005c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6a:	bf00      	nop
 8005c6c:	08005c91 	.word	0x08005c91
 8005c70:	08005caf 	.word	0x08005caf
 8005c74:	08005c99 	.word	0x08005c99
 8005c78:	08005caf 	.word	0x08005caf
 8005c7c:	08005c9f 	.word	0x08005c9f
 8005c80:	08005caf 	.word	0x08005caf
 8005c84:	08005caf 	.word	0x08005caf
 8005c88:	08005caf 	.word	0x08005caf
 8005c8c:	08005ca7 	.word	0x08005ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c90:	f7fe fb08 	bl	80042a4 <HAL_RCC_GetPCLK1Freq>
 8005c94:	61f8      	str	r0, [r7, #28]
        break;
 8005c96:	e010      	b.n	8005cba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c98:	4b44      	ldr	r3, [pc, #272]	@ (8005dac <UART_SetConfig+0x314>)
 8005c9a:	61fb      	str	r3, [r7, #28]
        break;
 8005c9c:	e00d      	b.n	8005cba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c9e:	f7fe fa69 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 8005ca2:	61f8      	str	r0, [r7, #28]
        break;
 8005ca4:	e009      	b.n	8005cba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005caa:	61fb      	str	r3, [r7, #28]
        break;
 8005cac:	e005      	b.n	8005cba <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005cb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 8107 	beq.w	8005ed0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	4413      	add	r3, r2
 8005ccc:	69fa      	ldr	r2, [r7, #28]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d305      	bcc.n	8005cde <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005cd8:	69fa      	ldr	r2, [r7, #28]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d903      	bls.n	8005ce6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ce4:	e0f4      	b.n	8005ed0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	461c      	mov	r4, r3
 8005cec:	4615      	mov	r5, r2
 8005cee:	f04f 0200 	mov.w	r2, #0
 8005cf2:	f04f 0300 	mov.w	r3, #0
 8005cf6:	022b      	lsls	r3, r5, #8
 8005cf8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005cfc:	0222      	lsls	r2, r4, #8
 8005cfe:	68f9      	ldr	r1, [r7, #12]
 8005d00:	6849      	ldr	r1, [r1, #4]
 8005d02:	0849      	lsrs	r1, r1, #1
 8005d04:	2000      	movs	r0, #0
 8005d06:	4688      	mov	r8, r1
 8005d08:	4681      	mov	r9, r0
 8005d0a:	eb12 0a08 	adds.w	sl, r2, r8
 8005d0e:	eb43 0b09 	adc.w	fp, r3, r9
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	603b      	str	r3, [r7, #0]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d20:	4650      	mov	r0, sl
 8005d22:	4659      	mov	r1, fp
 8005d24:	f7fa ffb0 	bl	8000c88 <__aeabi_uldivmod>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d36:	d308      	bcc.n	8005d4a <UART_SetConfig+0x2b2>
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d3e:	d204      	bcs.n	8005d4a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	60da      	str	r2, [r3, #12]
 8005d48:	e0c2      	b.n	8005ed0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d50:	e0be      	b.n	8005ed0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d5a:	d16a      	bne.n	8005e32 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d834      	bhi.n	8005dce <UART_SetConfig+0x336>
 8005d64:	a201      	add	r2, pc, #4	@ (adr r2, 8005d6c <UART_SetConfig+0x2d4>)
 8005d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6a:	bf00      	nop
 8005d6c:	08005d91 	.word	0x08005d91
 8005d70:	08005db1 	.word	0x08005db1
 8005d74:	08005db9 	.word	0x08005db9
 8005d78:	08005dcf 	.word	0x08005dcf
 8005d7c:	08005dbf 	.word	0x08005dbf
 8005d80:	08005dcf 	.word	0x08005dcf
 8005d84:	08005dcf 	.word	0x08005dcf
 8005d88:	08005dcf 	.word	0x08005dcf
 8005d8c:	08005dc7 	.word	0x08005dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d90:	f7fe fa88 	bl	80042a4 <HAL_RCC_GetPCLK1Freq>
 8005d94:	61f8      	str	r0, [r7, #28]
        break;
 8005d96:	e020      	b.n	8005dda <UART_SetConfig+0x342>
 8005d98:	efff69f3 	.word	0xefff69f3
 8005d9c:	40008000 	.word	0x40008000
 8005da0:	40013800 	.word	0x40013800
 8005da4:	40021000 	.word	0x40021000
 8005da8:	40004400 	.word	0x40004400
 8005dac:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005db0:	f7fe fa8e 	bl	80042d0 <HAL_RCC_GetPCLK2Freq>
 8005db4:	61f8      	str	r0, [r7, #28]
        break;
 8005db6:	e010      	b.n	8005dda <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005db8:	4b4c      	ldr	r3, [pc, #304]	@ (8005eec <UART_SetConfig+0x454>)
 8005dba:	61fb      	str	r3, [r7, #28]
        break;
 8005dbc:	e00d      	b.n	8005dda <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dbe:	f7fe f9d9 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 8005dc2:	61f8      	str	r0, [r7, #28]
        break;
 8005dc4:	e009      	b.n	8005dda <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dca:	61fb      	str	r3, [r7, #28]
        break;
 8005dcc:	e005      	b.n	8005dda <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005dd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d077      	beq.n	8005ed0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	005a      	lsls	r2, r3, #1
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	085b      	lsrs	r3, r3, #1
 8005dea:	441a      	add	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	2b0f      	cmp	r3, #15
 8005dfa:	d916      	bls.n	8005e2a <UART_SetConfig+0x392>
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e02:	d212      	bcs.n	8005e2a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	f023 030f 	bic.w	r3, r3, #15
 8005e0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	085b      	lsrs	r3, r3, #1
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	8afb      	ldrh	r3, [r7, #22]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	8afa      	ldrh	r2, [r7, #22]
 8005e26:	60da      	str	r2, [r3, #12]
 8005e28:	e052      	b.n	8005ed0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005e30:	e04e      	b.n	8005ed0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e36:	2b08      	cmp	r3, #8
 8005e38:	d827      	bhi.n	8005e8a <UART_SetConfig+0x3f2>
 8005e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e40 <UART_SetConfig+0x3a8>)
 8005e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e40:	08005e65 	.word	0x08005e65
 8005e44:	08005e6d 	.word	0x08005e6d
 8005e48:	08005e75 	.word	0x08005e75
 8005e4c:	08005e8b 	.word	0x08005e8b
 8005e50:	08005e7b 	.word	0x08005e7b
 8005e54:	08005e8b 	.word	0x08005e8b
 8005e58:	08005e8b 	.word	0x08005e8b
 8005e5c:	08005e8b 	.word	0x08005e8b
 8005e60:	08005e83 	.word	0x08005e83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e64:	f7fe fa1e 	bl	80042a4 <HAL_RCC_GetPCLK1Freq>
 8005e68:	61f8      	str	r0, [r7, #28]
        break;
 8005e6a:	e014      	b.n	8005e96 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e6c:	f7fe fa30 	bl	80042d0 <HAL_RCC_GetPCLK2Freq>
 8005e70:	61f8      	str	r0, [r7, #28]
        break;
 8005e72:	e010      	b.n	8005e96 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e74:	4b1d      	ldr	r3, [pc, #116]	@ (8005eec <UART_SetConfig+0x454>)
 8005e76:	61fb      	str	r3, [r7, #28]
        break;
 8005e78:	e00d      	b.n	8005e96 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e7a:	f7fe f97b 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 8005e7e:	61f8      	str	r0, [r7, #28]
        break;
 8005e80:	e009      	b.n	8005e96 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e86:	61fb      	str	r3, [r7, #28]
        break;
 8005e88:	e005      	b.n	8005e96 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005e94:	bf00      	nop
    }

    if (pclk != 0U)
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d019      	beq.n	8005ed0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	085a      	lsrs	r2, r3, #1
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	441a      	add	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	2b0f      	cmp	r3, #15
 8005eb4:	d909      	bls.n	8005eca <UART_SetConfig+0x432>
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ebc:	d205      	bcs.n	8005eca <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	60da      	str	r2, [r3, #12]
 8005ec8:	e002      	b.n	8005ed0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005edc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3728      	adds	r7, #40	@ 0x28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eea:	bf00      	nop
 8005eec:	00f42400 	.word	0x00f42400

08005ef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efc:	f003 0308 	and.w	r3, r3, #8
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00a      	beq.n	8005f3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00a      	beq.n	8005f5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f84:	f003 0310 	and.w	r3, r3, #16
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00a      	beq.n	8005fa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01a      	beq.n	8006006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fee:	d10a      	bne.n	8006006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	605a      	str	r2, [r3, #4]
  }
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b098      	sub	sp, #96	@ 0x60
 8006038:	af02      	add	r7, sp, #8
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006044:	f7fb ff38 	bl	8001eb8 <HAL_GetTick>
 8006048:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0308 	and.w	r3, r3, #8
 8006054:	2b08      	cmp	r3, #8
 8006056:	d12e      	bne.n	80060b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006058:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006060:	2200      	movs	r2, #0
 8006062:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f88c 	bl	8006184 <UART_WaitOnFlagUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d021      	beq.n	80060b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800607a:	e853 3f00 	ldrex	r3, [r3]
 800607e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006082:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006086:	653b      	str	r3, [r7, #80]	@ 0x50
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	461a      	mov	r2, r3
 800608e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006090:	647b      	str	r3, [r7, #68]	@ 0x44
 8006092:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006096:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800609e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e6      	bne.n	8006072 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e062      	b.n	800617c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d149      	bne.n	8006158 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060cc:	2200      	movs	r2, #0
 80060ce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f856 	bl	8006184 <UART_WaitOnFlagUntilTimeout>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d03c      	beq.n	8006158 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	623b      	str	r3, [r7, #32]
   return(result);
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	461a      	mov	r2, r3
 80060fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80060fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006102:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800610a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e6      	bne.n	80060de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3308      	adds	r3, #8
 8006116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	e853 3f00 	ldrex	r3, [r3]
 800611e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0301 	bic.w	r3, r3, #1
 8006126:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3308      	adds	r3, #8
 800612e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006130:	61fa      	str	r2, [r7, #28]
 8006132:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	69b9      	ldr	r1, [r7, #24]
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	617b      	str	r3, [r7, #20]
   return(result);
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e5      	bne.n	8006110 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2220      	movs	r2, #32
 8006148:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e011      	b.n	800617c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2220      	movs	r2, #32
 800615c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2220      	movs	r2, #32
 8006162:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3758      	adds	r7, #88	@ 0x58
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	603b      	str	r3, [r7, #0]
 8006190:	4613      	mov	r3, r2
 8006192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006194:	e04f      	b.n	8006236 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800619c:	d04b      	beq.n	8006236 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800619e:	f7fb fe8b 	bl	8001eb8 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d302      	bcc.n	80061b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e04e      	b.n	8006256 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0304 	and.w	r3, r3, #4
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d037      	beq.n	8006236 <UART_WaitOnFlagUntilTimeout+0xb2>
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b80      	cmp	r3, #128	@ 0x80
 80061ca:	d034      	beq.n	8006236 <UART_WaitOnFlagUntilTimeout+0xb2>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2b40      	cmp	r3, #64	@ 0x40
 80061d0:	d031      	beq.n	8006236 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	f003 0308 	and.w	r3, r3, #8
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d110      	bne.n	8006202 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2208      	movs	r2, #8
 80061e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 f8ff 	bl	80063ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2208      	movs	r2, #8
 80061f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e029      	b.n	8006256 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800620c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006210:	d111      	bne.n	8006236 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800621a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 f8e5 	bl	80063ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2220      	movs	r2, #32
 8006226:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e00f      	b.n	8006256 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69da      	ldr	r2, [r3, #28]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	4013      	ands	r3, r2
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	429a      	cmp	r2, r3
 8006244:	bf0c      	ite	eq
 8006246:	2301      	moveq	r3, #1
 8006248:	2300      	movne	r3, #0
 800624a:	b2db      	uxtb	r3, r3
 800624c:	461a      	mov	r2, r3
 800624e:	79fb      	ldrb	r3, [r7, #7]
 8006250:	429a      	cmp	r2, r3
 8006252:	d0a0      	beq.n	8006196 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006260:	b480      	push	{r7}
 8006262:	b097      	sub	sp, #92	@ 0x5c
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	4613      	mov	r3, r2
 800626c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	88fa      	ldrh	r2, [r7, #6]
 8006278:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	88fa      	ldrh	r2, [r7, #6]
 8006280:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006292:	d10e      	bne.n	80062b2 <UART_Start_Receive_IT+0x52>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d105      	bne.n	80062a8 <UART_Start_Receive_IT+0x48>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80062a2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062a6:	e02d      	b.n	8006304 <UART_Start_Receive_IT+0xa4>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	22ff      	movs	r2, #255	@ 0xff
 80062ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062b0:	e028      	b.n	8006304 <UART_Start_Receive_IT+0xa4>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10d      	bne.n	80062d6 <UART_Start_Receive_IT+0x76>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d104      	bne.n	80062cc <UART_Start_Receive_IT+0x6c>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	22ff      	movs	r2, #255	@ 0xff
 80062c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062ca:	e01b      	b.n	8006304 <UART_Start_Receive_IT+0xa4>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	227f      	movs	r2, #127	@ 0x7f
 80062d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062d4:	e016      	b.n	8006304 <UART_Start_Receive_IT+0xa4>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062de:	d10d      	bne.n	80062fc <UART_Start_Receive_IT+0x9c>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d104      	bne.n	80062f2 <UART_Start_Receive_IT+0x92>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	227f      	movs	r2, #127	@ 0x7f
 80062ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062f0:	e008      	b.n	8006304 <UART_Start_Receive_IT+0xa4>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	223f      	movs	r2, #63	@ 0x3f
 80062f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062fa:	e003      	b.n	8006304 <UART_Start_Receive_IT+0xa4>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2222      	movs	r2, #34	@ 0x22
 8006310:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3308      	adds	r3, #8
 800631a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800631e:	e853 3f00 	ldrex	r3, [r3]
 8006322:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006326:	f043 0301 	orr.w	r3, r3, #1
 800632a:	657b      	str	r3, [r7, #84]	@ 0x54
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3308      	adds	r3, #8
 8006332:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006334:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006336:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800633a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800633c:	e841 2300 	strex	r3, r2, [r1]
 8006340:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1e5      	bne.n	8006314 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006350:	d107      	bne.n	8006362 <UART_Start_Receive_IT+0x102>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d103      	bne.n	8006362 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4a21      	ldr	r2, [pc, #132]	@ (80063e4 <UART_Start_Receive_IT+0x184>)
 800635e:	669a      	str	r2, [r3, #104]	@ 0x68
 8006360:	e002      	b.n	8006368 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	4a20      	ldr	r2, [pc, #128]	@ (80063e8 <UART_Start_Receive_IT+0x188>)
 8006366:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d019      	beq.n	80063a4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006380:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006384:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800638e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006390:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006394:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800639c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e6      	bne.n	8006370 <UART_Start_Receive_IT+0x110>
 80063a2:	e018      	b.n	80063d6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	e853 3f00 	ldrex	r3, [r3]
 80063b0:	613b      	str	r3, [r7, #16]
   return(result);
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	f043 0320 	orr.w	r3, r3, #32
 80063b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	461a      	mov	r2, r3
 80063c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063c2:	623b      	str	r3, [r7, #32]
 80063c4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c6:	69f9      	ldr	r1, [r7, #28]
 80063c8:	6a3a      	ldr	r2, [r7, #32]
 80063ca:	e841 2300 	strex	r3, r2, [r1]
 80063ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1e6      	bne.n	80063a4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	375c      	adds	r7, #92	@ 0x5c
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	080066f1 	.word	0x080066f1
 80063e8:	08006535 	.word	0x08006535

080063ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b095      	sub	sp, #84	@ 0x54
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063fc:	e853 3f00 	ldrex	r3, [r3]
 8006400:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006404:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006408:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006412:	643b      	str	r3, [r7, #64]	@ 0x40
 8006414:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006416:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006418:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800641a:	e841 2300 	strex	r3, r2, [r1]
 800641e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1e6      	bne.n	80063f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3308      	adds	r3, #8
 800642c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	61fb      	str	r3, [r7, #28]
   return(result);
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	f023 0301 	bic.w	r3, r3, #1
 800643c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3308      	adds	r3, #8
 8006444:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006446:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006448:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800644c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e5      	bne.n	8006426 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800645e:	2b01      	cmp	r3, #1
 8006460:	d118      	bne.n	8006494 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	e853 3f00 	ldrex	r3, [r3]
 800646e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f023 0310 	bic.w	r3, r3, #16
 8006476:	647b      	str	r3, [r7, #68]	@ 0x44
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	461a      	mov	r2, r3
 800647e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006480:	61bb      	str	r3, [r7, #24]
 8006482:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006484:	6979      	ldr	r1, [r7, #20]
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	e841 2300 	strex	r3, r2, [r1]
 800648c:	613b      	str	r3, [r7, #16]
   return(result);
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1e6      	bne.n	8006462 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2220      	movs	r2, #32
 8006498:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80064a8:	bf00      	nop
 80064aa:	3754      	adds	r7, #84	@ 0x54
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f7ff faca 	bl	8005a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064d8:	bf00      	nop
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	e853 3f00 	ldrex	r3, [r3]
 80064f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064fc:	61fb      	str	r3, [r7, #28]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	61bb      	str	r3, [r7, #24]
 8006508:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	6979      	ldr	r1, [r7, #20]
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	e841 2300 	strex	r3, r2, [r1]
 8006512:	613b      	str	r3, [r7, #16]
   return(result);
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e6      	bne.n	80064e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7ff fa96 	bl	8005a58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800652c:	bf00      	nop
 800652e:	3720      	adds	r7, #32
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b09c      	sub	sp, #112	@ 0x70
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006542:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800654c:	2b22      	cmp	r3, #34	@ 0x22
 800654e:	f040 80be 	bne.w	80066ce <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006558:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800655c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006560:	b2d9      	uxtb	r1, r3
 8006562:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006566:	b2da      	uxtb	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800656c:	400a      	ands	r2, r1
 800656e:	b2d2      	uxtb	r2, r2
 8006570:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006582:	b29b      	uxth	r3, r3
 8006584:	3b01      	subs	r3, #1
 8006586:	b29a      	uxth	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	f040 80a3 	bne.w	80066e2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e6      	bne.n	800659c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3308      	adds	r3, #8
 80065d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d8:	e853 3f00 	ldrex	r3, [r3]
 80065dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80065de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e0:	f023 0301 	bic.w	r3, r3, #1
 80065e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3308      	adds	r3, #8
 80065ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80065ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80065f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065f6:	e841 2300 	strex	r3, r2, [r1]
 80065fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1e5      	bne.n	80065ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2220      	movs	r2, #32
 8006606:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a34      	ldr	r2, [pc, #208]	@ (80066ec <UART_RxISR_8BIT+0x1b8>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d01f      	beq.n	8006660 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d018      	beq.n	8006660 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006636:	e853 3f00 	ldrex	r3, [r3]
 800663a:	623b      	str	r3, [r7, #32]
   return(result);
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006642:	663b      	str	r3, [r7, #96]	@ 0x60
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	461a      	mov	r2, r3
 800664a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800664c:	633b      	str	r3, [r7, #48]	@ 0x30
 800664e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006654:	e841 2300 	strex	r3, r2, [r1]
 8006658:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800665a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e6      	bne.n	800662e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006664:	2b01      	cmp	r3, #1
 8006666:	d12e      	bne.n	80066c6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	e853 3f00 	ldrex	r3, [r3]
 800667a:	60fb      	str	r3, [r7, #12]
   return(result);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f023 0310 	bic.w	r3, r3, #16
 8006682:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	461a      	mov	r2, r3
 800668a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800668c:	61fb      	str	r3, [r7, #28]
 800668e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006690:	69b9      	ldr	r1, [r7, #24]
 8006692:	69fa      	ldr	r2, [r7, #28]
 8006694:	e841 2300 	strex	r3, r2, [r1]
 8006698:	617b      	str	r3, [r7, #20]
   return(result);
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1e6      	bne.n	800666e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	f003 0310 	and.w	r3, r3, #16
 80066aa:	2b10      	cmp	r3, #16
 80066ac:	d103      	bne.n	80066b6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2210      	movs	r2, #16
 80066b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7ff f9de 	bl	8005a80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066c4:	e00d      	b.n	80066e2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7fb f826 	bl	8001718 <HAL_UART_RxCpltCallback>
}
 80066cc:	e009      	b.n	80066e2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	8b1b      	ldrh	r3, [r3, #24]
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0208 	orr.w	r2, r2, #8
 80066de:	b292      	uxth	r2, r2
 80066e0:	831a      	strh	r2, [r3, #24]
}
 80066e2:	bf00      	nop
 80066e4:	3770      	adds	r7, #112	@ 0x70
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	40008000 	.word	0x40008000

080066f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b09c      	sub	sp, #112	@ 0x70
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006708:	2b22      	cmp	r3, #34	@ 0x22
 800670a:	f040 80be 	bne.w	800688a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006714:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800671e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006722:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006726:	4013      	ands	r3, r2
 8006728:	b29a      	uxth	r2, r3
 800672a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800672c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006732:	1c9a      	adds	r2, r3, #2
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006750:	b29b      	uxth	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	f040 80a3 	bne.w	800689e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006760:	e853 3f00 	ldrex	r3, [r3]
 8006764:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006766:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006768:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800676c:	667b      	str	r3, [r7, #100]	@ 0x64
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	461a      	mov	r2, r3
 8006774:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006776:	657b      	str	r3, [r7, #84]	@ 0x54
 8006778:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800677c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800677e:	e841 2300 	strex	r3, r2, [r1]
 8006782:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1e6      	bne.n	8006758 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3308      	adds	r3, #8
 8006790:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006794:	e853 3f00 	ldrex	r3, [r3]
 8006798:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800679a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679c:	f023 0301 	bic.w	r3, r3, #1
 80067a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3308      	adds	r3, #8
 80067a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80067aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80067ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067b2:	e841 2300 	strex	r3, r2, [r1]
 80067b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1e5      	bne.n	800678a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2220      	movs	r2, #32
 80067c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a34      	ldr	r2, [pc, #208]	@ (80068a8 <UART_RxISR_16BIT+0x1b8>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d01f      	beq.n	800681c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d018      	beq.n	800681c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	e853 3f00 	ldrex	r3, [r3]
 80067f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80067fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	461a      	mov	r2, r3
 8006806:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800680a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800680e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006810:	e841 2300 	strex	r3, r2, [r1]
 8006814:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e6      	bne.n	80067ea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006820:	2b01      	cmp	r3, #1
 8006822:	d12e      	bne.n	8006882 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	e853 3f00 	ldrex	r3, [r3]
 8006836:	60bb      	str	r3, [r7, #8]
   return(result);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f023 0310 	bic.w	r3, r3, #16
 800683e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	461a      	mov	r2, r3
 8006846:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006848:	61bb      	str	r3, [r7, #24]
 800684a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684c:	6979      	ldr	r1, [r7, #20]
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	e841 2300 	strex	r3, r2, [r1]
 8006854:	613b      	str	r3, [r7, #16]
   return(result);
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1e6      	bne.n	800682a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	f003 0310 	and.w	r3, r3, #16
 8006866:	2b10      	cmp	r3, #16
 8006868:	d103      	bne.n	8006872 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2210      	movs	r2, #16
 8006870:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006878:	4619      	mov	r1, r3
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7ff f900 	bl	8005a80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006880:	e00d      	b.n	800689e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fa ff48 	bl	8001718 <HAL_UART_RxCpltCallback>
}
 8006888:	e009      	b.n	800689e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	8b1b      	ldrh	r3, [r3, #24]
 8006890:	b29a      	uxth	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 0208 	orr.w	r2, r2, #8
 800689a:	b292      	uxth	r2, r2
 800689c:	831a      	strh	r2, [r3, #24]
}
 800689e:	bf00      	nop
 80068a0:	3770      	adds	r7, #112	@ 0x70
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	40008000 	.word	0x40008000

080068ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <__cvt>:
 80068c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068c4:	ec57 6b10 	vmov	r6, r7, d0
 80068c8:	2f00      	cmp	r7, #0
 80068ca:	460c      	mov	r4, r1
 80068cc:	4619      	mov	r1, r3
 80068ce:	463b      	mov	r3, r7
 80068d0:	bfbb      	ittet	lt
 80068d2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80068d6:	461f      	movlt	r7, r3
 80068d8:	2300      	movge	r3, #0
 80068da:	232d      	movlt	r3, #45	@ 0x2d
 80068dc:	700b      	strb	r3, [r1, #0]
 80068de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068e0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80068e4:	4691      	mov	r9, r2
 80068e6:	f023 0820 	bic.w	r8, r3, #32
 80068ea:	bfbc      	itt	lt
 80068ec:	4632      	movlt	r2, r6
 80068ee:	4616      	movlt	r6, r2
 80068f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80068f4:	d005      	beq.n	8006902 <__cvt+0x42>
 80068f6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80068fa:	d100      	bne.n	80068fe <__cvt+0x3e>
 80068fc:	3401      	adds	r4, #1
 80068fe:	2102      	movs	r1, #2
 8006900:	e000      	b.n	8006904 <__cvt+0x44>
 8006902:	2103      	movs	r1, #3
 8006904:	ab03      	add	r3, sp, #12
 8006906:	9301      	str	r3, [sp, #4]
 8006908:	ab02      	add	r3, sp, #8
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	ec47 6b10 	vmov	d0, r6, r7
 8006910:	4653      	mov	r3, sl
 8006912:	4622      	mov	r2, r4
 8006914:	f001 feac 	bl	8008670 <_dtoa_r>
 8006918:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800691c:	4605      	mov	r5, r0
 800691e:	d119      	bne.n	8006954 <__cvt+0x94>
 8006920:	f019 0f01 	tst.w	r9, #1
 8006924:	d00e      	beq.n	8006944 <__cvt+0x84>
 8006926:	eb00 0904 	add.w	r9, r0, r4
 800692a:	2200      	movs	r2, #0
 800692c:	2300      	movs	r3, #0
 800692e:	4630      	mov	r0, r6
 8006930:	4639      	mov	r1, r7
 8006932:	f7fa f8c9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006936:	b108      	cbz	r0, 800693c <__cvt+0x7c>
 8006938:	f8cd 900c 	str.w	r9, [sp, #12]
 800693c:	2230      	movs	r2, #48	@ 0x30
 800693e:	9b03      	ldr	r3, [sp, #12]
 8006940:	454b      	cmp	r3, r9
 8006942:	d31e      	bcc.n	8006982 <__cvt+0xc2>
 8006944:	9b03      	ldr	r3, [sp, #12]
 8006946:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006948:	1b5b      	subs	r3, r3, r5
 800694a:	4628      	mov	r0, r5
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	b004      	add	sp, #16
 8006950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006954:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006958:	eb00 0904 	add.w	r9, r0, r4
 800695c:	d1e5      	bne.n	800692a <__cvt+0x6a>
 800695e:	7803      	ldrb	r3, [r0, #0]
 8006960:	2b30      	cmp	r3, #48	@ 0x30
 8006962:	d10a      	bne.n	800697a <__cvt+0xba>
 8006964:	2200      	movs	r2, #0
 8006966:	2300      	movs	r3, #0
 8006968:	4630      	mov	r0, r6
 800696a:	4639      	mov	r1, r7
 800696c:	f7fa f8ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8006970:	b918      	cbnz	r0, 800697a <__cvt+0xba>
 8006972:	f1c4 0401 	rsb	r4, r4, #1
 8006976:	f8ca 4000 	str.w	r4, [sl]
 800697a:	f8da 3000 	ldr.w	r3, [sl]
 800697e:	4499      	add	r9, r3
 8006980:	e7d3      	b.n	800692a <__cvt+0x6a>
 8006982:	1c59      	adds	r1, r3, #1
 8006984:	9103      	str	r1, [sp, #12]
 8006986:	701a      	strb	r2, [r3, #0]
 8006988:	e7d9      	b.n	800693e <__cvt+0x7e>

0800698a <__exponent>:
 800698a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800698c:	2900      	cmp	r1, #0
 800698e:	bfba      	itte	lt
 8006990:	4249      	neglt	r1, r1
 8006992:	232d      	movlt	r3, #45	@ 0x2d
 8006994:	232b      	movge	r3, #43	@ 0x2b
 8006996:	2909      	cmp	r1, #9
 8006998:	7002      	strb	r2, [r0, #0]
 800699a:	7043      	strb	r3, [r0, #1]
 800699c:	dd29      	ble.n	80069f2 <__exponent+0x68>
 800699e:	f10d 0307 	add.w	r3, sp, #7
 80069a2:	461d      	mov	r5, r3
 80069a4:	270a      	movs	r7, #10
 80069a6:	461a      	mov	r2, r3
 80069a8:	fbb1 f6f7 	udiv	r6, r1, r7
 80069ac:	fb07 1416 	mls	r4, r7, r6, r1
 80069b0:	3430      	adds	r4, #48	@ 0x30
 80069b2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80069b6:	460c      	mov	r4, r1
 80069b8:	2c63      	cmp	r4, #99	@ 0x63
 80069ba:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80069be:	4631      	mov	r1, r6
 80069c0:	dcf1      	bgt.n	80069a6 <__exponent+0x1c>
 80069c2:	3130      	adds	r1, #48	@ 0x30
 80069c4:	1e94      	subs	r4, r2, #2
 80069c6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80069ca:	1c41      	adds	r1, r0, #1
 80069cc:	4623      	mov	r3, r4
 80069ce:	42ab      	cmp	r3, r5
 80069d0:	d30a      	bcc.n	80069e8 <__exponent+0x5e>
 80069d2:	f10d 0309 	add.w	r3, sp, #9
 80069d6:	1a9b      	subs	r3, r3, r2
 80069d8:	42ac      	cmp	r4, r5
 80069da:	bf88      	it	hi
 80069dc:	2300      	movhi	r3, #0
 80069de:	3302      	adds	r3, #2
 80069e0:	4403      	add	r3, r0
 80069e2:	1a18      	subs	r0, r3, r0
 80069e4:	b003      	add	sp, #12
 80069e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069e8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80069ec:	f801 6f01 	strb.w	r6, [r1, #1]!
 80069f0:	e7ed      	b.n	80069ce <__exponent+0x44>
 80069f2:	2330      	movs	r3, #48	@ 0x30
 80069f4:	3130      	adds	r1, #48	@ 0x30
 80069f6:	7083      	strb	r3, [r0, #2]
 80069f8:	70c1      	strb	r1, [r0, #3]
 80069fa:	1d03      	adds	r3, r0, #4
 80069fc:	e7f1      	b.n	80069e2 <__exponent+0x58>
	...

08006a00 <_printf_float>:
 8006a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a04:	b08d      	sub	sp, #52	@ 0x34
 8006a06:	460c      	mov	r4, r1
 8006a08:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006a0c:	4616      	mov	r6, r2
 8006a0e:	461f      	mov	r7, r3
 8006a10:	4605      	mov	r5, r0
 8006a12:	f001 fd53 	bl	80084bc <_localeconv_r>
 8006a16:	6803      	ldr	r3, [r0, #0]
 8006a18:	9304      	str	r3, [sp, #16]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7f9 fc28 	bl	8000270 <strlen>
 8006a20:	2300      	movs	r3, #0
 8006a22:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a24:	f8d8 3000 	ldr.w	r3, [r8]
 8006a28:	9005      	str	r0, [sp, #20]
 8006a2a:	3307      	adds	r3, #7
 8006a2c:	f023 0307 	bic.w	r3, r3, #7
 8006a30:	f103 0208 	add.w	r2, r3, #8
 8006a34:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006a38:	f8d4 b000 	ldr.w	fp, [r4]
 8006a3c:	f8c8 2000 	str.w	r2, [r8]
 8006a40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a44:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006a48:	9307      	str	r3, [sp, #28]
 8006a4a:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a4e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006a52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a56:	4b9c      	ldr	r3, [pc, #624]	@ (8006cc8 <_printf_float+0x2c8>)
 8006a58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a5c:	f7fa f866 	bl	8000b2c <__aeabi_dcmpun>
 8006a60:	bb70      	cbnz	r0, 8006ac0 <_printf_float+0xc0>
 8006a62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a66:	4b98      	ldr	r3, [pc, #608]	@ (8006cc8 <_printf_float+0x2c8>)
 8006a68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a6c:	f7fa f840 	bl	8000af0 <__aeabi_dcmple>
 8006a70:	bb30      	cbnz	r0, 8006ac0 <_printf_float+0xc0>
 8006a72:	2200      	movs	r2, #0
 8006a74:	2300      	movs	r3, #0
 8006a76:	4640      	mov	r0, r8
 8006a78:	4649      	mov	r1, r9
 8006a7a:	f7fa f82f 	bl	8000adc <__aeabi_dcmplt>
 8006a7e:	b110      	cbz	r0, 8006a86 <_printf_float+0x86>
 8006a80:	232d      	movs	r3, #45	@ 0x2d
 8006a82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a86:	4a91      	ldr	r2, [pc, #580]	@ (8006ccc <_printf_float+0x2cc>)
 8006a88:	4b91      	ldr	r3, [pc, #580]	@ (8006cd0 <_printf_float+0x2d0>)
 8006a8a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006a8e:	bf94      	ite	ls
 8006a90:	4690      	movls	r8, r2
 8006a92:	4698      	movhi	r8, r3
 8006a94:	2303      	movs	r3, #3
 8006a96:	6123      	str	r3, [r4, #16]
 8006a98:	f02b 0304 	bic.w	r3, fp, #4
 8006a9c:	6023      	str	r3, [r4, #0]
 8006a9e:	f04f 0900 	mov.w	r9, #0
 8006aa2:	9700      	str	r7, [sp, #0]
 8006aa4:	4633      	mov	r3, r6
 8006aa6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	4628      	mov	r0, r5
 8006aac:	f000 f9d2 	bl	8006e54 <_printf_common>
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	f040 808d 	bne.w	8006bd0 <_printf_float+0x1d0>
 8006ab6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006aba:	b00d      	add	sp, #52	@ 0x34
 8006abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac0:	4642      	mov	r2, r8
 8006ac2:	464b      	mov	r3, r9
 8006ac4:	4640      	mov	r0, r8
 8006ac6:	4649      	mov	r1, r9
 8006ac8:	f7fa f830 	bl	8000b2c <__aeabi_dcmpun>
 8006acc:	b140      	cbz	r0, 8006ae0 <_printf_float+0xe0>
 8006ace:	464b      	mov	r3, r9
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	bfbc      	itt	lt
 8006ad4:	232d      	movlt	r3, #45	@ 0x2d
 8006ad6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006ada:	4a7e      	ldr	r2, [pc, #504]	@ (8006cd4 <_printf_float+0x2d4>)
 8006adc:	4b7e      	ldr	r3, [pc, #504]	@ (8006cd8 <_printf_float+0x2d8>)
 8006ade:	e7d4      	b.n	8006a8a <_printf_float+0x8a>
 8006ae0:	6863      	ldr	r3, [r4, #4]
 8006ae2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006ae6:	9206      	str	r2, [sp, #24]
 8006ae8:	1c5a      	adds	r2, r3, #1
 8006aea:	d13b      	bne.n	8006b64 <_printf_float+0x164>
 8006aec:	2306      	movs	r3, #6
 8006aee:	6063      	str	r3, [r4, #4]
 8006af0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006af4:	2300      	movs	r3, #0
 8006af6:	6022      	str	r2, [r4, #0]
 8006af8:	9303      	str	r3, [sp, #12]
 8006afa:	ab0a      	add	r3, sp, #40	@ 0x28
 8006afc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006b00:	ab09      	add	r3, sp, #36	@ 0x24
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	6861      	ldr	r1, [r4, #4]
 8006b06:	ec49 8b10 	vmov	d0, r8, r9
 8006b0a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f7ff fed6 	bl	80068c0 <__cvt>
 8006b14:	9b06      	ldr	r3, [sp, #24]
 8006b16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b18:	2b47      	cmp	r3, #71	@ 0x47
 8006b1a:	4680      	mov	r8, r0
 8006b1c:	d129      	bne.n	8006b72 <_printf_float+0x172>
 8006b1e:	1cc8      	adds	r0, r1, #3
 8006b20:	db02      	blt.n	8006b28 <_printf_float+0x128>
 8006b22:	6863      	ldr	r3, [r4, #4]
 8006b24:	4299      	cmp	r1, r3
 8006b26:	dd41      	ble.n	8006bac <_printf_float+0x1ac>
 8006b28:	f1aa 0a02 	sub.w	sl, sl, #2
 8006b2c:	fa5f fa8a 	uxtb.w	sl, sl
 8006b30:	3901      	subs	r1, #1
 8006b32:	4652      	mov	r2, sl
 8006b34:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006b38:	9109      	str	r1, [sp, #36]	@ 0x24
 8006b3a:	f7ff ff26 	bl	800698a <__exponent>
 8006b3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b40:	1813      	adds	r3, r2, r0
 8006b42:	2a01      	cmp	r2, #1
 8006b44:	4681      	mov	r9, r0
 8006b46:	6123      	str	r3, [r4, #16]
 8006b48:	dc02      	bgt.n	8006b50 <_printf_float+0x150>
 8006b4a:	6822      	ldr	r2, [r4, #0]
 8006b4c:	07d2      	lsls	r2, r2, #31
 8006b4e:	d501      	bpl.n	8006b54 <_printf_float+0x154>
 8006b50:	3301      	adds	r3, #1
 8006b52:	6123      	str	r3, [r4, #16]
 8006b54:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0a2      	beq.n	8006aa2 <_printf_float+0xa2>
 8006b5c:	232d      	movs	r3, #45	@ 0x2d
 8006b5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b62:	e79e      	b.n	8006aa2 <_printf_float+0xa2>
 8006b64:	9a06      	ldr	r2, [sp, #24]
 8006b66:	2a47      	cmp	r2, #71	@ 0x47
 8006b68:	d1c2      	bne.n	8006af0 <_printf_float+0xf0>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1c0      	bne.n	8006af0 <_printf_float+0xf0>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e7bd      	b.n	8006aee <_printf_float+0xee>
 8006b72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b76:	d9db      	bls.n	8006b30 <_printf_float+0x130>
 8006b78:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006b7c:	d118      	bne.n	8006bb0 <_printf_float+0x1b0>
 8006b7e:	2900      	cmp	r1, #0
 8006b80:	6863      	ldr	r3, [r4, #4]
 8006b82:	dd0b      	ble.n	8006b9c <_printf_float+0x19c>
 8006b84:	6121      	str	r1, [r4, #16]
 8006b86:	b913      	cbnz	r3, 8006b8e <_printf_float+0x18e>
 8006b88:	6822      	ldr	r2, [r4, #0]
 8006b8a:	07d0      	lsls	r0, r2, #31
 8006b8c:	d502      	bpl.n	8006b94 <_printf_float+0x194>
 8006b8e:	3301      	adds	r3, #1
 8006b90:	440b      	add	r3, r1
 8006b92:	6123      	str	r3, [r4, #16]
 8006b94:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006b96:	f04f 0900 	mov.w	r9, #0
 8006b9a:	e7db      	b.n	8006b54 <_printf_float+0x154>
 8006b9c:	b913      	cbnz	r3, 8006ba4 <_printf_float+0x1a4>
 8006b9e:	6822      	ldr	r2, [r4, #0]
 8006ba0:	07d2      	lsls	r2, r2, #31
 8006ba2:	d501      	bpl.n	8006ba8 <_printf_float+0x1a8>
 8006ba4:	3302      	adds	r3, #2
 8006ba6:	e7f4      	b.n	8006b92 <_printf_float+0x192>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e7f2      	b.n	8006b92 <_printf_float+0x192>
 8006bac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006bb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bb2:	4299      	cmp	r1, r3
 8006bb4:	db05      	blt.n	8006bc2 <_printf_float+0x1c2>
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	6121      	str	r1, [r4, #16]
 8006bba:	07d8      	lsls	r0, r3, #31
 8006bbc:	d5ea      	bpl.n	8006b94 <_printf_float+0x194>
 8006bbe:	1c4b      	adds	r3, r1, #1
 8006bc0:	e7e7      	b.n	8006b92 <_printf_float+0x192>
 8006bc2:	2900      	cmp	r1, #0
 8006bc4:	bfd4      	ite	le
 8006bc6:	f1c1 0202 	rsble	r2, r1, #2
 8006bca:	2201      	movgt	r2, #1
 8006bcc:	4413      	add	r3, r2
 8006bce:	e7e0      	b.n	8006b92 <_printf_float+0x192>
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	055a      	lsls	r2, r3, #21
 8006bd4:	d407      	bmi.n	8006be6 <_printf_float+0x1e6>
 8006bd6:	6923      	ldr	r3, [r4, #16]
 8006bd8:	4642      	mov	r2, r8
 8006bda:	4631      	mov	r1, r6
 8006bdc:	4628      	mov	r0, r5
 8006bde:	47b8      	blx	r7
 8006be0:	3001      	adds	r0, #1
 8006be2:	d12b      	bne.n	8006c3c <_printf_float+0x23c>
 8006be4:	e767      	b.n	8006ab6 <_printf_float+0xb6>
 8006be6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006bea:	f240 80dd 	bls.w	8006da8 <_printf_float+0x3a8>
 8006bee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f7f9 ff67 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	d033      	beq.n	8006c66 <_printf_float+0x266>
 8006bfe:	4a37      	ldr	r2, [pc, #220]	@ (8006cdc <_printf_float+0x2dc>)
 8006c00:	2301      	movs	r3, #1
 8006c02:	4631      	mov	r1, r6
 8006c04:	4628      	mov	r0, r5
 8006c06:	47b8      	blx	r7
 8006c08:	3001      	adds	r0, #1
 8006c0a:	f43f af54 	beq.w	8006ab6 <_printf_float+0xb6>
 8006c0e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006c12:	4543      	cmp	r3, r8
 8006c14:	db02      	blt.n	8006c1c <_printf_float+0x21c>
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	07d8      	lsls	r0, r3, #31
 8006c1a:	d50f      	bpl.n	8006c3c <_printf_float+0x23c>
 8006c1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c20:	4631      	mov	r1, r6
 8006c22:	4628      	mov	r0, r5
 8006c24:	47b8      	blx	r7
 8006c26:	3001      	adds	r0, #1
 8006c28:	f43f af45 	beq.w	8006ab6 <_printf_float+0xb6>
 8006c2c:	f04f 0900 	mov.w	r9, #0
 8006c30:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006c34:	f104 0a1a 	add.w	sl, r4, #26
 8006c38:	45c8      	cmp	r8, r9
 8006c3a:	dc09      	bgt.n	8006c50 <_printf_float+0x250>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	079b      	lsls	r3, r3, #30
 8006c40:	f100 8103 	bmi.w	8006e4a <_printf_float+0x44a>
 8006c44:	68e0      	ldr	r0, [r4, #12]
 8006c46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c48:	4298      	cmp	r0, r3
 8006c4a:	bfb8      	it	lt
 8006c4c:	4618      	movlt	r0, r3
 8006c4e:	e734      	b.n	8006aba <_printf_float+0xba>
 8006c50:	2301      	movs	r3, #1
 8006c52:	4652      	mov	r2, sl
 8006c54:	4631      	mov	r1, r6
 8006c56:	4628      	mov	r0, r5
 8006c58:	47b8      	blx	r7
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	f43f af2b 	beq.w	8006ab6 <_printf_float+0xb6>
 8006c60:	f109 0901 	add.w	r9, r9, #1
 8006c64:	e7e8      	b.n	8006c38 <_printf_float+0x238>
 8006c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	dc39      	bgt.n	8006ce0 <_printf_float+0x2e0>
 8006c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8006cdc <_printf_float+0x2dc>)
 8006c6e:	2301      	movs	r3, #1
 8006c70:	4631      	mov	r1, r6
 8006c72:	4628      	mov	r0, r5
 8006c74:	47b8      	blx	r7
 8006c76:	3001      	adds	r0, #1
 8006c78:	f43f af1d 	beq.w	8006ab6 <_printf_float+0xb6>
 8006c7c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006c80:	ea59 0303 	orrs.w	r3, r9, r3
 8006c84:	d102      	bne.n	8006c8c <_printf_float+0x28c>
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	07d9      	lsls	r1, r3, #31
 8006c8a:	d5d7      	bpl.n	8006c3c <_printf_float+0x23c>
 8006c8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c90:	4631      	mov	r1, r6
 8006c92:	4628      	mov	r0, r5
 8006c94:	47b8      	blx	r7
 8006c96:	3001      	adds	r0, #1
 8006c98:	f43f af0d 	beq.w	8006ab6 <_printf_float+0xb6>
 8006c9c:	f04f 0a00 	mov.w	sl, #0
 8006ca0:	f104 0b1a 	add.w	fp, r4, #26
 8006ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ca6:	425b      	negs	r3, r3
 8006ca8:	4553      	cmp	r3, sl
 8006caa:	dc01      	bgt.n	8006cb0 <_printf_float+0x2b0>
 8006cac:	464b      	mov	r3, r9
 8006cae:	e793      	b.n	8006bd8 <_printf_float+0x1d8>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	465a      	mov	r2, fp
 8006cb4:	4631      	mov	r1, r6
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	47b8      	blx	r7
 8006cba:	3001      	adds	r0, #1
 8006cbc:	f43f aefb 	beq.w	8006ab6 <_printf_float+0xb6>
 8006cc0:	f10a 0a01 	add.w	sl, sl, #1
 8006cc4:	e7ee      	b.n	8006ca4 <_printf_float+0x2a4>
 8006cc6:	bf00      	nop
 8006cc8:	7fefffff 	.word	0x7fefffff
 8006ccc:	0800b2ec 	.word	0x0800b2ec
 8006cd0:	0800b2f0 	.word	0x0800b2f0
 8006cd4:	0800b2f4 	.word	0x0800b2f4
 8006cd8:	0800b2f8 	.word	0x0800b2f8
 8006cdc:	0800b2fc 	.word	0x0800b2fc
 8006ce0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ce2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ce6:	4553      	cmp	r3, sl
 8006ce8:	bfa8      	it	ge
 8006cea:	4653      	movge	r3, sl
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	4699      	mov	r9, r3
 8006cf0:	dc36      	bgt.n	8006d60 <_printf_float+0x360>
 8006cf2:	f04f 0b00 	mov.w	fp, #0
 8006cf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cfa:	f104 021a 	add.w	r2, r4, #26
 8006cfe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d00:	9306      	str	r3, [sp, #24]
 8006d02:	eba3 0309 	sub.w	r3, r3, r9
 8006d06:	455b      	cmp	r3, fp
 8006d08:	dc31      	bgt.n	8006d6e <_printf_float+0x36e>
 8006d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d0c:	459a      	cmp	sl, r3
 8006d0e:	dc3a      	bgt.n	8006d86 <_printf_float+0x386>
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	07da      	lsls	r2, r3, #31
 8006d14:	d437      	bmi.n	8006d86 <_printf_float+0x386>
 8006d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d18:	ebaa 0903 	sub.w	r9, sl, r3
 8006d1c:	9b06      	ldr	r3, [sp, #24]
 8006d1e:	ebaa 0303 	sub.w	r3, sl, r3
 8006d22:	4599      	cmp	r9, r3
 8006d24:	bfa8      	it	ge
 8006d26:	4699      	movge	r9, r3
 8006d28:	f1b9 0f00 	cmp.w	r9, #0
 8006d2c:	dc33      	bgt.n	8006d96 <_printf_float+0x396>
 8006d2e:	f04f 0800 	mov.w	r8, #0
 8006d32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d36:	f104 0b1a 	add.w	fp, r4, #26
 8006d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d3c:	ebaa 0303 	sub.w	r3, sl, r3
 8006d40:	eba3 0309 	sub.w	r3, r3, r9
 8006d44:	4543      	cmp	r3, r8
 8006d46:	f77f af79 	ble.w	8006c3c <_printf_float+0x23c>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	465a      	mov	r2, fp
 8006d4e:	4631      	mov	r1, r6
 8006d50:	4628      	mov	r0, r5
 8006d52:	47b8      	blx	r7
 8006d54:	3001      	adds	r0, #1
 8006d56:	f43f aeae 	beq.w	8006ab6 <_printf_float+0xb6>
 8006d5a:	f108 0801 	add.w	r8, r8, #1
 8006d5e:	e7ec      	b.n	8006d3a <_printf_float+0x33a>
 8006d60:	4642      	mov	r2, r8
 8006d62:	4631      	mov	r1, r6
 8006d64:	4628      	mov	r0, r5
 8006d66:	47b8      	blx	r7
 8006d68:	3001      	adds	r0, #1
 8006d6a:	d1c2      	bne.n	8006cf2 <_printf_float+0x2f2>
 8006d6c:	e6a3      	b.n	8006ab6 <_printf_float+0xb6>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	4631      	mov	r1, r6
 8006d72:	4628      	mov	r0, r5
 8006d74:	9206      	str	r2, [sp, #24]
 8006d76:	47b8      	blx	r7
 8006d78:	3001      	adds	r0, #1
 8006d7a:	f43f ae9c 	beq.w	8006ab6 <_printf_float+0xb6>
 8006d7e:	9a06      	ldr	r2, [sp, #24]
 8006d80:	f10b 0b01 	add.w	fp, fp, #1
 8006d84:	e7bb      	b.n	8006cfe <_printf_float+0x2fe>
 8006d86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	47b8      	blx	r7
 8006d90:	3001      	adds	r0, #1
 8006d92:	d1c0      	bne.n	8006d16 <_printf_float+0x316>
 8006d94:	e68f      	b.n	8006ab6 <_printf_float+0xb6>
 8006d96:	9a06      	ldr	r2, [sp, #24]
 8006d98:	464b      	mov	r3, r9
 8006d9a:	4442      	add	r2, r8
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	4628      	mov	r0, r5
 8006da0:	47b8      	blx	r7
 8006da2:	3001      	adds	r0, #1
 8006da4:	d1c3      	bne.n	8006d2e <_printf_float+0x32e>
 8006da6:	e686      	b.n	8006ab6 <_printf_float+0xb6>
 8006da8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006dac:	f1ba 0f01 	cmp.w	sl, #1
 8006db0:	dc01      	bgt.n	8006db6 <_printf_float+0x3b6>
 8006db2:	07db      	lsls	r3, r3, #31
 8006db4:	d536      	bpl.n	8006e24 <_printf_float+0x424>
 8006db6:	2301      	movs	r3, #1
 8006db8:	4642      	mov	r2, r8
 8006dba:	4631      	mov	r1, r6
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	47b8      	blx	r7
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	f43f ae78 	beq.w	8006ab6 <_printf_float+0xb6>
 8006dc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dca:	4631      	mov	r1, r6
 8006dcc:	4628      	mov	r0, r5
 8006dce:	47b8      	blx	r7
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	f43f ae70 	beq.w	8006ab6 <_printf_float+0xb6>
 8006dd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006dda:	2200      	movs	r2, #0
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006de2:	f7f9 fe71 	bl	8000ac8 <__aeabi_dcmpeq>
 8006de6:	b9c0      	cbnz	r0, 8006e1a <_printf_float+0x41a>
 8006de8:	4653      	mov	r3, sl
 8006dea:	f108 0201 	add.w	r2, r8, #1
 8006dee:	4631      	mov	r1, r6
 8006df0:	4628      	mov	r0, r5
 8006df2:	47b8      	blx	r7
 8006df4:	3001      	adds	r0, #1
 8006df6:	d10c      	bne.n	8006e12 <_printf_float+0x412>
 8006df8:	e65d      	b.n	8006ab6 <_printf_float+0xb6>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	465a      	mov	r2, fp
 8006dfe:	4631      	mov	r1, r6
 8006e00:	4628      	mov	r0, r5
 8006e02:	47b8      	blx	r7
 8006e04:	3001      	adds	r0, #1
 8006e06:	f43f ae56 	beq.w	8006ab6 <_printf_float+0xb6>
 8006e0a:	f108 0801 	add.w	r8, r8, #1
 8006e0e:	45d0      	cmp	r8, sl
 8006e10:	dbf3      	blt.n	8006dfa <_printf_float+0x3fa>
 8006e12:	464b      	mov	r3, r9
 8006e14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006e18:	e6df      	b.n	8006bda <_printf_float+0x1da>
 8006e1a:	f04f 0800 	mov.w	r8, #0
 8006e1e:	f104 0b1a 	add.w	fp, r4, #26
 8006e22:	e7f4      	b.n	8006e0e <_printf_float+0x40e>
 8006e24:	2301      	movs	r3, #1
 8006e26:	4642      	mov	r2, r8
 8006e28:	e7e1      	b.n	8006dee <_printf_float+0x3ee>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	464a      	mov	r2, r9
 8006e2e:	4631      	mov	r1, r6
 8006e30:	4628      	mov	r0, r5
 8006e32:	47b8      	blx	r7
 8006e34:	3001      	adds	r0, #1
 8006e36:	f43f ae3e 	beq.w	8006ab6 <_printf_float+0xb6>
 8006e3a:	f108 0801 	add.w	r8, r8, #1
 8006e3e:	68e3      	ldr	r3, [r4, #12]
 8006e40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e42:	1a5b      	subs	r3, r3, r1
 8006e44:	4543      	cmp	r3, r8
 8006e46:	dcf0      	bgt.n	8006e2a <_printf_float+0x42a>
 8006e48:	e6fc      	b.n	8006c44 <_printf_float+0x244>
 8006e4a:	f04f 0800 	mov.w	r8, #0
 8006e4e:	f104 0919 	add.w	r9, r4, #25
 8006e52:	e7f4      	b.n	8006e3e <_printf_float+0x43e>

08006e54 <_printf_common>:
 8006e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e58:	4616      	mov	r6, r2
 8006e5a:	4698      	mov	r8, r3
 8006e5c:	688a      	ldr	r2, [r1, #8]
 8006e5e:	690b      	ldr	r3, [r1, #16]
 8006e60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e64:	4293      	cmp	r3, r2
 8006e66:	bfb8      	it	lt
 8006e68:	4613      	movlt	r3, r2
 8006e6a:	6033      	str	r3, [r6, #0]
 8006e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e70:	4607      	mov	r7, r0
 8006e72:	460c      	mov	r4, r1
 8006e74:	b10a      	cbz	r2, 8006e7a <_printf_common+0x26>
 8006e76:	3301      	adds	r3, #1
 8006e78:	6033      	str	r3, [r6, #0]
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	0699      	lsls	r1, r3, #26
 8006e7e:	bf42      	ittt	mi
 8006e80:	6833      	ldrmi	r3, [r6, #0]
 8006e82:	3302      	addmi	r3, #2
 8006e84:	6033      	strmi	r3, [r6, #0]
 8006e86:	6825      	ldr	r5, [r4, #0]
 8006e88:	f015 0506 	ands.w	r5, r5, #6
 8006e8c:	d106      	bne.n	8006e9c <_printf_common+0x48>
 8006e8e:	f104 0a19 	add.w	sl, r4, #25
 8006e92:	68e3      	ldr	r3, [r4, #12]
 8006e94:	6832      	ldr	r2, [r6, #0]
 8006e96:	1a9b      	subs	r3, r3, r2
 8006e98:	42ab      	cmp	r3, r5
 8006e9a:	dc26      	bgt.n	8006eea <_printf_common+0x96>
 8006e9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ea0:	6822      	ldr	r2, [r4, #0]
 8006ea2:	3b00      	subs	r3, #0
 8006ea4:	bf18      	it	ne
 8006ea6:	2301      	movne	r3, #1
 8006ea8:	0692      	lsls	r2, r2, #26
 8006eaa:	d42b      	bmi.n	8006f04 <_printf_common+0xb0>
 8006eac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006eb0:	4641      	mov	r1, r8
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	47c8      	blx	r9
 8006eb6:	3001      	adds	r0, #1
 8006eb8:	d01e      	beq.n	8006ef8 <_printf_common+0xa4>
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	6922      	ldr	r2, [r4, #16]
 8006ebe:	f003 0306 	and.w	r3, r3, #6
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	bf02      	ittt	eq
 8006ec6:	68e5      	ldreq	r5, [r4, #12]
 8006ec8:	6833      	ldreq	r3, [r6, #0]
 8006eca:	1aed      	subeq	r5, r5, r3
 8006ecc:	68a3      	ldr	r3, [r4, #8]
 8006ece:	bf0c      	ite	eq
 8006ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ed4:	2500      	movne	r5, #0
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	bfc4      	itt	gt
 8006eda:	1a9b      	subgt	r3, r3, r2
 8006edc:	18ed      	addgt	r5, r5, r3
 8006ede:	2600      	movs	r6, #0
 8006ee0:	341a      	adds	r4, #26
 8006ee2:	42b5      	cmp	r5, r6
 8006ee4:	d11a      	bne.n	8006f1c <_printf_common+0xc8>
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	e008      	b.n	8006efc <_printf_common+0xa8>
 8006eea:	2301      	movs	r3, #1
 8006eec:	4652      	mov	r2, sl
 8006eee:	4641      	mov	r1, r8
 8006ef0:	4638      	mov	r0, r7
 8006ef2:	47c8      	blx	r9
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d103      	bne.n	8006f00 <_printf_common+0xac>
 8006ef8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f00:	3501      	adds	r5, #1
 8006f02:	e7c6      	b.n	8006e92 <_printf_common+0x3e>
 8006f04:	18e1      	adds	r1, r4, r3
 8006f06:	1c5a      	adds	r2, r3, #1
 8006f08:	2030      	movs	r0, #48	@ 0x30
 8006f0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f0e:	4422      	add	r2, r4
 8006f10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f18:	3302      	adds	r3, #2
 8006f1a:	e7c7      	b.n	8006eac <_printf_common+0x58>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	4622      	mov	r2, r4
 8006f20:	4641      	mov	r1, r8
 8006f22:	4638      	mov	r0, r7
 8006f24:	47c8      	blx	r9
 8006f26:	3001      	adds	r0, #1
 8006f28:	d0e6      	beq.n	8006ef8 <_printf_common+0xa4>
 8006f2a:	3601      	adds	r6, #1
 8006f2c:	e7d9      	b.n	8006ee2 <_printf_common+0x8e>
	...

08006f30 <_printf_i>:
 8006f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f34:	7e0f      	ldrb	r7, [r1, #24]
 8006f36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f38:	2f78      	cmp	r7, #120	@ 0x78
 8006f3a:	4691      	mov	r9, r2
 8006f3c:	4680      	mov	r8, r0
 8006f3e:	460c      	mov	r4, r1
 8006f40:	469a      	mov	sl, r3
 8006f42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f46:	d807      	bhi.n	8006f58 <_printf_i+0x28>
 8006f48:	2f62      	cmp	r7, #98	@ 0x62
 8006f4a:	d80a      	bhi.n	8006f62 <_printf_i+0x32>
 8006f4c:	2f00      	cmp	r7, #0
 8006f4e:	f000 80d2 	beq.w	80070f6 <_printf_i+0x1c6>
 8006f52:	2f58      	cmp	r7, #88	@ 0x58
 8006f54:	f000 80b9 	beq.w	80070ca <_printf_i+0x19a>
 8006f58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f60:	e03a      	b.n	8006fd8 <_printf_i+0xa8>
 8006f62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f66:	2b15      	cmp	r3, #21
 8006f68:	d8f6      	bhi.n	8006f58 <_printf_i+0x28>
 8006f6a:	a101      	add	r1, pc, #4	@ (adr r1, 8006f70 <_printf_i+0x40>)
 8006f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f70:	08006fc9 	.word	0x08006fc9
 8006f74:	08006fdd 	.word	0x08006fdd
 8006f78:	08006f59 	.word	0x08006f59
 8006f7c:	08006f59 	.word	0x08006f59
 8006f80:	08006f59 	.word	0x08006f59
 8006f84:	08006f59 	.word	0x08006f59
 8006f88:	08006fdd 	.word	0x08006fdd
 8006f8c:	08006f59 	.word	0x08006f59
 8006f90:	08006f59 	.word	0x08006f59
 8006f94:	08006f59 	.word	0x08006f59
 8006f98:	08006f59 	.word	0x08006f59
 8006f9c:	080070dd 	.word	0x080070dd
 8006fa0:	08007007 	.word	0x08007007
 8006fa4:	08007097 	.word	0x08007097
 8006fa8:	08006f59 	.word	0x08006f59
 8006fac:	08006f59 	.word	0x08006f59
 8006fb0:	080070ff 	.word	0x080070ff
 8006fb4:	08006f59 	.word	0x08006f59
 8006fb8:	08007007 	.word	0x08007007
 8006fbc:	08006f59 	.word	0x08006f59
 8006fc0:	08006f59 	.word	0x08006f59
 8006fc4:	0800709f 	.word	0x0800709f
 8006fc8:	6833      	ldr	r3, [r6, #0]
 8006fca:	1d1a      	adds	r2, r3, #4
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6032      	str	r2, [r6, #0]
 8006fd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e09d      	b.n	8007118 <_printf_i+0x1e8>
 8006fdc:	6833      	ldr	r3, [r6, #0]
 8006fde:	6820      	ldr	r0, [r4, #0]
 8006fe0:	1d19      	adds	r1, r3, #4
 8006fe2:	6031      	str	r1, [r6, #0]
 8006fe4:	0606      	lsls	r6, r0, #24
 8006fe6:	d501      	bpl.n	8006fec <_printf_i+0xbc>
 8006fe8:	681d      	ldr	r5, [r3, #0]
 8006fea:	e003      	b.n	8006ff4 <_printf_i+0xc4>
 8006fec:	0645      	lsls	r5, r0, #25
 8006fee:	d5fb      	bpl.n	8006fe8 <_printf_i+0xb8>
 8006ff0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ff4:	2d00      	cmp	r5, #0
 8006ff6:	da03      	bge.n	8007000 <_printf_i+0xd0>
 8006ff8:	232d      	movs	r3, #45	@ 0x2d
 8006ffa:	426d      	negs	r5, r5
 8006ffc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007000:	4859      	ldr	r0, [pc, #356]	@ (8007168 <_printf_i+0x238>)
 8007002:	230a      	movs	r3, #10
 8007004:	e011      	b.n	800702a <_printf_i+0xfa>
 8007006:	6821      	ldr	r1, [r4, #0]
 8007008:	6833      	ldr	r3, [r6, #0]
 800700a:	0608      	lsls	r0, r1, #24
 800700c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007010:	d402      	bmi.n	8007018 <_printf_i+0xe8>
 8007012:	0649      	lsls	r1, r1, #25
 8007014:	bf48      	it	mi
 8007016:	b2ad      	uxthmi	r5, r5
 8007018:	2f6f      	cmp	r7, #111	@ 0x6f
 800701a:	4853      	ldr	r0, [pc, #332]	@ (8007168 <_printf_i+0x238>)
 800701c:	6033      	str	r3, [r6, #0]
 800701e:	bf14      	ite	ne
 8007020:	230a      	movne	r3, #10
 8007022:	2308      	moveq	r3, #8
 8007024:	2100      	movs	r1, #0
 8007026:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800702a:	6866      	ldr	r6, [r4, #4]
 800702c:	60a6      	str	r6, [r4, #8]
 800702e:	2e00      	cmp	r6, #0
 8007030:	bfa2      	ittt	ge
 8007032:	6821      	ldrge	r1, [r4, #0]
 8007034:	f021 0104 	bicge.w	r1, r1, #4
 8007038:	6021      	strge	r1, [r4, #0]
 800703a:	b90d      	cbnz	r5, 8007040 <_printf_i+0x110>
 800703c:	2e00      	cmp	r6, #0
 800703e:	d04b      	beq.n	80070d8 <_printf_i+0x1a8>
 8007040:	4616      	mov	r6, r2
 8007042:	fbb5 f1f3 	udiv	r1, r5, r3
 8007046:	fb03 5711 	mls	r7, r3, r1, r5
 800704a:	5dc7      	ldrb	r7, [r0, r7]
 800704c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007050:	462f      	mov	r7, r5
 8007052:	42bb      	cmp	r3, r7
 8007054:	460d      	mov	r5, r1
 8007056:	d9f4      	bls.n	8007042 <_printf_i+0x112>
 8007058:	2b08      	cmp	r3, #8
 800705a:	d10b      	bne.n	8007074 <_printf_i+0x144>
 800705c:	6823      	ldr	r3, [r4, #0]
 800705e:	07df      	lsls	r7, r3, #31
 8007060:	d508      	bpl.n	8007074 <_printf_i+0x144>
 8007062:	6923      	ldr	r3, [r4, #16]
 8007064:	6861      	ldr	r1, [r4, #4]
 8007066:	4299      	cmp	r1, r3
 8007068:	bfde      	ittt	le
 800706a:	2330      	movle	r3, #48	@ 0x30
 800706c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007070:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007074:	1b92      	subs	r2, r2, r6
 8007076:	6122      	str	r2, [r4, #16]
 8007078:	f8cd a000 	str.w	sl, [sp]
 800707c:	464b      	mov	r3, r9
 800707e:	aa03      	add	r2, sp, #12
 8007080:	4621      	mov	r1, r4
 8007082:	4640      	mov	r0, r8
 8007084:	f7ff fee6 	bl	8006e54 <_printf_common>
 8007088:	3001      	adds	r0, #1
 800708a:	d14a      	bne.n	8007122 <_printf_i+0x1f2>
 800708c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007090:	b004      	add	sp, #16
 8007092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	f043 0320 	orr.w	r3, r3, #32
 800709c:	6023      	str	r3, [r4, #0]
 800709e:	4833      	ldr	r0, [pc, #204]	@ (800716c <_printf_i+0x23c>)
 80070a0:	2778      	movs	r7, #120	@ 0x78
 80070a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	6831      	ldr	r1, [r6, #0]
 80070aa:	061f      	lsls	r7, r3, #24
 80070ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80070b0:	d402      	bmi.n	80070b8 <_printf_i+0x188>
 80070b2:	065f      	lsls	r7, r3, #25
 80070b4:	bf48      	it	mi
 80070b6:	b2ad      	uxthmi	r5, r5
 80070b8:	6031      	str	r1, [r6, #0]
 80070ba:	07d9      	lsls	r1, r3, #31
 80070bc:	bf44      	itt	mi
 80070be:	f043 0320 	orrmi.w	r3, r3, #32
 80070c2:	6023      	strmi	r3, [r4, #0]
 80070c4:	b11d      	cbz	r5, 80070ce <_printf_i+0x19e>
 80070c6:	2310      	movs	r3, #16
 80070c8:	e7ac      	b.n	8007024 <_printf_i+0xf4>
 80070ca:	4827      	ldr	r0, [pc, #156]	@ (8007168 <_printf_i+0x238>)
 80070cc:	e7e9      	b.n	80070a2 <_printf_i+0x172>
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	f023 0320 	bic.w	r3, r3, #32
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	e7f6      	b.n	80070c6 <_printf_i+0x196>
 80070d8:	4616      	mov	r6, r2
 80070da:	e7bd      	b.n	8007058 <_printf_i+0x128>
 80070dc:	6833      	ldr	r3, [r6, #0]
 80070de:	6825      	ldr	r5, [r4, #0]
 80070e0:	6961      	ldr	r1, [r4, #20]
 80070e2:	1d18      	adds	r0, r3, #4
 80070e4:	6030      	str	r0, [r6, #0]
 80070e6:	062e      	lsls	r6, r5, #24
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	d501      	bpl.n	80070f0 <_printf_i+0x1c0>
 80070ec:	6019      	str	r1, [r3, #0]
 80070ee:	e002      	b.n	80070f6 <_printf_i+0x1c6>
 80070f0:	0668      	lsls	r0, r5, #25
 80070f2:	d5fb      	bpl.n	80070ec <_printf_i+0x1bc>
 80070f4:	8019      	strh	r1, [r3, #0]
 80070f6:	2300      	movs	r3, #0
 80070f8:	6123      	str	r3, [r4, #16]
 80070fa:	4616      	mov	r6, r2
 80070fc:	e7bc      	b.n	8007078 <_printf_i+0x148>
 80070fe:	6833      	ldr	r3, [r6, #0]
 8007100:	1d1a      	adds	r2, r3, #4
 8007102:	6032      	str	r2, [r6, #0]
 8007104:	681e      	ldr	r6, [r3, #0]
 8007106:	6862      	ldr	r2, [r4, #4]
 8007108:	2100      	movs	r1, #0
 800710a:	4630      	mov	r0, r6
 800710c:	f7f9 f860 	bl	80001d0 <memchr>
 8007110:	b108      	cbz	r0, 8007116 <_printf_i+0x1e6>
 8007112:	1b80      	subs	r0, r0, r6
 8007114:	6060      	str	r0, [r4, #4]
 8007116:	6863      	ldr	r3, [r4, #4]
 8007118:	6123      	str	r3, [r4, #16]
 800711a:	2300      	movs	r3, #0
 800711c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007120:	e7aa      	b.n	8007078 <_printf_i+0x148>
 8007122:	6923      	ldr	r3, [r4, #16]
 8007124:	4632      	mov	r2, r6
 8007126:	4649      	mov	r1, r9
 8007128:	4640      	mov	r0, r8
 800712a:	47d0      	blx	sl
 800712c:	3001      	adds	r0, #1
 800712e:	d0ad      	beq.n	800708c <_printf_i+0x15c>
 8007130:	6823      	ldr	r3, [r4, #0]
 8007132:	079b      	lsls	r3, r3, #30
 8007134:	d413      	bmi.n	800715e <_printf_i+0x22e>
 8007136:	68e0      	ldr	r0, [r4, #12]
 8007138:	9b03      	ldr	r3, [sp, #12]
 800713a:	4298      	cmp	r0, r3
 800713c:	bfb8      	it	lt
 800713e:	4618      	movlt	r0, r3
 8007140:	e7a6      	b.n	8007090 <_printf_i+0x160>
 8007142:	2301      	movs	r3, #1
 8007144:	4632      	mov	r2, r6
 8007146:	4649      	mov	r1, r9
 8007148:	4640      	mov	r0, r8
 800714a:	47d0      	blx	sl
 800714c:	3001      	adds	r0, #1
 800714e:	d09d      	beq.n	800708c <_printf_i+0x15c>
 8007150:	3501      	adds	r5, #1
 8007152:	68e3      	ldr	r3, [r4, #12]
 8007154:	9903      	ldr	r1, [sp, #12]
 8007156:	1a5b      	subs	r3, r3, r1
 8007158:	42ab      	cmp	r3, r5
 800715a:	dcf2      	bgt.n	8007142 <_printf_i+0x212>
 800715c:	e7eb      	b.n	8007136 <_printf_i+0x206>
 800715e:	2500      	movs	r5, #0
 8007160:	f104 0619 	add.w	r6, r4, #25
 8007164:	e7f5      	b.n	8007152 <_printf_i+0x222>
 8007166:	bf00      	nop
 8007168:	0800b2fe 	.word	0x0800b2fe
 800716c:	0800b30f 	.word	0x0800b30f

08007170 <_scanf_float>:
 8007170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007174:	b087      	sub	sp, #28
 8007176:	4617      	mov	r7, r2
 8007178:	9303      	str	r3, [sp, #12]
 800717a:	688b      	ldr	r3, [r1, #8]
 800717c:	1e5a      	subs	r2, r3, #1
 800717e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007182:	bf81      	itttt	hi
 8007184:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007188:	eb03 0b05 	addhi.w	fp, r3, r5
 800718c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007190:	608b      	strhi	r3, [r1, #8]
 8007192:	680b      	ldr	r3, [r1, #0]
 8007194:	460a      	mov	r2, r1
 8007196:	f04f 0500 	mov.w	r5, #0
 800719a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800719e:	f842 3b1c 	str.w	r3, [r2], #28
 80071a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80071a6:	4680      	mov	r8, r0
 80071a8:	460c      	mov	r4, r1
 80071aa:	bf98      	it	ls
 80071ac:	f04f 0b00 	movls.w	fp, #0
 80071b0:	9201      	str	r2, [sp, #4]
 80071b2:	4616      	mov	r6, r2
 80071b4:	46aa      	mov	sl, r5
 80071b6:	46a9      	mov	r9, r5
 80071b8:	9502      	str	r5, [sp, #8]
 80071ba:	68a2      	ldr	r2, [r4, #8]
 80071bc:	b152      	cbz	r2, 80071d4 <_scanf_float+0x64>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	2b4e      	cmp	r3, #78	@ 0x4e
 80071c4:	d864      	bhi.n	8007290 <_scanf_float+0x120>
 80071c6:	2b40      	cmp	r3, #64	@ 0x40
 80071c8:	d83c      	bhi.n	8007244 <_scanf_float+0xd4>
 80071ca:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80071ce:	b2c8      	uxtb	r0, r1
 80071d0:	280e      	cmp	r0, #14
 80071d2:	d93a      	bls.n	800724a <_scanf_float+0xda>
 80071d4:	f1b9 0f00 	cmp.w	r9, #0
 80071d8:	d003      	beq.n	80071e2 <_scanf_float+0x72>
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80071e6:	f1ba 0f01 	cmp.w	sl, #1
 80071ea:	f200 8117 	bhi.w	800741c <_scanf_float+0x2ac>
 80071ee:	9b01      	ldr	r3, [sp, #4]
 80071f0:	429e      	cmp	r6, r3
 80071f2:	f200 8108 	bhi.w	8007406 <_scanf_float+0x296>
 80071f6:	2001      	movs	r0, #1
 80071f8:	b007      	add	sp, #28
 80071fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071fe:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007202:	2a0d      	cmp	r2, #13
 8007204:	d8e6      	bhi.n	80071d4 <_scanf_float+0x64>
 8007206:	a101      	add	r1, pc, #4	@ (adr r1, 800720c <_scanf_float+0x9c>)
 8007208:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800720c:	08007353 	.word	0x08007353
 8007210:	080071d5 	.word	0x080071d5
 8007214:	080071d5 	.word	0x080071d5
 8007218:	080071d5 	.word	0x080071d5
 800721c:	080073b3 	.word	0x080073b3
 8007220:	0800738b 	.word	0x0800738b
 8007224:	080071d5 	.word	0x080071d5
 8007228:	080071d5 	.word	0x080071d5
 800722c:	08007361 	.word	0x08007361
 8007230:	080071d5 	.word	0x080071d5
 8007234:	080071d5 	.word	0x080071d5
 8007238:	080071d5 	.word	0x080071d5
 800723c:	080071d5 	.word	0x080071d5
 8007240:	08007319 	.word	0x08007319
 8007244:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007248:	e7db      	b.n	8007202 <_scanf_float+0x92>
 800724a:	290e      	cmp	r1, #14
 800724c:	d8c2      	bhi.n	80071d4 <_scanf_float+0x64>
 800724e:	a001      	add	r0, pc, #4	@ (adr r0, 8007254 <_scanf_float+0xe4>)
 8007250:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007254:	08007309 	.word	0x08007309
 8007258:	080071d5 	.word	0x080071d5
 800725c:	08007309 	.word	0x08007309
 8007260:	0800739f 	.word	0x0800739f
 8007264:	080071d5 	.word	0x080071d5
 8007268:	080072b1 	.word	0x080072b1
 800726c:	080072ef 	.word	0x080072ef
 8007270:	080072ef 	.word	0x080072ef
 8007274:	080072ef 	.word	0x080072ef
 8007278:	080072ef 	.word	0x080072ef
 800727c:	080072ef 	.word	0x080072ef
 8007280:	080072ef 	.word	0x080072ef
 8007284:	080072ef 	.word	0x080072ef
 8007288:	080072ef 	.word	0x080072ef
 800728c:	080072ef 	.word	0x080072ef
 8007290:	2b6e      	cmp	r3, #110	@ 0x6e
 8007292:	d809      	bhi.n	80072a8 <_scanf_float+0x138>
 8007294:	2b60      	cmp	r3, #96	@ 0x60
 8007296:	d8b2      	bhi.n	80071fe <_scanf_float+0x8e>
 8007298:	2b54      	cmp	r3, #84	@ 0x54
 800729a:	d07b      	beq.n	8007394 <_scanf_float+0x224>
 800729c:	2b59      	cmp	r3, #89	@ 0x59
 800729e:	d199      	bne.n	80071d4 <_scanf_float+0x64>
 80072a0:	2d07      	cmp	r5, #7
 80072a2:	d197      	bne.n	80071d4 <_scanf_float+0x64>
 80072a4:	2508      	movs	r5, #8
 80072a6:	e02c      	b.n	8007302 <_scanf_float+0x192>
 80072a8:	2b74      	cmp	r3, #116	@ 0x74
 80072aa:	d073      	beq.n	8007394 <_scanf_float+0x224>
 80072ac:	2b79      	cmp	r3, #121	@ 0x79
 80072ae:	e7f6      	b.n	800729e <_scanf_float+0x12e>
 80072b0:	6821      	ldr	r1, [r4, #0]
 80072b2:	05c8      	lsls	r0, r1, #23
 80072b4:	d51b      	bpl.n	80072ee <_scanf_float+0x17e>
 80072b6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80072ba:	6021      	str	r1, [r4, #0]
 80072bc:	f109 0901 	add.w	r9, r9, #1
 80072c0:	f1bb 0f00 	cmp.w	fp, #0
 80072c4:	d003      	beq.n	80072ce <_scanf_float+0x15e>
 80072c6:	3201      	adds	r2, #1
 80072c8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80072cc:	60a2      	str	r2, [r4, #8]
 80072ce:	68a3      	ldr	r3, [r4, #8]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	60a3      	str	r3, [r4, #8]
 80072d4:	6923      	ldr	r3, [r4, #16]
 80072d6:	3301      	adds	r3, #1
 80072d8:	6123      	str	r3, [r4, #16]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3b01      	subs	r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	607b      	str	r3, [r7, #4]
 80072e2:	f340 8087 	ble.w	80073f4 <_scanf_float+0x284>
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	3301      	adds	r3, #1
 80072ea:	603b      	str	r3, [r7, #0]
 80072ec:	e765      	b.n	80071ba <_scanf_float+0x4a>
 80072ee:	eb1a 0105 	adds.w	r1, sl, r5
 80072f2:	f47f af6f 	bne.w	80071d4 <_scanf_float+0x64>
 80072f6:	6822      	ldr	r2, [r4, #0]
 80072f8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80072fc:	6022      	str	r2, [r4, #0]
 80072fe:	460d      	mov	r5, r1
 8007300:	468a      	mov	sl, r1
 8007302:	f806 3b01 	strb.w	r3, [r6], #1
 8007306:	e7e2      	b.n	80072ce <_scanf_float+0x15e>
 8007308:	6822      	ldr	r2, [r4, #0]
 800730a:	0610      	lsls	r0, r2, #24
 800730c:	f57f af62 	bpl.w	80071d4 <_scanf_float+0x64>
 8007310:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007314:	6022      	str	r2, [r4, #0]
 8007316:	e7f4      	b.n	8007302 <_scanf_float+0x192>
 8007318:	f1ba 0f00 	cmp.w	sl, #0
 800731c:	d10e      	bne.n	800733c <_scanf_float+0x1cc>
 800731e:	f1b9 0f00 	cmp.w	r9, #0
 8007322:	d10e      	bne.n	8007342 <_scanf_float+0x1d2>
 8007324:	6822      	ldr	r2, [r4, #0]
 8007326:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800732a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800732e:	d108      	bne.n	8007342 <_scanf_float+0x1d2>
 8007330:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007334:	6022      	str	r2, [r4, #0]
 8007336:	f04f 0a01 	mov.w	sl, #1
 800733a:	e7e2      	b.n	8007302 <_scanf_float+0x192>
 800733c:	f1ba 0f02 	cmp.w	sl, #2
 8007340:	d055      	beq.n	80073ee <_scanf_float+0x27e>
 8007342:	2d01      	cmp	r5, #1
 8007344:	d002      	beq.n	800734c <_scanf_float+0x1dc>
 8007346:	2d04      	cmp	r5, #4
 8007348:	f47f af44 	bne.w	80071d4 <_scanf_float+0x64>
 800734c:	3501      	adds	r5, #1
 800734e:	b2ed      	uxtb	r5, r5
 8007350:	e7d7      	b.n	8007302 <_scanf_float+0x192>
 8007352:	f1ba 0f01 	cmp.w	sl, #1
 8007356:	f47f af3d 	bne.w	80071d4 <_scanf_float+0x64>
 800735a:	f04f 0a02 	mov.w	sl, #2
 800735e:	e7d0      	b.n	8007302 <_scanf_float+0x192>
 8007360:	b97d      	cbnz	r5, 8007382 <_scanf_float+0x212>
 8007362:	f1b9 0f00 	cmp.w	r9, #0
 8007366:	f47f af38 	bne.w	80071da <_scanf_float+0x6a>
 800736a:	6822      	ldr	r2, [r4, #0]
 800736c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007370:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007374:	f040 8108 	bne.w	8007588 <_scanf_float+0x418>
 8007378:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800737c:	6022      	str	r2, [r4, #0]
 800737e:	2501      	movs	r5, #1
 8007380:	e7bf      	b.n	8007302 <_scanf_float+0x192>
 8007382:	2d03      	cmp	r5, #3
 8007384:	d0e2      	beq.n	800734c <_scanf_float+0x1dc>
 8007386:	2d05      	cmp	r5, #5
 8007388:	e7de      	b.n	8007348 <_scanf_float+0x1d8>
 800738a:	2d02      	cmp	r5, #2
 800738c:	f47f af22 	bne.w	80071d4 <_scanf_float+0x64>
 8007390:	2503      	movs	r5, #3
 8007392:	e7b6      	b.n	8007302 <_scanf_float+0x192>
 8007394:	2d06      	cmp	r5, #6
 8007396:	f47f af1d 	bne.w	80071d4 <_scanf_float+0x64>
 800739a:	2507      	movs	r5, #7
 800739c:	e7b1      	b.n	8007302 <_scanf_float+0x192>
 800739e:	6822      	ldr	r2, [r4, #0]
 80073a0:	0591      	lsls	r1, r2, #22
 80073a2:	f57f af17 	bpl.w	80071d4 <_scanf_float+0x64>
 80073a6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80073aa:	6022      	str	r2, [r4, #0]
 80073ac:	f8cd 9008 	str.w	r9, [sp, #8]
 80073b0:	e7a7      	b.n	8007302 <_scanf_float+0x192>
 80073b2:	6822      	ldr	r2, [r4, #0]
 80073b4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80073b8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80073bc:	d006      	beq.n	80073cc <_scanf_float+0x25c>
 80073be:	0550      	lsls	r0, r2, #21
 80073c0:	f57f af08 	bpl.w	80071d4 <_scanf_float+0x64>
 80073c4:	f1b9 0f00 	cmp.w	r9, #0
 80073c8:	f000 80de 	beq.w	8007588 <_scanf_float+0x418>
 80073cc:	0591      	lsls	r1, r2, #22
 80073ce:	bf58      	it	pl
 80073d0:	9902      	ldrpl	r1, [sp, #8]
 80073d2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80073d6:	bf58      	it	pl
 80073d8:	eba9 0101 	subpl.w	r1, r9, r1
 80073dc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80073e0:	bf58      	it	pl
 80073e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80073e6:	6022      	str	r2, [r4, #0]
 80073e8:	f04f 0900 	mov.w	r9, #0
 80073ec:	e789      	b.n	8007302 <_scanf_float+0x192>
 80073ee:	f04f 0a03 	mov.w	sl, #3
 80073f2:	e786      	b.n	8007302 <_scanf_float+0x192>
 80073f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80073f8:	4639      	mov	r1, r7
 80073fa:	4640      	mov	r0, r8
 80073fc:	4798      	blx	r3
 80073fe:	2800      	cmp	r0, #0
 8007400:	f43f aedb 	beq.w	80071ba <_scanf_float+0x4a>
 8007404:	e6e6      	b.n	80071d4 <_scanf_float+0x64>
 8007406:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800740a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800740e:	463a      	mov	r2, r7
 8007410:	4640      	mov	r0, r8
 8007412:	4798      	blx	r3
 8007414:	6923      	ldr	r3, [r4, #16]
 8007416:	3b01      	subs	r3, #1
 8007418:	6123      	str	r3, [r4, #16]
 800741a:	e6e8      	b.n	80071ee <_scanf_float+0x7e>
 800741c:	1e6b      	subs	r3, r5, #1
 800741e:	2b06      	cmp	r3, #6
 8007420:	d824      	bhi.n	800746c <_scanf_float+0x2fc>
 8007422:	2d02      	cmp	r5, #2
 8007424:	d836      	bhi.n	8007494 <_scanf_float+0x324>
 8007426:	9b01      	ldr	r3, [sp, #4]
 8007428:	429e      	cmp	r6, r3
 800742a:	f67f aee4 	bls.w	80071f6 <_scanf_float+0x86>
 800742e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007432:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007436:	463a      	mov	r2, r7
 8007438:	4640      	mov	r0, r8
 800743a:	4798      	blx	r3
 800743c:	6923      	ldr	r3, [r4, #16]
 800743e:	3b01      	subs	r3, #1
 8007440:	6123      	str	r3, [r4, #16]
 8007442:	e7f0      	b.n	8007426 <_scanf_float+0x2b6>
 8007444:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007448:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800744c:	463a      	mov	r2, r7
 800744e:	4640      	mov	r0, r8
 8007450:	4798      	blx	r3
 8007452:	6923      	ldr	r3, [r4, #16]
 8007454:	3b01      	subs	r3, #1
 8007456:	6123      	str	r3, [r4, #16]
 8007458:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800745c:	fa5f fa8a 	uxtb.w	sl, sl
 8007460:	f1ba 0f02 	cmp.w	sl, #2
 8007464:	d1ee      	bne.n	8007444 <_scanf_float+0x2d4>
 8007466:	3d03      	subs	r5, #3
 8007468:	b2ed      	uxtb	r5, r5
 800746a:	1b76      	subs	r6, r6, r5
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	05da      	lsls	r2, r3, #23
 8007470:	d530      	bpl.n	80074d4 <_scanf_float+0x364>
 8007472:	055b      	lsls	r3, r3, #21
 8007474:	d511      	bpl.n	800749a <_scanf_float+0x32a>
 8007476:	9b01      	ldr	r3, [sp, #4]
 8007478:	429e      	cmp	r6, r3
 800747a:	f67f aebc 	bls.w	80071f6 <_scanf_float+0x86>
 800747e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007482:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007486:	463a      	mov	r2, r7
 8007488:	4640      	mov	r0, r8
 800748a:	4798      	blx	r3
 800748c:	6923      	ldr	r3, [r4, #16]
 800748e:	3b01      	subs	r3, #1
 8007490:	6123      	str	r3, [r4, #16]
 8007492:	e7f0      	b.n	8007476 <_scanf_float+0x306>
 8007494:	46aa      	mov	sl, r5
 8007496:	46b3      	mov	fp, r6
 8007498:	e7de      	b.n	8007458 <_scanf_float+0x2e8>
 800749a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800749e:	6923      	ldr	r3, [r4, #16]
 80074a0:	2965      	cmp	r1, #101	@ 0x65
 80074a2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80074a6:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80074aa:	6123      	str	r3, [r4, #16]
 80074ac:	d00c      	beq.n	80074c8 <_scanf_float+0x358>
 80074ae:	2945      	cmp	r1, #69	@ 0x45
 80074b0:	d00a      	beq.n	80074c8 <_scanf_float+0x358>
 80074b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074b6:	463a      	mov	r2, r7
 80074b8:	4640      	mov	r0, r8
 80074ba:	4798      	blx	r3
 80074bc:	6923      	ldr	r3, [r4, #16]
 80074be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80074c2:	3b01      	subs	r3, #1
 80074c4:	1eb5      	subs	r5, r6, #2
 80074c6:	6123      	str	r3, [r4, #16]
 80074c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074cc:	463a      	mov	r2, r7
 80074ce:	4640      	mov	r0, r8
 80074d0:	4798      	blx	r3
 80074d2:	462e      	mov	r6, r5
 80074d4:	6822      	ldr	r2, [r4, #0]
 80074d6:	f012 0210 	ands.w	r2, r2, #16
 80074da:	d001      	beq.n	80074e0 <_scanf_float+0x370>
 80074dc:	2000      	movs	r0, #0
 80074de:	e68b      	b.n	80071f8 <_scanf_float+0x88>
 80074e0:	7032      	strb	r2, [r6, #0]
 80074e2:	6823      	ldr	r3, [r4, #0]
 80074e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80074e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074ec:	d11c      	bne.n	8007528 <_scanf_float+0x3b8>
 80074ee:	9b02      	ldr	r3, [sp, #8]
 80074f0:	454b      	cmp	r3, r9
 80074f2:	eba3 0209 	sub.w	r2, r3, r9
 80074f6:	d123      	bne.n	8007540 <_scanf_float+0x3d0>
 80074f8:	9901      	ldr	r1, [sp, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	4640      	mov	r0, r8
 80074fe:	f000 ff13 	bl	8008328 <_strtod_r>
 8007502:	9b03      	ldr	r3, [sp, #12]
 8007504:	6821      	ldr	r1, [r4, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f011 0f02 	tst.w	r1, #2
 800750c:	ec57 6b10 	vmov	r6, r7, d0
 8007510:	f103 0204 	add.w	r2, r3, #4
 8007514:	d01f      	beq.n	8007556 <_scanf_float+0x3e6>
 8007516:	9903      	ldr	r1, [sp, #12]
 8007518:	600a      	str	r2, [r1, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	e9c3 6700 	strd	r6, r7, [r3]
 8007520:	68e3      	ldr	r3, [r4, #12]
 8007522:	3301      	adds	r3, #1
 8007524:	60e3      	str	r3, [r4, #12]
 8007526:	e7d9      	b.n	80074dc <_scanf_float+0x36c>
 8007528:	9b04      	ldr	r3, [sp, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0e4      	beq.n	80074f8 <_scanf_float+0x388>
 800752e:	9905      	ldr	r1, [sp, #20]
 8007530:	230a      	movs	r3, #10
 8007532:	3101      	adds	r1, #1
 8007534:	4640      	mov	r0, r8
 8007536:	f000 ff77 	bl	8008428 <_strtol_r>
 800753a:	9b04      	ldr	r3, [sp, #16]
 800753c:	9e05      	ldr	r6, [sp, #20]
 800753e:	1ac2      	subs	r2, r0, r3
 8007540:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007544:	429e      	cmp	r6, r3
 8007546:	bf28      	it	cs
 8007548:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800754c:	4910      	ldr	r1, [pc, #64]	@ (8007590 <_scanf_float+0x420>)
 800754e:	4630      	mov	r0, r6
 8007550:	f000 f822 	bl	8007598 <siprintf>
 8007554:	e7d0      	b.n	80074f8 <_scanf_float+0x388>
 8007556:	f011 0f04 	tst.w	r1, #4
 800755a:	9903      	ldr	r1, [sp, #12]
 800755c:	600a      	str	r2, [r1, #0]
 800755e:	d1dc      	bne.n	800751a <_scanf_float+0x3aa>
 8007560:	681d      	ldr	r5, [r3, #0]
 8007562:	4632      	mov	r2, r6
 8007564:	463b      	mov	r3, r7
 8007566:	4630      	mov	r0, r6
 8007568:	4639      	mov	r1, r7
 800756a:	f7f9 fadf 	bl	8000b2c <__aeabi_dcmpun>
 800756e:	b128      	cbz	r0, 800757c <_scanf_float+0x40c>
 8007570:	4808      	ldr	r0, [pc, #32]	@ (8007594 <_scanf_float+0x424>)
 8007572:	f000 ffed 	bl	8008550 <nanf>
 8007576:	ed85 0a00 	vstr	s0, [r5]
 800757a:	e7d1      	b.n	8007520 <_scanf_float+0x3b0>
 800757c:	4630      	mov	r0, r6
 800757e:	4639      	mov	r1, r7
 8007580:	f7f9 fb32 	bl	8000be8 <__aeabi_d2f>
 8007584:	6028      	str	r0, [r5, #0]
 8007586:	e7cb      	b.n	8007520 <_scanf_float+0x3b0>
 8007588:	f04f 0900 	mov.w	r9, #0
 800758c:	e629      	b.n	80071e2 <_scanf_float+0x72>
 800758e:	bf00      	nop
 8007590:	0800b320 	.word	0x0800b320
 8007594:	0800b713 	.word	0x0800b713

08007598 <siprintf>:
 8007598:	b40e      	push	{r1, r2, r3}
 800759a:	b500      	push	{lr}
 800759c:	b09c      	sub	sp, #112	@ 0x70
 800759e:	ab1d      	add	r3, sp, #116	@ 0x74
 80075a0:	9002      	str	r0, [sp, #8]
 80075a2:	9006      	str	r0, [sp, #24]
 80075a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80075a8:	4809      	ldr	r0, [pc, #36]	@ (80075d0 <siprintf+0x38>)
 80075aa:	9107      	str	r1, [sp, #28]
 80075ac:	9104      	str	r1, [sp, #16]
 80075ae:	4909      	ldr	r1, [pc, #36]	@ (80075d4 <siprintf+0x3c>)
 80075b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80075b4:	9105      	str	r1, [sp, #20]
 80075b6:	6800      	ldr	r0, [r0, #0]
 80075b8:	9301      	str	r3, [sp, #4]
 80075ba:	a902      	add	r1, sp, #8
 80075bc:	f002 f9b0 	bl	8009920 <_svfiprintf_r>
 80075c0:	9b02      	ldr	r3, [sp, #8]
 80075c2:	2200      	movs	r2, #0
 80075c4:	701a      	strb	r2, [r3, #0]
 80075c6:	b01c      	add	sp, #112	@ 0x70
 80075c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80075cc:	b003      	add	sp, #12
 80075ce:	4770      	bx	lr
 80075d0:	2000019c 	.word	0x2000019c
 80075d4:	ffff0208 	.word	0xffff0208

080075d8 <std>:
 80075d8:	2300      	movs	r3, #0
 80075da:	b510      	push	{r4, lr}
 80075dc:	4604      	mov	r4, r0
 80075de:	e9c0 3300 	strd	r3, r3, [r0]
 80075e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075e6:	6083      	str	r3, [r0, #8]
 80075e8:	8181      	strh	r1, [r0, #12]
 80075ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80075ec:	81c2      	strh	r2, [r0, #14]
 80075ee:	6183      	str	r3, [r0, #24]
 80075f0:	4619      	mov	r1, r3
 80075f2:	2208      	movs	r2, #8
 80075f4:	305c      	adds	r0, #92	@ 0x5c
 80075f6:	f000 ff59 	bl	80084ac <memset>
 80075fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007630 <std+0x58>)
 80075fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80075fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007634 <std+0x5c>)
 8007600:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007602:	4b0d      	ldr	r3, [pc, #52]	@ (8007638 <std+0x60>)
 8007604:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007606:	4b0d      	ldr	r3, [pc, #52]	@ (800763c <std+0x64>)
 8007608:	6323      	str	r3, [r4, #48]	@ 0x30
 800760a:	4b0d      	ldr	r3, [pc, #52]	@ (8007640 <std+0x68>)
 800760c:	6224      	str	r4, [r4, #32]
 800760e:	429c      	cmp	r4, r3
 8007610:	d006      	beq.n	8007620 <std+0x48>
 8007612:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007616:	4294      	cmp	r4, r2
 8007618:	d002      	beq.n	8007620 <std+0x48>
 800761a:	33d0      	adds	r3, #208	@ 0xd0
 800761c:	429c      	cmp	r4, r3
 800761e:	d105      	bne.n	800762c <std+0x54>
 8007620:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007628:	f000 bf76 	b.w	8008518 <__retarget_lock_init_recursive>
 800762c:	bd10      	pop	{r4, pc}
 800762e:	bf00      	nop
 8007630:	0800a765 	.word	0x0800a765
 8007634:	0800a787 	.word	0x0800a787
 8007638:	0800a7bf 	.word	0x0800a7bf
 800763c:	0800a7e3 	.word	0x0800a7e3
 8007640:	2000077c 	.word	0x2000077c

08007644 <stdio_exit_handler>:
 8007644:	4a02      	ldr	r2, [pc, #8]	@ (8007650 <stdio_exit_handler+0xc>)
 8007646:	4903      	ldr	r1, [pc, #12]	@ (8007654 <stdio_exit_handler+0x10>)
 8007648:	4803      	ldr	r0, [pc, #12]	@ (8007658 <stdio_exit_handler+0x14>)
 800764a:	f000 beef 	b.w	800842c <_fwalk_sglue>
 800764e:	bf00      	nop
 8007650:	20000024 	.word	0x20000024
 8007654:	08009d99 	.word	0x08009d99
 8007658:	200001a0 	.word	0x200001a0

0800765c <cleanup_stdio>:
 800765c:	6841      	ldr	r1, [r0, #4]
 800765e:	4b0c      	ldr	r3, [pc, #48]	@ (8007690 <cleanup_stdio+0x34>)
 8007660:	4299      	cmp	r1, r3
 8007662:	b510      	push	{r4, lr}
 8007664:	4604      	mov	r4, r0
 8007666:	d001      	beq.n	800766c <cleanup_stdio+0x10>
 8007668:	f002 fb96 	bl	8009d98 <_fflush_r>
 800766c:	68a1      	ldr	r1, [r4, #8]
 800766e:	4b09      	ldr	r3, [pc, #36]	@ (8007694 <cleanup_stdio+0x38>)
 8007670:	4299      	cmp	r1, r3
 8007672:	d002      	beq.n	800767a <cleanup_stdio+0x1e>
 8007674:	4620      	mov	r0, r4
 8007676:	f002 fb8f 	bl	8009d98 <_fflush_r>
 800767a:	68e1      	ldr	r1, [r4, #12]
 800767c:	4b06      	ldr	r3, [pc, #24]	@ (8007698 <cleanup_stdio+0x3c>)
 800767e:	4299      	cmp	r1, r3
 8007680:	d004      	beq.n	800768c <cleanup_stdio+0x30>
 8007682:	4620      	mov	r0, r4
 8007684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007688:	f002 bb86 	b.w	8009d98 <_fflush_r>
 800768c:	bd10      	pop	{r4, pc}
 800768e:	bf00      	nop
 8007690:	2000077c 	.word	0x2000077c
 8007694:	200007e4 	.word	0x200007e4
 8007698:	2000084c 	.word	0x2000084c

0800769c <global_stdio_init.part.0>:
 800769c:	b510      	push	{r4, lr}
 800769e:	4b0b      	ldr	r3, [pc, #44]	@ (80076cc <global_stdio_init.part.0+0x30>)
 80076a0:	4c0b      	ldr	r4, [pc, #44]	@ (80076d0 <global_stdio_init.part.0+0x34>)
 80076a2:	4a0c      	ldr	r2, [pc, #48]	@ (80076d4 <global_stdio_init.part.0+0x38>)
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	4620      	mov	r0, r4
 80076a8:	2200      	movs	r2, #0
 80076aa:	2104      	movs	r1, #4
 80076ac:	f7ff ff94 	bl	80075d8 <std>
 80076b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80076b4:	2201      	movs	r2, #1
 80076b6:	2109      	movs	r1, #9
 80076b8:	f7ff ff8e 	bl	80075d8 <std>
 80076bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80076c0:	2202      	movs	r2, #2
 80076c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076c6:	2112      	movs	r1, #18
 80076c8:	f7ff bf86 	b.w	80075d8 <std>
 80076cc:	200008b4 	.word	0x200008b4
 80076d0:	2000077c 	.word	0x2000077c
 80076d4:	08007645 	.word	0x08007645

080076d8 <__sfp_lock_acquire>:
 80076d8:	4801      	ldr	r0, [pc, #4]	@ (80076e0 <__sfp_lock_acquire+0x8>)
 80076da:	f000 bf1e 	b.w	800851a <__retarget_lock_acquire_recursive>
 80076de:	bf00      	nop
 80076e0:	200008b9 	.word	0x200008b9

080076e4 <__sfp_lock_release>:
 80076e4:	4801      	ldr	r0, [pc, #4]	@ (80076ec <__sfp_lock_release+0x8>)
 80076e6:	f000 bf19 	b.w	800851c <__retarget_lock_release_recursive>
 80076ea:	bf00      	nop
 80076ec:	200008b9 	.word	0x200008b9

080076f0 <__sinit>:
 80076f0:	b510      	push	{r4, lr}
 80076f2:	4604      	mov	r4, r0
 80076f4:	f7ff fff0 	bl	80076d8 <__sfp_lock_acquire>
 80076f8:	6a23      	ldr	r3, [r4, #32]
 80076fa:	b11b      	cbz	r3, 8007704 <__sinit+0x14>
 80076fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007700:	f7ff bff0 	b.w	80076e4 <__sfp_lock_release>
 8007704:	4b04      	ldr	r3, [pc, #16]	@ (8007718 <__sinit+0x28>)
 8007706:	6223      	str	r3, [r4, #32]
 8007708:	4b04      	ldr	r3, [pc, #16]	@ (800771c <__sinit+0x2c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1f5      	bne.n	80076fc <__sinit+0xc>
 8007710:	f7ff ffc4 	bl	800769c <global_stdio_init.part.0>
 8007714:	e7f2      	b.n	80076fc <__sinit+0xc>
 8007716:	bf00      	nop
 8007718:	0800765d 	.word	0x0800765d
 800771c:	200008b4 	.word	0x200008b4

08007720 <sulp>:
 8007720:	b570      	push	{r4, r5, r6, lr}
 8007722:	4604      	mov	r4, r0
 8007724:	460d      	mov	r5, r1
 8007726:	ec45 4b10 	vmov	d0, r4, r5
 800772a:	4616      	mov	r6, r2
 800772c:	f002 fedc 	bl	800a4e8 <__ulp>
 8007730:	ec51 0b10 	vmov	r0, r1, d0
 8007734:	b17e      	cbz	r6, 8007756 <sulp+0x36>
 8007736:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800773a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800773e:	2b00      	cmp	r3, #0
 8007740:	dd09      	ble.n	8007756 <sulp+0x36>
 8007742:	051b      	lsls	r3, r3, #20
 8007744:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007748:	2400      	movs	r4, #0
 800774a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800774e:	4622      	mov	r2, r4
 8007750:	462b      	mov	r3, r5
 8007752:	f7f8 ff51 	bl	80005f8 <__aeabi_dmul>
 8007756:	ec41 0b10 	vmov	d0, r0, r1
 800775a:	bd70      	pop	{r4, r5, r6, pc}
 800775c:	0000      	movs	r0, r0
	...

08007760 <_strtod_l>:
 8007760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007764:	b09f      	sub	sp, #124	@ 0x7c
 8007766:	460c      	mov	r4, r1
 8007768:	9217      	str	r2, [sp, #92]	@ 0x5c
 800776a:	2200      	movs	r2, #0
 800776c:	921a      	str	r2, [sp, #104]	@ 0x68
 800776e:	9005      	str	r0, [sp, #20]
 8007770:	f04f 0a00 	mov.w	sl, #0
 8007774:	f04f 0b00 	mov.w	fp, #0
 8007778:	460a      	mov	r2, r1
 800777a:	9219      	str	r2, [sp, #100]	@ 0x64
 800777c:	7811      	ldrb	r1, [r2, #0]
 800777e:	292b      	cmp	r1, #43	@ 0x2b
 8007780:	d04a      	beq.n	8007818 <_strtod_l+0xb8>
 8007782:	d838      	bhi.n	80077f6 <_strtod_l+0x96>
 8007784:	290d      	cmp	r1, #13
 8007786:	d832      	bhi.n	80077ee <_strtod_l+0x8e>
 8007788:	2908      	cmp	r1, #8
 800778a:	d832      	bhi.n	80077f2 <_strtod_l+0x92>
 800778c:	2900      	cmp	r1, #0
 800778e:	d03b      	beq.n	8007808 <_strtod_l+0xa8>
 8007790:	2200      	movs	r2, #0
 8007792:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007794:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007796:	782a      	ldrb	r2, [r5, #0]
 8007798:	2a30      	cmp	r2, #48	@ 0x30
 800779a:	f040 80b3 	bne.w	8007904 <_strtod_l+0x1a4>
 800779e:	786a      	ldrb	r2, [r5, #1]
 80077a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80077a4:	2a58      	cmp	r2, #88	@ 0x58
 80077a6:	d16e      	bne.n	8007886 <_strtod_l+0x126>
 80077a8:	9302      	str	r3, [sp, #8]
 80077aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077ac:	9301      	str	r3, [sp, #4]
 80077ae:	ab1a      	add	r3, sp, #104	@ 0x68
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	4a8e      	ldr	r2, [pc, #568]	@ (80079ec <_strtod_l+0x28c>)
 80077b4:	9805      	ldr	r0, [sp, #20]
 80077b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80077b8:	a919      	add	r1, sp, #100	@ 0x64
 80077ba:	f001 fd85 	bl	80092c8 <__gethex>
 80077be:	f010 060f 	ands.w	r6, r0, #15
 80077c2:	4604      	mov	r4, r0
 80077c4:	d005      	beq.n	80077d2 <_strtod_l+0x72>
 80077c6:	2e06      	cmp	r6, #6
 80077c8:	d128      	bne.n	800781c <_strtod_l+0xbc>
 80077ca:	3501      	adds	r5, #1
 80077cc:	2300      	movs	r3, #0
 80077ce:	9519      	str	r5, [sp, #100]	@ 0x64
 80077d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f040 858e 	bne.w	80082f6 <_strtod_l+0xb96>
 80077da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077dc:	b1cb      	cbz	r3, 8007812 <_strtod_l+0xb2>
 80077de:	4652      	mov	r2, sl
 80077e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80077e4:	ec43 2b10 	vmov	d0, r2, r3
 80077e8:	b01f      	add	sp, #124	@ 0x7c
 80077ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ee:	2920      	cmp	r1, #32
 80077f0:	d1ce      	bne.n	8007790 <_strtod_l+0x30>
 80077f2:	3201      	adds	r2, #1
 80077f4:	e7c1      	b.n	800777a <_strtod_l+0x1a>
 80077f6:	292d      	cmp	r1, #45	@ 0x2d
 80077f8:	d1ca      	bne.n	8007790 <_strtod_l+0x30>
 80077fa:	2101      	movs	r1, #1
 80077fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80077fe:	1c51      	adds	r1, r2, #1
 8007800:	9119      	str	r1, [sp, #100]	@ 0x64
 8007802:	7852      	ldrb	r2, [r2, #1]
 8007804:	2a00      	cmp	r2, #0
 8007806:	d1c5      	bne.n	8007794 <_strtod_l+0x34>
 8007808:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800780a:	9419      	str	r4, [sp, #100]	@ 0x64
 800780c:	2b00      	cmp	r3, #0
 800780e:	f040 8570 	bne.w	80082f2 <_strtod_l+0xb92>
 8007812:	4652      	mov	r2, sl
 8007814:	465b      	mov	r3, fp
 8007816:	e7e5      	b.n	80077e4 <_strtod_l+0x84>
 8007818:	2100      	movs	r1, #0
 800781a:	e7ef      	b.n	80077fc <_strtod_l+0x9c>
 800781c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800781e:	b13a      	cbz	r2, 8007830 <_strtod_l+0xd0>
 8007820:	2135      	movs	r1, #53	@ 0x35
 8007822:	a81c      	add	r0, sp, #112	@ 0x70
 8007824:	f002 ff5a 	bl	800a6dc <__copybits>
 8007828:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800782a:	9805      	ldr	r0, [sp, #20]
 800782c:	f002 fb28 	bl	8009e80 <_Bfree>
 8007830:	3e01      	subs	r6, #1
 8007832:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007834:	2e04      	cmp	r6, #4
 8007836:	d806      	bhi.n	8007846 <_strtod_l+0xe6>
 8007838:	e8df f006 	tbb	[pc, r6]
 800783c:	201d0314 	.word	0x201d0314
 8007840:	14          	.byte	0x14
 8007841:	00          	.byte	0x00
 8007842:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007846:	05e1      	lsls	r1, r4, #23
 8007848:	bf48      	it	mi
 800784a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800784e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007852:	0d1b      	lsrs	r3, r3, #20
 8007854:	051b      	lsls	r3, r3, #20
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1bb      	bne.n	80077d2 <_strtod_l+0x72>
 800785a:	f000 fe33 	bl	80084c4 <__errno>
 800785e:	2322      	movs	r3, #34	@ 0x22
 8007860:	6003      	str	r3, [r0, #0]
 8007862:	e7b6      	b.n	80077d2 <_strtod_l+0x72>
 8007864:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007868:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800786c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007870:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007874:	e7e7      	b.n	8007846 <_strtod_l+0xe6>
 8007876:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80079f4 <_strtod_l+0x294>
 800787a:	e7e4      	b.n	8007846 <_strtod_l+0xe6>
 800787c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007880:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007884:	e7df      	b.n	8007846 <_strtod_l+0xe6>
 8007886:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	9219      	str	r2, [sp, #100]	@ 0x64
 800788c:	785b      	ldrb	r3, [r3, #1]
 800788e:	2b30      	cmp	r3, #48	@ 0x30
 8007890:	d0f9      	beq.n	8007886 <_strtod_l+0x126>
 8007892:	2b00      	cmp	r3, #0
 8007894:	d09d      	beq.n	80077d2 <_strtod_l+0x72>
 8007896:	2301      	movs	r3, #1
 8007898:	9309      	str	r3, [sp, #36]	@ 0x24
 800789a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800789c:	930c      	str	r3, [sp, #48]	@ 0x30
 800789e:	2300      	movs	r3, #0
 80078a0:	9308      	str	r3, [sp, #32]
 80078a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80078a4:	461f      	mov	r7, r3
 80078a6:	220a      	movs	r2, #10
 80078a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80078aa:	7805      	ldrb	r5, [r0, #0]
 80078ac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80078b0:	b2d9      	uxtb	r1, r3
 80078b2:	2909      	cmp	r1, #9
 80078b4:	d928      	bls.n	8007908 <_strtod_l+0x1a8>
 80078b6:	494e      	ldr	r1, [pc, #312]	@ (80079f0 <_strtod_l+0x290>)
 80078b8:	2201      	movs	r2, #1
 80078ba:	f000 fdd5 	bl	8008468 <strncmp>
 80078be:	2800      	cmp	r0, #0
 80078c0:	d032      	beq.n	8007928 <_strtod_l+0x1c8>
 80078c2:	2000      	movs	r0, #0
 80078c4:	462a      	mov	r2, r5
 80078c6:	4681      	mov	r9, r0
 80078c8:	463d      	mov	r5, r7
 80078ca:	4603      	mov	r3, r0
 80078cc:	2a65      	cmp	r2, #101	@ 0x65
 80078ce:	d001      	beq.n	80078d4 <_strtod_l+0x174>
 80078d0:	2a45      	cmp	r2, #69	@ 0x45
 80078d2:	d114      	bne.n	80078fe <_strtod_l+0x19e>
 80078d4:	b91d      	cbnz	r5, 80078de <_strtod_l+0x17e>
 80078d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078d8:	4302      	orrs	r2, r0
 80078da:	d095      	beq.n	8007808 <_strtod_l+0xa8>
 80078dc:	2500      	movs	r5, #0
 80078de:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80078e0:	1c62      	adds	r2, r4, #1
 80078e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80078e4:	7862      	ldrb	r2, [r4, #1]
 80078e6:	2a2b      	cmp	r2, #43	@ 0x2b
 80078e8:	d077      	beq.n	80079da <_strtod_l+0x27a>
 80078ea:	2a2d      	cmp	r2, #45	@ 0x2d
 80078ec:	d07b      	beq.n	80079e6 <_strtod_l+0x286>
 80078ee:	f04f 0c00 	mov.w	ip, #0
 80078f2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80078f6:	2909      	cmp	r1, #9
 80078f8:	f240 8082 	bls.w	8007a00 <_strtod_l+0x2a0>
 80078fc:	9419      	str	r4, [sp, #100]	@ 0x64
 80078fe:	f04f 0800 	mov.w	r8, #0
 8007902:	e0a2      	b.n	8007a4a <_strtod_l+0x2ea>
 8007904:	2300      	movs	r3, #0
 8007906:	e7c7      	b.n	8007898 <_strtod_l+0x138>
 8007908:	2f08      	cmp	r7, #8
 800790a:	bfd5      	itete	le
 800790c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800790e:	9908      	ldrgt	r1, [sp, #32]
 8007910:	fb02 3301 	mlale	r3, r2, r1, r3
 8007914:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007918:	f100 0001 	add.w	r0, r0, #1
 800791c:	bfd4      	ite	le
 800791e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007920:	9308      	strgt	r3, [sp, #32]
 8007922:	3701      	adds	r7, #1
 8007924:	9019      	str	r0, [sp, #100]	@ 0x64
 8007926:	e7bf      	b.n	80078a8 <_strtod_l+0x148>
 8007928:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800792a:	1c5a      	adds	r2, r3, #1
 800792c:	9219      	str	r2, [sp, #100]	@ 0x64
 800792e:	785a      	ldrb	r2, [r3, #1]
 8007930:	b37f      	cbz	r7, 8007992 <_strtod_l+0x232>
 8007932:	4681      	mov	r9, r0
 8007934:	463d      	mov	r5, r7
 8007936:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800793a:	2b09      	cmp	r3, #9
 800793c:	d912      	bls.n	8007964 <_strtod_l+0x204>
 800793e:	2301      	movs	r3, #1
 8007940:	e7c4      	b.n	80078cc <_strtod_l+0x16c>
 8007942:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007944:	1c5a      	adds	r2, r3, #1
 8007946:	9219      	str	r2, [sp, #100]	@ 0x64
 8007948:	785a      	ldrb	r2, [r3, #1]
 800794a:	3001      	adds	r0, #1
 800794c:	2a30      	cmp	r2, #48	@ 0x30
 800794e:	d0f8      	beq.n	8007942 <_strtod_l+0x1e2>
 8007950:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007954:	2b08      	cmp	r3, #8
 8007956:	f200 84d3 	bhi.w	8008300 <_strtod_l+0xba0>
 800795a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800795c:	930c      	str	r3, [sp, #48]	@ 0x30
 800795e:	4681      	mov	r9, r0
 8007960:	2000      	movs	r0, #0
 8007962:	4605      	mov	r5, r0
 8007964:	3a30      	subs	r2, #48	@ 0x30
 8007966:	f100 0301 	add.w	r3, r0, #1
 800796a:	d02a      	beq.n	80079c2 <_strtod_l+0x262>
 800796c:	4499      	add	r9, r3
 800796e:	eb00 0c05 	add.w	ip, r0, r5
 8007972:	462b      	mov	r3, r5
 8007974:	210a      	movs	r1, #10
 8007976:	4563      	cmp	r3, ip
 8007978:	d10d      	bne.n	8007996 <_strtod_l+0x236>
 800797a:	1c69      	adds	r1, r5, #1
 800797c:	4401      	add	r1, r0
 800797e:	4428      	add	r0, r5
 8007980:	2808      	cmp	r0, #8
 8007982:	dc16      	bgt.n	80079b2 <_strtod_l+0x252>
 8007984:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007986:	230a      	movs	r3, #10
 8007988:	fb03 2300 	mla	r3, r3, r0, r2
 800798c:	930a      	str	r3, [sp, #40]	@ 0x28
 800798e:	2300      	movs	r3, #0
 8007990:	e018      	b.n	80079c4 <_strtod_l+0x264>
 8007992:	4638      	mov	r0, r7
 8007994:	e7da      	b.n	800794c <_strtod_l+0x1ec>
 8007996:	2b08      	cmp	r3, #8
 8007998:	f103 0301 	add.w	r3, r3, #1
 800799c:	dc03      	bgt.n	80079a6 <_strtod_l+0x246>
 800799e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80079a0:	434e      	muls	r6, r1
 80079a2:	960a      	str	r6, [sp, #40]	@ 0x28
 80079a4:	e7e7      	b.n	8007976 <_strtod_l+0x216>
 80079a6:	2b10      	cmp	r3, #16
 80079a8:	bfde      	ittt	le
 80079aa:	9e08      	ldrle	r6, [sp, #32]
 80079ac:	434e      	mulle	r6, r1
 80079ae:	9608      	strle	r6, [sp, #32]
 80079b0:	e7e1      	b.n	8007976 <_strtod_l+0x216>
 80079b2:	280f      	cmp	r0, #15
 80079b4:	dceb      	bgt.n	800798e <_strtod_l+0x22e>
 80079b6:	9808      	ldr	r0, [sp, #32]
 80079b8:	230a      	movs	r3, #10
 80079ba:	fb03 2300 	mla	r3, r3, r0, r2
 80079be:	9308      	str	r3, [sp, #32]
 80079c0:	e7e5      	b.n	800798e <_strtod_l+0x22e>
 80079c2:	4629      	mov	r1, r5
 80079c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80079c6:	1c50      	adds	r0, r2, #1
 80079c8:	9019      	str	r0, [sp, #100]	@ 0x64
 80079ca:	7852      	ldrb	r2, [r2, #1]
 80079cc:	4618      	mov	r0, r3
 80079ce:	460d      	mov	r5, r1
 80079d0:	e7b1      	b.n	8007936 <_strtod_l+0x1d6>
 80079d2:	f04f 0900 	mov.w	r9, #0
 80079d6:	2301      	movs	r3, #1
 80079d8:	e77d      	b.n	80078d6 <_strtod_l+0x176>
 80079da:	f04f 0c00 	mov.w	ip, #0
 80079de:	1ca2      	adds	r2, r4, #2
 80079e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80079e2:	78a2      	ldrb	r2, [r4, #2]
 80079e4:	e785      	b.n	80078f2 <_strtod_l+0x192>
 80079e6:	f04f 0c01 	mov.w	ip, #1
 80079ea:	e7f8      	b.n	80079de <_strtod_l+0x27e>
 80079ec:	0800b33c 	.word	0x0800b33c
 80079f0:	0800b325 	.word	0x0800b325
 80079f4:	7ff00000 	.word	0x7ff00000
 80079f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80079fa:	1c51      	adds	r1, r2, #1
 80079fc:	9119      	str	r1, [sp, #100]	@ 0x64
 80079fe:	7852      	ldrb	r2, [r2, #1]
 8007a00:	2a30      	cmp	r2, #48	@ 0x30
 8007a02:	d0f9      	beq.n	80079f8 <_strtod_l+0x298>
 8007a04:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007a08:	2908      	cmp	r1, #8
 8007a0a:	f63f af78 	bhi.w	80078fe <_strtod_l+0x19e>
 8007a0e:	3a30      	subs	r2, #48	@ 0x30
 8007a10:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a12:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a14:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007a16:	f04f 080a 	mov.w	r8, #10
 8007a1a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a1c:	1c56      	adds	r6, r2, #1
 8007a1e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007a20:	7852      	ldrb	r2, [r2, #1]
 8007a22:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007a26:	f1be 0f09 	cmp.w	lr, #9
 8007a2a:	d939      	bls.n	8007aa0 <_strtod_l+0x340>
 8007a2c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007a2e:	1a76      	subs	r6, r6, r1
 8007a30:	2e08      	cmp	r6, #8
 8007a32:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007a36:	dc03      	bgt.n	8007a40 <_strtod_l+0x2e0>
 8007a38:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007a3a:	4588      	cmp	r8, r1
 8007a3c:	bfa8      	it	ge
 8007a3e:	4688      	movge	r8, r1
 8007a40:	f1bc 0f00 	cmp.w	ip, #0
 8007a44:	d001      	beq.n	8007a4a <_strtod_l+0x2ea>
 8007a46:	f1c8 0800 	rsb	r8, r8, #0
 8007a4a:	2d00      	cmp	r5, #0
 8007a4c:	d14e      	bne.n	8007aec <_strtod_l+0x38c>
 8007a4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a50:	4308      	orrs	r0, r1
 8007a52:	f47f aebe 	bne.w	80077d2 <_strtod_l+0x72>
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f47f aed6 	bne.w	8007808 <_strtod_l+0xa8>
 8007a5c:	2a69      	cmp	r2, #105	@ 0x69
 8007a5e:	d028      	beq.n	8007ab2 <_strtod_l+0x352>
 8007a60:	dc25      	bgt.n	8007aae <_strtod_l+0x34e>
 8007a62:	2a49      	cmp	r2, #73	@ 0x49
 8007a64:	d025      	beq.n	8007ab2 <_strtod_l+0x352>
 8007a66:	2a4e      	cmp	r2, #78	@ 0x4e
 8007a68:	f47f aece 	bne.w	8007808 <_strtod_l+0xa8>
 8007a6c:	499b      	ldr	r1, [pc, #620]	@ (8007cdc <_strtod_l+0x57c>)
 8007a6e:	a819      	add	r0, sp, #100	@ 0x64
 8007a70:	f001 fe4c 	bl	800970c <__match>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	f43f aec7 	beq.w	8007808 <_strtod_l+0xa8>
 8007a7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	2b28      	cmp	r3, #40	@ 0x28
 8007a80:	d12e      	bne.n	8007ae0 <_strtod_l+0x380>
 8007a82:	4997      	ldr	r1, [pc, #604]	@ (8007ce0 <_strtod_l+0x580>)
 8007a84:	aa1c      	add	r2, sp, #112	@ 0x70
 8007a86:	a819      	add	r0, sp, #100	@ 0x64
 8007a88:	f001 fe54 	bl	8009734 <__hexnan>
 8007a8c:	2805      	cmp	r0, #5
 8007a8e:	d127      	bne.n	8007ae0 <_strtod_l+0x380>
 8007a90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007a92:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007a96:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007a9a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007a9e:	e698      	b.n	80077d2 <_strtod_l+0x72>
 8007aa0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007aa2:	fb08 2101 	mla	r1, r8, r1, r2
 8007aa6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007aaa:	920e      	str	r2, [sp, #56]	@ 0x38
 8007aac:	e7b5      	b.n	8007a1a <_strtod_l+0x2ba>
 8007aae:	2a6e      	cmp	r2, #110	@ 0x6e
 8007ab0:	e7da      	b.n	8007a68 <_strtod_l+0x308>
 8007ab2:	498c      	ldr	r1, [pc, #560]	@ (8007ce4 <_strtod_l+0x584>)
 8007ab4:	a819      	add	r0, sp, #100	@ 0x64
 8007ab6:	f001 fe29 	bl	800970c <__match>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	f43f aea4 	beq.w	8007808 <_strtod_l+0xa8>
 8007ac0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ac2:	4989      	ldr	r1, [pc, #548]	@ (8007ce8 <_strtod_l+0x588>)
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	a819      	add	r0, sp, #100	@ 0x64
 8007ac8:	9319      	str	r3, [sp, #100]	@ 0x64
 8007aca:	f001 fe1f 	bl	800970c <__match>
 8007ace:	b910      	cbnz	r0, 8007ad6 <_strtod_l+0x376>
 8007ad0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	9319      	str	r3, [sp, #100]	@ 0x64
 8007ad6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007cf8 <_strtod_l+0x598>
 8007ada:	f04f 0a00 	mov.w	sl, #0
 8007ade:	e678      	b.n	80077d2 <_strtod_l+0x72>
 8007ae0:	4882      	ldr	r0, [pc, #520]	@ (8007cec <_strtod_l+0x58c>)
 8007ae2:	f000 fd2d 	bl	8008540 <nan>
 8007ae6:	ec5b ab10 	vmov	sl, fp, d0
 8007aea:	e672      	b.n	80077d2 <_strtod_l+0x72>
 8007aec:	eba8 0309 	sub.w	r3, r8, r9
 8007af0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007af2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007af4:	2f00      	cmp	r7, #0
 8007af6:	bf08      	it	eq
 8007af8:	462f      	moveq	r7, r5
 8007afa:	2d10      	cmp	r5, #16
 8007afc:	462c      	mov	r4, r5
 8007afe:	bfa8      	it	ge
 8007b00:	2410      	movge	r4, #16
 8007b02:	f7f8 fcff 	bl	8000504 <__aeabi_ui2d>
 8007b06:	2d09      	cmp	r5, #9
 8007b08:	4682      	mov	sl, r0
 8007b0a:	468b      	mov	fp, r1
 8007b0c:	dc13      	bgt.n	8007b36 <_strtod_l+0x3d6>
 8007b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f43f ae5e 	beq.w	80077d2 <_strtod_l+0x72>
 8007b16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b18:	dd78      	ble.n	8007c0c <_strtod_l+0x4ac>
 8007b1a:	2b16      	cmp	r3, #22
 8007b1c:	dc5f      	bgt.n	8007bde <_strtod_l+0x47e>
 8007b1e:	4974      	ldr	r1, [pc, #464]	@ (8007cf0 <_strtod_l+0x590>)
 8007b20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b28:	4652      	mov	r2, sl
 8007b2a:	465b      	mov	r3, fp
 8007b2c:	f7f8 fd64 	bl	80005f8 <__aeabi_dmul>
 8007b30:	4682      	mov	sl, r0
 8007b32:	468b      	mov	fp, r1
 8007b34:	e64d      	b.n	80077d2 <_strtod_l+0x72>
 8007b36:	4b6e      	ldr	r3, [pc, #440]	@ (8007cf0 <_strtod_l+0x590>)
 8007b38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b3c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007b40:	f7f8 fd5a 	bl	80005f8 <__aeabi_dmul>
 8007b44:	4682      	mov	sl, r0
 8007b46:	9808      	ldr	r0, [sp, #32]
 8007b48:	468b      	mov	fp, r1
 8007b4a:	f7f8 fcdb 	bl	8000504 <__aeabi_ui2d>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	4650      	mov	r0, sl
 8007b54:	4659      	mov	r1, fp
 8007b56:	f7f8 fb99 	bl	800028c <__adddf3>
 8007b5a:	2d0f      	cmp	r5, #15
 8007b5c:	4682      	mov	sl, r0
 8007b5e:	468b      	mov	fp, r1
 8007b60:	ddd5      	ble.n	8007b0e <_strtod_l+0x3ae>
 8007b62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b64:	1b2c      	subs	r4, r5, r4
 8007b66:	441c      	add	r4, r3
 8007b68:	2c00      	cmp	r4, #0
 8007b6a:	f340 8096 	ble.w	8007c9a <_strtod_l+0x53a>
 8007b6e:	f014 030f 	ands.w	r3, r4, #15
 8007b72:	d00a      	beq.n	8007b8a <_strtod_l+0x42a>
 8007b74:	495e      	ldr	r1, [pc, #376]	@ (8007cf0 <_strtod_l+0x590>)
 8007b76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b7a:	4652      	mov	r2, sl
 8007b7c:	465b      	mov	r3, fp
 8007b7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b82:	f7f8 fd39 	bl	80005f8 <__aeabi_dmul>
 8007b86:	4682      	mov	sl, r0
 8007b88:	468b      	mov	fp, r1
 8007b8a:	f034 040f 	bics.w	r4, r4, #15
 8007b8e:	d073      	beq.n	8007c78 <_strtod_l+0x518>
 8007b90:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007b94:	dd48      	ble.n	8007c28 <_strtod_l+0x4c8>
 8007b96:	2400      	movs	r4, #0
 8007b98:	46a0      	mov	r8, r4
 8007b9a:	940a      	str	r4, [sp, #40]	@ 0x28
 8007b9c:	46a1      	mov	r9, r4
 8007b9e:	9a05      	ldr	r2, [sp, #20]
 8007ba0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007cf8 <_strtod_l+0x598>
 8007ba4:	2322      	movs	r3, #34	@ 0x22
 8007ba6:	6013      	str	r3, [r2, #0]
 8007ba8:	f04f 0a00 	mov.w	sl, #0
 8007bac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f43f ae0f 	beq.w	80077d2 <_strtod_l+0x72>
 8007bb4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007bb6:	9805      	ldr	r0, [sp, #20]
 8007bb8:	f002 f962 	bl	8009e80 <_Bfree>
 8007bbc:	9805      	ldr	r0, [sp, #20]
 8007bbe:	4649      	mov	r1, r9
 8007bc0:	f002 f95e 	bl	8009e80 <_Bfree>
 8007bc4:	9805      	ldr	r0, [sp, #20]
 8007bc6:	4641      	mov	r1, r8
 8007bc8:	f002 f95a 	bl	8009e80 <_Bfree>
 8007bcc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007bce:	9805      	ldr	r0, [sp, #20]
 8007bd0:	f002 f956 	bl	8009e80 <_Bfree>
 8007bd4:	9805      	ldr	r0, [sp, #20]
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	f002 f952 	bl	8009e80 <_Bfree>
 8007bdc:	e5f9      	b.n	80077d2 <_strtod_l+0x72>
 8007bde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007be0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007be4:	4293      	cmp	r3, r2
 8007be6:	dbbc      	blt.n	8007b62 <_strtod_l+0x402>
 8007be8:	4c41      	ldr	r4, [pc, #260]	@ (8007cf0 <_strtod_l+0x590>)
 8007bea:	f1c5 050f 	rsb	r5, r5, #15
 8007bee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007bf2:	4652      	mov	r2, sl
 8007bf4:	465b      	mov	r3, fp
 8007bf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bfa:	f7f8 fcfd 	bl	80005f8 <__aeabi_dmul>
 8007bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c00:	1b5d      	subs	r5, r3, r5
 8007c02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007c06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007c0a:	e78f      	b.n	8007b2c <_strtod_l+0x3cc>
 8007c0c:	3316      	adds	r3, #22
 8007c0e:	dba8      	blt.n	8007b62 <_strtod_l+0x402>
 8007c10:	4b37      	ldr	r3, [pc, #220]	@ (8007cf0 <_strtod_l+0x590>)
 8007c12:	eba9 0808 	sub.w	r8, r9, r8
 8007c16:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007c1a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007c1e:	4650      	mov	r0, sl
 8007c20:	4659      	mov	r1, fp
 8007c22:	f7f8 fe13 	bl	800084c <__aeabi_ddiv>
 8007c26:	e783      	b.n	8007b30 <_strtod_l+0x3d0>
 8007c28:	4b32      	ldr	r3, [pc, #200]	@ (8007cf4 <_strtod_l+0x594>)
 8007c2a:	9308      	str	r3, [sp, #32]
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	1124      	asrs	r4, r4, #4
 8007c30:	4650      	mov	r0, sl
 8007c32:	4659      	mov	r1, fp
 8007c34:	461e      	mov	r6, r3
 8007c36:	2c01      	cmp	r4, #1
 8007c38:	dc21      	bgt.n	8007c7e <_strtod_l+0x51e>
 8007c3a:	b10b      	cbz	r3, 8007c40 <_strtod_l+0x4e0>
 8007c3c:	4682      	mov	sl, r0
 8007c3e:	468b      	mov	fp, r1
 8007c40:	492c      	ldr	r1, [pc, #176]	@ (8007cf4 <_strtod_l+0x594>)
 8007c42:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007c46:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007c4a:	4652      	mov	r2, sl
 8007c4c:	465b      	mov	r3, fp
 8007c4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c52:	f7f8 fcd1 	bl	80005f8 <__aeabi_dmul>
 8007c56:	4b28      	ldr	r3, [pc, #160]	@ (8007cf8 <_strtod_l+0x598>)
 8007c58:	460a      	mov	r2, r1
 8007c5a:	400b      	ands	r3, r1
 8007c5c:	4927      	ldr	r1, [pc, #156]	@ (8007cfc <_strtod_l+0x59c>)
 8007c5e:	428b      	cmp	r3, r1
 8007c60:	4682      	mov	sl, r0
 8007c62:	d898      	bhi.n	8007b96 <_strtod_l+0x436>
 8007c64:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007c68:	428b      	cmp	r3, r1
 8007c6a:	bf86      	itte	hi
 8007c6c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007d00 <_strtod_l+0x5a0>
 8007c70:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8007c74:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007c78:	2300      	movs	r3, #0
 8007c7a:	9308      	str	r3, [sp, #32]
 8007c7c:	e07a      	b.n	8007d74 <_strtod_l+0x614>
 8007c7e:	07e2      	lsls	r2, r4, #31
 8007c80:	d505      	bpl.n	8007c8e <_strtod_l+0x52e>
 8007c82:	9b08      	ldr	r3, [sp, #32]
 8007c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c88:	f7f8 fcb6 	bl	80005f8 <__aeabi_dmul>
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	9a08      	ldr	r2, [sp, #32]
 8007c90:	3208      	adds	r2, #8
 8007c92:	3601      	adds	r6, #1
 8007c94:	1064      	asrs	r4, r4, #1
 8007c96:	9208      	str	r2, [sp, #32]
 8007c98:	e7cd      	b.n	8007c36 <_strtod_l+0x4d6>
 8007c9a:	d0ed      	beq.n	8007c78 <_strtod_l+0x518>
 8007c9c:	4264      	negs	r4, r4
 8007c9e:	f014 020f 	ands.w	r2, r4, #15
 8007ca2:	d00a      	beq.n	8007cba <_strtod_l+0x55a>
 8007ca4:	4b12      	ldr	r3, [pc, #72]	@ (8007cf0 <_strtod_l+0x590>)
 8007ca6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007caa:	4650      	mov	r0, sl
 8007cac:	4659      	mov	r1, fp
 8007cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb2:	f7f8 fdcb 	bl	800084c <__aeabi_ddiv>
 8007cb6:	4682      	mov	sl, r0
 8007cb8:	468b      	mov	fp, r1
 8007cba:	1124      	asrs	r4, r4, #4
 8007cbc:	d0dc      	beq.n	8007c78 <_strtod_l+0x518>
 8007cbe:	2c1f      	cmp	r4, #31
 8007cc0:	dd20      	ble.n	8007d04 <_strtod_l+0x5a4>
 8007cc2:	2400      	movs	r4, #0
 8007cc4:	46a0      	mov	r8, r4
 8007cc6:	940a      	str	r4, [sp, #40]	@ 0x28
 8007cc8:	46a1      	mov	r9, r4
 8007cca:	9a05      	ldr	r2, [sp, #20]
 8007ccc:	2322      	movs	r3, #34	@ 0x22
 8007cce:	f04f 0a00 	mov.w	sl, #0
 8007cd2:	f04f 0b00 	mov.w	fp, #0
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	e768      	b.n	8007bac <_strtod_l+0x44c>
 8007cda:	bf00      	nop
 8007cdc:	0800b2f9 	.word	0x0800b2f9
 8007ce0:	0800b328 	.word	0x0800b328
 8007ce4:	0800b2f1 	.word	0x0800b2f1
 8007ce8:	0800b484 	.word	0x0800b484
 8007cec:	0800b713 	.word	0x0800b713
 8007cf0:	0800b610 	.word	0x0800b610
 8007cf4:	0800b5e8 	.word	0x0800b5e8
 8007cf8:	7ff00000 	.word	0x7ff00000
 8007cfc:	7ca00000 	.word	0x7ca00000
 8007d00:	7fefffff 	.word	0x7fefffff
 8007d04:	f014 0310 	ands.w	r3, r4, #16
 8007d08:	bf18      	it	ne
 8007d0a:	236a      	movne	r3, #106	@ 0x6a
 8007d0c:	4ea9      	ldr	r6, [pc, #676]	@ (8007fb4 <_strtod_l+0x854>)
 8007d0e:	9308      	str	r3, [sp, #32]
 8007d10:	4650      	mov	r0, sl
 8007d12:	4659      	mov	r1, fp
 8007d14:	2300      	movs	r3, #0
 8007d16:	07e2      	lsls	r2, r4, #31
 8007d18:	d504      	bpl.n	8007d24 <_strtod_l+0x5c4>
 8007d1a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d1e:	f7f8 fc6b 	bl	80005f8 <__aeabi_dmul>
 8007d22:	2301      	movs	r3, #1
 8007d24:	1064      	asrs	r4, r4, #1
 8007d26:	f106 0608 	add.w	r6, r6, #8
 8007d2a:	d1f4      	bne.n	8007d16 <_strtod_l+0x5b6>
 8007d2c:	b10b      	cbz	r3, 8007d32 <_strtod_l+0x5d2>
 8007d2e:	4682      	mov	sl, r0
 8007d30:	468b      	mov	fp, r1
 8007d32:	9b08      	ldr	r3, [sp, #32]
 8007d34:	b1b3      	cbz	r3, 8007d64 <_strtod_l+0x604>
 8007d36:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007d3a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	4659      	mov	r1, fp
 8007d42:	dd0f      	ble.n	8007d64 <_strtod_l+0x604>
 8007d44:	2b1f      	cmp	r3, #31
 8007d46:	dd55      	ble.n	8007df4 <_strtod_l+0x694>
 8007d48:	2b34      	cmp	r3, #52	@ 0x34
 8007d4a:	bfde      	ittt	le
 8007d4c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007d50:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007d54:	4093      	lslle	r3, r2
 8007d56:	f04f 0a00 	mov.w	sl, #0
 8007d5a:	bfcc      	ite	gt
 8007d5c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007d60:	ea03 0b01 	andle.w	fp, r3, r1
 8007d64:	2200      	movs	r2, #0
 8007d66:	2300      	movs	r3, #0
 8007d68:	4650      	mov	r0, sl
 8007d6a:	4659      	mov	r1, fp
 8007d6c:	f7f8 feac 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d1a6      	bne.n	8007cc2 <_strtod_l+0x562>
 8007d74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007d7a:	9805      	ldr	r0, [sp, #20]
 8007d7c:	462b      	mov	r3, r5
 8007d7e:	463a      	mov	r2, r7
 8007d80:	f002 f8e6 	bl	8009f50 <__s2b>
 8007d84:	900a      	str	r0, [sp, #40]	@ 0x28
 8007d86:	2800      	cmp	r0, #0
 8007d88:	f43f af05 	beq.w	8007b96 <_strtod_l+0x436>
 8007d8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d8e:	2a00      	cmp	r2, #0
 8007d90:	eba9 0308 	sub.w	r3, r9, r8
 8007d94:	bfa8      	it	ge
 8007d96:	2300      	movge	r3, #0
 8007d98:	9312      	str	r3, [sp, #72]	@ 0x48
 8007d9a:	2400      	movs	r4, #0
 8007d9c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007da0:	9316      	str	r3, [sp, #88]	@ 0x58
 8007da2:	46a0      	mov	r8, r4
 8007da4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007da6:	9805      	ldr	r0, [sp, #20]
 8007da8:	6859      	ldr	r1, [r3, #4]
 8007daa:	f002 f829 	bl	8009e00 <_Balloc>
 8007dae:	4681      	mov	r9, r0
 8007db0:	2800      	cmp	r0, #0
 8007db2:	f43f aef4 	beq.w	8007b9e <_strtod_l+0x43e>
 8007db6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007db8:	691a      	ldr	r2, [r3, #16]
 8007dba:	3202      	adds	r2, #2
 8007dbc:	f103 010c 	add.w	r1, r3, #12
 8007dc0:	0092      	lsls	r2, r2, #2
 8007dc2:	300c      	adds	r0, #12
 8007dc4:	f000 fbab 	bl	800851e <memcpy>
 8007dc8:	ec4b ab10 	vmov	d0, sl, fp
 8007dcc:	9805      	ldr	r0, [sp, #20]
 8007dce:	aa1c      	add	r2, sp, #112	@ 0x70
 8007dd0:	a91b      	add	r1, sp, #108	@ 0x6c
 8007dd2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007dd6:	f002 fbf7 	bl	800a5c8 <__d2b>
 8007dda:	901a      	str	r0, [sp, #104]	@ 0x68
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	f43f aede 	beq.w	8007b9e <_strtod_l+0x43e>
 8007de2:	9805      	ldr	r0, [sp, #20]
 8007de4:	2101      	movs	r1, #1
 8007de6:	f002 f949 	bl	800a07c <__i2b>
 8007dea:	4680      	mov	r8, r0
 8007dec:	b948      	cbnz	r0, 8007e02 <_strtod_l+0x6a2>
 8007dee:	f04f 0800 	mov.w	r8, #0
 8007df2:	e6d4      	b.n	8007b9e <_strtod_l+0x43e>
 8007df4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007df8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfc:	ea03 0a0a 	and.w	sl, r3, sl
 8007e00:	e7b0      	b.n	8007d64 <_strtod_l+0x604>
 8007e02:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007e04:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007e06:	2d00      	cmp	r5, #0
 8007e08:	bfab      	itete	ge
 8007e0a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007e0c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007e0e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007e10:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007e12:	bfac      	ite	ge
 8007e14:	18ef      	addge	r7, r5, r3
 8007e16:	1b5e      	sublt	r6, r3, r5
 8007e18:	9b08      	ldr	r3, [sp, #32]
 8007e1a:	1aed      	subs	r5, r5, r3
 8007e1c:	4415      	add	r5, r2
 8007e1e:	4b66      	ldr	r3, [pc, #408]	@ (8007fb8 <_strtod_l+0x858>)
 8007e20:	3d01      	subs	r5, #1
 8007e22:	429d      	cmp	r5, r3
 8007e24:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007e28:	da50      	bge.n	8007ecc <_strtod_l+0x76c>
 8007e2a:	1b5b      	subs	r3, r3, r5
 8007e2c:	2b1f      	cmp	r3, #31
 8007e2e:	eba2 0203 	sub.w	r2, r2, r3
 8007e32:	f04f 0101 	mov.w	r1, #1
 8007e36:	dc3d      	bgt.n	8007eb4 <_strtod_l+0x754>
 8007e38:	fa01 f303 	lsl.w	r3, r1, r3
 8007e3c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e3e:	2300      	movs	r3, #0
 8007e40:	9310      	str	r3, [sp, #64]	@ 0x40
 8007e42:	18bd      	adds	r5, r7, r2
 8007e44:	9b08      	ldr	r3, [sp, #32]
 8007e46:	42af      	cmp	r7, r5
 8007e48:	4416      	add	r6, r2
 8007e4a:	441e      	add	r6, r3
 8007e4c:	463b      	mov	r3, r7
 8007e4e:	bfa8      	it	ge
 8007e50:	462b      	movge	r3, r5
 8007e52:	42b3      	cmp	r3, r6
 8007e54:	bfa8      	it	ge
 8007e56:	4633      	movge	r3, r6
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	bfc2      	ittt	gt
 8007e5c:	1aed      	subgt	r5, r5, r3
 8007e5e:	1af6      	subgt	r6, r6, r3
 8007e60:	1aff      	subgt	r7, r7, r3
 8007e62:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	dd16      	ble.n	8007e96 <_strtod_l+0x736>
 8007e68:	4641      	mov	r1, r8
 8007e6a:	9805      	ldr	r0, [sp, #20]
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	f002 f9c5 	bl	800a1fc <__pow5mult>
 8007e72:	4680      	mov	r8, r0
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d0ba      	beq.n	8007dee <_strtod_l+0x68e>
 8007e78:	4601      	mov	r1, r0
 8007e7a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007e7c:	9805      	ldr	r0, [sp, #20]
 8007e7e:	f002 f913 	bl	800a0a8 <__multiply>
 8007e82:	900e      	str	r0, [sp, #56]	@ 0x38
 8007e84:	2800      	cmp	r0, #0
 8007e86:	f43f ae8a 	beq.w	8007b9e <_strtod_l+0x43e>
 8007e8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e8c:	9805      	ldr	r0, [sp, #20]
 8007e8e:	f001 fff7 	bl	8009e80 <_Bfree>
 8007e92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e94:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e96:	2d00      	cmp	r5, #0
 8007e98:	dc1d      	bgt.n	8007ed6 <_strtod_l+0x776>
 8007e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	dd23      	ble.n	8007ee8 <_strtod_l+0x788>
 8007ea0:	4649      	mov	r1, r9
 8007ea2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007ea4:	9805      	ldr	r0, [sp, #20]
 8007ea6:	f002 f9a9 	bl	800a1fc <__pow5mult>
 8007eaa:	4681      	mov	r9, r0
 8007eac:	b9e0      	cbnz	r0, 8007ee8 <_strtod_l+0x788>
 8007eae:	f04f 0900 	mov.w	r9, #0
 8007eb2:	e674      	b.n	8007b9e <_strtod_l+0x43e>
 8007eb4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007eb8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007ebc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007ec0:	35e2      	adds	r5, #226	@ 0xe2
 8007ec2:	fa01 f305 	lsl.w	r3, r1, r5
 8007ec6:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ec8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007eca:	e7ba      	b.n	8007e42 <_strtod_l+0x6e2>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ed4:	e7b5      	b.n	8007e42 <_strtod_l+0x6e2>
 8007ed6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ed8:	9805      	ldr	r0, [sp, #20]
 8007eda:	462a      	mov	r2, r5
 8007edc:	f002 f9e8 	bl	800a2b0 <__lshift>
 8007ee0:	901a      	str	r0, [sp, #104]	@ 0x68
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	d1d9      	bne.n	8007e9a <_strtod_l+0x73a>
 8007ee6:	e65a      	b.n	8007b9e <_strtod_l+0x43e>
 8007ee8:	2e00      	cmp	r6, #0
 8007eea:	dd07      	ble.n	8007efc <_strtod_l+0x79c>
 8007eec:	4649      	mov	r1, r9
 8007eee:	9805      	ldr	r0, [sp, #20]
 8007ef0:	4632      	mov	r2, r6
 8007ef2:	f002 f9dd 	bl	800a2b0 <__lshift>
 8007ef6:	4681      	mov	r9, r0
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	d0d8      	beq.n	8007eae <_strtod_l+0x74e>
 8007efc:	2f00      	cmp	r7, #0
 8007efe:	dd08      	ble.n	8007f12 <_strtod_l+0x7b2>
 8007f00:	4641      	mov	r1, r8
 8007f02:	9805      	ldr	r0, [sp, #20]
 8007f04:	463a      	mov	r2, r7
 8007f06:	f002 f9d3 	bl	800a2b0 <__lshift>
 8007f0a:	4680      	mov	r8, r0
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	f43f ae46 	beq.w	8007b9e <_strtod_l+0x43e>
 8007f12:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f14:	9805      	ldr	r0, [sp, #20]
 8007f16:	464a      	mov	r2, r9
 8007f18:	f002 fa52 	bl	800a3c0 <__mdiff>
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	f43f ae3d 	beq.w	8007b9e <_strtod_l+0x43e>
 8007f24:	68c3      	ldr	r3, [r0, #12]
 8007f26:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f28:	2300      	movs	r3, #0
 8007f2a:	60c3      	str	r3, [r0, #12]
 8007f2c:	4641      	mov	r1, r8
 8007f2e:	f002 fa2b 	bl	800a388 <__mcmp>
 8007f32:	2800      	cmp	r0, #0
 8007f34:	da46      	bge.n	8007fc4 <_strtod_l+0x864>
 8007f36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f38:	ea53 030a 	orrs.w	r3, r3, sl
 8007f3c:	d16c      	bne.n	8008018 <_strtod_l+0x8b8>
 8007f3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d168      	bne.n	8008018 <_strtod_l+0x8b8>
 8007f46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007f4a:	0d1b      	lsrs	r3, r3, #20
 8007f4c:	051b      	lsls	r3, r3, #20
 8007f4e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007f52:	d961      	bls.n	8008018 <_strtod_l+0x8b8>
 8007f54:	6963      	ldr	r3, [r4, #20]
 8007f56:	b913      	cbnz	r3, 8007f5e <_strtod_l+0x7fe>
 8007f58:	6923      	ldr	r3, [r4, #16]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	dd5c      	ble.n	8008018 <_strtod_l+0x8b8>
 8007f5e:	4621      	mov	r1, r4
 8007f60:	2201      	movs	r2, #1
 8007f62:	9805      	ldr	r0, [sp, #20]
 8007f64:	f002 f9a4 	bl	800a2b0 <__lshift>
 8007f68:	4641      	mov	r1, r8
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	f002 fa0c 	bl	800a388 <__mcmp>
 8007f70:	2800      	cmp	r0, #0
 8007f72:	dd51      	ble.n	8008018 <_strtod_l+0x8b8>
 8007f74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007f78:	9a08      	ldr	r2, [sp, #32]
 8007f7a:	0d1b      	lsrs	r3, r3, #20
 8007f7c:	051b      	lsls	r3, r3, #20
 8007f7e:	2a00      	cmp	r2, #0
 8007f80:	d06b      	beq.n	800805a <_strtod_l+0x8fa>
 8007f82:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007f86:	d868      	bhi.n	800805a <_strtod_l+0x8fa>
 8007f88:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007f8c:	f67f ae9d 	bls.w	8007cca <_strtod_l+0x56a>
 8007f90:	4b0a      	ldr	r3, [pc, #40]	@ (8007fbc <_strtod_l+0x85c>)
 8007f92:	4650      	mov	r0, sl
 8007f94:	4659      	mov	r1, fp
 8007f96:	2200      	movs	r2, #0
 8007f98:	f7f8 fb2e 	bl	80005f8 <__aeabi_dmul>
 8007f9c:	4b08      	ldr	r3, [pc, #32]	@ (8007fc0 <_strtod_l+0x860>)
 8007f9e:	400b      	ands	r3, r1
 8007fa0:	4682      	mov	sl, r0
 8007fa2:	468b      	mov	fp, r1
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f47f ae05 	bne.w	8007bb4 <_strtod_l+0x454>
 8007faa:	9a05      	ldr	r2, [sp, #20]
 8007fac:	2322      	movs	r3, #34	@ 0x22
 8007fae:	6013      	str	r3, [r2, #0]
 8007fb0:	e600      	b.n	8007bb4 <_strtod_l+0x454>
 8007fb2:	bf00      	nop
 8007fb4:	0800b350 	.word	0x0800b350
 8007fb8:	fffffc02 	.word	0xfffffc02
 8007fbc:	39500000 	.word	0x39500000
 8007fc0:	7ff00000 	.word	0x7ff00000
 8007fc4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007fc8:	d165      	bne.n	8008096 <_strtod_l+0x936>
 8007fca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007fcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fd0:	b35a      	cbz	r2, 800802a <_strtod_l+0x8ca>
 8007fd2:	4a9f      	ldr	r2, [pc, #636]	@ (8008250 <_strtod_l+0xaf0>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d12b      	bne.n	8008030 <_strtod_l+0x8d0>
 8007fd8:	9b08      	ldr	r3, [sp, #32]
 8007fda:	4651      	mov	r1, sl
 8007fdc:	b303      	cbz	r3, 8008020 <_strtod_l+0x8c0>
 8007fde:	4b9d      	ldr	r3, [pc, #628]	@ (8008254 <_strtod_l+0xaf4>)
 8007fe0:	465a      	mov	r2, fp
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007fe8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007fec:	d81b      	bhi.n	8008026 <_strtod_l+0x8c6>
 8007fee:	0d1b      	lsrs	r3, r3, #20
 8007ff0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff8:	4299      	cmp	r1, r3
 8007ffa:	d119      	bne.n	8008030 <_strtod_l+0x8d0>
 8007ffc:	4b96      	ldr	r3, [pc, #600]	@ (8008258 <_strtod_l+0xaf8>)
 8007ffe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008000:	429a      	cmp	r2, r3
 8008002:	d102      	bne.n	800800a <_strtod_l+0x8aa>
 8008004:	3101      	adds	r1, #1
 8008006:	f43f adca 	beq.w	8007b9e <_strtod_l+0x43e>
 800800a:	4b92      	ldr	r3, [pc, #584]	@ (8008254 <_strtod_l+0xaf4>)
 800800c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800800e:	401a      	ands	r2, r3
 8008010:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008014:	f04f 0a00 	mov.w	sl, #0
 8008018:	9b08      	ldr	r3, [sp, #32]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1b8      	bne.n	8007f90 <_strtod_l+0x830>
 800801e:	e5c9      	b.n	8007bb4 <_strtod_l+0x454>
 8008020:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008024:	e7e8      	b.n	8007ff8 <_strtod_l+0x898>
 8008026:	4613      	mov	r3, r2
 8008028:	e7e6      	b.n	8007ff8 <_strtod_l+0x898>
 800802a:	ea53 030a 	orrs.w	r3, r3, sl
 800802e:	d0a1      	beq.n	8007f74 <_strtod_l+0x814>
 8008030:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008032:	b1db      	cbz	r3, 800806c <_strtod_l+0x90c>
 8008034:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008036:	4213      	tst	r3, r2
 8008038:	d0ee      	beq.n	8008018 <_strtod_l+0x8b8>
 800803a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800803c:	9a08      	ldr	r2, [sp, #32]
 800803e:	4650      	mov	r0, sl
 8008040:	4659      	mov	r1, fp
 8008042:	b1bb      	cbz	r3, 8008074 <_strtod_l+0x914>
 8008044:	f7ff fb6c 	bl	8007720 <sulp>
 8008048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800804c:	ec53 2b10 	vmov	r2, r3, d0
 8008050:	f7f8 f91c 	bl	800028c <__adddf3>
 8008054:	4682      	mov	sl, r0
 8008056:	468b      	mov	fp, r1
 8008058:	e7de      	b.n	8008018 <_strtod_l+0x8b8>
 800805a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800805e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008062:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008066:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800806a:	e7d5      	b.n	8008018 <_strtod_l+0x8b8>
 800806c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800806e:	ea13 0f0a 	tst.w	r3, sl
 8008072:	e7e1      	b.n	8008038 <_strtod_l+0x8d8>
 8008074:	f7ff fb54 	bl	8007720 <sulp>
 8008078:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800807c:	ec53 2b10 	vmov	r2, r3, d0
 8008080:	f7f8 f902 	bl	8000288 <__aeabi_dsub>
 8008084:	2200      	movs	r2, #0
 8008086:	2300      	movs	r3, #0
 8008088:	4682      	mov	sl, r0
 800808a:	468b      	mov	fp, r1
 800808c:	f7f8 fd1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008090:	2800      	cmp	r0, #0
 8008092:	d0c1      	beq.n	8008018 <_strtod_l+0x8b8>
 8008094:	e619      	b.n	8007cca <_strtod_l+0x56a>
 8008096:	4641      	mov	r1, r8
 8008098:	4620      	mov	r0, r4
 800809a:	f002 faed 	bl	800a678 <__ratio>
 800809e:	ec57 6b10 	vmov	r6, r7, d0
 80080a2:	2200      	movs	r2, #0
 80080a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80080a8:	4630      	mov	r0, r6
 80080aa:	4639      	mov	r1, r7
 80080ac:	f7f8 fd20 	bl	8000af0 <__aeabi_dcmple>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	d06f      	beq.n	8008194 <_strtod_l+0xa34>
 80080b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d17a      	bne.n	80081b0 <_strtod_l+0xa50>
 80080ba:	f1ba 0f00 	cmp.w	sl, #0
 80080be:	d158      	bne.n	8008172 <_strtod_l+0xa12>
 80080c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d15a      	bne.n	8008180 <_strtod_l+0xa20>
 80080ca:	4b64      	ldr	r3, [pc, #400]	@ (800825c <_strtod_l+0xafc>)
 80080cc:	2200      	movs	r2, #0
 80080ce:	4630      	mov	r0, r6
 80080d0:	4639      	mov	r1, r7
 80080d2:	f7f8 fd03 	bl	8000adc <__aeabi_dcmplt>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d159      	bne.n	800818e <_strtod_l+0xa2e>
 80080da:	4630      	mov	r0, r6
 80080dc:	4639      	mov	r1, r7
 80080de:	4b60      	ldr	r3, [pc, #384]	@ (8008260 <_strtod_l+0xb00>)
 80080e0:	2200      	movs	r2, #0
 80080e2:	f7f8 fa89 	bl	80005f8 <__aeabi_dmul>
 80080e6:	4606      	mov	r6, r0
 80080e8:	460f      	mov	r7, r1
 80080ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80080ee:	9606      	str	r6, [sp, #24]
 80080f0:	9307      	str	r3, [sp, #28]
 80080f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080f6:	4d57      	ldr	r5, [pc, #348]	@ (8008254 <_strtod_l+0xaf4>)
 80080f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80080fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080fe:	401d      	ands	r5, r3
 8008100:	4b58      	ldr	r3, [pc, #352]	@ (8008264 <_strtod_l+0xb04>)
 8008102:	429d      	cmp	r5, r3
 8008104:	f040 80b2 	bne.w	800826c <_strtod_l+0xb0c>
 8008108:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800810a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800810e:	ec4b ab10 	vmov	d0, sl, fp
 8008112:	f002 f9e9 	bl	800a4e8 <__ulp>
 8008116:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800811a:	ec51 0b10 	vmov	r0, r1, d0
 800811e:	f7f8 fa6b 	bl	80005f8 <__aeabi_dmul>
 8008122:	4652      	mov	r2, sl
 8008124:	465b      	mov	r3, fp
 8008126:	f7f8 f8b1 	bl	800028c <__adddf3>
 800812a:	460b      	mov	r3, r1
 800812c:	4949      	ldr	r1, [pc, #292]	@ (8008254 <_strtod_l+0xaf4>)
 800812e:	4a4e      	ldr	r2, [pc, #312]	@ (8008268 <_strtod_l+0xb08>)
 8008130:	4019      	ands	r1, r3
 8008132:	4291      	cmp	r1, r2
 8008134:	4682      	mov	sl, r0
 8008136:	d942      	bls.n	80081be <_strtod_l+0xa5e>
 8008138:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800813a:	4b47      	ldr	r3, [pc, #284]	@ (8008258 <_strtod_l+0xaf8>)
 800813c:	429a      	cmp	r2, r3
 800813e:	d103      	bne.n	8008148 <_strtod_l+0x9e8>
 8008140:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008142:	3301      	adds	r3, #1
 8008144:	f43f ad2b 	beq.w	8007b9e <_strtod_l+0x43e>
 8008148:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008258 <_strtod_l+0xaf8>
 800814c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008150:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008152:	9805      	ldr	r0, [sp, #20]
 8008154:	f001 fe94 	bl	8009e80 <_Bfree>
 8008158:	9805      	ldr	r0, [sp, #20]
 800815a:	4649      	mov	r1, r9
 800815c:	f001 fe90 	bl	8009e80 <_Bfree>
 8008160:	9805      	ldr	r0, [sp, #20]
 8008162:	4641      	mov	r1, r8
 8008164:	f001 fe8c 	bl	8009e80 <_Bfree>
 8008168:	9805      	ldr	r0, [sp, #20]
 800816a:	4621      	mov	r1, r4
 800816c:	f001 fe88 	bl	8009e80 <_Bfree>
 8008170:	e618      	b.n	8007da4 <_strtod_l+0x644>
 8008172:	f1ba 0f01 	cmp.w	sl, #1
 8008176:	d103      	bne.n	8008180 <_strtod_l+0xa20>
 8008178:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800817a:	2b00      	cmp	r3, #0
 800817c:	f43f ada5 	beq.w	8007cca <_strtod_l+0x56a>
 8008180:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008230 <_strtod_l+0xad0>
 8008184:	4f35      	ldr	r7, [pc, #212]	@ (800825c <_strtod_l+0xafc>)
 8008186:	ed8d 7b06 	vstr	d7, [sp, #24]
 800818a:	2600      	movs	r6, #0
 800818c:	e7b1      	b.n	80080f2 <_strtod_l+0x992>
 800818e:	4f34      	ldr	r7, [pc, #208]	@ (8008260 <_strtod_l+0xb00>)
 8008190:	2600      	movs	r6, #0
 8008192:	e7aa      	b.n	80080ea <_strtod_l+0x98a>
 8008194:	4b32      	ldr	r3, [pc, #200]	@ (8008260 <_strtod_l+0xb00>)
 8008196:	4630      	mov	r0, r6
 8008198:	4639      	mov	r1, r7
 800819a:	2200      	movs	r2, #0
 800819c:	f7f8 fa2c 	bl	80005f8 <__aeabi_dmul>
 80081a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081a2:	4606      	mov	r6, r0
 80081a4:	460f      	mov	r7, r1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d09f      	beq.n	80080ea <_strtod_l+0x98a>
 80081aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80081ae:	e7a0      	b.n	80080f2 <_strtod_l+0x992>
 80081b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008238 <_strtod_l+0xad8>
 80081b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80081b8:	ec57 6b17 	vmov	r6, r7, d7
 80081bc:	e799      	b.n	80080f2 <_strtod_l+0x992>
 80081be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80081c2:	9b08      	ldr	r3, [sp, #32]
 80081c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1c1      	bne.n	8008150 <_strtod_l+0x9f0>
 80081cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80081d0:	0d1b      	lsrs	r3, r3, #20
 80081d2:	051b      	lsls	r3, r3, #20
 80081d4:	429d      	cmp	r5, r3
 80081d6:	d1bb      	bne.n	8008150 <_strtod_l+0x9f0>
 80081d8:	4630      	mov	r0, r6
 80081da:	4639      	mov	r1, r7
 80081dc:	f7f8 fd6c 	bl	8000cb8 <__aeabi_d2lz>
 80081e0:	f7f8 f9dc 	bl	800059c <__aeabi_l2d>
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	4630      	mov	r0, r6
 80081ea:	4639      	mov	r1, r7
 80081ec:	f7f8 f84c 	bl	8000288 <__aeabi_dsub>
 80081f0:	460b      	mov	r3, r1
 80081f2:	4602      	mov	r2, r0
 80081f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80081f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80081fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081fe:	ea46 060a 	orr.w	r6, r6, sl
 8008202:	431e      	orrs	r6, r3
 8008204:	d06f      	beq.n	80082e6 <_strtod_l+0xb86>
 8008206:	a30e      	add	r3, pc, #56	@ (adr r3, 8008240 <_strtod_l+0xae0>)
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	f7f8 fc66 	bl	8000adc <__aeabi_dcmplt>
 8008210:	2800      	cmp	r0, #0
 8008212:	f47f accf 	bne.w	8007bb4 <_strtod_l+0x454>
 8008216:	a30c      	add	r3, pc, #48	@ (adr r3, 8008248 <_strtod_l+0xae8>)
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008220:	f7f8 fc7a 	bl	8000b18 <__aeabi_dcmpgt>
 8008224:	2800      	cmp	r0, #0
 8008226:	d093      	beq.n	8008150 <_strtod_l+0x9f0>
 8008228:	e4c4      	b.n	8007bb4 <_strtod_l+0x454>
 800822a:	bf00      	nop
 800822c:	f3af 8000 	nop.w
 8008230:	00000000 	.word	0x00000000
 8008234:	bff00000 	.word	0xbff00000
 8008238:	00000000 	.word	0x00000000
 800823c:	3ff00000 	.word	0x3ff00000
 8008240:	94a03595 	.word	0x94a03595
 8008244:	3fdfffff 	.word	0x3fdfffff
 8008248:	35afe535 	.word	0x35afe535
 800824c:	3fe00000 	.word	0x3fe00000
 8008250:	000fffff 	.word	0x000fffff
 8008254:	7ff00000 	.word	0x7ff00000
 8008258:	7fefffff 	.word	0x7fefffff
 800825c:	3ff00000 	.word	0x3ff00000
 8008260:	3fe00000 	.word	0x3fe00000
 8008264:	7fe00000 	.word	0x7fe00000
 8008268:	7c9fffff 	.word	0x7c9fffff
 800826c:	9b08      	ldr	r3, [sp, #32]
 800826e:	b323      	cbz	r3, 80082ba <_strtod_l+0xb5a>
 8008270:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008274:	d821      	bhi.n	80082ba <_strtod_l+0xb5a>
 8008276:	a328      	add	r3, pc, #160	@ (adr r3, 8008318 <_strtod_l+0xbb8>)
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	4630      	mov	r0, r6
 800827e:	4639      	mov	r1, r7
 8008280:	f7f8 fc36 	bl	8000af0 <__aeabi_dcmple>
 8008284:	b1a0      	cbz	r0, 80082b0 <_strtod_l+0xb50>
 8008286:	4639      	mov	r1, r7
 8008288:	4630      	mov	r0, r6
 800828a:	f7f8 fc8d 	bl	8000ba8 <__aeabi_d2uiz>
 800828e:	2801      	cmp	r0, #1
 8008290:	bf38      	it	cc
 8008292:	2001      	movcc	r0, #1
 8008294:	f7f8 f936 	bl	8000504 <__aeabi_ui2d>
 8008298:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800829a:	4606      	mov	r6, r0
 800829c:	460f      	mov	r7, r1
 800829e:	b9fb      	cbnz	r3, 80082e0 <_strtod_l+0xb80>
 80082a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80082a4:	9014      	str	r0, [sp, #80]	@ 0x50
 80082a6:	9315      	str	r3, [sp, #84]	@ 0x54
 80082a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80082ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80082b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80082b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80082b6:	1b5b      	subs	r3, r3, r5
 80082b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80082ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80082be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80082c2:	f002 f911 	bl	800a4e8 <__ulp>
 80082c6:	4650      	mov	r0, sl
 80082c8:	ec53 2b10 	vmov	r2, r3, d0
 80082cc:	4659      	mov	r1, fp
 80082ce:	f7f8 f993 	bl	80005f8 <__aeabi_dmul>
 80082d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80082d6:	f7f7 ffd9 	bl	800028c <__adddf3>
 80082da:	4682      	mov	sl, r0
 80082dc:	468b      	mov	fp, r1
 80082de:	e770      	b.n	80081c2 <_strtod_l+0xa62>
 80082e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80082e4:	e7e0      	b.n	80082a8 <_strtod_l+0xb48>
 80082e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008320 <_strtod_l+0xbc0>)
 80082e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ec:	f7f8 fbf6 	bl	8000adc <__aeabi_dcmplt>
 80082f0:	e798      	b.n	8008224 <_strtod_l+0xac4>
 80082f2:	2300      	movs	r3, #0
 80082f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80082f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082fa:	6013      	str	r3, [r2, #0]
 80082fc:	f7ff ba6d 	b.w	80077da <_strtod_l+0x7a>
 8008300:	2a65      	cmp	r2, #101	@ 0x65
 8008302:	f43f ab66 	beq.w	80079d2 <_strtod_l+0x272>
 8008306:	2a45      	cmp	r2, #69	@ 0x45
 8008308:	f43f ab63 	beq.w	80079d2 <_strtod_l+0x272>
 800830c:	2301      	movs	r3, #1
 800830e:	f7ff bb9e 	b.w	8007a4e <_strtod_l+0x2ee>
 8008312:	bf00      	nop
 8008314:	f3af 8000 	nop.w
 8008318:	ffc00000 	.word	0xffc00000
 800831c:	41dfffff 	.word	0x41dfffff
 8008320:	94a03595 	.word	0x94a03595
 8008324:	3fcfffff 	.word	0x3fcfffff

08008328 <_strtod_r>:
 8008328:	4b01      	ldr	r3, [pc, #4]	@ (8008330 <_strtod_r+0x8>)
 800832a:	f7ff ba19 	b.w	8007760 <_strtod_l>
 800832e:	bf00      	nop
 8008330:	20000030 	.word	0x20000030

08008334 <_strtol_l.constprop.0>:
 8008334:	2b24      	cmp	r3, #36	@ 0x24
 8008336:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800833a:	4686      	mov	lr, r0
 800833c:	4690      	mov	r8, r2
 800833e:	d801      	bhi.n	8008344 <_strtol_l.constprop.0+0x10>
 8008340:	2b01      	cmp	r3, #1
 8008342:	d106      	bne.n	8008352 <_strtol_l.constprop.0+0x1e>
 8008344:	f000 f8be 	bl	80084c4 <__errno>
 8008348:	2316      	movs	r3, #22
 800834a:	6003      	str	r3, [r0, #0]
 800834c:	2000      	movs	r0, #0
 800834e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008352:	4834      	ldr	r0, [pc, #208]	@ (8008424 <_strtol_l.constprop.0+0xf0>)
 8008354:	460d      	mov	r5, r1
 8008356:	462a      	mov	r2, r5
 8008358:	f815 4b01 	ldrb.w	r4, [r5], #1
 800835c:	5d06      	ldrb	r6, [r0, r4]
 800835e:	f016 0608 	ands.w	r6, r6, #8
 8008362:	d1f8      	bne.n	8008356 <_strtol_l.constprop.0+0x22>
 8008364:	2c2d      	cmp	r4, #45	@ 0x2d
 8008366:	d12d      	bne.n	80083c4 <_strtol_l.constprop.0+0x90>
 8008368:	782c      	ldrb	r4, [r5, #0]
 800836a:	2601      	movs	r6, #1
 800836c:	1c95      	adds	r5, r2, #2
 800836e:	f033 0210 	bics.w	r2, r3, #16
 8008372:	d109      	bne.n	8008388 <_strtol_l.constprop.0+0x54>
 8008374:	2c30      	cmp	r4, #48	@ 0x30
 8008376:	d12a      	bne.n	80083ce <_strtol_l.constprop.0+0x9a>
 8008378:	782a      	ldrb	r2, [r5, #0]
 800837a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800837e:	2a58      	cmp	r2, #88	@ 0x58
 8008380:	d125      	bne.n	80083ce <_strtol_l.constprop.0+0x9a>
 8008382:	786c      	ldrb	r4, [r5, #1]
 8008384:	2310      	movs	r3, #16
 8008386:	3502      	adds	r5, #2
 8008388:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800838c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008390:	2200      	movs	r2, #0
 8008392:	fbbc f9f3 	udiv	r9, ip, r3
 8008396:	4610      	mov	r0, r2
 8008398:	fb03 ca19 	mls	sl, r3, r9, ip
 800839c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80083a0:	2f09      	cmp	r7, #9
 80083a2:	d81b      	bhi.n	80083dc <_strtol_l.constprop.0+0xa8>
 80083a4:	463c      	mov	r4, r7
 80083a6:	42a3      	cmp	r3, r4
 80083a8:	dd27      	ble.n	80083fa <_strtol_l.constprop.0+0xc6>
 80083aa:	1c57      	adds	r7, r2, #1
 80083ac:	d007      	beq.n	80083be <_strtol_l.constprop.0+0x8a>
 80083ae:	4581      	cmp	r9, r0
 80083b0:	d320      	bcc.n	80083f4 <_strtol_l.constprop.0+0xc0>
 80083b2:	d101      	bne.n	80083b8 <_strtol_l.constprop.0+0x84>
 80083b4:	45a2      	cmp	sl, r4
 80083b6:	db1d      	blt.n	80083f4 <_strtol_l.constprop.0+0xc0>
 80083b8:	fb00 4003 	mla	r0, r0, r3, r4
 80083bc:	2201      	movs	r2, #1
 80083be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083c2:	e7eb      	b.n	800839c <_strtol_l.constprop.0+0x68>
 80083c4:	2c2b      	cmp	r4, #43	@ 0x2b
 80083c6:	bf04      	itt	eq
 80083c8:	782c      	ldrbeq	r4, [r5, #0]
 80083ca:	1c95      	addeq	r5, r2, #2
 80083cc:	e7cf      	b.n	800836e <_strtol_l.constprop.0+0x3a>
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1da      	bne.n	8008388 <_strtol_l.constprop.0+0x54>
 80083d2:	2c30      	cmp	r4, #48	@ 0x30
 80083d4:	bf0c      	ite	eq
 80083d6:	2308      	moveq	r3, #8
 80083d8:	230a      	movne	r3, #10
 80083da:	e7d5      	b.n	8008388 <_strtol_l.constprop.0+0x54>
 80083dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80083e0:	2f19      	cmp	r7, #25
 80083e2:	d801      	bhi.n	80083e8 <_strtol_l.constprop.0+0xb4>
 80083e4:	3c37      	subs	r4, #55	@ 0x37
 80083e6:	e7de      	b.n	80083a6 <_strtol_l.constprop.0+0x72>
 80083e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80083ec:	2f19      	cmp	r7, #25
 80083ee:	d804      	bhi.n	80083fa <_strtol_l.constprop.0+0xc6>
 80083f0:	3c57      	subs	r4, #87	@ 0x57
 80083f2:	e7d8      	b.n	80083a6 <_strtol_l.constprop.0+0x72>
 80083f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083f8:	e7e1      	b.n	80083be <_strtol_l.constprop.0+0x8a>
 80083fa:	1c53      	adds	r3, r2, #1
 80083fc:	d108      	bne.n	8008410 <_strtol_l.constprop.0+0xdc>
 80083fe:	2322      	movs	r3, #34	@ 0x22
 8008400:	f8ce 3000 	str.w	r3, [lr]
 8008404:	4660      	mov	r0, ip
 8008406:	f1b8 0f00 	cmp.w	r8, #0
 800840a:	d0a0      	beq.n	800834e <_strtol_l.constprop.0+0x1a>
 800840c:	1e69      	subs	r1, r5, #1
 800840e:	e006      	b.n	800841e <_strtol_l.constprop.0+0xea>
 8008410:	b106      	cbz	r6, 8008414 <_strtol_l.constprop.0+0xe0>
 8008412:	4240      	negs	r0, r0
 8008414:	f1b8 0f00 	cmp.w	r8, #0
 8008418:	d099      	beq.n	800834e <_strtol_l.constprop.0+0x1a>
 800841a:	2a00      	cmp	r2, #0
 800841c:	d1f6      	bne.n	800840c <_strtol_l.constprop.0+0xd8>
 800841e:	f8c8 1000 	str.w	r1, [r8]
 8008422:	e794      	b.n	800834e <_strtol_l.constprop.0+0x1a>
 8008424:	0800b381 	.word	0x0800b381

08008428 <_strtol_r>:
 8008428:	f7ff bf84 	b.w	8008334 <_strtol_l.constprop.0>

0800842c <_fwalk_sglue>:
 800842c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008430:	4607      	mov	r7, r0
 8008432:	4688      	mov	r8, r1
 8008434:	4614      	mov	r4, r2
 8008436:	2600      	movs	r6, #0
 8008438:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800843c:	f1b9 0901 	subs.w	r9, r9, #1
 8008440:	d505      	bpl.n	800844e <_fwalk_sglue+0x22>
 8008442:	6824      	ldr	r4, [r4, #0]
 8008444:	2c00      	cmp	r4, #0
 8008446:	d1f7      	bne.n	8008438 <_fwalk_sglue+0xc>
 8008448:	4630      	mov	r0, r6
 800844a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800844e:	89ab      	ldrh	r3, [r5, #12]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d907      	bls.n	8008464 <_fwalk_sglue+0x38>
 8008454:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008458:	3301      	adds	r3, #1
 800845a:	d003      	beq.n	8008464 <_fwalk_sglue+0x38>
 800845c:	4629      	mov	r1, r5
 800845e:	4638      	mov	r0, r7
 8008460:	47c0      	blx	r8
 8008462:	4306      	orrs	r6, r0
 8008464:	3568      	adds	r5, #104	@ 0x68
 8008466:	e7e9      	b.n	800843c <_fwalk_sglue+0x10>

08008468 <strncmp>:
 8008468:	b510      	push	{r4, lr}
 800846a:	b16a      	cbz	r2, 8008488 <strncmp+0x20>
 800846c:	3901      	subs	r1, #1
 800846e:	1884      	adds	r4, r0, r2
 8008470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008474:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008478:	429a      	cmp	r2, r3
 800847a:	d103      	bne.n	8008484 <strncmp+0x1c>
 800847c:	42a0      	cmp	r0, r4
 800847e:	d001      	beq.n	8008484 <strncmp+0x1c>
 8008480:	2a00      	cmp	r2, #0
 8008482:	d1f5      	bne.n	8008470 <strncmp+0x8>
 8008484:	1ad0      	subs	r0, r2, r3
 8008486:	bd10      	pop	{r4, pc}
 8008488:	4610      	mov	r0, r2
 800848a:	e7fc      	b.n	8008486 <strncmp+0x1e>

0800848c <memcmp>:
 800848c:	b510      	push	{r4, lr}
 800848e:	3901      	subs	r1, #1
 8008490:	4402      	add	r2, r0
 8008492:	4290      	cmp	r0, r2
 8008494:	d101      	bne.n	800849a <memcmp+0xe>
 8008496:	2000      	movs	r0, #0
 8008498:	e005      	b.n	80084a6 <memcmp+0x1a>
 800849a:	7803      	ldrb	r3, [r0, #0]
 800849c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80084a0:	42a3      	cmp	r3, r4
 80084a2:	d001      	beq.n	80084a8 <memcmp+0x1c>
 80084a4:	1b18      	subs	r0, r3, r4
 80084a6:	bd10      	pop	{r4, pc}
 80084a8:	3001      	adds	r0, #1
 80084aa:	e7f2      	b.n	8008492 <memcmp+0x6>

080084ac <memset>:
 80084ac:	4402      	add	r2, r0
 80084ae:	4603      	mov	r3, r0
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d100      	bne.n	80084b6 <memset+0xa>
 80084b4:	4770      	bx	lr
 80084b6:	f803 1b01 	strb.w	r1, [r3], #1
 80084ba:	e7f9      	b.n	80084b0 <memset+0x4>

080084bc <_localeconv_r>:
 80084bc:	4800      	ldr	r0, [pc, #0]	@ (80084c0 <_localeconv_r+0x4>)
 80084be:	4770      	bx	lr
 80084c0:	20000120 	.word	0x20000120

080084c4 <__errno>:
 80084c4:	4b01      	ldr	r3, [pc, #4]	@ (80084cc <__errno+0x8>)
 80084c6:	6818      	ldr	r0, [r3, #0]
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	2000019c 	.word	0x2000019c

080084d0 <__libc_init_array>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	4d0d      	ldr	r5, [pc, #52]	@ (8008508 <__libc_init_array+0x38>)
 80084d4:	4c0d      	ldr	r4, [pc, #52]	@ (800850c <__libc_init_array+0x3c>)
 80084d6:	1b64      	subs	r4, r4, r5
 80084d8:	10a4      	asrs	r4, r4, #2
 80084da:	2600      	movs	r6, #0
 80084dc:	42a6      	cmp	r6, r4
 80084de:	d109      	bne.n	80084f4 <__libc_init_array+0x24>
 80084e0:	4d0b      	ldr	r5, [pc, #44]	@ (8008510 <__libc_init_array+0x40>)
 80084e2:	4c0c      	ldr	r4, [pc, #48]	@ (8008514 <__libc_init_array+0x44>)
 80084e4:	f002 fe6e 	bl	800b1c4 <_init>
 80084e8:	1b64      	subs	r4, r4, r5
 80084ea:	10a4      	asrs	r4, r4, #2
 80084ec:	2600      	movs	r6, #0
 80084ee:	42a6      	cmp	r6, r4
 80084f0:	d105      	bne.n	80084fe <__libc_init_array+0x2e>
 80084f2:	bd70      	pop	{r4, r5, r6, pc}
 80084f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f8:	4798      	blx	r3
 80084fa:	3601      	adds	r6, #1
 80084fc:	e7ee      	b.n	80084dc <__libc_init_array+0xc>
 80084fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008502:	4798      	blx	r3
 8008504:	3601      	adds	r6, #1
 8008506:	e7f2      	b.n	80084ee <__libc_init_array+0x1e>
 8008508:	0800b71c 	.word	0x0800b71c
 800850c:	0800b71c 	.word	0x0800b71c
 8008510:	0800b71c 	.word	0x0800b71c
 8008514:	0800b720 	.word	0x0800b720

08008518 <__retarget_lock_init_recursive>:
 8008518:	4770      	bx	lr

0800851a <__retarget_lock_acquire_recursive>:
 800851a:	4770      	bx	lr

0800851c <__retarget_lock_release_recursive>:
 800851c:	4770      	bx	lr

0800851e <memcpy>:
 800851e:	440a      	add	r2, r1
 8008520:	4291      	cmp	r1, r2
 8008522:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008526:	d100      	bne.n	800852a <memcpy+0xc>
 8008528:	4770      	bx	lr
 800852a:	b510      	push	{r4, lr}
 800852c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008530:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008534:	4291      	cmp	r1, r2
 8008536:	d1f9      	bne.n	800852c <memcpy+0xe>
 8008538:	bd10      	pop	{r4, pc}
 800853a:	0000      	movs	r0, r0
 800853c:	0000      	movs	r0, r0
	...

08008540 <nan>:
 8008540:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008548 <nan+0x8>
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	00000000 	.word	0x00000000
 800854c:	7ff80000 	.word	0x7ff80000

08008550 <nanf>:
 8008550:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008558 <nanf+0x8>
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	7fc00000 	.word	0x7fc00000

0800855c <quorem>:
 800855c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008560:	6903      	ldr	r3, [r0, #16]
 8008562:	690c      	ldr	r4, [r1, #16]
 8008564:	42a3      	cmp	r3, r4
 8008566:	4607      	mov	r7, r0
 8008568:	db7e      	blt.n	8008668 <quorem+0x10c>
 800856a:	3c01      	subs	r4, #1
 800856c:	f101 0814 	add.w	r8, r1, #20
 8008570:	00a3      	lsls	r3, r4, #2
 8008572:	f100 0514 	add.w	r5, r0, #20
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800857c:	9301      	str	r3, [sp, #4]
 800857e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008582:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008586:	3301      	adds	r3, #1
 8008588:	429a      	cmp	r2, r3
 800858a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800858e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008592:	d32e      	bcc.n	80085f2 <quorem+0x96>
 8008594:	f04f 0a00 	mov.w	sl, #0
 8008598:	46c4      	mov	ip, r8
 800859a:	46ae      	mov	lr, r5
 800859c:	46d3      	mov	fp, sl
 800859e:	f85c 3b04 	ldr.w	r3, [ip], #4
 80085a2:	b298      	uxth	r0, r3
 80085a4:	fb06 a000 	mla	r0, r6, r0, sl
 80085a8:	0c02      	lsrs	r2, r0, #16
 80085aa:	0c1b      	lsrs	r3, r3, #16
 80085ac:	fb06 2303 	mla	r3, r6, r3, r2
 80085b0:	f8de 2000 	ldr.w	r2, [lr]
 80085b4:	b280      	uxth	r0, r0
 80085b6:	b292      	uxth	r2, r2
 80085b8:	1a12      	subs	r2, r2, r0
 80085ba:	445a      	add	r2, fp
 80085bc:	f8de 0000 	ldr.w	r0, [lr]
 80085c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80085ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80085ce:	b292      	uxth	r2, r2
 80085d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80085d4:	45e1      	cmp	r9, ip
 80085d6:	f84e 2b04 	str.w	r2, [lr], #4
 80085da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80085de:	d2de      	bcs.n	800859e <quorem+0x42>
 80085e0:	9b00      	ldr	r3, [sp, #0]
 80085e2:	58eb      	ldr	r3, [r5, r3]
 80085e4:	b92b      	cbnz	r3, 80085f2 <quorem+0x96>
 80085e6:	9b01      	ldr	r3, [sp, #4]
 80085e8:	3b04      	subs	r3, #4
 80085ea:	429d      	cmp	r5, r3
 80085ec:	461a      	mov	r2, r3
 80085ee:	d32f      	bcc.n	8008650 <quorem+0xf4>
 80085f0:	613c      	str	r4, [r7, #16]
 80085f2:	4638      	mov	r0, r7
 80085f4:	f001 fec8 	bl	800a388 <__mcmp>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	db25      	blt.n	8008648 <quorem+0xec>
 80085fc:	4629      	mov	r1, r5
 80085fe:	2000      	movs	r0, #0
 8008600:	f858 2b04 	ldr.w	r2, [r8], #4
 8008604:	f8d1 c000 	ldr.w	ip, [r1]
 8008608:	fa1f fe82 	uxth.w	lr, r2
 800860c:	fa1f f38c 	uxth.w	r3, ip
 8008610:	eba3 030e 	sub.w	r3, r3, lr
 8008614:	4403      	add	r3, r0
 8008616:	0c12      	lsrs	r2, r2, #16
 8008618:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800861c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008620:	b29b      	uxth	r3, r3
 8008622:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008626:	45c1      	cmp	r9, r8
 8008628:	f841 3b04 	str.w	r3, [r1], #4
 800862c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008630:	d2e6      	bcs.n	8008600 <quorem+0xa4>
 8008632:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008636:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800863a:	b922      	cbnz	r2, 8008646 <quorem+0xea>
 800863c:	3b04      	subs	r3, #4
 800863e:	429d      	cmp	r5, r3
 8008640:	461a      	mov	r2, r3
 8008642:	d30b      	bcc.n	800865c <quorem+0x100>
 8008644:	613c      	str	r4, [r7, #16]
 8008646:	3601      	adds	r6, #1
 8008648:	4630      	mov	r0, r6
 800864a:	b003      	add	sp, #12
 800864c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008650:	6812      	ldr	r2, [r2, #0]
 8008652:	3b04      	subs	r3, #4
 8008654:	2a00      	cmp	r2, #0
 8008656:	d1cb      	bne.n	80085f0 <quorem+0x94>
 8008658:	3c01      	subs	r4, #1
 800865a:	e7c6      	b.n	80085ea <quorem+0x8e>
 800865c:	6812      	ldr	r2, [r2, #0]
 800865e:	3b04      	subs	r3, #4
 8008660:	2a00      	cmp	r2, #0
 8008662:	d1ef      	bne.n	8008644 <quorem+0xe8>
 8008664:	3c01      	subs	r4, #1
 8008666:	e7ea      	b.n	800863e <quorem+0xe2>
 8008668:	2000      	movs	r0, #0
 800866a:	e7ee      	b.n	800864a <quorem+0xee>
 800866c:	0000      	movs	r0, r0
	...

08008670 <_dtoa_r>:
 8008670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008674:	69c7      	ldr	r7, [r0, #28]
 8008676:	b099      	sub	sp, #100	@ 0x64
 8008678:	ed8d 0b02 	vstr	d0, [sp, #8]
 800867c:	ec55 4b10 	vmov	r4, r5, d0
 8008680:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008682:	9109      	str	r1, [sp, #36]	@ 0x24
 8008684:	4683      	mov	fp, r0
 8008686:	920e      	str	r2, [sp, #56]	@ 0x38
 8008688:	9313      	str	r3, [sp, #76]	@ 0x4c
 800868a:	b97f      	cbnz	r7, 80086ac <_dtoa_r+0x3c>
 800868c:	2010      	movs	r0, #16
 800868e:	f001 fa43 	bl	8009b18 <malloc>
 8008692:	4602      	mov	r2, r0
 8008694:	f8cb 001c 	str.w	r0, [fp, #28]
 8008698:	b920      	cbnz	r0, 80086a4 <_dtoa_r+0x34>
 800869a:	4ba7      	ldr	r3, [pc, #668]	@ (8008938 <_dtoa_r+0x2c8>)
 800869c:	21ef      	movs	r1, #239	@ 0xef
 800869e:	48a7      	ldr	r0, [pc, #668]	@ (800893c <_dtoa_r+0x2cc>)
 80086a0:	f002 fa68 	bl	800ab74 <__assert_func>
 80086a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80086a8:	6007      	str	r7, [r0, #0]
 80086aa:	60c7      	str	r7, [r0, #12]
 80086ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80086b0:	6819      	ldr	r1, [r3, #0]
 80086b2:	b159      	cbz	r1, 80086cc <_dtoa_r+0x5c>
 80086b4:	685a      	ldr	r2, [r3, #4]
 80086b6:	604a      	str	r2, [r1, #4]
 80086b8:	2301      	movs	r3, #1
 80086ba:	4093      	lsls	r3, r2
 80086bc:	608b      	str	r3, [r1, #8]
 80086be:	4658      	mov	r0, fp
 80086c0:	f001 fbde 	bl	8009e80 <_Bfree>
 80086c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80086c8:	2200      	movs	r2, #0
 80086ca:	601a      	str	r2, [r3, #0]
 80086cc:	1e2b      	subs	r3, r5, #0
 80086ce:	bfb9      	ittee	lt
 80086d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80086d4:	9303      	strlt	r3, [sp, #12]
 80086d6:	2300      	movge	r3, #0
 80086d8:	6033      	strge	r3, [r6, #0]
 80086da:	9f03      	ldr	r7, [sp, #12]
 80086dc:	4b98      	ldr	r3, [pc, #608]	@ (8008940 <_dtoa_r+0x2d0>)
 80086de:	bfbc      	itt	lt
 80086e0:	2201      	movlt	r2, #1
 80086e2:	6032      	strlt	r2, [r6, #0]
 80086e4:	43bb      	bics	r3, r7
 80086e6:	d112      	bne.n	800870e <_dtoa_r+0x9e>
 80086e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80086ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80086ee:	6013      	str	r3, [r2, #0]
 80086f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086f4:	4323      	orrs	r3, r4
 80086f6:	f000 854d 	beq.w	8009194 <_dtoa_r+0xb24>
 80086fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80086fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008954 <_dtoa_r+0x2e4>
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 854f 	beq.w	80091a4 <_dtoa_r+0xb34>
 8008706:	f10a 0303 	add.w	r3, sl, #3
 800870a:	f000 bd49 	b.w	80091a0 <_dtoa_r+0xb30>
 800870e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008712:	2200      	movs	r2, #0
 8008714:	ec51 0b17 	vmov	r0, r1, d7
 8008718:	2300      	movs	r3, #0
 800871a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800871e:	f7f8 f9d3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008722:	4680      	mov	r8, r0
 8008724:	b158      	cbz	r0, 800873e <_dtoa_r+0xce>
 8008726:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008728:	2301      	movs	r3, #1
 800872a:	6013      	str	r3, [r2, #0]
 800872c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800872e:	b113      	cbz	r3, 8008736 <_dtoa_r+0xc6>
 8008730:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008732:	4b84      	ldr	r3, [pc, #528]	@ (8008944 <_dtoa_r+0x2d4>)
 8008734:	6013      	str	r3, [r2, #0]
 8008736:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008958 <_dtoa_r+0x2e8>
 800873a:	f000 bd33 	b.w	80091a4 <_dtoa_r+0xb34>
 800873e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008742:	aa16      	add	r2, sp, #88	@ 0x58
 8008744:	a917      	add	r1, sp, #92	@ 0x5c
 8008746:	4658      	mov	r0, fp
 8008748:	f001 ff3e 	bl	800a5c8 <__d2b>
 800874c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008750:	4681      	mov	r9, r0
 8008752:	2e00      	cmp	r6, #0
 8008754:	d077      	beq.n	8008846 <_dtoa_r+0x1d6>
 8008756:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008758:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800875c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008760:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008764:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008768:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800876c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008770:	4619      	mov	r1, r3
 8008772:	2200      	movs	r2, #0
 8008774:	4b74      	ldr	r3, [pc, #464]	@ (8008948 <_dtoa_r+0x2d8>)
 8008776:	f7f7 fd87 	bl	8000288 <__aeabi_dsub>
 800877a:	a369      	add	r3, pc, #420	@ (adr r3, 8008920 <_dtoa_r+0x2b0>)
 800877c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008780:	f7f7 ff3a 	bl	80005f8 <__aeabi_dmul>
 8008784:	a368      	add	r3, pc, #416	@ (adr r3, 8008928 <_dtoa_r+0x2b8>)
 8008786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878a:	f7f7 fd7f 	bl	800028c <__adddf3>
 800878e:	4604      	mov	r4, r0
 8008790:	4630      	mov	r0, r6
 8008792:	460d      	mov	r5, r1
 8008794:	f7f7 fec6 	bl	8000524 <__aeabi_i2d>
 8008798:	a365      	add	r3, pc, #404	@ (adr r3, 8008930 <_dtoa_r+0x2c0>)
 800879a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879e:	f7f7 ff2b 	bl	80005f8 <__aeabi_dmul>
 80087a2:	4602      	mov	r2, r0
 80087a4:	460b      	mov	r3, r1
 80087a6:	4620      	mov	r0, r4
 80087a8:	4629      	mov	r1, r5
 80087aa:	f7f7 fd6f 	bl	800028c <__adddf3>
 80087ae:	4604      	mov	r4, r0
 80087b0:	460d      	mov	r5, r1
 80087b2:	f7f8 f9d1 	bl	8000b58 <__aeabi_d2iz>
 80087b6:	2200      	movs	r2, #0
 80087b8:	4607      	mov	r7, r0
 80087ba:	2300      	movs	r3, #0
 80087bc:	4620      	mov	r0, r4
 80087be:	4629      	mov	r1, r5
 80087c0:	f7f8 f98c 	bl	8000adc <__aeabi_dcmplt>
 80087c4:	b140      	cbz	r0, 80087d8 <_dtoa_r+0x168>
 80087c6:	4638      	mov	r0, r7
 80087c8:	f7f7 feac 	bl	8000524 <__aeabi_i2d>
 80087cc:	4622      	mov	r2, r4
 80087ce:	462b      	mov	r3, r5
 80087d0:	f7f8 f97a 	bl	8000ac8 <__aeabi_dcmpeq>
 80087d4:	b900      	cbnz	r0, 80087d8 <_dtoa_r+0x168>
 80087d6:	3f01      	subs	r7, #1
 80087d8:	2f16      	cmp	r7, #22
 80087da:	d851      	bhi.n	8008880 <_dtoa_r+0x210>
 80087dc:	4b5b      	ldr	r3, [pc, #364]	@ (800894c <_dtoa_r+0x2dc>)
 80087de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80087e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087ea:	f7f8 f977 	bl	8000adc <__aeabi_dcmplt>
 80087ee:	2800      	cmp	r0, #0
 80087f0:	d048      	beq.n	8008884 <_dtoa_r+0x214>
 80087f2:	3f01      	subs	r7, #1
 80087f4:	2300      	movs	r3, #0
 80087f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80087f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80087fa:	1b9b      	subs	r3, r3, r6
 80087fc:	1e5a      	subs	r2, r3, #1
 80087fe:	bf44      	itt	mi
 8008800:	f1c3 0801 	rsbmi	r8, r3, #1
 8008804:	2300      	movmi	r3, #0
 8008806:	9208      	str	r2, [sp, #32]
 8008808:	bf54      	ite	pl
 800880a:	f04f 0800 	movpl.w	r8, #0
 800880e:	9308      	strmi	r3, [sp, #32]
 8008810:	2f00      	cmp	r7, #0
 8008812:	db39      	blt.n	8008888 <_dtoa_r+0x218>
 8008814:	9b08      	ldr	r3, [sp, #32]
 8008816:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008818:	443b      	add	r3, r7
 800881a:	9308      	str	r3, [sp, #32]
 800881c:	2300      	movs	r3, #0
 800881e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008822:	2b09      	cmp	r3, #9
 8008824:	d864      	bhi.n	80088f0 <_dtoa_r+0x280>
 8008826:	2b05      	cmp	r3, #5
 8008828:	bfc4      	itt	gt
 800882a:	3b04      	subgt	r3, #4
 800882c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800882e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008830:	f1a3 0302 	sub.w	r3, r3, #2
 8008834:	bfcc      	ite	gt
 8008836:	2400      	movgt	r4, #0
 8008838:	2401      	movle	r4, #1
 800883a:	2b03      	cmp	r3, #3
 800883c:	d863      	bhi.n	8008906 <_dtoa_r+0x296>
 800883e:	e8df f003 	tbb	[pc, r3]
 8008842:	372a      	.short	0x372a
 8008844:	5535      	.short	0x5535
 8008846:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800884a:	441e      	add	r6, r3
 800884c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008850:	2b20      	cmp	r3, #32
 8008852:	bfc1      	itttt	gt
 8008854:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008858:	409f      	lslgt	r7, r3
 800885a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800885e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008862:	bfd6      	itet	le
 8008864:	f1c3 0320 	rsble	r3, r3, #32
 8008868:	ea47 0003 	orrgt.w	r0, r7, r3
 800886c:	fa04 f003 	lslle.w	r0, r4, r3
 8008870:	f7f7 fe48 	bl	8000504 <__aeabi_ui2d>
 8008874:	2201      	movs	r2, #1
 8008876:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800887a:	3e01      	subs	r6, #1
 800887c:	9214      	str	r2, [sp, #80]	@ 0x50
 800887e:	e777      	b.n	8008770 <_dtoa_r+0x100>
 8008880:	2301      	movs	r3, #1
 8008882:	e7b8      	b.n	80087f6 <_dtoa_r+0x186>
 8008884:	9012      	str	r0, [sp, #72]	@ 0x48
 8008886:	e7b7      	b.n	80087f8 <_dtoa_r+0x188>
 8008888:	427b      	negs	r3, r7
 800888a:	930a      	str	r3, [sp, #40]	@ 0x28
 800888c:	2300      	movs	r3, #0
 800888e:	eba8 0807 	sub.w	r8, r8, r7
 8008892:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008894:	e7c4      	b.n	8008820 <_dtoa_r+0x1b0>
 8008896:	2300      	movs	r3, #0
 8008898:	930b      	str	r3, [sp, #44]	@ 0x2c
 800889a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800889c:	2b00      	cmp	r3, #0
 800889e:	dc35      	bgt.n	800890c <_dtoa_r+0x29c>
 80088a0:	2301      	movs	r3, #1
 80088a2:	9300      	str	r3, [sp, #0]
 80088a4:	9307      	str	r3, [sp, #28]
 80088a6:	461a      	mov	r2, r3
 80088a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80088aa:	e00b      	b.n	80088c4 <_dtoa_r+0x254>
 80088ac:	2301      	movs	r3, #1
 80088ae:	e7f3      	b.n	8008898 <_dtoa_r+0x228>
 80088b0:	2300      	movs	r3, #0
 80088b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088b6:	18fb      	adds	r3, r7, r3
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	3301      	adds	r3, #1
 80088bc:	2b01      	cmp	r3, #1
 80088be:	9307      	str	r3, [sp, #28]
 80088c0:	bfb8      	it	lt
 80088c2:	2301      	movlt	r3, #1
 80088c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80088c8:	2100      	movs	r1, #0
 80088ca:	2204      	movs	r2, #4
 80088cc:	f102 0514 	add.w	r5, r2, #20
 80088d0:	429d      	cmp	r5, r3
 80088d2:	d91f      	bls.n	8008914 <_dtoa_r+0x2a4>
 80088d4:	6041      	str	r1, [r0, #4]
 80088d6:	4658      	mov	r0, fp
 80088d8:	f001 fa92 	bl	8009e00 <_Balloc>
 80088dc:	4682      	mov	sl, r0
 80088de:	2800      	cmp	r0, #0
 80088e0:	d13c      	bne.n	800895c <_dtoa_r+0x2ec>
 80088e2:	4b1b      	ldr	r3, [pc, #108]	@ (8008950 <_dtoa_r+0x2e0>)
 80088e4:	4602      	mov	r2, r0
 80088e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80088ea:	e6d8      	b.n	800869e <_dtoa_r+0x2e>
 80088ec:	2301      	movs	r3, #1
 80088ee:	e7e0      	b.n	80088b2 <_dtoa_r+0x242>
 80088f0:	2401      	movs	r4, #1
 80088f2:	2300      	movs	r3, #0
 80088f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80088f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80088f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088fc:	9300      	str	r3, [sp, #0]
 80088fe:	9307      	str	r3, [sp, #28]
 8008900:	2200      	movs	r2, #0
 8008902:	2312      	movs	r3, #18
 8008904:	e7d0      	b.n	80088a8 <_dtoa_r+0x238>
 8008906:	2301      	movs	r3, #1
 8008908:	930b      	str	r3, [sp, #44]	@ 0x2c
 800890a:	e7f5      	b.n	80088f8 <_dtoa_r+0x288>
 800890c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	9307      	str	r3, [sp, #28]
 8008912:	e7d7      	b.n	80088c4 <_dtoa_r+0x254>
 8008914:	3101      	adds	r1, #1
 8008916:	0052      	lsls	r2, r2, #1
 8008918:	e7d8      	b.n	80088cc <_dtoa_r+0x25c>
 800891a:	bf00      	nop
 800891c:	f3af 8000 	nop.w
 8008920:	636f4361 	.word	0x636f4361
 8008924:	3fd287a7 	.word	0x3fd287a7
 8008928:	8b60c8b3 	.word	0x8b60c8b3
 800892c:	3fc68a28 	.word	0x3fc68a28
 8008930:	509f79fb 	.word	0x509f79fb
 8008934:	3fd34413 	.word	0x3fd34413
 8008938:	0800b48e 	.word	0x0800b48e
 800893c:	0800b4a5 	.word	0x0800b4a5
 8008940:	7ff00000 	.word	0x7ff00000
 8008944:	0800b2fd 	.word	0x0800b2fd
 8008948:	3ff80000 	.word	0x3ff80000
 800894c:	0800b610 	.word	0x0800b610
 8008950:	0800b4fd 	.word	0x0800b4fd
 8008954:	0800b48a 	.word	0x0800b48a
 8008958:	0800b2fc 	.word	0x0800b2fc
 800895c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008960:	6018      	str	r0, [r3, #0]
 8008962:	9b07      	ldr	r3, [sp, #28]
 8008964:	2b0e      	cmp	r3, #14
 8008966:	f200 80a4 	bhi.w	8008ab2 <_dtoa_r+0x442>
 800896a:	2c00      	cmp	r4, #0
 800896c:	f000 80a1 	beq.w	8008ab2 <_dtoa_r+0x442>
 8008970:	2f00      	cmp	r7, #0
 8008972:	dd33      	ble.n	80089dc <_dtoa_r+0x36c>
 8008974:	4bad      	ldr	r3, [pc, #692]	@ (8008c2c <_dtoa_r+0x5bc>)
 8008976:	f007 020f 	and.w	r2, r7, #15
 800897a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800897e:	ed93 7b00 	vldr	d7, [r3]
 8008982:	05f8      	lsls	r0, r7, #23
 8008984:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008988:	ea4f 1427 	mov.w	r4, r7, asr #4
 800898c:	d516      	bpl.n	80089bc <_dtoa_r+0x34c>
 800898e:	4ba8      	ldr	r3, [pc, #672]	@ (8008c30 <_dtoa_r+0x5c0>)
 8008990:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008994:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008998:	f7f7 ff58 	bl	800084c <__aeabi_ddiv>
 800899c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089a0:	f004 040f 	and.w	r4, r4, #15
 80089a4:	2603      	movs	r6, #3
 80089a6:	4da2      	ldr	r5, [pc, #648]	@ (8008c30 <_dtoa_r+0x5c0>)
 80089a8:	b954      	cbnz	r4, 80089c0 <_dtoa_r+0x350>
 80089aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089b2:	f7f7 ff4b 	bl	800084c <__aeabi_ddiv>
 80089b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089ba:	e028      	b.n	8008a0e <_dtoa_r+0x39e>
 80089bc:	2602      	movs	r6, #2
 80089be:	e7f2      	b.n	80089a6 <_dtoa_r+0x336>
 80089c0:	07e1      	lsls	r1, r4, #31
 80089c2:	d508      	bpl.n	80089d6 <_dtoa_r+0x366>
 80089c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80089cc:	f7f7 fe14 	bl	80005f8 <__aeabi_dmul>
 80089d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089d4:	3601      	adds	r6, #1
 80089d6:	1064      	asrs	r4, r4, #1
 80089d8:	3508      	adds	r5, #8
 80089da:	e7e5      	b.n	80089a8 <_dtoa_r+0x338>
 80089dc:	f000 80d2 	beq.w	8008b84 <_dtoa_r+0x514>
 80089e0:	427c      	negs	r4, r7
 80089e2:	4b92      	ldr	r3, [pc, #584]	@ (8008c2c <_dtoa_r+0x5bc>)
 80089e4:	4d92      	ldr	r5, [pc, #584]	@ (8008c30 <_dtoa_r+0x5c0>)
 80089e6:	f004 020f 	and.w	r2, r4, #15
 80089ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089f6:	f7f7 fdff 	bl	80005f8 <__aeabi_dmul>
 80089fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089fe:	1124      	asrs	r4, r4, #4
 8008a00:	2300      	movs	r3, #0
 8008a02:	2602      	movs	r6, #2
 8008a04:	2c00      	cmp	r4, #0
 8008a06:	f040 80b2 	bne.w	8008b6e <_dtoa_r+0x4fe>
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1d3      	bne.n	80089b6 <_dtoa_r+0x346>
 8008a0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a10:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f000 80b7 	beq.w	8008b88 <_dtoa_r+0x518>
 8008a1a:	4b86      	ldr	r3, [pc, #536]	@ (8008c34 <_dtoa_r+0x5c4>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	4620      	mov	r0, r4
 8008a20:	4629      	mov	r1, r5
 8008a22:	f7f8 f85b 	bl	8000adc <__aeabi_dcmplt>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	f000 80ae 	beq.w	8008b88 <_dtoa_r+0x518>
 8008a2c:	9b07      	ldr	r3, [sp, #28]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f000 80aa 	beq.w	8008b88 <_dtoa_r+0x518>
 8008a34:	9b00      	ldr	r3, [sp, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	dd37      	ble.n	8008aaa <_dtoa_r+0x43a>
 8008a3a:	1e7b      	subs	r3, r7, #1
 8008a3c:	9304      	str	r3, [sp, #16]
 8008a3e:	4620      	mov	r0, r4
 8008a40:	4b7d      	ldr	r3, [pc, #500]	@ (8008c38 <_dtoa_r+0x5c8>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	4629      	mov	r1, r5
 8008a46:	f7f7 fdd7 	bl	80005f8 <__aeabi_dmul>
 8008a4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a4e:	9c00      	ldr	r4, [sp, #0]
 8008a50:	3601      	adds	r6, #1
 8008a52:	4630      	mov	r0, r6
 8008a54:	f7f7 fd66 	bl	8000524 <__aeabi_i2d>
 8008a58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a5c:	f7f7 fdcc 	bl	80005f8 <__aeabi_dmul>
 8008a60:	4b76      	ldr	r3, [pc, #472]	@ (8008c3c <_dtoa_r+0x5cc>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	f7f7 fc12 	bl	800028c <__adddf3>
 8008a68:	4605      	mov	r5, r0
 8008a6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008a6e:	2c00      	cmp	r4, #0
 8008a70:	f040 808d 	bne.w	8008b8e <_dtoa_r+0x51e>
 8008a74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a78:	4b71      	ldr	r3, [pc, #452]	@ (8008c40 <_dtoa_r+0x5d0>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f7f7 fc04 	bl	8000288 <__aeabi_dsub>
 8008a80:	4602      	mov	r2, r0
 8008a82:	460b      	mov	r3, r1
 8008a84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a88:	462a      	mov	r2, r5
 8008a8a:	4633      	mov	r3, r6
 8008a8c:	f7f8 f844 	bl	8000b18 <__aeabi_dcmpgt>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	f040 828b 	bne.w	8008fac <_dtoa_r+0x93c>
 8008a96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a9a:	462a      	mov	r2, r5
 8008a9c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008aa0:	f7f8 f81c 	bl	8000adc <__aeabi_dcmplt>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	f040 8128 	bne.w	8008cfa <_dtoa_r+0x68a>
 8008aaa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008aae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008ab2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f2c0 815a 	blt.w	8008d6e <_dtoa_r+0x6fe>
 8008aba:	2f0e      	cmp	r7, #14
 8008abc:	f300 8157 	bgt.w	8008d6e <_dtoa_r+0x6fe>
 8008ac0:	4b5a      	ldr	r3, [pc, #360]	@ (8008c2c <_dtoa_r+0x5bc>)
 8008ac2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ac6:	ed93 7b00 	vldr	d7, [r3]
 8008aca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	ed8d 7b00 	vstr	d7, [sp]
 8008ad2:	da03      	bge.n	8008adc <_dtoa_r+0x46c>
 8008ad4:	9b07      	ldr	r3, [sp, #28]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f340 8101 	ble.w	8008cde <_dtoa_r+0x66e>
 8008adc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ae0:	4656      	mov	r6, sl
 8008ae2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	4629      	mov	r1, r5
 8008aea:	f7f7 feaf 	bl	800084c <__aeabi_ddiv>
 8008aee:	f7f8 f833 	bl	8000b58 <__aeabi_d2iz>
 8008af2:	4680      	mov	r8, r0
 8008af4:	f7f7 fd16 	bl	8000524 <__aeabi_i2d>
 8008af8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008afc:	f7f7 fd7c 	bl	80005f8 <__aeabi_dmul>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	4620      	mov	r0, r4
 8008b06:	4629      	mov	r1, r5
 8008b08:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008b0c:	f7f7 fbbc 	bl	8000288 <__aeabi_dsub>
 8008b10:	f806 4b01 	strb.w	r4, [r6], #1
 8008b14:	9d07      	ldr	r5, [sp, #28]
 8008b16:	eba6 040a 	sub.w	r4, r6, sl
 8008b1a:	42a5      	cmp	r5, r4
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	460b      	mov	r3, r1
 8008b20:	f040 8117 	bne.w	8008d52 <_dtoa_r+0x6e2>
 8008b24:	f7f7 fbb2 	bl	800028c <__adddf3>
 8008b28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	460d      	mov	r5, r1
 8008b30:	f7f7 fff2 	bl	8000b18 <__aeabi_dcmpgt>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	f040 80f9 	bne.w	8008d2c <_dtoa_r+0x6bc>
 8008b3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b3e:	4620      	mov	r0, r4
 8008b40:	4629      	mov	r1, r5
 8008b42:	f7f7 ffc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b46:	b118      	cbz	r0, 8008b50 <_dtoa_r+0x4e0>
 8008b48:	f018 0f01 	tst.w	r8, #1
 8008b4c:	f040 80ee 	bne.w	8008d2c <_dtoa_r+0x6bc>
 8008b50:	4649      	mov	r1, r9
 8008b52:	4658      	mov	r0, fp
 8008b54:	f001 f994 	bl	8009e80 <_Bfree>
 8008b58:	2300      	movs	r3, #0
 8008b5a:	7033      	strb	r3, [r6, #0]
 8008b5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008b5e:	3701      	adds	r7, #1
 8008b60:	601f      	str	r7, [r3, #0]
 8008b62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f000 831d 	beq.w	80091a4 <_dtoa_r+0xb34>
 8008b6a:	601e      	str	r6, [r3, #0]
 8008b6c:	e31a      	b.n	80091a4 <_dtoa_r+0xb34>
 8008b6e:	07e2      	lsls	r2, r4, #31
 8008b70:	d505      	bpl.n	8008b7e <_dtoa_r+0x50e>
 8008b72:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b76:	f7f7 fd3f 	bl	80005f8 <__aeabi_dmul>
 8008b7a:	3601      	adds	r6, #1
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	1064      	asrs	r4, r4, #1
 8008b80:	3508      	adds	r5, #8
 8008b82:	e73f      	b.n	8008a04 <_dtoa_r+0x394>
 8008b84:	2602      	movs	r6, #2
 8008b86:	e742      	b.n	8008a0e <_dtoa_r+0x39e>
 8008b88:	9c07      	ldr	r4, [sp, #28]
 8008b8a:	9704      	str	r7, [sp, #16]
 8008b8c:	e761      	b.n	8008a52 <_dtoa_r+0x3e2>
 8008b8e:	4b27      	ldr	r3, [pc, #156]	@ (8008c2c <_dtoa_r+0x5bc>)
 8008b90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b9a:	4454      	add	r4, sl
 8008b9c:	2900      	cmp	r1, #0
 8008b9e:	d053      	beq.n	8008c48 <_dtoa_r+0x5d8>
 8008ba0:	4928      	ldr	r1, [pc, #160]	@ (8008c44 <_dtoa_r+0x5d4>)
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	f7f7 fe52 	bl	800084c <__aeabi_ddiv>
 8008ba8:	4633      	mov	r3, r6
 8008baa:	462a      	mov	r2, r5
 8008bac:	f7f7 fb6c 	bl	8000288 <__aeabi_dsub>
 8008bb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008bb4:	4656      	mov	r6, sl
 8008bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bba:	f7f7 ffcd 	bl	8000b58 <__aeabi_d2iz>
 8008bbe:	4605      	mov	r5, r0
 8008bc0:	f7f7 fcb0 	bl	8000524 <__aeabi_i2d>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bcc:	f7f7 fb5c 	bl	8000288 <__aeabi_dsub>
 8008bd0:	3530      	adds	r5, #48	@ 0x30
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008bda:	f806 5b01 	strb.w	r5, [r6], #1
 8008bde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008be2:	f7f7 ff7b 	bl	8000adc <__aeabi_dcmplt>
 8008be6:	2800      	cmp	r0, #0
 8008be8:	d171      	bne.n	8008cce <_dtoa_r+0x65e>
 8008bea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bee:	4911      	ldr	r1, [pc, #68]	@ (8008c34 <_dtoa_r+0x5c4>)
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	f7f7 fb49 	bl	8000288 <__aeabi_dsub>
 8008bf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008bfa:	f7f7 ff6f 	bl	8000adc <__aeabi_dcmplt>
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	f040 8095 	bne.w	8008d2e <_dtoa_r+0x6be>
 8008c04:	42a6      	cmp	r6, r4
 8008c06:	f43f af50 	beq.w	8008aaa <_dtoa_r+0x43a>
 8008c0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8008c38 <_dtoa_r+0x5c8>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	f7f7 fcf1 	bl	80005f8 <__aeabi_dmul>
 8008c16:	4b08      	ldr	r3, [pc, #32]	@ (8008c38 <_dtoa_r+0x5c8>)
 8008c18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c22:	f7f7 fce9 	bl	80005f8 <__aeabi_dmul>
 8008c26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c2a:	e7c4      	b.n	8008bb6 <_dtoa_r+0x546>
 8008c2c:	0800b610 	.word	0x0800b610
 8008c30:	0800b5e8 	.word	0x0800b5e8
 8008c34:	3ff00000 	.word	0x3ff00000
 8008c38:	40240000 	.word	0x40240000
 8008c3c:	401c0000 	.word	0x401c0000
 8008c40:	40140000 	.word	0x40140000
 8008c44:	3fe00000 	.word	0x3fe00000
 8008c48:	4631      	mov	r1, r6
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	f7f7 fcd4 	bl	80005f8 <__aeabi_dmul>
 8008c50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c54:	9415      	str	r4, [sp, #84]	@ 0x54
 8008c56:	4656      	mov	r6, sl
 8008c58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c5c:	f7f7 ff7c 	bl	8000b58 <__aeabi_d2iz>
 8008c60:	4605      	mov	r5, r0
 8008c62:	f7f7 fc5f 	bl	8000524 <__aeabi_i2d>
 8008c66:	4602      	mov	r2, r0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c6e:	f7f7 fb0b 	bl	8000288 <__aeabi_dsub>
 8008c72:	3530      	adds	r5, #48	@ 0x30
 8008c74:	f806 5b01 	strb.w	r5, [r6], #1
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	42a6      	cmp	r6, r4
 8008c7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c82:	f04f 0200 	mov.w	r2, #0
 8008c86:	d124      	bne.n	8008cd2 <_dtoa_r+0x662>
 8008c88:	4bac      	ldr	r3, [pc, #688]	@ (8008f3c <_dtoa_r+0x8cc>)
 8008c8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008c8e:	f7f7 fafd 	bl	800028c <__adddf3>
 8008c92:	4602      	mov	r2, r0
 8008c94:	460b      	mov	r3, r1
 8008c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c9a:	f7f7 ff3d 	bl	8000b18 <__aeabi_dcmpgt>
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	d145      	bne.n	8008d2e <_dtoa_r+0x6be>
 8008ca2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ca6:	49a5      	ldr	r1, [pc, #660]	@ (8008f3c <_dtoa_r+0x8cc>)
 8008ca8:	2000      	movs	r0, #0
 8008caa:	f7f7 faed 	bl	8000288 <__aeabi_dsub>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cb6:	f7f7 ff11 	bl	8000adc <__aeabi_dcmplt>
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	f43f aef5 	beq.w	8008aaa <_dtoa_r+0x43a>
 8008cc0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008cc2:	1e73      	subs	r3, r6, #1
 8008cc4:	9315      	str	r3, [sp, #84]	@ 0x54
 8008cc6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008cca:	2b30      	cmp	r3, #48	@ 0x30
 8008ccc:	d0f8      	beq.n	8008cc0 <_dtoa_r+0x650>
 8008cce:	9f04      	ldr	r7, [sp, #16]
 8008cd0:	e73e      	b.n	8008b50 <_dtoa_r+0x4e0>
 8008cd2:	4b9b      	ldr	r3, [pc, #620]	@ (8008f40 <_dtoa_r+0x8d0>)
 8008cd4:	f7f7 fc90 	bl	80005f8 <__aeabi_dmul>
 8008cd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cdc:	e7bc      	b.n	8008c58 <_dtoa_r+0x5e8>
 8008cde:	d10c      	bne.n	8008cfa <_dtoa_r+0x68a>
 8008ce0:	4b98      	ldr	r3, [pc, #608]	@ (8008f44 <_dtoa_r+0x8d4>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ce8:	f7f7 fc86 	bl	80005f8 <__aeabi_dmul>
 8008cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cf0:	f7f7 ff08 	bl	8000b04 <__aeabi_dcmpge>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	f000 8157 	beq.w	8008fa8 <_dtoa_r+0x938>
 8008cfa:	2400      	movs	r4, #0
 8008cfc:	4625      	mov	r5, r4
 8008cfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d00:	43db      	mvns	r3, r3
 8008d02:	9304      	str	r3, [sp, #16]
 8008d04:	4656      	mov	r6, sl
 8008d06:	2700      	movs	r7, #0
 8008d08:	4621      	mov	r1, r4
 8008d0a:	4658      	mov	r0, fp
 8008d0c:	f001 f8b8 	bl	8009e80 <_Bfree>
 8008d10:	2d00      	cmp	r5, #0
 8008d12:	d0dc      	beq.n	8008cce <_dtoa_r+0x65e>
 8008d14:	b12f      	cbz	r7, 8008d22 <_dtoa_r+0x6b2>
 8008d16:	42af      	cmp	r7, r5
 8008d18:	d003      	beq.n	8008d22 <_dtoa_r+0x6b2>
 8008d1a:	4639      	mov	r1, r7
 8008d1c:	4658      	mov	r0, fp
 8008d1e:	f001 f8af 	bl	8009e80 <_Bfree>
 8008d22:	4629      	mov	r1, r5
 8008d24:	4658      	mov	r0, fp
 8008d26:	f001 f8ab 	bl	8009e80 <_Bfree>
 8008d2a:	e7d0      	b.n	8008cce <_dtoa_r+0x65e>
 8008d2c:	9704      	str	r7, [sp, #16]
 8008d2e:	4633      	mov	r3, r6
 8008d30:	461e      	mov	r6, r3
 8008d32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d36:	2a39      	cmp	r2, #57	@ 0x39
 8008d38:	d107      	bne.n	8008d4a <_dtoa_r+0x6da>
 8008d3a:	459a      	cmp	sl, r3
 8008d3c:	d1f8      	bne.n	8008d30 <_dtoa_r+0x6c0>
 8008d3e:	9a04      	ldr	r2, [sp, #16]
 8008d40:	3201      	adds	r2, #1
 8008d42:	9204      	str	r2, [sp, #16]
 8008d44:	2230      	movs	r2, #48	@ 0x30
 8008d46:	f88a 2000 	strb.w	r2, [sl]
 8008d4a:	781a      	ldrb	r2, [r3, #0]
 8008d4c:	3201      	adds	r2, #1
 8008d4e:	701a      	strb	r2, [r3, #0]
 8008d50:	e7bd      	b.n	8008cce <_dtoa_r+0x65e>
 8008d52:	4b7b      	ldr	r3, [pc, #492]	@ (8008f40 <_dtoa_r+0x8d0>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	f7f7 fc4f 	bl	80005f8 <__aeabi_dmul>
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	4604      	mov	r4, r0
 8008d60:	460d      	mov	r5, r1
 8008d62:	f7f7 feb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	f43f aebb 	beq.w	8008ae2 <_dtoa_r+0x472>
 8008d6c:	e6f0      	b.n	8008b50 <_dtoa_r+0x4e0>
 8008d6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008d70:	2a00      	cmp	r2, #0
 8008d72:	f000 80db 	beq.w	8008f2c <_dtoa_r+0x8bc>
 8008d76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d78:	2a01      	cmp	r2, #1
 8008d7a:	f300 80bf 	bgt.w	8008efc <_dtoa_r+0x88c>
 8008d7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008d80:	2a00      	cmp	r2, #0
 8008d82:	f000 80b7 	beq.w	8008ef4 <_dtoa_r+0x884>
 8008d86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008d8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008d8c:	4646      	mov	r6, r8
 8008d8e:	9a08      	ldr	r2, [sp, #32]
 8008d90:	2101      	movs	r1, #1
 8008d92:	441a      	add	r2, r3
 8008d94:	4658      	mov	r0, fp
 8008d96:	4498      	add	r8, r3
 8008d98:	9208      	str	r2, [sp, #32]
 8008d9a:	f001 f96f 	bl	800a07c <__i2b>
 8008d9e:	4605      	mov	r5, r0
 8008da0:	b15e      	cbz	r6, 8008dba <_dtoa_r+0x74a>
 8008da2:	9b08      	ldr	r3, [sp, #32]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	dd08      	ble.n	8008dba <_dtoa_r+0x74a>
 8008da8:	42b3      	cmp	r3, r6
 8008daa:	9a08      	ldr	r2, [sp, #32]
 8008dac:	bfa8      	it	ge
 8008dae:	4633      	movge	r3, r6
 8008db0:	eba8 0803 	sub.w	r8, r8, r3
 8008db4:	1af6      	subs	r6, r6, r3
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	9308      	str	r3, [sp, #32]
 8008dba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dbc:	b1f3      	cbz	r3, 8008dfc <_dtoa_r+0x78c>
 8008dbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f000 80b7 	beq.w	8008f34 <_dtoa_r+0x8c4>
 8008dc6:	b18c      	cbz	r4, 8008dec <_dtoa_r+0x77c>
 8008dc8:	4629      	mov	r1, r5
 8008dca:	4622      	mov	r2, r4
 8008dcc:	4658      	mov	r0, fp
 8008dce:	f001 fa15 	bl	800a1fc <__pow5mult>
 8008dd2:	464a      	mov	r2, r9
 8008dd4:	4601      	mov	r1, r0
 8008dd6:	4605      	mov	r5, r0
 8008dd8:	4658      	mov	r0, fp
 8008dda:	f001 f965 	bl	800a0a8 <__multiply>
 8008dde:	4649      	mov	r1, r9
 8008de0:	9004      	str	r0, [sp, #16]
 8008de2:	4658      	mov	r0, fp
 8008de4:	f001 f84c 	bl	8009e80 <_Bfree>
 8008de8:	9b04      	ldr	r3, [sp, #16]
 8008dea:	4699      	mov	r9, r3
 8008dec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dee:	1b1a      	subs	r2, r3, r4
 8008df0:	d004      	beq.n	8008dfc <_dtoa_r+0x78c>
 8008df2:	4649      	mov	r1, r9
 8008df4:	4658      	mov	r0, fp
 8008df6:	f001 fa01 	bl	800a1fc <__pow5mult>
 8008dfa:	4681      	mov	r9, r0
 8008dfc:	2101      	movs	r1, #1
 8008dfe:	4658      	mov	r0, fp
 8008e00:	f001 f93c 	bl	800a07c <__i2b>
 8008e04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e06:	4604      	mov	r4, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 81cf 	beq.w	80091ac <_dtoa_r+0xb3c>
 8008e0e:	461a      	mov	r2, r3
 8008e10:	4601      	mov	r1, r0
 8008e12:	4658      	mov	r0, fp
 8008e14:	f001 f9f2 	bl	800a1fc <__pow5mult>
 8008e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	f300 8095 	bgt.w	8008f4c <_dtoa_r+0x8dc>
 8008e22:	9b02      	ldr	r3, [sp, #8]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f040 8087 	bne.w	8008f38 <_dtoa_r+0x8c8>
 8008e2a:	9b03      	ldr	r3, [sp, #12]
 8008e2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f040 8089 	bne.w	8008f48 <_dtoa_r+0x8d8>
 8008e36:	9b03      	ldr	r3, [sp, #12]
 8008e38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e3c:	0d1b      	lsrs	r3, r3, #20
 8008e3e:	051b      	lsls	r3, r3, #20
 8008e40:	b12b      	cbz	r3, 8008e4e <_dtoa_r+0x7de>
 8008e42:	9b08      	ldr	r3, [sp, #32]
 8008e44:	3301      	adds	r3, #1
 8008e46:	9308      	str	r3, [sp, #32]
 8008e48:	f108 0801 	add.w	r8, r8, #1
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f000 81b0 	beq.w	80091b8 <_dtoa_r+0xb48>
 8008e58:	6923      	ldr	r3, [r4, #16]
 8008e5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e5e:	6918      	ldr	r0, [r3, #16]
 8008e60:	f001 f8c0 	bl	8009fe4 <__hi0bits>
 8008e64:	f1c0 0020 	rsb	r0, r0, #32
 8008e68:	9b08      	ldr	r3, [sp, #32]
 8008e6a:	4418      	add	r0, r3
 8008e6c:	f010 001f 	ands.w	r0, r0, #31
 8008e70:	d077      	beq.n	8008f62 <_dtoa_r+0x8f2>
 8008e72:	f1c0 0320 	rsb	r3, r0, #32
 8008e76:	2b04      	cmp	r3, #4
 8008e78:	dd6b      	ble.n	8008f52 <_dtoa_r+0x8e2>
 8008e7a:	9b08      	ldr	r3, [sp, #32]
 8008e7c:	f1c0 001c 	rsb	r0, r0, #28
 8008e80:	4403      	add	r3, r0
 8008e82:	4480      	add	r8, r0
 8008e84:	4406      	add	r6, r0
 8008e86:	9308      	str	r3, [sp, #32]
 8008e88:	f1b8 0f00 	cmp.w	r8, #0
 8008e8c:	dd05      	ble.n	8008e9a <_dtoa_r+0x82a>
 8008e8e:	4649      	mov	r1, r9
 8008e90:	4642      	mov	r2, r8
 8008e92:	4658      	mov	r0, fp
 8008e94:	f001 fa0c 	bl	800a2b0 <__lshift>
 8008e98:	4681      	mov	r9, r0
 8008e9a:	9b08      	ldr	r3, [sp, #32]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	dd05      	ble.n	8008eac <_dtoa_r+0x83c>
 8008ea0:	4621      	mov	r1, r4
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	4658      	mov	r0, fp
 8008ea6:	f001 fa03 	bl	800a2b0 <__lshift>
 8008eaa:	4604      	mov	r4, r0
 8008eac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d059      	beq.n	8008f66 <_dtoa_r+0x8f6>
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	4648      	mov	r0, r9
 8008eb6:	f001 fa67 	bl	800a388 <__mcmp>
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	da53      	bge.n	8008f66 <_dtoa_r+0x8f6>
 8008ebe:	1e7b      	subs	r3, r7, #1
 8008ec0:	9304      	str	r3, [sp, #16]
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	220a      	movs	r2, #10
 8008ec8:	4658      	mov	r0, fp
 8008eca:	f000 fffb 	bl	8009ec4 <__multadd>
 8008ece:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ed0:	4681      	mov	r9, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f000 8172 	beq.w	80091bc <_dtoa_r+0xb4c>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	4629      	mov	r1, r5
 8008edc:	220a      	movs	r2, #10
 8008ede:	4658      	mov	r0, fp
 8008ee0:	f000 fff0 	bl	8009ec4 <__multadd>
 8008ee4:	9b00      	ldr	r3, [sp, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	4605      	mov	r5, r0
 8008eea:	dc67      	bgt.n	8008fbc <_dtoa_r+0x94c>
 8008eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	dc41      	bgt.n	8008f76 <_dtoa_r+0x906>
 8008ef2:	e063      	b.n	8008fbc <_dtoa_r+0x94c>
 8008ef4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008ef6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008efa:	e746      	b.n	8008d8a <_dtoa_r+0x71a>
 8008efc:	9b07      	ldr	r3, [sp, #28]
 8008efe:	1e5c      	subs	r4, r3, #1
 8008f00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f02:	42a3      	cmp	r3, r4
 8008f04:	bfbf      	itttt	lt
 8008f06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008f08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008f0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008f0c:	1ae3      	sublt	r3, r4, r3
 8008f0e:	bfb4      	ite	lt
 8008f10:	18d2      	addlt	r2, r2, r3
 8008f12:	1b1c      	subge	r4, r3, r4
 8008f14:	9b07      	ldr	r3, [sp, #28]
 8008f16:	bfbc      	itt	lt
 8008f18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008f1a:	2400      	movlt	r4, #0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	bfb5      	itete	lt
 8008f20:	eba8 0603 	sublt.w	r6, r8, r3
 8008f24:	9b07      	ldrge	r3, [sp, #28]
 8008f26:	2300      	movlt	r3, #0
 8008f28:	4646      	movge	r6, r8
 8008f2a:	e730      	b.n	8008d8e <_dtoa_r+0x71e>
 8008f2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008f30:	4646      	mov	r6, r8
 8008f32:	e735      	b.n	8008da0 <_dtoa_r+0x730>
 8008f34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f36:	e75c      	b.n	8008df2 <_dtoa_r+0x782>
 8008f38:	2300      	movs	r3, #0
 8008f3a:	e788      	b.n	8008e4e <_dtoa_r+0x7de>
 8008f3c:	3fe00000 	.word	0x3fe00000
 8008f40:	40240000 	.word	0x40240000
 8008f44:	40140000 	.word	0x40140000
 8008f48:	9b02      	ldr	r3, [sp, #8]
 8008f4a:	e780      	b.n	8008e4e <_dtoa_r+0x7de>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f50:	e782      	b.n	8008e58 <_dtoa_r+0x7e8>
 8008f52:	d099      	beq.n	8008e88 <_dtoa_r+0x818>
 8008f54:	9a08      	ldr	r2, [sp, #32]
 8008f56:	331c      	adds	r3, #28
 8008f58:	441a      	add	r2, r3
 8008f5a:	4498      	add	r8, r3
 8008f5c:	441e      	add	r6, r3
 8008f5e:	9208      	str	r2, [sp, #32]
 8008f60:	e792      	b.n	8008e88 <_dtoa_r+0x818>
 8008f62:	4603      	mov	r3, r0
 8008f64:	e7f6      	b.n	8008f54 <_dtoa_r+0x8e4>
 8008f66:	9b07      	ldr	r3, [sp, #28]
 8008f68:	9704      	str	r7, [sp, #16]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	dc20      	bgt.n	8008fb0 <_dtoa_r+0x940>
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	dd1e      	ble.n	8008fb4 <_dtoa_r+0x944>
 8008f76:	9b00      	ldr	r3, [sp, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f47f aec0 	bne.w	8008cfe <_dtoa_r+0x68e>
 8008f7e:	4621      	mov	r1, r4
 8008f80:	2205      	movs	r2, #5
 8008f82:	4658      	mov	r0, fp
 8008f84:	f000 ff9e 	bl	8009ec4 <__multadd>
 8008f88:	4601      	mov	r1, r0
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	4648      	mov	r0, r9
 8008f8e:	f001 f9fb 	bl	800a388 <__mcmp>
 8008f92:	2800      	cmp	r0, #0
 8008f94:	f77f aeb3 	ble.w	8008cfe <_dtoa_r+0x68e>
 8008f98:	4656      	mov	r6, sl
 8008f9a:	2331      	movs	r3, #49	@ 0x31
 8008f9c:	f806 3b01 	strb.w	r3, [r6], #1
 8008fa0:	9b04      	ldr	r3, [sp, #16]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	9304      	str	r3, [sp, #16]
 8008fa6:	e6ae      	b.n	8008d06 <_dtoa_r+0x696>
 8008fa8:	9c07      	ldr	r4, [sp, #28]
 8008faa:	9704      	str	r7, [sp, #16]
 8008fac:	4625      	mov	r5, r4
 8008fae:	e7f3      	b.n	8008f98 <_dtoa_r+0x928>
 8008fb0:	9b07      	ldr	r3, [sp, #28]
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f000 8104 	beq.w	80091c4 <_dtoa_r+0xb54>
 8008fbc:	2e00      	cmp	r6, #0
 8008fbe:	dd05      	ble.n	8008fcc <_dtoa_r+0x95c>
 8008fc0:	4629      	mov	r1, r5
 8008fc2:	4632      	mov	r2, r6
 8008fc4:	4658      	mov	r0, fp
 8008fc6:	f001 f973 	bl	800a2b0 <__lshift>
 8008fca:	4605      	mov	r5, r0
 8008fcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d05a      	beq.n	8009088 <_dtoa_r+0xa18>
 8008fd2:	6869      	ldr	r1, [r5, #4]
 8008fd4:	4658      	mov	r0, fp
 8008fd6:	f000 ff13 	bl	8009e00 <_Balloc>
 8008fda:	4606      	mov	r6, r0
 8008fdc:	b928      	cbnz	r0, 8008fea <_dtoa_r+0x97a>
 8008fde:	4b84      	ldr	r3, [pc, #528]	@ (80091f0 <_dtoa_r+0xb80>)
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008fe6:	f7ff bb5a 	b.w	800869e <_dtoa_r+0x2e>
 8008fea:	692a      	ldr	r2, [r5, #16]
 8008fec:	3202      	adds	r2, #2
 8008fee:	0092      	lsls	r2, r2, #2
 8008ff0:	f105 010c 	add.w	r1, r5, #12
 8008ff4:	300c      	adds	r0, #12
 8008ff6:	f7ff fa92 	bl	800851e <memcpy>
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	4631      	mov	r1, r6
 8008ffe:	4658      	mov	r0, fp
 8009000:	f001 f956 	bl	800a2b0 <__lshift>
 8009004:	f10a 0301 	add.w	r3, sl, #1
 8009008:	9307      	str	r3, [sp, #28]
 800900a:	9b00      	ldr	r3, [sp, #0]
 800900c:	4453      	add	r3, sl
 800900e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009010:	9b02      	ldr	r3, [sp, #8]
 8009012:	f003 0301 	and.w	r3, r3, #1
 8009016:	462f      	mov	r7, r5
 8009018:	930a      	str	r3, [sp, #40]	@ 0x28
 800901a:	4605      	mov	r5, r0
 800901c:	9b07      	ldr	r3, [sp, #28]
 800901e:	4621      	mov	r1, r4
 8009020:	3b01      	subs	r3, #1
 8009022:	4648      	mov	r0, r9
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	f7ff fa99 	bl	800855c <quorem>
 800902a:	4639      	mov	r1, r7
 800902c:	9002      	str	r0, [sp, #8]
 800902e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009032:	4648      	mov	r0, r9
 8009034:	f001 f9a8 	bl	800a388 <__mcmp>
 8009038:	462a      	mov	r2, r5
 800903a:	9008      	str	r0, [sp, #32]
 800903c:	4621      	mov	r1, r4
 800903e:	4658      	mov	r0, fp
 8009040:	f001 f9be 	bl	800a3c0 <__mdiff>
 8009044:	68c2      	ldr	r2, [r0, #12]
 8009046:	4606      	mov	r6, r0
 8009048:	bb02      	cbnz	r2, 800908c <_dtoa_r+0xa1c>
 800904a:	4601      	mov	r1, r0
 800904c:	4648      	mov	r0, r9
 800904e:	f001 f99b 	bl	800a388 <__mcmp>
 8009052:	4602      	mov	r2, r0
 8009054:	4631      	mov	r1, r6
 8009056:	4658      	mov	r0, fp
 8009058:	920e      	str	r2, [sp, #56]	@ 0x38
 800905a:	f000 ff11 	bl	8009e80 <_Bfree>
 800905e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009060:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009062:	9e07      	ldr	r6, [sp, #28]
 8009064:	ea43 0102 	orr.w	r1, r3, r2
 8009068:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800906a:	4319      	orrs	r1, r3
 800906c:	d110      	bne.n	8009090 <_dtoa_r+0xa20>
 800906e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009072:	d029      	beq.n	80090c8 <_dtoa_r+0xa58>
 8009074:	9b08      	ldr	r3, [sp, #32]
 8009076:	2b00      	cmp	r3, #0
 8009078:	dd02      	ble.n	8009080 <_dtoa_r+0xa10>
 800907a:	9b02      	ldr	r3, [sp, #8]
 800907c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009080:	9b00      	ldr	r3, [sp, #0]
 8009082:	f883 8000 	strb.w	r8, [r3]
 8009086:	e63f      	b.n	8008d08 <_dtoa_r+0x698>
 8009088:	4628      	mov	r0, r5
 800908a:	e7bb      	b.n	8009004 <_dtoa_r+0x994>
 800908c:	2201      	movs	r2, #1
 800908e:	e7e1      	b.n	8009054 <_dtoa_r+0x9e4>
 8009090:	9b08      	ldr	r3, [sp, #32]
 8009092:	2b00      	cmp	r3, #0
 8009094:	db04      	blt.n	80090a0 <_dtoa_r+0xa30>
 8009096:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009098:	430b      	orrs	r3, r1
 800909a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800909c:	430b      	orrs	r3, r1
 800909e:	d120      	bne.n	80090e2 <_dtoa_r+0xa72>
 80090a0:	2a00      	cmp	r2, #0
 80090a2:	dded      	ble.n	8009080 <_dtoa_r+0xa10>
 80090a4:	4649      	mov	r1, r9
 80090a6:	2201      	movs	r2, #1
 80090a8:	4658      	mov	r0, fp
 80090aa:	f001 f901 	bl	800a2b0 <__lshift>
 80090ae:	4621      	mov	r1, r4
 80090b0:	4681      	mov	r9, r0
 80090b2:	f001 f969 	bl	800a388 <__mcmp>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	dc03      	bgt.n	80090c2 <_dtoa_r+0xa52>
 80090ba:	d1e1      	bne.n	8009080 <_dtoa_r+0xa10>
 80090bc:	f018 0f01 	tst.w	r8, #1
 80090c0:	d0de      	beq.n	8009080 <_dtoa_r+0xa10>
 80090c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80090c6:	d1d8      	bne.n	800907a <_dtoa_r+0xa0a>
 80090c8:	9a00      	ldr	r2, [sp, #0]
 80090ca:	2339      	movs	r3, #57	@ 0x39
 80090cc:	7013      	strb	r3, [r2, #0]
 80090ce:	4633      	mov	r3, r6
 80090d0:	461e      	mov	r6, r3
 80090d2:	3b01      	subs	r3, #1
 80090d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80090d8:	2a39      	cmp	r2, #57	@ 0x39
 80090da:	d052      	beq.n	8009182 <_dtoa_r+0xb12>
 80090dc:	3201      	adds	r2, #1
 80090de:	701a      	strb	r2, [r3, #0]
 80090e0:	e612      	b.n	8008d08 <_dtoa_r+0x698>
 80090e2:	2a00      	cmp	r2, #0
 80090e4:	dd07      	ble.n	80090f6 <_dtoa_r+0xa86>
 80090e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80090ea:	d0ed      	beq.n	80090c8 <_dtoa_r+0xa58>
 80090ec:	9a00      	ldr	r2, [sp, #0]
 80090ee:	f108 0301 	add.w	r3, r8, #1
 80090f2:	7013      	strb	r3, [r2, #0]
 80090f4:	e608      	b.n	8008d08 <_dtoa_r+0x698>
 80090f6:	9b07      	ldr	r3, [sp, #28]
 80090f8:	9a07      	ldr	r2, [sp, #28]
 80090fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80090fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009100:	4293      	cmp	r3, r2
 8009102:	d028      	beq.n	8009156 <_dtoa_r+0xae6>
 8009104:	4649      	mov	r1, r9
 8009106:	2300      	movs	r3, #0
 8009108:	220a      	movs	r2, #10
 800910a:	4658      	mov	r0, fp
 800910c:	f000 feda 	bl	8009ec4 <__multadd>
 8009110:	42af      	cmp	r7, r5
 8009112:	4681      	mov	r9, r0
 8009114:	f04f 0300 	mov.w	r3, #0
 8009118:	f04f 020a 	mov.w	r2, #10
 800911c:	4639      	mov	r1, r7
 800911e:	4658      	mov	r0, fp
 8009120:	d107      	bne.n	8009132 <_dtoa_r+0xac2>
 8009122:	f000 fecf 	bl	8009ec4 <__multadd>
 8009126:	4607      	mov	r7, r0
 8009128:	4605      	mov	r5, r0
 800912a:	9b07      	ldr	r3, [sp, #28]
 800912c:	3301      	adds	r3, #1
 800912e:	9307      	str	r3, [sp, #28]
 8009130:	e774      	b.n	800901c <_dtoa_r+0x9ac>
 8009132:	f000 fec7 	bl	8009ec4 <__multadd>
 8009136:	4629      	mov	r1, r5
 8009138:	4607      	mov	r7, r0
 800913a:	2300      	movs	r3, #0
 800913c:	220a      	movs	r2, #10
 800913e:	4658      	mov	r0, fp
 8009140:	f000 fec0 	bl	8009ec4 <__multadd>
 8009144:	4605      	mov	r5, r0
 8009146:	e7f0      	b.n	800912a <_dtoa_r+0xaba>
 8009148:	9b00      	ldr	r3, [sp, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	bfcc      	ite	gt
 800914e:	461e      	movgt	r6, r3
 8009150:	2601      	movle	r6, #1
 8009152:	4456      	add	r6, sl
 8009154:	2700      	movs	r7, #0
 8009156:	4649      	mov	r1, r9
 8009158:	2201      	movs	r2, #1
 800915a:	4658      	mov	r0, fp
 800915c:	f001 f8a8 	bl	800a2b0 <__lshift>
 8009160:	4621      	mov	r1, r4
 8009162:	4681      	mov	r9, r0
 8009164:	f001 f910 	bl	800a388 <__mcmp>
 8009168:	2800      	cmp	r0, #0
 800916a:	dcb0      	bgt.n	80090ce <_dtoa_r+0xa5e>
 800916c:	d102      	bne.n	8009174 <_dtoa_r+0xb04>
 800916e:	f018 0f01 	tst.w	r8, #1
 8009172:	d1ac      	bne.n	80090ce <_dtoa_r+0xa5e>
 8009174:	4633      	mov	r3, r6
 8009176:	461e      	mov	r6, r3
 8009178:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800917c:	2a30      	cmp	r2, #48	@ 0x30
 800917e:	d0fa      	beq.n	8009176 <_dtoa_r+0xb06>
 8009180:	e5c2      	b.n	8008d08 <_dtoa_r+0x698>
 8009182:	459a      	cmp	sl, r3
 8009184:	d1a4      	bne.n	80090d0 <_dtoa_r+0xa60>
 8009186:	9b04      	ldr	r3, [sp, #16]
 8009188:	3301      	adds	r3, #1
 800918a:	9304      	str	r3, [sp, #16]
 800918c:	2331      	movs	r3, #49	@ 0x31
 800918e:	f88a 3000 	strb.w	r3, [sl]
 8009192:	e5b9      	b.n	8008d08 <_dtoa_r+0x698>
 8009194:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009196:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80091f4 <_dtoa_r+0xb84>
 800919a:	b11b      	cbz	r3, 80091a4 <_dtoa_r+0xb34>
 800919c:	f10a 0308 	add.w	r3, sl, #8
 80091a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80091a2:	6013      	str	r3, [r2, #0]
 80091a4:	4650      	mov	r0, sl
 80091a6:	b019      	add	sp, #100	@ 0x64
 80091a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	f77f ae37 	ble.w	8008e22 <_dtoa_r+0x7b2>
 80091b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80091b8:	2001      	movs	r0, #1
 80091ba:	e655      	b.n	8008e68 <_dtoa_r+0x7f8>
 80091bc:	9b00      	ldr	r3, [sp, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f77f aed6 	ble.w	8008f70 <_dtoa_r+0x900>
 80091c4:	4656      	mov	r6, sl
 80091c6:	4621      	mov	r1, r4
 80091c8:	4648      	mov	r0, r9
 80091ca:	f7ff f9c7 	bl	800855c <quorem>
 80091ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80091d2:	f806 8b01 	strb.w	r8, [r6], #1
 80091d6:	9b00      	ldr	r3, [sp, #0]
 80091d8:	eba6 020a 	sub.w	r2, r6, sl
 80091dc:	4293      	cmp	r3, r2
 80091de:	ddb3      	ble.n	8009148 <_dtoa_r+0xad8>
 80091e0:	4649      	mov	r1, r9
 80091e2:	2300      	movs	r3, #0
 80091e4:	220a      	movs	r2, #10
 80091e6:	4658      	mov	r0, fp
 80091e8:	f000 fe6c 	bl	8009ec4 <__multadd>
 80091ec:	4681      	mov	r9, r0
 80091ee:	e7ea      	b.n	80091c6 <_dtoa_r+0xb56>
 80091f0:	0800b4fd 	.word	0x0800b4fd
 80091f4:	0800b481 	.word	0x0800b481

080091f8 <rshift>:
 80091f8:	6903      	ldr	r3, [r0, #16]
 80091fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80091fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009202:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009206:	f100 0414 	add.w	r4, r0, #20
 800920a:	dd45      	ble.n	8009298 <rshift+0xa0>
 800920c:	f011 011f 	ands.w	r1, r1, #31
 8009210:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009214:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009218:	d10c      	bne.n	8009234 <rshift+0x3c>
 800921a:	f100 0710 	add.w	r7, r0, #16
 800921e:	4629      	mov	r1, r5
 8009220:	42b1      	cmp	r1, r6
 8009222:	d334      	bcc.n	800928e <rshift+0x96>
 8009224:	1a9b      	subs	r3, r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	1eea      	subs	r2, r5, #3
 800922a:	4296      	cmp	r6, r2
 800922c:	bf38      	it	cc
 800922e:	2300      	movcc	r3, #0
 8009230:	4423      	add	r3, r4
 8009232:	e015      	b.n	8009260 <rshift+0x68>
 8009234:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009238:	f1c1 0820 	rsb	r8, r1, #32
 800923c:	40cf      	lsrs	r7, r1
 800923e:	f105 0e04 	add.w	lr, r5, #4
 8009242:	46a1      	mov	r9, r4
 8009244:	4576      	cmp	r6, lr
 8009246:	46f4      	mov	ip, lr
 8009248:	d815      	bhi.n	8009276 <rshift+0x7e>
 800924a:	1a9a      	subs	r2, r3, r2
 800924c:	0092      	lsls	r2, r2, #2
 800924e:	3a04      	subs	r2, #4
 8009250:	3501      	adds	r5, #1
 8009252:	42ae      	cmp	r6, r5
 8009254:	bf38      	it	cc
 8009256:	2200      	movcc	r2, #0
 8009258:	18a3      	adds	r3, r4, r2
 800925a:	50a7      	str	r7, [r4, r2]
 800925c:	b107      	cbz	r7, 8009260 <rshift+0x68>
 800925e:	3304      	adds	r3, #4
 8009260:	1b1a      	subs	r2, r3, r4
 8009262:	42a3      	cmp	r3, r4
 8009264:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009268:	bf08      	it	eq
 800926a:	2300      	moveq	r3, #0
 800926c:	6102      	str	r2, [r0, #16]
 800926e:	bf08      	it	eq
 8009270:	6143      	streq	r3, [r0, #20]
 8009272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009276:	f8dc c000 	ldr.w	ip, [ip]
 800927a:	fa0c fc08 	lsl.w	ip, ip, r8
 800927e:	ea4c 0707 	orr.w	r7, ip, r7
 8009282:	f849 7b04 	str.w	r7, [r9], #4
 8009286:	f85e 7b04 	ldr.w	r7, [lr], #4
 800928a:	40cf      	lsrs	r7, r1
 800928c:	e7da      	b.n	8009244 <rshift+0x4c>
 800928e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009292:	f847 cf04 	str.w	ip, [r7, #4]!
 8009296:	e7c3      	b.n	8009220 <rshift+0x28>
 8009298:	4623      	mov	r3, r4
 800929a:	e7e1      	b.n	8009260 <rshift+0x68>

0800929c <__hexdig_fun>:
 800929c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80092a0:	2b09      	cmp	r3, #9
 80092a2:	d802      	bhi.n	80092aa <__hexdig_fun+0xe>
 80092a4:	3820      	subs	r0, #32
 80092a6:	b2c0      	uxtb	r0, r0
 80092a8:	4770      	bx	lr
 80092aa:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80092ae:	2b05      	cmp	r3, #5
 80092b0:	d801      	bhi.n	80092b6 <__hexdig_fun+0x1a>
 80092b2:	3847      	subs	r0, #71	@ 0x47
 80092b4:	e7f7      	b.n	80092a6 <__hexdig_fun+0xa>
 80092b6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80092ba:	2b05      	cmp	r3, #5
 80092bc:	d801      	bhi.n	80092c2 <__hexdig_fun+0x26>
 80092be:	3827      	subs	r0, #39	@ 0x27
 80092c0:	e7f1      	b.n	80092a6 <__hexdig_fun+0xa>
 80092c2:	2000      	movs	r0, #0
 80092c4:	4770      	bx	lr
	...

080092c8 <__gethex>:
 80092c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092cc:	b085      	sub	sp, #20
 80092ce:	468a      	mov	sl, r1
 80092d0:	9302      	str	r3, [sp, #8]
 80092d2:	680b      	ldr	r3, [r1, #0]
 80092d4:	9001      	str	r0, [sp, #4]
 80092d6:	4690      	mov	r8, r2
 80092d8:	1c9c      	adds	r4, r3, #2
 80092da:	46a1      	mov	r9, r4
 80092dc:	f814 0b01 	ldrb.w	r0, [r4], #1
 80092e0:	2830      	cmp	r0, #48	@ 0x30
 80092e2:	d0fa      	beq.n	80092da <__gethex+0x12>
 80092e4:	eba9 0303 	sub.w	r3, r9, r3
 80092e8:	f1a3 0b02 	sub.w	fp, r3, #2
 80092ec:	f7ff ffd6 	bl	800929c <__hexdig_fun>
 80092f0:	4605      	mov	r5, r0
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d168      	bne.n	80093c8 <__gethex+0x100>
 80092f6:	49a0      	ldr	r1, [pc, #640]	@ (8009578 <__gethex+0x2b0>)
 80092f8:	2201      	movs	r2, #1
 80092fa:	4648      	mov	r0, r9
 80092fc:	f7ff f8b4 	bl	8008468 <strncmp>
 8009300:	4607      	mov	r7, r0
 8009302:	2800      	cmp	r0, #0
 8009304:	d167      	bne.n	80093d6 <__gethex+0x10e>
 8009306:	f899 0001 	ldrb.w	r0, [r9, #1]
 800930a:	4626      	mov	r6, r4
 800930c:	f7ff ffc6 	bl	800929c <__hexdig_fun>
 8009310:	2800      	cmp	r0, #0
 8009312:	d062      	beq.n	80093da <__gethex+0x112>
 8009314:	4623      	mov	r3, r4
 8009316:	7818      	ldrb	r0, [r3, #0]
 8009318:	2830      	cmp	r0, #48	@ 0x30
 800931a:	4699      	mov	r9, r3
 800931c:	f103 0301 	add.w	r3, r3, #1
 8009320:	d0f9      	beq.n	8009316 <__gethex+0x4e>
 8009322:	f7ff ffbb 	bl	800929c <__hexdig_fun>
 8009326:	fab0 f580 	clz	r5, r0
 800932a:	096d      	lsrs	r5, r5, #5
 800932c:	f04f 0b01 	mov.w	fp, #1
 8009330:	464a      	mov	r2, r9
 8009332:	4616      	mov	r6, r2
 8009334:	3201      	adds	r2, #1
 8009336:	7830      	ldrb	r0, [r6, #0]
 8009338:	f7ff ffb0 	bl	800929c <__hexdig_fun>
 800933c:	2800      	cmp	r0, #0
 800933e:	d1f8      	bne.n	8009332 <__gethex+0x6a>
 8009340:	498d      	ldr	r1, [pc, #564]	@ (8009578 <__gethex+0x2b0>)
 8009342:	2201      	movs	r2, #1
 8009344:	4630      	mov	r0, r6
 8009346:	f7ff f88f 	bl	8008468 <strncmp>
 800934a:	2800      	cmp	r0, #0
 800934c:	d13f      	bne.n	80093ce <__gethex+0x106>
 800934e:	b944      	cbnz	r4, 8009362 <__gethex+0x9a>
 8009350:	1c74      	adds	r4, r6, #1
 8009352:	4622      	mov	r2, r4
 8009354:	4616      	mov	r6, r2
 8009356:	3201      	adds	r2, #1
 8009358:	7830      	ldrb	r0, [r6, #0]
 800935a:	f7ff ff9f 	bl	800929c <__hexdig_fun>
 800935e:	2800      	cmp	r0, #0
 8009360:	d1f8      	bne.n	8009354 <__gethex+0x8c>
 8009362:	1ba4      	subs	r4, r4, r6
 8009364:	00a7      	lsls	r7, r4, #2
 8009366:	7833      	ldrb	r3, [r6, #0]
 8009368:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800936c:	2b50      	cmp	r3, #80	@ 0x50
 800936e:	d13e      	bne.n	80093ee <__gethex+0x126>
 8009370:	7873      	ldrb	r3, [r6, #1]
 8009372:	2b2b      	cmp	r3, #43	@ 0x2b
 8009374:	d033      	beq.n	80093de <__gethex+0x116>
 8009376:	2b2d      	cmp	r3, #45	@ 0x2d
 8009378:	d034      	beq.n	80093e4 <__gethex+0x11c>
 800937a:	1c71      	adds	r1, r6, #1
 800937c:	2400      	movs	r4, #0
 800937e:	7808      	ldrb	r0, [r1, #0]
 8009380:	f7ff ff8c 	bl	800929c <__hexdig_fun>
 8009384:	1e43      	subs	r3, r0, #1
 8009386:	b2db      	uxtb	r3, r3
 8009388:	2b18      	cmp	r3, #24
 800938a:	d830      	bhi.n	80093ee <__gethex+0x126>
 800938c:	f1a0 0210 	sub.w	r2, r0, #16
 8009390:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009394:	f7ff ff82 	bl	800929c <__hexdig_fun>
 8009398:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800939c:	fa5f fc8c 	uxtb.w	ip, ip
 80093a0:	f1bc 0f18 	cmp.w	ip, #24
 80093a4:	f04f 030a 	mov.w	r3, #10
 80093a8:	d91e      	bls.n	80093e8 <__gethex+0x120>
 80093aa:	b104      	cbz	r4, 80093ae <__gethex+0xe6>
 80093ac:	4252      	negs	r2, r2
 80093ae:	4417      	add	r7, r2
 80093b0:	f8ca 1000 	str.w	r1, [sl]
 80093b4:	b1ed      	cbz	r5, 80093f2 <__gethex+0x12a>
 80093b6:	f1bb 0f00 	cmp.w	fp, #0
 80093ba:	bf0c      	ite	eq
 80093bc:	2506      	moveq	r5, #6
 80093be:	2500      	movne	r5, #0
 80093c0:	4628      	mov	r0, r5
 80093c2:	b005      	add	sp, #20
 80093c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c8:	2500      	movs	r5, #0
 80093ca:	462c      	mov	r4, r5
 80093cc:	e7b0      	b.n	8009330 <__gethex+0x68>
 80093ce:	2c00      	cmp	r4, #0
 80093d0:	d1c7      	bne.n	8009362 <__gethex+0x9a>
 80093d2:	4627      	mov	r7, r4
 80093d4:	e7c7      	b.n	8009366 <__gethex+0x9e>
 80093d6:	464e      	mov	r6, r9
 80093d8:	462f      	mov	r7, r5
 80093da:	2501      	movs	r5, #1
 80093dc:	e7c3      	b.n	8009366 <__gethex+0x9e>
 80093de:	2400      	movs	r4, #0
 80093e0:	1cb1      	adds	r1, r6, #2
 80093e2:	e7cc      	b.n	800937e <__gethex+0xb6>
 80093e4:	2401      	movs	r4, #1
 80093e6:	e7fb      	b.n	80093e0 <__gethex+0x118>
 80093e8:	fb03 0002 	mla	r0, r3, r2, r0
 80093ec:	e7ce      	b.n	800938c <__gethex+0xc4>
 80093ee:	4631      	mov	r1, r6
 80093f0:	e7de      	b.n	80093b0 <__gethex+0xe8>
 80093f2:	eba6 0309 	sub.w	r3, r6, r9
 80093f6:	3b01      	subs	r3, #1
 80093f8:	4629      	mov	r1, r5
 80093fa:	2b07      	cmp	r3, #7
 80093fc:	dc0a      	bgt.n	8009414 <__gethex+0x14c>
 80093fe:	9801      	ldr	r0, [sp, #4]
 8009400:	f000 fcfe 	bl	8009e00 <_Balloc>
 8009404:	4604      	mov	r4, r0
 8009406:	b940      	cbnz	r0, 800941a <__gethex+0x152>
 8009408:	4b5c      	ldr	r3, [pc, #368]	@ (800957c <__gethex+0x2b4>)
 800940a:	4602      	mov	r2, r0
 800940c:	21e4      	movs	r1, #228	@ 0xe4
 800940e:	485c      	ldr	r0, [pc, #368]	@ (8009580 <__gethex+0x2b8>)
 8009410:	f001 fbb0 	bl	800ab74 <__assert_func>
 8009414:	3101      	adds	r1, #1
 8009416:	105b      	asrs	r3, r3, #1
 8009418:	e7ef      	b.n	80093fa <__gethex+0x132>
 800941a:	f100 0a14 	add.w	sl, r0, #20
 800941e:	2300      	movs	r3, #0
 8009420:	4655      	mov	r5, sl
 8009422:	469b      	mov	fp, r3
 8009424:	45b1      	cmp	r9, r6
 8009426:	d337      	bcc.n	8009498 <__gethex+0x1d0>
 8009428:	f845 bb04 	str.w	fp, [r5], #4
 800942c:	eba5 050a 	sub.w	r5, r5, sl
 8009430:	10ad      	asrs	r5, r5, #2
 8009432:	6125      	str	r5, [r4, #16]
 8009434:	4658      	mov	r0, fp
 8009436:	f000 fdd5 	bl	8009fe4 <__hi0bits>
 800943a:	016d      	lsls	r5, r5, #5
 800943c:	f8d8 6000 	ldr.w	r6, [r8]
 8009440:	1a2d      	subs	r5, r5, r0
 8009442:	42b5      	cmp	r5, r6
 8009444:	dd54      	ble.n	80094f0 <__gethex+0x228>
 8009446:	1bad      	subs	r5, r5, r6
 8009448:	4629      	mov	r1, r5
 800944a:	4620      	mov	r0, r4
 800944c:	f001 f969 	bl	800a722 <__any_on>
 8009450:	4681      	mov	r9, r0
 8009452:	b178      	cbz	r0, 8009474 <__gethex+0x1ac>
 8009454:	1e6b      	subs	r3, r5, #1
 8009456:	1159      	asrs	r1, r3, #5
 8009458:	f003 021f 	and.w	r2, r3, #31
 800945c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009460:	f04f 0901 	mov.w	r9, #1
 8009464:	fa09 f202 	lsl.w	r2, r9, r2
 8009468:	420a      	tst	r2, r1
 800946a:	d003      	beq.n	8009474 <__gethex+0x1ac>
 800946c:	454b      	cmp	r3, r9
 800946e:	dc36      	bgt.n	80094de <__gethex+0x216>
 8009470:	f04f 0902 	mov.w	r9, #2
 8009474:	4629      	mov	r1, r5
 8009476:	4620      	mov	r0, r4
 8009478:	f7ff febe 	bl	80091f8 <rshift>
 800947c:	442f      	add	r7, r5
 800947e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009482:	42bb      	cmp	r3, r7
 8009484:	da42      	bge.n	800950c <__gethex+0x244>
 8009486:	9801      	ldr	r0, [sp, #4]
 8009488:	4621      	mov	r1, r4
 800948a:	f000 fcf9 	bl	8009e80 <_Bfree>
 800948e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009490:	2300      	movs	r3, #0
 8009492:	6013      	str	r3, [r2, #0]
 8009494:	25a3      	movs	r5, #163	@ 0xa3
 8009496:	e793      	b.n	80093c0 <__gethex+0xf8>
 8009498:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800949c:	2a2e      	cmp	r2, #46	@ 0x2e
 800949e:	d012      	beq.n	80094c6 <__gethex+0x1fe>
 80094a0:	2b20      	cmp	r3, #32
 80094a2:	d104      	bne.n	80094ae <__gethex+0x1e6>
 80094a4:	f845 bb04 	str.w	fp, [r5], #4
 80094a8:	f04f 0b00 	mov.w	fp, #0
 80094ac:	465b      	mov	r3, fp
 80094ae:	7830      	ldrb	r0, [r6, #0]
 80094b0:	9303      	str	r3, [sp, #12]
 80094b2:	f7ff fef3 	bl	800929c <__hexdig_fun>
 80094b6:	9b03      	ldr	r3, [sp, #12]
 80094b8:	f000 000f 	and.w	r0, r0, #15
 80094bc:	4098      	lsls	r0, r3
 80094be:	ea4b 0b00 	orr.w	fp, fp, r0
 80094c2:	3304      	adds	r3, #4
 80094c4:	e7ae      	b.n	8009424 <__gethex+0x15c>
 80094c6:	45b1      	cmp	r9, r6
 80094c8:	d8ea      	bhi.n	80094a0 <__gethex+0x1d8>
 80094ca:	492b      	ldr	r1, [pc, #172]	@ (8009578 <__gethex+0x2b0>)
 80094cc:	9303      	str	r3, [sp, #12]
 80094ce:	2201      	movs	r2, #1
 80094d0:	4630      	mov	r0, r6
 80094d2:	f7fe ffc9 	bl	8008468 <strncmp>
 80094d6:	9b03      	ldr	r3, [sp, #12]
 80094d8:	2800      	cmp	r0, #0
 80094da:	d1e1      	bne.n	80094a0 <__gethex+0x1d8>
 80094dc:	e7a2      	b.n	8009424 <__gethex+0x15c>
 80094de:	1ea9      	subs	r1, r5, #2
 80094e0:	4620      	mov	r0, r4
 80094e2:	f001 f91e 	bl	800a722 <__any_on>
 80094e6:	2800      	cmp	r0, #0
 80094e8:	d0c2      	beq.n	8009470 <__gethex+0x1a8>
 80094ea:	f04f 0903 	mov.w	r9, #3
 80094ee:	e7c1      	b.n	8009474 <__gethex+0x1ac>
 80094f0:	da09      	bge.n	8009506 <__gethex+0x23e>
 80094f2:	1b75      	subs	r5, r6, r5
 80094f4:	4621      	mov	r1, r4
 80094f6:	9801      	ldr	r0, [sp, #4]
 80094f8:	462a      	mov	r2, r5
 80094fa:	f000 fed9 	bl	800a2b0 <__lshift>
 80094fe:	1b7f      	subs	r7, r7, r5
 8009500:	4604      	mov	r4, r0
 8009502:	f100 0a14 	add.w	sl, r0, #20
 8009506:	f04f 0900 	mov.w	r9, #0
 800950a:	e7b8      	b.n	800947e <__gethex+0x1b6>
 800950c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009510:	42bd      	cmp	r5, r7
 8009512:	dd6f      	ble.n	80095f4 <__gethex+0x32c>
 8009514:	1bed      	subs	r5, r5, r7
 8009516:	42ae      	cmp	r6, r5
 8009518:	dc34      	bgt.n	8009584 <__gethex+0x2bc>
 800951a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800951e:	2b02      	cmp	r3, #2
 8009520:	d022      	beq.n	8009568 <__gethex+0x2a0>
 8009522:	2b03      	cmp	r3, #3
 8009524:	d024      	beq.n	8009570 <__gethex+0x2a8>
 8009526:	2b01      	cmp	r3, #1
 8009528:	d115      	bne.n	8009556 <__gethex+0x28e>
 800952a:	42ae      	cmp	r6, r5
 800952c:	d113      	bne.n	8009556 <__gethex+0x28e>
 800952e:	2e01      	cmp	r6, #1
 8009530:	d10b      	bne.n	800954a <__gethex+0x282>
 8009532:	9a02      	ldr	r2, [sp, #8]
 8009534:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009538:	6013      	str	r3, [r2, #0]
 800953a:	2301      	movs	r3, #1
 800953c:	6123      	str	r3, [r4, #16]
 800953e:	f8ca 3000 	str.w	r3, [sl]
 8009542:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009544:	2562      	movs	r5, #98	@ 0x62
 8009546:	601c      	str	r4, [r3, #0]
 8009548:	e73a      	b.n	80093c0 <__gethex+0xf8>
 800954a:	1e71      	subs	r1, r6, #1
 800954c:	4620      	mov	r0, r4
 800954e:	f001 f8e8 	bl	800a722 <__any_on>
 8009552:	2800      	cmp	r0, #0
 8009554:	d1ed      	bne.n	8009532 <__gethex+0x26a>
 8009556:	9801      	ldr	r0, [sp, #4]
 8009558:	4621      	mov	r1, r4
 800955a:	f000 fc91 	bl	8009e80 <_Bfree>
 800955e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009560:	2300      	movs	r3, #0
 8009562:	6013      	str	r3, [r2, #0]
 8009564:	2550      	movs	r5, #80	@ 0x50
 8009566:	e72b      	b.n	80093c0 <__gethex+0xf8>
 8009568:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1f3      	bne.n	8009556 <__gethex+0x28e>
 800956e:	e7e0      	b.n	8009532 <__gethex+0x26a>
 8009570:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1dd      	bne.n	8009532 <__gethex+0x26a>
 8009576:	e7ee      	b.n	8009556 <__gethex+0x28e>
 8009578:	0800b325 	.word	0x0800b325
 800957c:	0800b4fd 	.word	0x0800b4fd
 8009580:	0800b50e 	.word	0x0800b50e
 8009584:	1e6f      	subs	r7, r5, #1
 8009586:	f1b9 0f00 	cmp.w	r9, #0
 800958a:	d130      	bne.n	80095ee <__gethex+0x326>
 800958c:	b127      	cbz	r7, 8009598 <__gethex+0x2d0>
 800958e:	4639      	mov	r1, r7
 8009590:	4620      	mov	r0, r4
 8009592:	f001 f8c6 	bl	800a722 <__any_on>
 8009596:	4681      	mov	r9, r0
 8009598:	117a      	asrs	r2, r7, #5
 800959a:	2301      	movs	r3, #1
 800959c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80095a0:	f007 071f 	and.w	r7, r7, #31
 80095a4:	40bb      	lsls	r3, r7
 80095a6:	4213      	tst	r3, r2
 80095a8:	4629      	mov	r1, r5
 80095aa:	4620      	mov	r0, r4
 80095ac:	bf18      	it	ne
 80095ae:	f049 0902 	orrne.w	r9, r9, #2
 80095b2:	f7ff fe21 	bl	80091f8 <rshift>
 80095b6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80095ba:	1b76      	subs	r6, r6, r5
 80095bc:	2502      	movs	r5, #2
 80095be:	f1b9 0f00 	cmp.w	r9, #0
 80095c2:	d047      	beq.n	8009654 <__gethex+0x38c>
 80095c4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	d015      	beq.n	80095f8 <__gethex+0x330>
 80095cc:	2b03      	cmp	r3, #3
 80095ce:	d017      	beq.n	8009600 <__gethex+0x338>
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d109      	bne.n	80095e8 <__gethex+0x320>
 80095d4:	f019 0f02 	tst.w	r9, #2
 80095d8:	d006      	beq.n	80095e8 <__gethex+0x320>
 80095da:	f8da 3000 	ldr.w	r3, [sl]
 80095de:	ea49 0903 	orr.w	r9, r9, r3
 80095e2:	f019 0f01 	tst.w	r9, #1
 80095e6:	d10e      	bne.n	8009606 <__gethex+0x33e>
 80095e8:	f045 0510 	orr.w	r5, r5, #16
 80095ec:	e032      	b.n	8009654 <__gethex+0x38c>
 80095ee:	f04f 0901 	mov.w	r9, #1
 80095f2:	e7d1      	b.n	8009598 <__gethex+0x2d0>
 80095f4:	2501      	movs	r5, #1
 80095f6:	e7e2      	b.n	80095be <__gethex+0x2f6>
 80095f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095fa:	f1c3 0301 	rsb	r3, r3, #1
 80095fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009602:	2b00      	cmp	r3, #0
 8009604:	d0f0      	beq.n	80095e8 <__gethex+0x320>
 8009606:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800960a:	f104 0314 	add.w	r3, r4, #20
 800960e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009612:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009616:	f04f 0c00 	mov.w	ip, #0
 800961a:	4618      	mov	r0, r3
 800961c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009620:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8009624:	d01b      	beq.n	800965e <__gethex+0x396>
 8009626:	3201      	adds	r2, #1
 8009628:	6002      	str	r2, [r0, #0]
 800962a:	2d02      	cmp	r5, #2
 800962c:	f104 0314 	add.w	r3, r4, #20
 8009630:	d13c      	bne.n	80096ac <__gethex+0x3e4>
 8009632:	f8d8 2000 	ldr.w	r2, [r8]
 8009636:	3a01      	subs	r2, #1
 8009638:	42b2      	cmp	r2, r6
 800963a:	d109      	bne.n	8009650 <__gethex+0x388>
 800963c:	1171      	asrs	r1, r6, #5
 800963e:	2201      	movs	r2, #1
 8009640:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009644:	f006 061f 	and.w	r6, r6, #31
 8009648:	fa02 f606 	lsl.w	r6, r2, r6
 800964c:	421e      	tst	r6, r3
 800964e:	d13a      	bne.n	80096c6 <__gethex+0x3fe>
 8009650:	f045 0520 	orr.w	r5, r5, #32
 8009654:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009656:	601c      	str	r4, [r3, #0]
 8009658:	9b02      	ldr	r3, [sp, #8]
 800965a:	601f      	str	r7, [r3, #0]
 800965c:	e6b0      	b.n	80093c0 <__gethex+0xf8>
 800965e:	4299      	cmp	r1, r3
 8009660:	f843 cc04 	str.w	ip, [r3, #-4]
 8009664:	d8d9      	bhi.n	800961a <__gethex+0x352>
 8009666:	68a3      	ldr	r3, [r4, #8]
 8009668:	459b      	cmp	fp, r3
 800966a:	db17      	blt.n	800969c <__gethex+0x3d4>
 800966c:	6861      	ldr	r1, [r4, #4]
 800966e:	9801      	ldr	r0, [sp, #4]
 8009670:	3101      	adds	r1, #1
 8009672:	f000 fbc5 	bl	8009e00 <_Balloc>
 8009676:	4681      	mov	r9, r0
 8009678:	b918      	cbnz	r0, 8009682 <__gethex+0x3ba>
 800967a:	4b1a      	ldr	r3, [pc, #104]	@ (80096e4 <__gethex+0x41c>)
 800967c:	4602      	mov	r2, r0
 800967e:	2184      	movs	r1, #132	@ 0x84
 8009680:	e6c5      	b.n	800940e <__gethex+0x146>
 8009682:	6922      	ldr	r2, [r4, #16]
 8009684:	3202      	adds	r2, #2
 8009686:	f104 010c 	add.w	r1, r4, #12
 800968a:	0092      	lsls	r2, r2, #2
 800968c:	300c      	adds	r0, #12
 800968e:	f7fe ff46 	bl	800851e <memcpy>
 8009692:	4621      	mov	r1, r4
 8009694:	9801      	ldr	r0, [sp, #4]
 8009696:	f000 fbf3 	bl	8009e80 <_Bfree>
 800969a:	464c      	mov	r4, r9
 800969c:	6923      	ldr	r3, [r4, #16]
 800969e:	1c5a      	adds	r2, r3, #1
 80096a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80096a4:	6122      	str	r2, [r4, #16]
 80096a6:	2201      	movs	r2, #1
 80096a8:	615a      	str	r2, [r3, #20]
 80096aa:	e7be      	b.n	800962a <__gethex+0x362>
 80096ac:	6922      	ldr	r2, [r4, #16]
 80096ae:	455a      	cmp	r2, fp
 80096b0:	dd0b      	ble.n	80096ca <__gethex+0x402>
 80096b2:	2101      	movs	r1, #1
 80096b4:	4620      	mov	r0, r4
 80096b6:	f7ff fd9f 	bl	80091f8 <rshift>
 80096ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096be:	3701      	adds	r7, #1
 80096c0:	42bb      	cmp	r3, r7
 80096c2:	f6ff aee0 	blt.w	8009486 <__gethex+0x1be>
 80096c6:	2501      	movs	r5, #1
 80096c8:	e7c2      	b.n	8009650 <__gethex+0x388>
 80096ca:	f016 061f 	ands.w	r6, r6, #31
 80096ce:	d0fa      	beq.n	80096c6 <__gethex+0x3fe>
 80096d0:	4453      	add	r3, sl
 80096d2:	f1c6 0620 	rsb	r6, r6, #32
 80096d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80096da:	f000 fc83 	bl	8009fe4 <__hi0bits>
 80096de:	42b0      	cmp	r0, r6
 80096e0:	dbe7      	blt.n	80096b2 <__gethex+0x3ea>
 80096e2:	e7f0      	b.n	80096c6 <__gethex+0x3fe>
 80096e4:	0800b4fd 	.word	0x0800b4fd

080096e8 <L_shift>:
 80096e8:	f1c2 0208 	rsb	r2, r2, #8
 80096ec:	0092      	lsls	r2, r2, #2
 80096ee:	b570      	push	{r4, r5, r6, lr}
 80096f0:	f1c2 0620 	rsb	r6, r2, #32
 80096f4:	6843      	ldr	r3, [r0, #4]
 80096f6:	6804      	ldr	r4, [r0, #0]
 80096f8:	fa03 f506 	lsl.w	r5, r3, r6
 80096fc:	432c      	orrs	r4, r5
 80096fe:	40d3      	lsrs	r3, r2
 8009700:	6004      	str	r4, [r0, #0]
 8009702:	f840 3f04 	str.w	r3, [r0, #4]!
 8009706:	4288      	cmp	r0, r1
 8009708:	d3f4      	bcc.n	80096f4 <L_shift+0xc>
 800970a:	bd70      	pop	{r4, r5, r6, pc}

0800970c <__match>:
 800970c:	b530      	push	{r4, r5, lr}
 800970e:	6803      	ldr	r3, [r0, #0]
 8009710:	3301      	adds	r3, #1
 8009712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009716:	b914      	cbnz	r4, 800971e <__match+0x12>
 8009718:	6003      	str	r3, [r0, #0]
 800971a:	2001      	movs	r0, #1
 800971c:	bd30      	pop	{r4, r5, pc}
 800971e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009722:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009726:	2d19      	cmp	r5, #25
 8009728:	bf98      	it	ls
 800972a:	3220      	addls	r2, #32
 800972c:	42a2      	cmp	r2, r4
 800972e:	d0f0      	beq.n	8009712 <__match+0x6>
 8009730:	2000      	movs	r0, #0
 8009732:	e7f3      	b.n	800971c <__match+0x10>

08009734 <__hexnan>:
 8009734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009738:	680b      	ldr	r3, [r1, #0]
 800973a:	6801      	ldr	r1, [r0, #0]
 800973c:	115e      	asrs	r6, r3, #5
 800973e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009742:	f013 031f 	ands.w	r3, r3, #31
 8009746:	b087      	sub	sp, #28
 8009748:	bf18      	it	ne
 800974a:	3604      	addne	r6, #4
 800974c:	2500      	movs	r5, #0
 800974e:	1f37      	subs	r7, r6, #4
 8009750:	4682      	mov	sl, r0
 8009752:	4690      	mov	r8, r2
 8009754:	9301      	str	r3, [sp, #4]
 8009756:	f846 5c04 	str.w	r5, [r6, #-4]
 800975a:	46b9      	mov	r9, r7
 800975c:	463c      	mov	r4, r7
 800975e:	9502      	str	r5, [sp, #8]
 8009760:	46ab      	mov	fp, r5
 8009762:	784a      	ldrb	r2, [r1, #1]
 8009764:	1c4b      	adds	r3, r1, #1
 8009766:	9303      	str	r3, [sp, #12]
 8009768:	b342      	cbz	r2, 80097bc <__hexnan+0x88>
 800976a:	4610      	mov	r0, r2
 800976c:	9105      	str	r1, [sp, #20]
 800976e:	9204      	str	r2, [sp, #16]
 8009770:	f7ff fd94 	bl	800929c <__hexdig_fun>
 8009774:	2800      	cmp	r0, #0
 8009776:	d151      	bne.n	800981c <__hexnan+0xe8>
 8009778:	9a04      	ldr	r2, [sp, #16]
 800977a:	9905      	ldr	r1, [sp, #20]
 800977c:	2a20      	cmp	r2, #32
 800977e:	d818      	bhi.n	80097b2 <__hexnan+0x7e>
 8009780:	9b02      	ldr	r3, [sp, #8]
 8009782:	459b      	cmp	fp, r3
 8009784:	dd13      	ble.n	80097ae <__hexnan+0x7a>
 8009786:	454c      	cmp	r4, r9
 8009788:	d206      	bcs.n	8009798 <__hexnan+0x64>
 800978a:	2d07      	cmp	r5, #7
 800978c:	dc04      	bgt.n	8009798 <__hexnan+0x64>
 800978e:	462a      	mov	r2, r5
 8009790:	4649      	mov	r1, r9
 8009792:	4620      	mov	r0, r4
 8009794:	f7ff ffa8 	bl	80096e8 <L_shift>
 8009798:	4544      	cmp	r4, r8
 800979a:	d952      	bls.n	8009842 <__hexnan+0x10e>
 800979c:	2300      	movs	r3, #0
 800979e:	f1a4 0904 	sub.w	r9, r4, #4
 80097a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80097a6:	f8cd b008 	str.w	fp, [sp, #8]
 80097aa:	464c      	mov	r4, r9
 80097ac:	461d      	mov	r5, r3
 80097ae:	9903      	ldr	r1, [sp, #12]
 80097b0:	e7d7      	b.n	8009762 <__hexnan+0x2e>
 80097b2:	2a29      	cmp	r2, #41	@ 0x29
 80097b4:	d157      	bne.n	8009866 <__hexnan+0x132>
 80097b6:	3102      	adds	r1, #2
 80097b8:	f8ca 1000 	str.w	r1, [sl]
 80097bc:	f1bb 0f00 	cmp.w	fp, #0
 80097c0:	d051      	beq.n	8009866 <__hexnan+0x132>
 80097c2:	454c      	cmp	r4, r9
 80097c4:	d206      	bcs.n	80097d4 <__hexnan+0xa0>
 80097c6:	2d07      	cmp	r5, #7
 80097c8:	dc04      	bgt.n	80097d4 <__hexnan+0xa0>
 80097ca:	462a      	mov	r2, r5
 80097cc:	4649      	mov	r1, r9
 80097ce:	4620      	mov	r0, r4
 80097d0:	f7ff ff8a 	bl	80096e8 <L_shift>
 80097d4:	4544      	cmp	r4, r8
 80097d6:	d936      	bls.n	8009846 <__hexnan+0x112>
 80097d8:	f1a8 0204 	sub.w	r2, r8, #4
 80097dc:	4623      	mov	r3, r4
 80097de:	f853 1b04 	ldr.w	r1, [r3], #4
 80097e2:	f842 1f04 	str.w	r1, [r2, #4]!
 80097e6:	429f      	cmp	r7, r3
 80097e8:	d2f9      	bcs.n	80097de <__hexnan+0xaa>
 80097ea:	1b3b      	subs	r3, r7, r4
 80097ec:	f023 0303 	bic.w	r3, r3, #3
 80097f0:	3304      	adds	r3, #4
 80097f2:	3401      	adds	r4, #1
 80097f4:	3e03      	subs	r6, #3
 80097f6:	42b4      	cmp	r4, r6
 80097f8:	bf88      	it	hi
 80097fa:	2304      	movhi	r3, #4
 80097fc:	4443      	add	r3, r8
 80097fe:	2200      	movs	r2, #0
 8009800:	f843 2b04 	str.w	r2, [r3], #4
 8009804:	429f      	cmp	r7, r3
 8009806:	d2fb      	bcs.n	8009800 <__hexnan+0xcc>
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	b91b      	cbnz	r3, 8009814 <__hexnan+0xe0>
 800980c:	4547      	cmp	r7, r8
 800980e:	d128      	bne.n	8009862 <__hexnan+0x12e>
 8009810:	2301      	movs	r3, #1
 8009812:	603b      	str	r3, [r7, #0]
 8009814:	2005      	movs	r0, #5
 8009816:	b007      	add	sp, #28
 8009818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800981c:	3501      	adds	r5, #1
 800981e:	2d08      	cmp	r5, #8
 8009820:	f10b 0b01 	add.w	fp, fp, #1
 8009824:	dd06      	ble.n	8009834 <__hexnan+0x100>
 8009826:	4544      	cmp	r4, r8
 8009828:	d9c1      	bls.n	80097ae <__hexnan+0x7a>
 800982a:	2300      	movs	r3, #0
 800982c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009830:	2501      	movs	r5, #1
 8009832:	3c04      	subs	r4, #4
 8009834:	6822      	ldr	r2, [r4, #0]
 8009836:	f000 000f 	and.w	r0, r0, #15
 800983a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800983e:	6020      	str	r0, [r4, #0]
 8009840:	e7b5      	b.n	80097ae <__hexnan+0x7a>
 8009842:	2508      	movs	r5, #8
 8009844:	e7b3      	b.n	80097ae <__hexnan+0x7a>
 8009846:	9b01      	ldr	r3, [sp, #4]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d0dd      	beq.n	8009808 <__hexnan+0xd4>
 800984c:	f1c3 0320 	rsb	r3, r3, #32
 8009850:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009854:	40da      	lsrs	r2, r3
 8009856:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800985a:	4013      	ands	r3, r2
 800985c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009860:	e7d2      	b.n	8009808 <__hexnan+0xd4>
 8009862:	3f04      	subs	r7, #4
 8009864:	e7d0      	b.n	8009808 <__hexnan+0xd4>
 8009866:	2004      	movs	r0, #4
 8009868:	e7d5      	b.n	8009816 <__hexnan+0xe2>

0800986a <__ssputs_r>:
 800986a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800986e:	688e      	ldr	r6, [r1, #8]
 8009870:	461f      	mov	r7, r3
 8009872:	42be      	cmp	r6, r7
 8009874:	680b      	ldr	r3, [r1, #0]
 8009876:	4682      	mov	sl, r0
 8009878:	460c      	mov	r4, r1
 800987a:	4690      	mov	r8, r2
 800987c:	d82d      	bhi.n	80098da <__ssputs_r+0x70>
 800987e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009882:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009886:	d026      	beq.n	80098d6 <__ssputs_r+0x6c>
 8009888:	6965      	ldr	r5, [r4, #20]
 800988a:	6909      	ldr	r1, [r1, #16]
 800988c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009890:	eba3 0901 	sub.w	r9, r3, r1
 8009894:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009898:	1c7b      	adds	r3, r7, #1
 800989a:	444b      	add	r3, r9
 800989c:	106d      	asrs	r5, r5, #1
 800989e:	429d      	cmp	r5, r3
 80098a0:	bf38      	it	cc
 80098a2:	461d      	movcc	r5, r3
 80098a4:	0553      	lsls	r3, r2, #21
 80098a6:	d527      	bpl.n	80098f8 <__ssputs_r+0x8e>
 80098a8:	4629      	mov	r1, r5
 80098aa:	f000 f95f 	bl	8009b6c <_malloc_r>
 80098ae:	4606      	mov	r6, r0
 80098b0:	b360      	cbz	r0, 800990c <__ssputs_r+0xa2>
 80098b2:	6921      	ldr	r1, [r4, #16]
 80098b4:	464a      	mov	r2, r9
 80098b6:	f7fe fe32 	bl	800851e <memcpy>
 80098ba:	89a3      	ldrh	r3, [r4, #12]
 80098bc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80098c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098c4:	81a3      	strh	r3, [r4, #12]
 80098c6:	6126      	str	r6, [r4, #16]
 80098c8:	6165      	str	r5, [r4, #20]
 80098ca:	444e      	add	r6, r9
 80098cc:	eba5 0509 	sub.w	r5, r5, r9
 80098d0:	6026      	str	r6, [r4, #0]
 80098d2:	60a5      	str	r5, [r4, #8]
 80098d4:	463e      	mov	r6, r7
 80098d6:	42be      	cmp	r6, r7
 80098d8:	d900      	bls.n	80098dc <__ssputs_r+0x72>
 80098da:	463e      	mov	r6, r7
 80098dc:	6820      	ldr	r0, [r4, #0]
 80098de:	4632      	mov	r2, r6
 80098e0:	4641      	mov	r1, r8
 80098e2:	f001 f8b4 	bl	800aa4e <memmove>
 80098e6:	68a3      	ldr	r3, [r4, #8]
 80098e8:	1b9b      	subs	r3, r3, r6
 80098ea:	60a3      	str	r3, [r4, #8]
 80098ec:	6823      	ldr	r3, [r4, #0]
 80098ee:	4433      	add	r3, r6
 80098f0:	6023      	str	r3, [r4, #0]
 80098f2:	2000      	movs	r0, #0
 80098f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f8:	462a      	mov	r2, r5
 80098fa:	f000 ff76 	bl	800a7ea <_realloc_r>
 80098fe:	4606      	mov	r6, r0
 8009900:	2800      	cmp	r0, #0
 8009902:	d1e0      	bne.n	80098c6 <__ssputs_r+0x5c>
 8009904:	6921      	ldr	r1, [r4, #16]
 8009906:	4650      	mov	r0, sl
 8009908:	f001 f966 	bl	800abd8 <_free_r>
 800990c:	230c      	movs	r3, #12
 800990e:	f8ca 3000 	str.w	r3, [sl]
 8009912:	89a3      	ldrh	r3, [r4, #12]
 8009914:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009918:	81a3      	strh	r3, [r4, #12]
 800991a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800991e:	e7e9      	b.n	80098f4 <__ssputs_r+0x8a>

08009920 <_svfiprintf_r>:
 8009920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009924:	4698      	mov	r8, r3
 8009926:	898b      	ldrh	r3, [r1, #12]
 8009928:	061b      	lsls	r3, r3, #24
 800992a:	b09d      	sub	sp, #116	@ 0x74
 800992c:	4607      	mov	r7, r0
 800992e:	460d      	mov	r5, r1
 8009930:	4614      	mov	r4, r2
 8009932:	d510      	bpl.n	8009956 <_svfiprintf_r+0x36>
 8009934:	690b      	ldr	r3, [r1, #16]
 8009936:	b973      	cbnz	r3, 8009956 <_svfiprintf_r+0x36>
 8009938:	2140      	movs	r1, #64	@ 0x40
 800993a:	f000 f917 	bl	8009b6c <_malloc_r>
 800993e:	6028      	str	r0, [r5, #0]
 8009940:	6128      	str	r0, [r5, #16]
 8009942:	b930      	cbnz	r0, 8009952 <_svfiprintf_r+0x32>
 8009944:	230c      	movs	r3, #12
 8009946:	603b      	str	r3, [r7, #0]
 8009948:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800994c:	b01d      	add	sp, #116	@ 0x74
 800994e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009952:	2340      	movs	r3, #64	@ 0x40
 8009954:	616b      	str	r3, [r5, #20]
 8009956:	2300      	movs	r3, #0
 8009958:	9309      	str	r3, [sp, #36]	@ 0x24
 800995a:	2320      	movs	r3, #32
 800995c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009960:	f8cd 800c 	str.w	r8, [sp, #12]
 8009964:	2330      	movs	r3, #48	@ 0x30
 8009966:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009b04 <_svfiprintf_r+0x1e4>
 800996a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800996e:	f04f 0901 	mov.w	r9, #1
 8009972:	4623      	mov	r3, r4
 8009974:	469a      	mov	sl, r3
 8009976:	f813 2b01 	ldrb.w	r2, [r3], #1
 800997a:	b10a      	cbz	r2, 8009980 <_svfiprintf_r+0x60>
 800997c:	2a25      	cmp	r2, #37	@ 0x25
 800997e:	d1f9      	bne.n	8009974 <_svfiprintf_r+0x54>
 8009980:	ebba 0b04 	subs.w	fp, sl, r4
 8009984:	d00b      	beq.n	800999e <_svfiprintf_r+0x7e>
 8009986:	465b      	mov	r3, fp
 8009988:	4622      	mov	r2, r4
 800998a:	4629      	mov	r1, r5
 800998c:	4638      	mov	r0, r7
 800998e:	f7ff ff6c 	bl	800986a <__ssputs_r>
 8009992:	3001      	adds	r0, #1
 8009994:	f000 80a7 	beq.w	8009ae6 <_svfiprintf_r+0x1c6>
 8009998:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800999a:	445a      	add	r2, fp
 800999c:	9209      	str	r2, [sp, #36]	@ 0x24
 800999e:	f89a 3000 	ldrb.w	r3, [sl]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	f000 809f 	beq.w	8009ae6 <_svfiprintf_r+0x1c6>
 80099a8:	2300      	movs	r3, #0
 80099aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80099ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099b2:	f10a 0a01 	add.w	sl, sl, #1
 80099b6:	9304      	str	r3, [sp, #16]
 80099b8:	9307      	str	r3, [sp, #28]
 80099ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099be:	931a      	str	r3, [sp, #104]	@ 0x68
 80099c0:	4654      	mov	r4, sl
 80099c2:	2205      	movs	r2, #5
 80099c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099c8:	484e      	ldr	r0, [pc, #312]	@ (8009b04 <_svfiprintf_r+0x1e4>)
 80099ca:	f7f6 fc01 	bl	80001d0 <memchr>
 80099ce:	9a04      	ldr	r2, [sp, #16]
 80099d0:	b9d8      	cbnz	r0, 8009a0a <_svfiprintf_r+0xea>
 80099d2:	06d0      	lsls	r0, r2, #27
 80099d4:	bf44      	itt	mi
 80099d6:	2320      	movmi	r3, #32
 80099d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099dc:	0711      	lsls	r1, r2, #28
 80099de:	bf44      	itt	mi
 80099e0:	232b      	movmi	r3, #43	@ 0x2b
 80099e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099e6:	f89a 3000 	ldrb.w	r3, [sl]
 80099ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80099ec:	d015      	beq.n	8009a1a <_svfiprintf_r+0xfa>
 80099ee:	9a07      	ldr	r2, [sp, #28]
 80099f0:	4654      	mov	r4, sl
 80099f2:	2000      	movs	r0, #0
 80099f4:	f04f 0c0a 	mov.w	ip, #10
 80099f8:	4621      	mov	r1, r4
 80099fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099fe:	3b30      	subs	r3, #48	@ 0x30
 8009a00:	2b09      	cmp	r3, #9
 8009a02:	d94b      	bls.n	8009a9c <_svfiprintf_r+0x17c>
 8009a04:	b1b0      	cbz	r0, 8009a34 <_svfiprintf_r+0x114>
 8009a06:	9207      	str	r2, [sp, #28]
 8009a08:	e014      	b.n	8009a34 <_svfiprintf_r+0x114>
 8009a0a:	eba0 0308 	sub.w	r3, r0, r8
 8009a0e:	fa09 f303 	lsl.w	r3, r9, r3
 8009a12:	4313      	orrs	r3, r2
 8009a14:	9304      	str	r3, [sp, #16]
 8009a16:	46a2      	mov	sl, r4
 8009a18:	e7d2      	b.n	80099c0 <_svfiprintf_r+0xa0>
 8009a1a:	9b03      	ldr	r3, [sp, #12]
 8009a1c:	1d19      	adds	r1, r3, #4
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	9103      	str	r1, [sp, #12]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	bfbb      	ittet	lt
 8009a26:	425b      	neglt	r3, r3
 8009a28:	f042 0202 	orrlt.w	r2, r2, #2
 8009a2c:	9307      	strge	r3, [sp, #28]
 8009a2e:	9307      	strlt	r3, [sp, #28]
 8009a30:	bfb8      	it	lt
 8009a32:	9204      	strlt	r2, [sp, #16]
 8009a34:	7823      	ldrb	r3, [r4, #0]
 8009a36:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a38:	d10a      	bne.n	8009a50 <_svfiprintf_r+0x130>
 8009a3a:	7863      	ldrb	r3, [r4, #1]
 8009a3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a3e:	d132      	bne.n	8009aa6 <_svfiprintf_r+0x186>
 8009a40:	9b03      	ldr	r3, [sp, #12]
 8009a42:	1d1a      	adds	r2, r3, #4
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	9203      	str	r2, [sp, #12]
 8009a48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a4c:	3402      	adds	r4, #2
 8009a4e:	9305      	str	r3, [sp, #20]
 8009a50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009b14 <_svfiprintf_r+0x1f4>
 8009a54:	7821      	ldrb	r1, [r4, #0]
 8009a56:	2203      	movs	r2, #3
 8009a58:	4650      	mov	r0, sl
 8009a5a:	f7f6 fbb9 	bl	80001d0 <memchr>
 8009a5e:	b138      	cbz	r0, 8009a70 <_svfiprintf_r+0x150>
 8009a60:	9b04      	ldr	r3, [sp, #16]
 8009a62:	eba0 000a 	sub.w	r0, r0, sl
 8009a66:	2240      	movs	r2, #64	@ 0x40
 8009a68:	4082      	lsls	r2, r0
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	3401      	adds	r4, #1
 8009a6e:	9304      	str	r3, [sp, #16]
 8009a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a74:	4824      	ldr	r0, [pc, #144]	@ (8009b08 <_svfiprintf_r+0x1e8>)
 8009a76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a7a:	2206      	movs	r2, #6
 8009a7c:	f7f6 fba8 	bl	80001d0 <memchr>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d036      	beq.n	8009af2 <_svfiprintf_r+0x1d2>
 8009a84:	4b21      	ldr	r3, [pc, #132]	@ (8009b0c <_svfiprintf_r+0x1ec>)
 8009a86:	bb1b      	cbnz	r3, 8009ad0 <_svfiprintf_r+0x1b0>
 8009a88:	9b03      	ldr	r3, [sp, #12]
 8009a8a:	3307      	adds	r3, #7
 8009a8c:	f023 0307 	bic.w	r3, r3, #7
 8009a90:	3308      	adds	r3, #8
 8009a92:	9303      	str	r3, [sp, #12]
 8009a94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a96:	4433      	add	r3, r6
 8009a98:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a9a:	e76a      	b.n	8009972 <_svfiprintf_r+0x52>
 8009a9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009aa0:	460c      	mov	r4, r1
 8009aa2:	2001      	movs	r0, #1
 8009aa4:	e7a8      	b.n	80099f8 <_svfiprintf_r+0xd8>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	3401      	adds	r4, #1
 8009aaa:	9305      	str	r3, [sp, #20]
 8009aac:	4619      	mov	r1, r3
 8009aae:	f04f 0c0a 	mov.w	ip, #10
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ab8:	3a30      	subs	r2, #48	@ 0x30
 8009aba:	2a09      	cmp	r2, #9
 8009abc:	d903      	bls.n	8009ac6 <_svfiprintf_r+0x1a6>
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d0c6      	beq.n	8009a50 <_svfiprintf_r+0x130>
 8009ac2:	9105      	str	r1, [sp, #20]
 8009ac4:	e7c4      	b.n	8009a50 <_svfiprintf_r+0x130>
 8009ac6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009aca:	4604      	mov	r4, r0
 8009acc:	2301      	movs	r3, #1
 8009ace:	e7f0      	b.n	8009ab2 <_svfiprintf_r+0x192>
 8009ad0:	ab03      	add	r3, sp, #12
 8009ad2:	9300      	str	r3, [sp, #0]
 8009ad4:	462a      	mov	r2, r5
 8009ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8009b10 <_svfiprintf_r+0x1f0>)
 8009ad8:	a904      	add	r1, sp, #16
 8009ada:	4638      	mov	r0, r7
 8009adc:	f7fc ff90 	bl	8006a00 <_printf_float>
 8009ae0:	1c42      	adds	r2, r0, #1
 8009ae2:	4606      	mov	r6, r0
 8009ae4:	d1d6      	bne.n	8009a94 <_svfiprintf_r+0x174>
 8009ae6:	89ab      	ldrh	r3, [r5, #12]
 8009ae8:	065b      	lsls	r3, r3, #25
 8009aea:	f53f af2d 	bmi.w	8009948 <_svfiprintf_r+0x28>
 8009aee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009af0:	e72c      	b.n	800994c <_svfiprintf_r+0x2c>
 8009af2:	ab03      	add	r3, sp, #12
 8009af4:	9300      	str	r3, [sp, #0]
 8009af6:	462a      	mov	r2, r5
 8009af8:	4b05      	ldr	r3, [pc, #20]	@ (8009b10 <_svfiprintf_r+0x1f0>)
 8009afa:	a904      	add	r1, sp, #16
 8009afc:	4638      	mov	r0, r7
 8009afe:	f7fd fa17 	bl	8006f30 <_printf_i>
 8009b02:	e7ed      	b.n	8009ae0 <_svfiprintf_r+0x1c0>
 8009b04:	0800b56e 	.word	0x0800b56e
 8009b08:	0800b578 	.word	0x0800b578
 8009b0c:	08006a01 	.word	0x08006a01
 8009b10:	0800986b 	.word	0x0800986b
 8009b14:	0800b574 	.word	0x0800b574

08009b18 <malloc>:
 8009b18:	4b02      	ldr	r3, [pc, #8]	@ (8009b24 <malloc+0xc>)
 8009b1a:	4601      	mov	r1, r0
 8009b1c:	6818      	ldr	r0, [r3, #0]
 8009b1e:	f000 b825 	b.w	8009b6c <_malloc_r>
 8009b22:	bf00      	nop
 8009b24:	2000019c 	.word	0x2000019c

08009b28 <sbrk_aligned>:
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	4e0f      	ldr	r6, [pc, #60]	@ (8009b68 <sbrk_aligned+0x40>)
 8009b2c:	460c      	mov	r4, r1
 8009b2e:	6831      	ldr	r1, [r6, #0]
 8009b30:	4605      	mov	r5, r0
 8009b32:	b911      	cbnz	r1, 8009b3a <sbrk_aligned+0x12>
 8009b34:	f000 fffc 	bl	800ab30 <_sbrk_r>
 8009b38:	6030      	str	r0, [r6, #0]
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	f000 fff7 	bl	800ab30 <_sbrk_r>
 8009b42:	1c43      	adds	r3, r0, #1
 8009b44:	d103      	bne.n	8009b4e <sbrk_aligned+0x26>
 8009b46:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	bd70      	pop	{r4, r5, r6, pc}
 8009b4e:	1cc4      	adds	r4, r0, #3
 8009b50:	f024 0403 	bic.w	r4, r4, #3
 8009b54:	42a0      	cmp	r0, r4
 8009b56:	d0f8      	beq.n	8009b4a <sbrk_aligned+0x22>
 8009b58:	1a21      	subs	r1, r4, r0
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	f000 ffe8 	bl	800ab30 <_sbrk_r>
 8009b60:	3001      	adds	r0, #1
 8009b62:	d1f2      	bne.n	8009b4a <sbrk_aligned+0x22>
 8009b64:	e7ef      	b.n	8009b46 <sbrk_aligned+0x1e>
 8009b66:	bf00      	nop
 8009b68:	200008bc 	.word	0x200008bc

08009b6c <_malloc_r>:
 8009b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b70:	1ccd      	adds	r5, r1, #3
 8009b72:	f025 0503 	bic.w	r5, r5, #3
 8009b76:	3508      	adds	r5, #8
 8009b78:	2d0c      	cmp	r5, #12
 8009b7a:	bf38      	it	cc
 8009b7c:	250c      	movcc	r5, #12
 8009b7e:	2d00      	cmp	r5, #0
 8009b80:	4606      	mov	r6, r0
 8009b82:	db01      	blt.n	8009b88 <_malloc_r+0x1c>
 8009b84:	42a9      	cmp	r1, r5
 8009b86:	d904      	bls.n	8009b92 <_malloc_r+0x26>
 8009b88:	230c      	movs	r3, #12
 8009b8a:	6033      	str	r3, [r6, #0]
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c68 <_malloc_r+0xfc>
 8009b96:	f000 f927 	bl	8009de8 <__malloc_lock>
 8009b9a:	f8d8 3000 	ldr.w	r3, [r8]
 8009b9e:	461c      	mov	r4, r3
 8009ba0:	bb44      	cbnz	r4, 8009bf4 <_malloc_r+0x88>
 8009ba2:	4629      	mov	r1, r5
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	f7ff ffbf 	bl	8009b28 <sbrk_aligned>
 8009baa:	1c43      	adds	r3, r0, #1
 8009bac:	4604      	mov	r4, r0
 8009bae:	d158      	bne.n	8009c62 <_malloc_r+0xf6>
 8009bb0:	f8d8 4000 	ldr.w	r4, [r8]
 8009bb4:	4627      	mov	r7, r4
 8009bb6:	2f00      	cmp	r7, #0
 8009bb8:	d143      	bne.n	8009c42 <_malloc_r+0xd6>
 8009bba:	2c00      	cmp	r4, #0
 8009bbc:	d04b      	beq.n	8009c56 <_malloc_r+0xea>
 8009bbe:	6823      	ldr	r3, [r4, #0]
 8009bc0:	4639      	mov	r1, r7
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	eb04 0903 	add.w	r9, r4, r3
 8009bc8:	f000 ffb2 	bl	800ab30 <_sbrk_r>
 8009bcc:	4581      	cmp	r9, r0
 8009bce:	d142      	bne.n	8009c56 <_malloc_r+0xea>
 8009bd0:	6821      	ldr	r1, [r4, #0]
 8009bd2:	1a6d      	subs	r5, r5, r1
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	4630      	mov	r0, r6
 8009bd8:	f7ff ffa6 	bl	8009b28 <sbrk_aligned>
 8009bdc:	3001      	adds	r0, #1
 8009bde:	d03a      	beq.n	8009c56 <_malloc_r+0xea>
 8009be0:	6823      	ldr	r3, [r4, #0]
 8009be2:	442b      	add	r3, r5
 8009be4:	6023      	str	r3, [r4, #0]
 8009be6:	f8d8 3000 	ldr.w	r3, [r8]
 8009bea:	685a      	ldr	r2, [r3, #4]
 8009bec:	bb62      	cbnz	r2, 8009c48 <_malloc_r+0xdc>
 8009bee:	f8c8 7000 	str.w	r7, [r8]
 8009bf2:	e00f      	b.n	8009c14 <_malloc_r+0xa8>
 8009bf4:	6822      	ldr	r2, [r4, #0]
 8009bf6:	1b52      	subs	r2, r2, r5
 8009bf8:	d420      	bmi.n	8009c3c <_malloc_r+0xd0>
 8009bfa:	2a0b      	cmp	r2, #11
 8009bfc:	d917      	bls.n	8009c2e <_malloc_r+0xc2>
 8009bfe:	1961      	adds	r1, r4, r5
 8009c00:	42a3      	cmp	r3, r4
 8009c02:	6025      	str	r5, [r4, #0]
 8009c04:	bf18      	it	ne
 8009c06:	6059      	strne	r1, [r3, #4]
 8009c08:	6863      	ldr	r3, [r4, #4]
 8009c0a:	bf08      	it	eq
 8009c0c:	f8c8 1000 	streq.w	r1, [r8]
 8009c10:	5162      	str	r2, [r4, r5]
 8009c12:	604b      	str	r3, [r1, #4]
 8009c14:	4630      	mov	r0, r6
 8009c16:	f000 f8ed 	bl	8009df4 <__malloc_unlock>
 8009c1a:	f104 000b 	add.w	r0, r4, #11
 8009c1e:	1d23      	adds	r3, r4, #4
 8009c20:	f020 0007 	bic.w	r0, r0, #7
 8009c24:	1ac2      	subs	r2, r0, r3
 8009c26:	bf1c      	itt	ne
 8009c28:	1a1b      	subne	r3, r3, r0
 8009c2a:	50a3      	strne	r3, [r4, r2]
 8009c2c:	e7af      	b.n	8009b8e <_malloc_r+0x22>
 8009c2e:	6862      	ldr	r2, [r4, #4]
 8009c30:	42a3      	cmp	r3, r4
 8009c32:	bf0c      	ite	eq
 8009c34:	f8c8 2000 	streq.w	r2, [r8]
 8009c38:	605a      	strne	r2, [r3, #4]
 8009c3a:	e7eb      	b.n	8009c14 <_malloc_r+0xa8>
 8009c3c:	4623      	mov	r3, r4
 8009c3e:	6864      	ldr	r4, [r4, #4]
 8009c40:	e7ae      	b.n	8009ba0 <_malloc_r+0x34>
 8009c42:	463c      	mov	r4, r7
 8009c44:	687f      	ldr	r7, [r7, #4]
 8009c46:	e7b6      	b.n	8009bb6 <_malloc_r+0x4a>
 8009c48:	461a      	mov	r2, r3
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	42a3      	cmp	r3, r4
 8009c4e:	d1fb      	bne.n	8009c48 <_malloc_r+0xdc>
 8009c50:	2300      	movs	r3, #0
 8009c52:	6053      	str	r3, [r2, #4]
 8009c54:	e7de      	b.n	8009c14 <_malloc_r+0xa8>
 8009c56:	230c      	movs	r3, #12
 8009c58:	6033      	str	r3, [r6, #0]
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f000 f8ca 	bl	8009df4 <__malloc_unlock>
 8009c60:	e794      	b.n	8009b8c <_malloc_r+0x20>
 8009c62:	6005      	str	r5, [r0, #0]
 8009c64:	e7d6      	b.n	8009c14 <_malloc_r+0xa8>
 8009c66:	bf00      	nop
 8009c68:	200008c0 	.word	0x200008c0

08009c6c <__ascii_mbtowc>:
 8009c6c:	b082      	sub	sp, #8
 8009c6e:	b901      	cbnz	r1, 8009c72 <__ascii_mbtowc+0x6>
 8009c70:	a901      	add	r1, sp, #4
 8009c72:	b142      	cbz	r2, 8009c86 <__ascii_mbtowc+0x1a>
 8009c74:	b14b      	cbz	r3, 8009c8a <__ascii_mbtowc+0x1e>
 8009c76:	7813      	ldrb	r3, [r2, #0]
 8009c78:	600b      	str	r3, [r1, #0]
 8009c7a:	7812      	ldrb	r2, [r2, #0]
 8009c7c:	1e10      	subs	r0, r2, #0
 8009c7e:	bf18      	it	ne
 8009c80:	2001      	movne	r0, #1
 8009c82:	b002      	add	sp, #8
 8009c84:	4770      	bx	lr
 8009c86:	4610      	mov	r0, r2
 8009c88:	e7fb      	b.n	8009c82 <__ascii_mbtowc+0x16>
 8009c8a:	f06f 0001 	mvn.w	r0, #1
 8009c8e:	e7f8      	b.n	8009c82 <__ascii_mbtowc+0x16>

08009c90 <__sflush_r>:
 8009c90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c98:	0716      	lsls	r6, r2, #28
 8009c9a:	4605      	mov	r5, r0
 8009c9c:	460c      	mov	r4, r1
 8009c9e:	d454      	bmi.n	8009d4a <__sflush_r+0xba>
 8009ca0:	684b      	ldr	r3, [r1, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	dc02      	bgt.n	8009cac <__sflush_r+0x1c>
 8009ca6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	dd48      	ble.n	8009d3e <__sflush_r+0xae>
 8009cac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009cae:	2e00      	cmp	r6, #0
 8009cb0:	d045      	beq.n	8009d3e <__sflush_r+0xae>
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009cb8:	682f      	ldr	r7, [r5, #0]
 8009cba:	6a21      	ldr	r1, [r4, #32]
 8009cbc:	602b      	str	r3, [r5, #0]
 8009cbe:	d030      	beq.n	8009d22 <__sflush_r+0x92>
 8009cc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	0759      	lsls	r1, r3, #29
 8009cc6:	d505      	bpl.n	8009cd4 <__sflush_r+0x44>
 8009cc8:	6863      	ldr	r3, [r4, #4]
 8009cca:	1ad2      	subs	r2, r2, r3
 8009ccc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009cce:	b10b      	cbz	r3, 8009cd4 <__sflush_r+0x44>
 8009cd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009cd2:	1ad2      	subs	r2, r2, r3
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009cd8:	6a21      	ldr	r1, [r4, #32]
 8009cda:	4628      	mov	r0, r5
 8009cdc:	47b0      	blx	r6
 8009cde:	1c43      	adds	r3, r0, #1
 8009ce0:	89a3      	ldrh	r3, [r4, #12]
 8009ce2:	d106      	bne.n	8009cf2 <__sflush_r+0x62>
 8009ce4:	6829      	ldr	r1, [r5, #0]
 8009ce6:	291d      	cmp	r1, #29
 8009ce8:	d82b      	bhi.n	8009d42 <__sflush_r+0xb2>
 8009cea:	4a2a      	ldr	r2, [pc, #168]	@ (8009d94 <__sflush_r+0x104>)
 8009cec:	410a      	asrs	r2, r1
 8009cee:	07d6      	lsls	r6, r2, #31
 8009cf0:	d427      	bmi.n	8009d42 <__sflush_r+0xb2>
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	6062      	str	r2, [r4, #4]
 8009cf6:	04d9      	lsls	r1, r3, #19
 8009cf8:	6922      	ldr	r2, [r4, #16]
 8009cfa:	6022      	str	r2, [r4, #0]
 8009cfc:	d504      	bpl.n	8009d08 <__sflush_r+0x78>
 8009cfe:	1c42      	adds	r2, r0, #1
 8009d00:	d101      	bne.n	8009d06 <__sflush_r+0x76>
 8009d02:	682b      	ldr	r3, [r5, #0]
 8009d04:	b903      	cbnz	r3, 8009d08 <__sflush_r+0x78>
 8009d06:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d0a:	602f      	str	r7, [r5, #0]
 8009d0c:	b1b9      	cbz	r1, 8009d3e <__sflush_r+0xae>
 8009d0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d12:	4299      	cmp	r1, r3
 8009d14:	d002      	beq.n	8009d1c <__sflush_r+0x8c>
 8009d16:	4628      	mov	r0, r5
 8009d18:	f000 ff5e 	bl	800abd8 <_free_r>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d20:	e00d      	b.n	8009d3e <__sflush_r+0xae>
 8009d22:	2301      	movs	r3, #1
 8009d24:	4628      	mov	r0, r5
 8009d26:	47b0      	blx	r6
 8009d28:	4602      	mov	r2, r0
 8009d2a:	1c50      	adds	r0, r2, #1
 8009d2c:	d1c9      	bne.n	8009cc2 <__sflush_r+0x32>
 8009d2e:	682b      	ldr	r3, [r5, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d0c6      	beq.n	8009cc2 <__sflush_r+0x32>
 8009d34:	2b1d      	cmp	r3, #29
 8009d36:	d001      	beq.n	8009d3c <__sflush_r+0xac>
 8009d38:	2b16      	cmp	r3, #22
 8009d3a:	d11e      	bne.n	8009d7a <__sflush_r+0xea>
 8009d3c:	602f      	str	r7, [r5, #0]
 8009d3e:	2000      	movs	r0, #0
 8009d40:	e022      	b.n	8009d88 <__sflush_r+0xf8>
 8009d42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d46:	b21b      	sxth	r3, r3
 8009d48:	e01b      	b.n	8009d82 <__sflush_r+0xf2>
 8009d4a:	690f      	ldr	r7, [r1, #16]
 8009d4c:	2f00      	cmp	r7, #0
 8009d4e:	d0f6      	beq.n	8009d3e <__sflush_r+0xae>
 8009d50:	0793      	lsls	r3, r2, #30
 8009d52:	680e      	ldr	r6, [r1, #0]
 8009d54:	bf08      	it	eq
 8009d56:	694b      	ldreq	r3, [r1, #20]
 8009d58:	600f      	str	r7, [r1, #0]
 8009d5a:	bf18      	it	ne
 8009d5c:	2300      	movne	r3, #0
 8009d5e:	eba6 0807 	sub.w	r8, r6, r7
 8009d62:	608b      	str	r3, [r1, #8]
 8009d64:	f1b8 0f00 	cmp.w	r8, #0
 8009d68:	dde9      	ble.n	8009d3e <__sflush_r+0xae>
 8009d6a:	6a21      	ldr	r1, [r4, #32]
 8009d6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009d6e:	4643      	mov	r3, r8
 8009d70:	463a      	mov	r2, r7
 8009d72:	4628      	mov	r0, r5
 8009d74:	47b0      	blx	r6
 8009d76:	2800      	cmp	r0, #0
 8009d78:	dc08      	bgt.n	8009d8c <__sflush_r+0xfc>
 8009d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d82:	81a3      	strh	r3, [r4, #12]
 8009d84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d8c:	4407      	add	r7, r0
 8009d8e:	eba8 0800 	sub.w	r8, r8, r0
 8009d92:	e7e7      	b.n	8009d64 <__sflush_r+0xd4>
 8009d94:	dfbffffe 	.word	0xdfbffffe

08009d98 <_fflush_r>:
 8009d98:	b538      	push	{r3, r4, r5, lr}
 8009d9a:	690b      	ldr	r3, [r1, #16]
 8009d9c:	4605      	mov	r5, r0
 8009d9e:	460c      	mov	r4, r1
 8009da0:	b913      	cbnz	r3, 8009da8 <_fflush_r+0x10>
 8009da2:	2500      	movs	r5, #0
 8009da4:	4628      	mov	r0, r5
 8009da6:	bd38      	pop	{r3, r4, r5, pc}
 8009da8:	b118      	cbz	r0, 8009db2 <_fflush_r+0x1a>
 8009daa:	6a03      	ldr	r3, [r0, #32]
 8009dac:	b90b      	cbnz	r3, 8009db2 <_fflush_r+0x1a>
 8009dae:	f7fd fc9f 	bl	80076f0 <__sinit>
 8009db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d0f3      	beq.n	8009da2 <_fflush_r+0xa>
 8009dba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009dbc:	07d0      	lsls	r0, r2, #31
 8009dbe:	d404      	bmi.n	8009dca <_fflush_r+0x32>
 8009dc0:	0599      	lsls	r1, r3, #22
 8009dc2:	d402      	bmi.n	8009dca <_fflush_r+0x32>
 8009dc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009dc6:	f7fe fba8 	bl	800851a <__retarget_lock_acquire_recursive>
 8009dca:	4628      	mov	r0, r5
 8009dcc:	4621      	mov	r1, r4
 8009dce:	f7ff ff5f 	bl	8009c90 <__sflush_r>
 8009dd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009dd4:	07da      	lsls	r2, r3, #31
 8009dd6:	4605      	mov	r5, r0
 8009dd8:	d4e4      	bmi.n	8009da4 <_fflush_r+0xc>
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	059b      	lsls	r3, r3, #22
 8009dde:	d4e1      	bmi.n	8009da4 <_fflush_r+0xc>
 8009de0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009de2:	f7fe fb9b 	bl	800851c <__retarget_lock_release_recursive>
 8009de6:	e7dd      	b.n	8009da4 <_fflush_r+0xc>

08009de8 <__malloc_lock>:
 8009de8:	4801      	ldr	r0, [pc, #4]	@ (8009df0 <__malloc_lock+0x8>)
 8009dea:	f7fe bb96 	b.w	800851a <__retarget_lock_acquire_recursive>
 8009dee:	bf00      	nop
 8009df0:	200008b8 	.word	0x200008b8

08009df4 <__malloc_unlock>:
 8009df4:	4801      	ldr	r0, [pc, #4]	@ (8009dfc <__malloc_unlock+0x8>)
 8009df6:	f7fe bb91 	b.w	800851c <__retarget_lock_release_recursive>
 8009dfa:	bf00      	nop
 8009dfc:	200008b8 	.word	0x200008b8

08009e00 <_Balloc>:
 8009e00:	b570      	push	{r4, r5, r6, lr}
 8009e02:	69c6      	ldr	r6, [r0, #28]
 8009e04:	4604      	mov	r4, r0
 8009e06:	460d      	mov	r5, r1
 8009e08:	b976      	cbnz	r6, 8009e28 <_Balloc+0x28>
 8009e0a:	2010      	movs	r0, #16
 8009e0c:	f7ff fe84 	bl	8009b18 <malloc>
 8009e10:	4602      	mov	r2, r0
 8009e12:	61e0      	str	r0, [r4, #28]
 8009e14:	b920      	cbnz	r0, 8009e20 <_Balloc+0x20>
 8009e16:	4b18      	ldr	r3, [pc, #96]	@ (8009e78 <_Balloc+0x78>)
 8009e18:	4818      	ldr	r0, [pc, #96]	@ (8009e7c <_Balloc+0x7c>)
 8009e1a:	216b      	movs	r1, #107	@ 0x6b
 8009e1c:	f000 feaa 	bl	800ab74 <__assert_func>
 8009e20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e24:	6006      	str	r6, [r0, #0]
 8009e26:	60c6      	str	r6, [r0, #12]
 8009e28:	69e6      	ldr	r6, [r4, #28]
 8009e2a:	68f3      	ldr	r3, [r6, #12]
 8009e2c:	b183      	cbz	r3, 8009e50 <_Balloc+0x50>
 8009e2e:	69e3      	ldr	r3, [r4, #28]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e36:	b9b8      	cbnz	r0, 8009e68 <_Balloc+0x68>
 8009e38:	2101      	movs	r1, #1
 8009e3a:	fa01 f605 	lsl.w	r6, r1, r5
 8009e3e:	1d72      	adds	r2, r6, #5
 8009e40:	0092      	lsls	r2, r2, #2
 8009e42:	4620      	mov	r0, r4
 8009e44:	f000 feb4 	bl	800abb0 <_calloc_r>
 8009e48:	b160      	cbz	r0, 8009e64 <_Balloc+0x64>
 8009e4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e4e:	e00e      	b.n	8009e6e <_Balloc+0x6e>
 8009e50:	2221      	movs	r2, #33	@ 0x21
 8009e52:	2104      	movs	r1, #4
 8009e54:	4620      	mov	r0, r4
 8009e56:	f000 feab 	bl	800abb0 <_calloc_r>
 8009e5a:	69e3      	ldr	r3, [r4, #28]
 8009e5c:	60f0      	str	r0, [r6, #12]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1e4      	bne.n	8009e2e <_Balloc+0x2e>
 8009e64:	2000      	movs	r0, #0
 8009e66:	bd70      	pop	{r4, r5, r6, pc}
 8009e68:	6802      	ldr	r2, [r0, #0]
 8009e6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e6e:	2300      	movs	r3, #0
 8009e70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e74:	e7f7      	b.n	8009e66 <_Balloc+0x66>
 8009e76:	bf00      	nop
 8009e78:	0800b48e 	.word	0x0800b48e
 8009e7c:	0800b57f 	.word	0x0800b57f

08009e80 <_Bfree>:
 8009e80:	b570      	push	{r4, r5, r6, lr}
 8009e82:	69c6      	ldr	r6, [r0, #28]
 8009e84:	4605      	mov	r5, r0
 8009e86:	460c      	mov	r4, r1
 8009e88:	b976      	cbnz	r6, 8009ea8 <_Bfree+0x28>
 8009e8a:	2010      	movs	r0, #16
 8009e8c:	f7ff fe44 	bl	8009b18 <malloc>
 8009e90:	4602      	mov	r2, r0
 8009e92:	61e8      	str	r0, [r5, #28]
 8009e94:	b920      	cbnz	r0, 8009ea0 <_Bfree+0x20>
 8009e96:	4b09      	ldr	r3, [pc, #36]	@ (8009ebc <_Bfree+0x3c>)
 8009e98:	4809      	ldr	r0, [pc, #36]	@ (8009ec0 <_Bfree+0x40>)
 8009e9a:	218f      	movs	r1, #143	@ 0x8f
 8009e9c:	f000 fe6a 	bl	800ab74 <__assert_func>
 8009ea0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ea4:	6006      	str	r6, [r0, #0]
 8009ea6:	60c6      	str	r6, [r0, #12]
 8009ea8:	b13c      	cbz	r4, 8009eba <_Bfree+0x3a>
 8009eaa:	69eb      	ldr	r3, [r5, #28]
 8009eac:	6862      	ldr	r2, [r4, #4]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009eb4:	6021      	str	r1, [r4, #0]
 8009eb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009eba:	bd70      	pop	{r4, r5, r6, pc}
 8009ebc:	0800b48e 	.word	0x0800b48e
 8009ec0:	0800b57f 	.word	0x0800b57f

08009ec4 <__multadd>:
 8009ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec8:	690d      	ldr	r5, [r1, #16]
 8009eca:	4607      	mov	r7, r0
 8009ecc:	460c      	mov	r4, r1
 8009ece:	461e      	mov	r6, r3
 8009ed0:	f101 0c14 	add.w	ip, r1, #20
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	f8dc 3000 	ldr.w	r3, [ip]
 8009eda:	b299      	uxth	r1, r3
 8009edc:	fb02 6101 	mla	r1, r2, r1, r6
 8009ee0:	0c1e      	lsrs	r6, r3, #16
 8009ee2:	0c0b      	lsrs	r3, r1, #16
 8009ee4:	fb02 3306 	mla	r3, r2, r6, r3
 8009ee8:	b289      	uxth	r1, r1
 8009eea:	3001      	adds	r0, #1
 8009eec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ef0:	4285      	cmp	r5, r0
 8009ef2:	f84c 1b04 	str.w	r1, [ip], #4
 8009ef6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009efa:	dcec      	bgt.n	8009ed6 <__multadd+0x12>
 8009efc:	b30e      	cbz	r6, 8009f42 <__multadd+0x7e>
 8009efe:	68a3      	ldr	r3, [r4, #8]
 8009f00:	42ab      	cmp	r3, r5
 8009f02:	dc19      	bgt.n	8009f38 <__multadd+0x74>
 8009f04:	6861      	ldr	r1, [r4, #4]
 8009f06:	4638      	mov	r0, r7
 8009f08:	3101      	adds	r1, #1
 8009f0a:	f7ff ff79 	bl	8009e00 <_Balloc>
 8009f0e:	4680      	mov	r8, r0
 8009f10:	b928      	cbnz	r0, 8009f1e <__multadd+0x5a>
 8009f12:	4602      	mov	r2, r0
 8009f14:	4b0c      	ldr	r3, [pc, #48]	@ (8009f48 <__multadd+0x84>)
 8009f16:	480d      	ldr	r0, [pc, #52]	@ (8009f4c <__multadd+0x88>)
 8009f18:	21ba      	movs	r1, #186	@ 0xba
 8009f1a:	f000 fe2b 	bl	800ab74 <__assert_func>
 8009f1e:	6922      	ldr	r2, [r4, #16]
 8009f20:	3202      	adds	r2, #2
 8009f22:	f104 010c 	add.w	r1, r4, #12
 8009f26:	0092      	lsls	r2, r2, #2
 8009f28:	300c      	adds	r0, #12
 8009f2a:	f7fe faf8 	bl	800851e <memcpy>
 8009f2e:	4621      	mov	r1, r4
 8009f30:	4638      	mov	r0, r7
 8009f32:	f7ff ffa5 	bl	8009e80 <_Bfree>
 8009f36:	4644      	mov	r4, r8
 8009f38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f3c:	3501      	adds	r5, #1
 8009f3e:	615e      	str	r6, [r3, #20]
 8009f40:	6125      	str	r5, [r4, #16]
 8009f42:	4620      	mov	r0, r4
 8009f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f48:	0800b4fd 	.word	0x0800b4fd
 8009f4c:	0800b57f 	.word	0x0800b57f

08009f50 <__s2b>:
 8009f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f54:	460c      	mov	r4, r1
 8009f56:	4615      	mov	r5, r2
 8009f58:	461f      	mov	r7, r3
 8009f5a:	2209      	movs	r2, #9
 8009f5c:	3308      	adds	r3, #8
 8009f5e:	4606      	mov	r6, r0
 8009f60:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f64:	2100      	movs	r1, #0
 8009f66:	2201      	movs	r2, #1
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	db09      	blt.n	8009f80 <__s2b+0x30>
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	f7ff ff47 	bl	8009e00 <_Balloc>
 8009f72:	b940      	cbnz	r0, 8009f86 <__s2b+0x36>
 8009f74:	4602      	mov	r2, r0
 8009f76:	4b19      	ldr	r3, [pc, #100]	@ (8009fdc <__s2b+0x8c>)
 8009f78:	4819      	ldr	r0, [pc, #100]	@ (8009fe0 <__s2b+0x90>)
 8009f7a:	21d3      	movs	r1, #211	@ 0xd3
 8009f7c:	f000 fdfa 	bl	800ab74 <__assert_func>
 8009f80:	0052      	lsls	r2, r2, #1
 8009f82:	3101      	adds	r1, #1
 8009f84:	e7f0      	b.n	8009f68 <__s2b+0x18>
 8009f86:	9b08      	ldr	r3, [sp, #32]
 8009f88:	6143      	str	r3, [r0, #20]
 8009f8a:	2d09      	cmp	r5, #9
 8009f8c:	f04f 0301 	mov.w	r3, #1
 8009f90:	6103      	str	r3, [r0, #16]
 8009f92:	dd16      	ble.n	8009fc2 <__s2b+0x72>
 8009f94:	f104 0909 	add.w	r9, r4, #9
 8009f98:	46c8      	mov	r8, r9
 8009f9a:	442c      	add	r4, r5
 8009f9c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009fa0:	4601      	mov	r1, r0
 8009fa2:	3b30      	subs	r3, #48	@ 0x30
 8009fa4:	220a      	movs	r2, #10
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	f7ff ff8c 	bl	8009ec4 <__multadd>
 8009fac:	45a0      	cmp	r8, r4
 8009fae:	d1f5      	bne.n	8009f9c <__s2b+0x4c>
 8009fb0:	f1a5 0408 	sub.w	r4, r5, #8
 8009fb4:	444c      	add	r4, r9
 8009fb6:	1b2d      	subs	r5, r5, r4
 8009fb8:	1963      	adds	r3, r4, r5
 8009fba:	42bb      	cmp	r3, r7
 8009fbc:	db04      	blt.n	8009fc8 <__s2b+0x78>
 8009fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fc2:	340a      	adds	r4, #10
 8009fc4:	2509      	movs	r5, #9
 8009fc6:	e7f6      	b.n	8009fb6 <__s2b+0x66>
 8009fc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009fcc:	4601      	mov	r1, r0
 8009fce:	3b30      	subs	r3, #48	@ 0x30
 8009fd0:	220a      	movs	r2, #10
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	f7ff ff76 	bl	8009ec4 <__multadd>
 8009fd8:	e7ee      	b.n	8009fb8 <__s2b+0x68>
 8009fda:	bf00      	nop
 8009fdc:	0800b4fd 	.word	0x0800b4fd
 8009fe0:	0800b57f 	.word	0x0800b57f

08009fe4 <__hi0bits>:
 8009fe4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009fe8:	4603      	mov	r3, r0
 8009fea:	bf36      	itet	cc
 8009fec:	0403      	lslcc	r3, r0, #16
 8009fee:	2000      	movcs	r0, #0
 8009ff0:	2010      	movcc	r0, #16
 8009ff2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009ff6:	bf3c      	itt	cc
 8009ff8:	021b      	lslcc	r3, r3, #8
 8009ffa:	3008      	addcc	r0, #8
 8009ffc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a000:	bf3c      	itt	cc
 800a002:	011b      	lslcc	r3, r3, #4
 800a004:	3004      	addcc	r0, #4
 800a006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a00a:	bf3c      	itt	cc
 800a00c:	009b      	lslcc	r3, r3, #2
 800a00e:	3002      	addcc	r0, #2
 800a010:	2b00      	cmp	r3, #0
 800a012:	db05      	blt.n	800a020 <__hi0bits+0x3c>
 800a014:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a018:	f100 0001 	add.w	r0, r0, #1
 800a01c:	bf08      	it	eq
 800a01e:	2020      	moveq	r0, #32
 800a020:	4770      	bx	lr

0800a022 <__lo0bits>:
 800a022:	6803      	ldr	r3, [r0, #0]
 800a024:	4602      	mov	r2, r0
 800a026:	f013 0007 	ands.w	r0, r3, #7
 800a02a:	d00b      	beq.n	800a044 <__lo0bits+0x22>
 800a02c:	07d9      	lsls	r1, r3, #31
 800a02e:	d421      	bmi.n	800a074 <__lo0bits+0x52>
 800a030:	0798      	lsls	r0, r3, #30
 800a032:	bf49      	itett	mi
 800a034:	085b      	lsrmi	r3, r3, #1
 800a036:	089b      	lsrpl	r3, r3, #2
 800a038:	2001      	movmi	r0, #1
 800a03a:	6013      	strmi	r3, [r2, #0]
 800a03c:	bf5c      	itt	pl
 800a03e:	6013      	strpl	r3, [r2, #0]
 800a040:	2002      	movpl	r0, #2
 800a042:	4770      	bx	lr
 800a044:	b299      	uxth	r1, r3
 800a046:	b909      	cbnz	r1, 800a04c <__lo0bits+0x2a>
 800a048:	0c1b      	lsrs	r3, r3, #16
 800a04a:	2010      	movs	r0, #16
 800a04c:	b2d9      	uxtb	r1, r3
 800a04e:	b909      	cbnz	r1, 800a054 <__lo0bits+0x32>
 800a050:	3008      	adds	r0, #8
 800a052:	0a1b      	lsrs	r3, r3, #8
 800a054:	0719      	lsls	r1, r3, #28
 800a056:	bf04      	itt	eq
 800a058:	091b      	lsreq	r3, r3, #4
 800a05a:	3004      	addeq	r0, #4
 800a05c:	0799      	lsls	r1, r3, #30
 800a05e:	bf04      	itt	eq
 800a060:	089b      	lsreq	r3, r3, #2
 800a062:	3002      	addeq	r0, #2
 800a064:	07d9      	lsls	r1, r3, #31
 800a066:	d403      	bmi.n	800a070 <__lo0bits+0x4e>
 800a068:	085b      	lsrs	r3, r3, #1
 800a06a:	f100 0001 	add.w	r0, r0, #1
 800a06e:	d003      	beq.n	800a078 <__lo0bits+0x56>
 800a070:	6013      	str	r3, [r2, #0]
 800a072:	4770      	bx	lr
 800a074:	2000      	movs	r0, #0
 800a076:	4770      	bx	lr
 800a078:	2020      	movs	r0, #32
 800a07a:	4770      	bx	lr

0800a07c <__i2b>:
 800a07c:	b510      	push	{r4, lr}
 800a07e:	460c      	mov	r4, r1
 800a080:	2101      	movs	r1, #1
 800a082:	f7ff febd 	bl	8009e00 <_Balloc>
 800a086:	4602      	mov	r2, r0
 800a088:	b928      	cbnz	r0, 800a096 <__i2b+0x1a>
 800a08a:	4b05      	ldr	r3, [pc, #20]	@ (800a0a0 <__i2b+0x24>)
 800a08c:	4805      	ldr	r0, [pc, #20]	@ (800a0a4 <__i2b+0x28>)
 800a08e:	f240 1145 	movw	r1, #325	@ 0x145
 800a092:	f000 fd6f 	bl	800ab74 <__assert_func>
 800a096:	2301      	movs	r3, #1
 800a098:	6144      	str	r4, [r0, #20]
 800a09a:	6103      	str	r3, [r0, #16]
 800a09c:	bd10      	pop	{r4, pc}
 800a09e:	bf00      	nop
 800a0a0:	0800b4fd 	.word	0x0800b4fd
 800a0a4:	0800b57f 	.word	0x0800b57f

0800a0a8 <__multiply>:
 800a0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ac:	4614      	mov	r4, r2
 800a0ae:	690a      	ldr	r2, [r1, #16]
 800a0b0:	6923      	ldr	r3, [r4, #16]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	bfa8      	it	ge
 800a0b6:	4623      	movge	r3, r4
 800a0b8:	460f      	mov	r7, r1
 800a0ba:	bfa4      	itt	ge
 800a0bc:	460c      	movge	r4, r1
 800a0be:	461f      	movge	r7, r3
 800a0c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a0c4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a0c8:	68a3      	ldr	r3, [r4, #8]
 800a0ca:	6861      	ldr	r1, [r4, #4]
 800a0cc:	eb0a 0609 	add.w	r6, sl, r9
 800a0d0:	42b3      	cmp	r3, r6
 800a0d2:	b085      	sub	sp, #20
 800a0d4:	bfb8      	it	lt
 800a0d6:	3101      	addlt	r1, #1
 800a0d8:	f7ff fe92 	bl	8009e00 <_Balloc>
 800a0dc:	b930      	cbnz	r0, 800a0ec <__multiply+0x44>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	4b44      	ldr	r3, [pc, #272]	@ (800a1f4 <__multiply+0x14c>)
 800a0e2:	4845      	ldr	r0, [pc, #276]	@ (800a1f8 <__multiply+0x150>)
 800a0e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a0e8:	f000 fd44 	bl	800ab74 <__assert_func>
 800a0ec:	f100 0514 	add.w	r5, r0, #20
 800a0f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a0f4:	462b      	mov	r3, r5
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	4543      	cmp	r3, r8
 800a0fa:	d321      	bcc.n	800a140 <__multiply+0x98>
 800a0fc:	f107 0114 	add.w	r1, r7, #20
 800a100:	f104 0214 	add.w	r2, r4, #20
 800a104:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a108:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a10c:	9302      	str	r3, [sp, #8]
 800a10e:	1b13      	subs	r3, r2, r4
 800a110:	3b15      	subs	r3, #21
 800a112:	f023 0303 	bic.w	r3, r3, #3
 800a116:	3304      	adds	r3, #4
 800a118:	f104 0715 	add.w	r7, r4, #21
 800a11c:	42ba      	cmp	r2, r7
 800a11e:	bf38      	it	cc
 800a120:	2304      	movcc	r3, #4
 800a122:	9301      	str	r3, [sp, #4]
 800a124:	9b02      	ldr	r3, [sp, #8]
 800a126:	9103      	str	r1, [sp, #12]
 800a128:	428b      	cmp	r3, r1
 800a12a:	d80c      	bhi.n	800a146 <__multiply+0x9e>
 800a12c:	2e00      	cmp	r6, #0
 800a12e:	dd03      	ble.n	800a138 <__multiply+0x90>
 800a130:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a134:	2b00      	cmp	r3, #0
 800a136:	d05b      	beq.n	800a1f0 <__multiply+0x148>
 800a138:	6106      	str	r6, [r0, #16]
 800a13a:	b005      	add	sp, #20
 800a13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a140:	f843 2b04 	str.w	r2, [r3], #4
 800a144:	e7d8      	b.n	800a0f8 <__multiply+0x50>
 800a146:	f8b1 a000 	ldrh.w	sl, [r1]
 800a14a:	f1ba 0f00 	cmp.w	sl, #0
 800a14e:	d024      	beq.n	800a19a <__multiply+0xf2>
 800a150:	f104 0e14 	add.w	lr, r4, #20
 800a154:	46a9      	mov	r9, r5
 800a156:	f04f 0c00 	mov.w	ip, #0
 800a15a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a15e:	f8d9 3000 	ldr.w	r3, [r9]
 800a162:	fa1f fb87 	uxth.w	fp, r7
 800a166:	b29b      	uxth	r3, r3
 800a168:	fb0a 330b 	mla	r3, sl, fp, r3
 800a16c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a170:	f8d9 7000 	ldr.w	r7, [r9]
 800a174:	4463      	add	r3, ip
 800a176:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a17a:	fb0a c70b 	mla	r7, sl, fp, ip
 800a17e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a182:	b29b      	uxth	r3, r3
 800a184:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a188:	4572      	cmp	r2, lr
 800a18a:	f849 3b04 	str.w	r3, [r9], #4
 800a18e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a192:	d8e2      	bhi.n	800a15a <__multiply+0xb2>
 800a194:	9b01      	ldr	r3, [sp, #4]
 800a196:	f845 c003 	str.w	ip, [r5, r3]
 800a19a:	9b03      	ldr	r3, [sp, #12]
 800a19c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a1a0:	3104      	adds	r1, #4
 800a1a2:	f1b9 0f00 	cmp.w	r9, #0
 800a1a6:	d021      	beq.n	800a1ec <__multiply+0x144>
 800a1a8:	682b      	ldr	r3, [r5, #0]
 800a1aa:	f104 0c14 	add.w	ip, r4, #20
 800a1ae:	46ae      	mov	lr, r5
 800a1b0:	f04f 0a00 	mov.w	sl, #0
 800a1b4:	f8bc b000 	ldrh.w	fp, [ip]
 800a1b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a1bc:	fb09 770b 	mla	r7, r9, fp, r7
 800a1c0:	4457      	add	r7, sl
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a1c8:	f84e 3b04 	str.w	r3, [lr], #4
 800a1cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a1d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1d4:	f8be 3000 	ldrh.w	r3, [lr]
 800a1d8:	fb09 330a 	mla	r3, r9, sl, r3
 800a1dc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a1e0:	4562      	cmp	r2, ip
 800a1e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1e6:	d8e5      	bhi.n	800a1b4 <__multiply+0x10c>
 800a1e8:	9f01      	ldr	r7, [sp, #4]
 800a1ea:	51eb      	str	r3, [r5, r7]
 800a1ec:	3504      	adds	r5, #4
 800a1ee:	e799      	b.n	800a124 <__multiply+0x7c>
 800a1f0:	3e01      	subs	r6, #1
 800a1f2:	e79b      	b.n	800a12c <__multiply+0x84>
 800a1f4:	0800b4fd 	.word	0x0800b4fd
 800a1f8:	0800b57f 	.word	0x0800b57f

0800a1fc <__pow5mult>:
 800a1fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a200:	4615      	mov	r5, r2
 800a202:	f012 0203 	ands.w	r2, r2, #3
 800a206:	4607      	mov	r7, r0
 800a208:	460e      	mov	r6, r1
 800a20a:	d007      	beq.n	800a21c <__pow5mult+0x20>
 800a20c:	4c25      	ldr	r4, [pc, #148]	@ (800a2a4 <__pow5mult+0xa8>)
 800a20e:	3a01      	subs	r2, #1
 800a210:	2300      	movs	r3, #0
 800a212:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a216:	f7ff fe55 	bl	8009ec4 <__multadd>
 800a21a:	4606      	mov	r6, r0
 800a21c:	10ad      	asrs	r5, r5, #2
 800a21e:	d03d      	beq.n	800a29c <__pow5mult+0xa0>
 800a220:	69fc      	ldr	r4, [r7, #28]
 800a222:	b97c      	cbnz	r4, 800a244 <__pow5mult+0x48>
 800a224:	2010      	movs	r0, #16
 800a226:	f7ff fc77 	bl	8009b18 <malloc>
 800a22a:	4602      	mov	r2, r0
 800a22c:	61f8      	str	r0, [r7, #28]
 800a22e:	b928      	cbnz	r0, 800a23c <__pow5mult+0x40>
 800a230:	4b1d      	ldr	r3, [pc, #116]	@ (800a2a8 <__pow5mult+0xac>)
 800a232:	481e      	ldr	r0, [pc, #120]	@ (800a2ac <__pow5mult+0xb0>)
 800a234:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a238:	f000 fc9c 	bl	800ab74 <__assert_func>
 800a23c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a240:	6004      	str	r4, [r0, #0]
 800a242:	60c4      	str	r4, [r0, #12]
 800a244:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a248:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a24c:	b94c      	cbnz	r4, 800a262 <__pow5mult+0x66>
 800a24e:	f240 2171 	movw	r1, #625	@ 0x271
 800a252:	4638      	mov	r0, r7
 800a254:	f7ff ff12 	bl	800a07c <__i2b>
 800a258:	2300      	movs	r3, #0
 800a25a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a25e:	4604      	mov	r4, r0
 800a260:	6003      	str	r3, [r0, #0]
 800a262:	f04f 0900 	mov.w	r9, #0
 800a266:	07eb      	lsls	r3, r5, #31
 800a268:	d50a      	bpl.n	800a280 <__pow5mult+0x84>
 800a26a:	4631      	mov	r1, r6
 800a26c:	4622      	mov	r2, r4
 800a26e:	4638      	mov	r0, r7
 800a270:	f7ff ff1a 	bl	800a0a8 <__multiply>
 800a274:	4631      	mov	r1, r6
 800a276:	4680      	mov	r8, r0
 800a278:	4638      	mov	r0, r7
 800a27a:	f7ff fe01 	bl	8009e80 <_Bfree>
 800a27e:	4646      	mov	r6, r8
 800a280:	106d      	asrs	r5, r5, #1
 800a282:	d00b      	beq.n	800a29c <__pow5mult+0xa0>
 800a284:	6820      	ldr	r0, [r4, #0]
 800a286:	b938      	cbnz	r0, 800a298 <__pow5mult+0x9c>
 800a288:	4622      	mov	r2, r4
 800a28a:	4621      	mov	r1, r4
 800a28c:	4638      	mov	r0, r7
 800a28e:	f7ff ff0b 	bl	800a0a8 <__multiply>
 800a292:	6020      	str	r0, [r4, #0]
 800a294:	f8c0 9000 	str.w	r9, [r0]
 800a298:	4604      	mov	r4, r0
 800a29a:	e7e4      	b.n	800a266 <__pow5mult+0x6a>
 800a29c:	4630      	mov	r0, r6
 800a29e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2a2:	bf00      	nop
 800a2a4:	0800b5d8 	.word	0x0800b5d8
 800a2a8:	0800b48e 	.word	0x0800b48e
 800a2ac:	0800b57f 	.word	0x0800b57f

0800a2b0 <__lshift>:
 800a2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2b4:	460c      	mov	r4, r1
 800a2b6:	6849      	ldr	r1, [r1, #4]
 800a2b8:	6923      	ldr	r3, [r4, #16]
 800a2ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2be:	68a3      	ldr	r3, [r4, #8]
 800a2c0:	4607      	mov	r7, r0
 800a2c2:	4691      	mov	r9, r2
 800a2c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2c8:	f108 0601 	add.w	r6, r8, #1
 800a2cc:	42b3      	cmp	r3, r6
 800a2ce:	db0b      	blt.n	800a2e8 <__lshift+0x38>
 800a2d0:	4638      	mov	r0, r7
 800a2d2:	f7ff fd95 	bl	8009e00 <_Balloc>
 800a2d6:	4605      	mov	r5, r0
 800a2d8:	b948      	cbnz	r0, 800a2ee <__lshift+0x3e>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	4b28      	ldr	r3, [pc, #160]	@ (800a380 <__lshift+0xd0>)
 800a2de:	4829      	ldr	r0, [pc, #164]	@ (800a384 <__lshift+0xd4>)
 800a2e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a2e4:	f000 fc46 	bl	800ab74 <__assert_func>
 800a2e8:	3101      	adds	r1, #1
 800a2ea:	005b      	lsls	r3, r3, #1
 800a2ec:	e7ee      	b.n	800a2cc <__lshift+0x1c>
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	f100 0114 	add.w	r1, r0, #20
 800a2f4:	f100 0210 	add.w	r2, r0, #16
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	4553      	cmp	r3, sl
 800a2fc:	db33      	blt.n	800a366 <__lshift+0xb6>
 800a2fe:	6920      	ldr	r0, [r4, #16]
 800a300:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a304:	f104 0314 	add.w	r3, r4, #20
 800a308:	f019 091f 	ands.w	r9, r9, #31
 800a30c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a310:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a314:	d02b      	beq.n	800a36e <__lshift+0xbe>
 800a316:	f1c9 0e20 	rsb	lr, r9, #32
 800a31a:	468a      	mov	sl, r1
 800a31c:	2200      	movs	r2, #0
 800a31e:	6818      	ldr	r0, [r3, #0]
 800a320:	fa00 f009 	lsl.w	r0, r0, r9
 800a324:	4310      	orrs	r0, r2
 800a326:	f84a 0b04 	str.w	r0, [sl], #4
 800a32a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a32e:	459c      	cmp	ip, r3
 800a330:	fa22 f20e 	lsr.w	r2, r2, lr
 800a334:	d8f3      	bhi.n	800a31e <__lshift+0x6e>
 800a336:	ebac 0304 	sub.w	r3, ip, r4
 800a33a:	3b15      	subs	r3, #21
 800a33c:	f023 0303 	bic.w	r3, r3, #3
 800a340:	3304      	adds	r3, #4
 800a342:	f104 0015 	add.w	r0, r4, #21
 800a346:	4584      	cmp	ip, r0
 800a348:	bf38      	it	cc
 800a34a:	2304      	movcc	r3, #4
 800a34c:	50ca      	str	r2, [r1, r3]
 800a34e:	b10a      	cbz	r2, 800a354 <__lshift+0xa4>
 800a350:	f108 0602 	add.w	r6, r8, #2
 800a354:	3e01      	subs	r6, #1
 800a356:	4638      	mov	r0, r7
 800a358:	612e      	str	r6, [r5, #16]
 800a35a:	4621      	mov	r1, r4
 800a35c:	f7ff fd90 	bl	8009e80 <_Bfree>
 800a360:	4628      	mov	r0, r5
 800a362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a366:	f842 0f04 	str.w	r0, [r2, #4]!
 800a36a:	3301      	adds	r3, #1
 800a36c:	e7c5      	b.n	800a2fa <__lshift+0x4a>
 800a36e:	3904      	subs	r1, #4
 800a370:	f853 2b04 	ldr.w	r2, [r3], #4
 800a374:	f841 2f04 	str.w	r2, [r1, #4]!
 800a378:	459c      	cmp	ip, r3
 800a37a:	d8f9      	bhi.n	800a370 <__lshift+0xc0>
 800a37c:	e7ea      	b.n	800a354 <__lshift+0xa4>
 800a37e:	bf00      	nop
 800a380:	0800b4fd 	.word	0x0800b4fd
 800a384:	0800b57f 	.word	0x0800b57f

0800a388 <__mcmp>:
 800a388:	690a      	ldr	r2, [r1, #16]
 800a38a:	4603      	mov	r3, r0
 800a38c:	6900      	ldr	r0, [r0, #16]
 800a38e:	1a80      	subs	r0, r0, r2
 800a390:	b530      	push	{r4, r5, lr}
 800a392:	d10e      	bne.n	800a3b2 <__mcmp+0x2a>
 800a394:	3314      	adds	r3, #20
 800a396:	3114      	adds	r1, #20
 800a398:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a39c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a3a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a3a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a3a8:	4295      	cmp	r5, r2
 800a3aa:	d003      	beq.n	800a3b4 <__mcmp+0x2c>
 800a3ac:	d205      	bcs.n	800a3ba <__mcmp+0x32>
 800a3ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a3b2:	bd30      	pop	{r4, r5, pc}
 800a3b4:	42a3      	cmp	r3, r4
 800a3b6:	d3f3      	bcc.n	800a3a0 <__mcmp+0x18>
 800a3b8:	e7fb      	b.n	800a3b2 <__mcmp+0x2a>
 800a3ba:	2001      	movs	r0, #1
 800a3bc:	e7f9      	b.n	800a3b2 <__mcmp+0x2a>
	...

0800a3c0 <__mdiff>:
 800a3c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c4:	4689      	mov	r9, r1
 800a3c6:	4606      	mov	r6, r0
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	4648      	mov	r0, r9
 800a3cc:	4614      	mov	r4, r2
 800a3ce:	f7ff ffdb 	bl	800a388 <__mcmp>
 800a3d2:	1e05      	subs	r5, r0, #0
 800a3d4:	d112      	bne.n	800a3fc <__mdiff+0x3c>
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	4630      	mov	r0, r6
 800a3da:	f7ff fd11 	bl	8009e00 <_Balloc>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	b928      	cbnz	r0, 800a3ee <__mdiff+0x2e>
 800a3e2:	4b3f      	ldr	r3, [pc, #252]	@ (800a4e0 <__mdiff+0x120>)
 800a3e4:	f240 2137 	movw	r1, #567	@ 0x237
 800a3e8:	483e      	ldr	r0, [pc, #248]	@ (800a4e4 <__mdiff+0x124>)
 800a3ea:	f000 fbc3 	bl	800ab74 <__assert_func>
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a3f4:	4610      	mov	r0, r2
 800a3f6:	b003      	add	sp, #12
 800a3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3fc:	bfbc      	itt	lt
 800a3fe:	464b      	movlt	r3, r9
 800a400:	46a1      	movlt	r9, r4
 800a402:	4630      	mov	r0, r6
 800a404:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a408:	bfba      	itte	lt
 800a40a:	461c      	movlt	r4, r3
 800a40c:	2501      	movlt	r5, #1
 800a40e:	2500      	movge	r5, #0
 800a410:	f7ff fcf6 	bl	8009e00 <_Balloc>
 800a414:	4602      	mov	r2, r0
 800a416:	b918      	cbnz	r0, 800a420 <__mdiff+0x60>
 800a418:	4b31      	ldr	r3, [pc, #196]	@ (800a4e0 <__mdiff+0x120>)
 800a41a:	f240 2145 	movw	r1, #581	@ 0x245
 800a41e:	e7e3      	b.n	800a3e8 <__mdiff+0x28>
 800a420:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a424:	6926      	ldr	r6, [r4, #16]
 800a426:	60c5      	str	r5, [r0, #12]
 800a428:	f109 0310 	add.w	r3, r9, #16
 800a42c:	f109 0514 	add.w	r5, r9, #20
 800a430:	f104 0e14 	add.w	lr, r4, #20
 800a434:	f100 0b14 	add.w	fp, r0, #20
 800a438:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a43c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a440:	9301      	str	r3, [sp, #4]
 800a442:	46d9      	mov	r9, fp
 800a444:	f04f 0c00 	mov.w	ip, #0
 800a448:	9b01      	ldr	r3, [sp, #4]
 800a44a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a44e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a452:	9301      	str	r3, [sp, #4]
 800a454:	fa1f f38a 	uxth.w	r3, sl
 800a458:	4619      	mov	r1, r3
 800a45a:	b283      	uxth	r3, r0
 800a45c:	1acb      	subs	r3, r1, r3
 800a45e:	0c00      	lsrs	r0, r0, #16
 800a460:	4463      	add	r3, ip
 800a462:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a466:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a470:	4576      	cmp	r6, lr
 800a472:	f849 3b04 	str.w	r3, [r9], #4
 800a476:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a47a:	d8e5      	bhi.n	800a448 <__mdiff+0x88>
 800a47c:	1b33      	subs	r3, r6, r4
 800a47e:	3b15      	subs	r3, #21
 800a480:	f023 0303 	bic.w	r3, r3, #3
 800a484:	3415      	adds	r4, #21
 800a486:	3304      	adds	r3, #4
 800a488:	42a6      	cmp	r6, r4
 800a48a:	bf38      	it	cc
 800a48c:	2304      	movcc	r3, #4
 800a48e:	441d      	add	r5, r3
 800a490:	445b      	add	r3, fp
 800a492:	461e      	mov	r6, r3
 800a494:	462c      	mov	r4, r5
 800a496:	4544      	cmp	r4, r8
 800a498:	d30e      	bcc.n	800a4b8 <__mdiff+0xf8>
 800a49a:	f108 0103 	add.w	r1, r8, #3
 800a49e:	1b49      	subs	r1, r1, r5
 800a4a0:	f021 0103 	bic.w	r1, r1, #3
 800a4a4:	3d03      	subs	r5, #3
 800a4a6:	45a8      	cmp	r8, r5
 800a4a8:	bf38      	it	cc
 800a4aa:	2100      	movcc	r1, #0
 800a4ac:	440b      	add	r3, r1
 800a4ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a4b2:	b191      	cbz	r1, 800a4da <__mdiff+0x11a>
 800a4b4:	6117      	str	r7, [r2, #16]
 800a4b6:	e79d      	b.n	800a3f4 <__mdiff+0x34>
 800a4b8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a4bc:	46e6      	mov	lr, ip
 800a4be:	0c08      	lsrs	r0, r1, #16
 800a4c0:	fa1c fc81 	uxtah	ip, ip, r1
 800a4c4:	4471      	add	r1, lr
 800a4c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a4ca:	b289      	uxth	r1, r1
 800a4cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a4d0:	f846 1b04 	str.w	r1, [r6], #4
 800a4d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a4d8:	e7dd      	b.n	800a496 <__mdiff+0xd6>
 800a4da:	3f01      	subs	r7, #1
 800a4dc:	e7e7      	b.n	800a4ae <__mdiff+0xee>
 800a4de:	bf00      	nop
 800a4e0:	0800b4fd 	.word	0x0800b4fd
 800a4e4:	0800b57f 	.word	0x0800b57f

0800a4e8 <__ulp>:
 800a4e8:	b082      	sub	sp, #8
 800a4ea:	ed8d 0b00 	vstr	d0, [sp]
 800a4ee:	9a01      	ldr	r2, [sp, #4]
 800a4f0:	4b0f      	ldr	r3, [pc, #60]	@ (800a530 <__ulp+0x48>)
 800a4f2:	4013      	ands	r3, r2
 800a4f4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	dc08      	bgt.n	800a50e <__ulp+0x26>
 800a4fc:	425b      	negs	r3, r3
 800a4fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a502:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a506:	da04      	bge.n	800a512 <__ulp+0x2a>
 800a508:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a50c:	4113      	asrs	r3, r2
 800a50e:	2200      	movs	r2, #0
 800a510:	e008      	b.n	800a524 <__ulp+0x3c>
 800a512:	f1a2 0314 	sub.w	r3, r2, #20
 800a516:	2b1e      	cmp	r3, #30
 800a518:	bfda      	itte	le
 800a51a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a51e:	40da      	lsrle	r2, r3
 800a520:	2201      	movgt	r2, #1
 800a522:	2300      	movs	r3, #0
 800a524:	4619      	mov	r1, r3
 800a526:	4610      	mov	r0, r2
 800a528:	ec41 0b10 	vmov	d0, r0, r1
 800a52c:	b002      	add	sp, #8
 800a52e:	4770      	bx	lr
 800a530:	7ff00000 	.word	0x7ff00000

0800a534 <__b2d>:
 800a534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a538:	6906      	ldr	r6, [r0, #16]
 800a53a:	f100 0814 	add.w	r8, r0, #20
 800a53e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a542:	1f37      	subs	r7, r6, #4
 800a544:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a548:	4610      	mov	r0, r2
 800a54a:	f7ff fd4b 	bl	8009fe4 <__hi0bits>
 800a54e:	f1c0 0320 	rsb	r3, r0, #32
 800a552:	280a      	cmp	r0, #10
 800a554:	600b      	str	r3, [r1, #0]
 800a556:	491b      	ldr	r1, [pc, #108]	@ (800a5c4 <__b2d+0x90>)
 800a558:	dc15      	bgt.n	800a586 <__b2d+0x52>
 800a55a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a55e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a562:	45b8      	cmp	r8, r7
 800a564:	ea43 0501 	orr.w	r5, r3, r1
 800a568:	bf34      	ite	cc
 800a56a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a56e:	2300      	movcs	r3, #0
 800a570:	3015      	adds	r0, #21
 800a572:	fa02 f000 	lsl.w	r0, r2, r0
 800a576:	fa23 f30c 	lsr.w	r3, r3, ip
 800a57a:	4303      	orrs	r3, r0
 800a57c:	461c      	mov	r4, r3
 800a57e:	ec45 4b10 	vmov	d0, r4, r5
 800a582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a586:	45b8      	cmp	r8, r7
 800a588:	bf3a      	itte	cc
 800a58a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a58e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a592:	2300      	movcs	r3, #0
 800a594:	380b      	subs	r0, #11
 800a596:	d012      	beq.n	800a5be <__b2d+0x8a>
 800a598:	f1c0 0120 	rsb	r1, r0, #32
 800a59c:	fa23 f401 	lsr.w	r4, r3, r1
 800a5a0:	4082      	lsls	r2, r0
 800a5a2:	4322      	orrs	r2, r4
 800a5a4:	4547      	cmp	r7, r8
 800a5a6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a5aa:	bf8c      	ite	hi
 800a5ac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a5b0:	2200      	movls	r2, #0
 800a5b2:	4083      	lsls	r3, r0
 800a5b4:	40ca      	lsrs	r2, r1
 800a5b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	e7de      	b.n	800a57c <__b2d+0x48>
 800a5be:	ea42 0501 	orr.w	r5, r2, r1
 800a5c2:	e7db      	b.n	800a57c <__b2d+0x48>
 800a5c4:	3ff00000 	.word	0x3ff00000

0800a5c8 <__d2b>:
 800a5c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5cc:	460f      	mov	r7, r1
 800a5ce:	2101      	movs	r1, #1
 800a5d0:	ec59 8b10 	vmov	r8, r9, d0
 800a5d4:	4616      	mov	r6, r2
 800a5d6:	f7ff fc13 	bl	8009e00 <_Balloc>
 800a5da:	4604      	mov	r4, r0
 800a5dc:	b930      	cbnz	r0, 800a5ec <__d2b+0x24>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	4b23      	ldr	r3, [pc, #140]	@ (800a670 <__d2b+0xa8>)
 800a5e2:	4824      	ldr	r0, [pc, #144]	@ (800a674 <__d2b+0xac>)
 800a5e4:	f240 310f 	movw	r1, #783	@ 0x30f
 800a5e8:	f000 fac4 	bl	800ab74 <__assert_func>
 800a5ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a5f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5f4:	b10d      	cbz	r5, 800a5fa <__d2b+0x32>
 800a5f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5fa:	9301      	str	r3, [sp, #4]
 800a5fc:	f1b8 0300 	subs.w	r3, r8, #0
 800a600:	d023      	beq.n	800a64a <__d2b+0x82>
 800a602:	4668      	mov	r0, sp
 800a604:	9300      	str	r3, [sp, #0]
 800a606:	f7ff fd0c 	bl	800a022 <__lo0bits>
 800a60a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a60e:	b1d0      	cbz	r0, 800a646 <__d2b+0x7e>
 800a610:	f1c0 0320 	rsb	r3, r0, #32
 800a614:	fa02 f303 	lsl.w	r3, r2, r3
 800a618:	430b      	orrs	r3, r1
 800a61a:	40c2      	lsrs	r2, r0
 800a61c:	6163      	str	r3, [r4, #20]
 800a61e:	9201      	str	r2, [sp, #4]
 800a620:	9b01      	ldr	r3, [sp, #4]
 800a622:	61a3      	str	r3, [r4, #24]
 800a624:	2b00      	cmp	r3, #0
 800a626:	bf0c      	ite	eq
 800a628:	2201      	moveq	r2, #1
 800a62a:	2202      	movne	r2, #2
 800a62c:	6122      	str	r2, [r4, #16]
 800a62e:	b1a5      	cbz	r5, 800a65a <__d2b+0x92>
 800a630:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a634:	4405      	add	r5, r0
 800a636:	603d      	str	r5, [r7, #0]
 800a638:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a63c:	6030      	str	r0, [r6, #0]
 800a63e:	4620      	mov	r0, r4
 800a640:	b003      	add	sp, #12
 800a642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a646:	6161      	str	r1, [r4, #20]
 800a648:	e7ea      	b.n	800a620 <__d2b+0x58>
 800a64a:	a801      	add	r0, sp, #4
 800a64c:	f7ff fce9 	bl	800a022 <__lo0bits>
 800a650:	9b01      	ldr	r3, [sp, #4]
 800a652:	6163      	str	r3, [r4, #20]
 800a654:	3020      	adds	r0, #32
 800a656:	2201      	movs	r2, #1
 800a658:	e7e8      	b.n	800a62c <__d2b+0x64>
 800a65a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a65e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a662:	6038      	str	r0, [r7, #0]
 800a664:	6918      	ldr	r0, [r3, #16]
 800a666:	f7ff fcbd 	bl	8009fe4 <__hi0bits>
 800a66a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a66e:	e7e5      	b.n	800a63c <__d2b+0x74>
 800a670:	0800b4fd 	.word	0x0800b4fd
 800a674:	0800b57f 	.word	0x0800b57f

0800a678 <__ratio>:
 800a678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67c:	b085      	sub	sp, #20
 800a67e:	e9cd 1000 	strd	r1, r0, [sp]
 800a682:	a902      	add	r1, sp, #8
 800a684:	f7ff ff56 	bl	800a534 <__b2d>
 800a688:	9800      	ldr	r0, [sp, #0]
 800a68a:	a903      	add	r1, sp, #12
 800a68c:	ec55 4b10 	vmov	r4, r5, d0
 800a690:	f7ff ff50 	bl	800a534 <__b2d>
 800a694:	9b01      	ldr	r3, [sp, #4]
 800a696:	6919      	ldr	r1, [r3, #16]
 800a698:	9b00      	ldr	r3, [sp, #0]
 800a69a:	691b      	ldr	r3, [r3, #16]
 800a69c:	1ac9      	subs	r1, r1, r3
 800a69e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a6a2:	1a9b      	subs	r3, r3, r2
 800a6a4:	ec5b ab10 	vmov	sl, fp, d0
 800a6a8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	bfce      	itee	gt
 800a6b0:	462a      	movgt	r2, r5
 800a6b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a6b6:	465a      	movle	r2, fp
 800a6b8:	462f      	mov	r7, r5
 800a6ba:	46d9      	mov	r9, fp
 800a6bc:	bfcc      	ite	gt
 800a6be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a6c2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a6c6:	464b      	mov	r3, r9
 800a6c8:	4652      	mov	r2, sl
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	4639      	mov	r1, r7
 800a6ce:	f7f6 f8bd 	bl	800084c <__aeabi_ddiv>
 800a6d2:	ec41 0b10 	vmov	d0, r0, r1
 800a6d6:	b005      	add	sp, #20
 800a6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a6dc <__copybits>:
 800a6dc:	3901      	subs	r1, #1
 800a6de:	b570      	push	{r4, r5, r6, lr}
 800a6e0:	1149      	asrs	r1, r1, #5
 800a6e2:	6914      	ldr	r4, [r2, #16]
 800a6e4:	3101      	adds	r1, #1
 800a6e6:	f102 0314 	add.w	r3, r2, #20
 800a6ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a6ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a6f2:	1f05      	subs	r5, r0, #4
 800a6f4:	42a3      	cmp	r3, r4
 800a6f6:	d30c      	bcc.n	800a712 <__copybits+0x36>
 800a6f8:	1aa3      	subs	r3, r4, r2
 800a6fa:	3b11      	subs	r3, #17
 800a6fc:	f023 0303 	bic.w	r3, r3, #3
 800a700:	3211      	adds	r2, #17
 800a702:	42a2      	cmp	r2, r4
 800a704:	bf88      	it	hi
 800a706:	2300      	movhi	r3, #0
 800a708:	4418      	add	r0, r3
 800a70a:	2300      	movs	r3, #0
 800a70c:	4288      	cmp	r0, r1
 800a70e:	d305      	bcc.n	800a71c <__copybits+0x40>
 800a710:	bd70      	pop	{r4, r5, r6, pc}
 800a712:	f853 6b04 	ldr.w	r6, [r3], #4
 800a716:	f845 6f04 	str.w	r6, [r5, #4]!
 800a71a:	e7eb      	b.n	800a6f4 <__copybits+0x18>
 800a71c:	f840 3b04 	str.w	r3, [r0], #4
 800a720:	e7f4      	b.n	800a70c <__copybits+0x30>

0800a722 <__any_on>:
 800a722:	f100 0214 	add.w	r2, r0, #20
 800a726:	6900      	ldr	r0, [r0, #16]
 800a728:	114b      	asrs	r3, r1, #5
 800a72a:	4298      	cmp	r0, r3
 800a72c:	b510      	push	{r4, lr}
 800a72e:	db11      	blt.n	800a754 <__any_on+0x32>
 800a730:	dd0a      	ble.n	800a748 <__any_on+0x26>
 800a732:	f011 011f 	ands.w	r1, r1, #31
 800a736:	d007      	beq.n	800a748 <__any_on+0x26>
 800a738:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a73c:	fa24 f001 	lsr.w	r0, r4, r1
 800a740:	fa00 f101 	lsl.w	r1, r0, r1
 800a744:	428c      	cmp	r4, r1
 800a746:	d10b      	bne.n	800a760 <__any_on+0x3e>
 800a748:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d803      	bhi.n	800a758 <__any_on+0x36>
 800a750:	2000      	movs	r0, #0
 800a752:	bd10      	pop	{r4, pc}
 800a754:	4603      	mov	r3, r0
 800a756:	e7f7      	b.n	800a748 <__any_on+0x26>
 800a758:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a75c:	2900      	cmp	r1, #0
 800a75e:	d0f5      	beq.n	800a74c <__any_on+0x2a>
 800a760:	2001      	movs	r0, #1
 800a762:	e7f6      	b.n	800a752 <__any_on+0x30>

0800a764 <__sread>:
 800a764:	b510      	push	{r4, lr}
 800a766:	460c      	mov	r4, r1
 800a768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a76c:	f000 f9ce 	bl	800ab0c <_read_r>
 800a770:	2800      	cmp	r0, #0
 800a772:	bfab      	itete	ge
 800a774:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a776:	89a3      	ldrhlt	r3, [r4, #12]
 800a778:	181b      	addge	r3, r3, r0
 800a77a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a77e:	bfac      	ite	ge
 800a780:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a782:	81a3      	strhlt	r3, [r4, #12]
 800a784:	bd10      	pop	{r4, pc}

0800a786 <__swrite>:
 800a786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a78a:	461f      	mov	r7, r3
 800a78c:	898b      	ldrh	r3, [r1, #12]
 800a78e:	05db      	lsls	r3, r3, #23
 800a790:	4605      	mov	r5, r0
 800a792:	460c      	mov	r4, r1
 800a794:	4616      	mov	r6, r2
 800a796:	d505      	bpl.n	800a7a4 <__swrite+0x1e>
 800a798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a79c:	2302      	movs	r3, #2
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f000 f9a2 	bl	800aae8 <_lseek_r>
 800a7a4:	89a3      	ldrh	r3, [r4, #12]
 800a7a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a7ae:	81a3      	strh	r3, [r4, #12]
 800a7b0:	4632      	mov	r2, r6
 800a7b2:	463b      	mov	r3, r7
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ba:	f000 b9c9 	b.w	800ab50 <_write_r>

0800a7be <__sseek>:
 800a7be:	b510      	push	{r4, lr}
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7c6:	f000 f98f 	bl	800aae8 <_lseek_r>
 800a7ca:	1c43      	adds	r3, r0, #1
 800a7cc:	89a3      	ldrh	r3, [r4, #12]
 800a7ce:	bf15      	itete	ne
 800a7d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a7d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a7d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a7da:	81a3      	strheq	r3, [r4, #12]
 800a7dc:	bf18      	it	ne
 800a7de:	81a3      	strhne	r3, [r4, #12]
 800a7e0:	bd10      	pop	{r4, pc}

0800a7e2 <__sclose>:
 800a7e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7e6:	f000 b94d 	b.w	800aa84 <_close_r>

0800a7ea <_realloc_r>:
 800a7ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ee:	4680      	mov	r8, r0
 800a7f0:	4615      	mov	r5, r2
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	b921      	cbnz	r1, 800a800 <_realloc_r+0x16>
 800a7f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fa:	4611      	mov	r1, r2
 800a7fc:	f7ff b9b6 	b.w	8009b6c <_malloc_r>
 800a800:	b92a      	cbnz	r2, 800a80e <_realloc_r+0x24>
 800a802:	f000 f9e9 	bl	800abd8 <_free_r>
 800a806:	2400      	movs	r4, #0
 800a808:	4620      	mov	r0, r4
 800a80a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a80e:	f000 fa2d 	bl	800ac6c <_malloc_usable_size_r>
 800a812:	4285      	cmp	r5, r0
 800a814:	4606      	mov	r6, r0
 800a816:	d802      	bhi.n	800a81e <_realloc_r+0x34>
 800a818:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a81c:	d8f4      	bhi.n	800a808 <_realloc_r+0x1e>
 800a81e:	4629      	mov	r1, r5
 800a820:	4640      	mov	r0, r8
 800a822:	f7ff f9a3 	bl	8009b6c <_malloc_r>
 800a826:	4607      	mov	r7, r0
 800a828:	2800      	cmp	r0, #0
 800a82a:	d0ec      	beq.n	800a806 <_realloc_r+0x1c>
 800a82c:	42b5      	cmp	r5, r6
 800a82e:	462a      	mov	r2, r5
 800a830:	4621      	mov	r1, r4
 800a832:	bf28      	it	cs
 800a834:	4632      	movcs	r2, r6
 800a836:	f7fd fe72 	bl	800851e <memcpy>
 800a83a:	4621      	mov	r1, r4
 800a83c:	4640      	mov	r0, r8
 800a83e:	f000 f9cb 	bl	800abd8 <_free_r>
 800a842:	463c      	mov	r4, r7
 800a844:	e7e0      	b.n	800a808 <_realloc_r+0x1e>

0800a846 <__swbuf_r>:
 800a846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a848:	460e      	mov	r6, r1
 800a84a:	4614      	mov	r4, r2
 800a84c:	4605      	mov	r5, r0
 800a84e:	b118      	cbz	r0, 800a858 <__swbuf_r+0x12>
 800a850:	6a03      	ldr	r3, [r0, #32]
 800a852:	b90b      	cbnz	r3, 800a858 <__swbuf_r+0x12>
 800a854:	f7fc ff4c 	bl	80076f0 <__sinit>
 800a858:	69a3      	ldr	r3, [r4, #24]
 800a85a:	60a3      	str	r3, [r4, #8]
 800a85c:	89a3      	ldrh	r3, [r4, #12]
 800a85e:	071a      	lsls	r2, r3, #28
 800a860:	d501      	bpl.n	800a866 <__swbuf_r+0x20>
 800a862:	6923      	ldr	r3, [r4, #16]
 800a864:	b943      	cbnz	r3, 800a878 <__swbuf_r+0x32>
 800a866:	4621      	mov	r1, r4
 800a868:	4628      	mov	r0, r5
 800a86a:	f000 f82b 	bl	800a8c4 <__swsetup_r>
 800a86e:	b118      	cbz	r0, 800a878 <__swbuf_r+0x32>
 800a870:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a874:	4638      	mov	r0, r7
 800a876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a878:	6823      	ldr	r3, [r4, #0]
 800a87a:	6922      	ldr	r2, [r4, #16]
 800a87c:	1a98      	subs	r0, r3, r2
 800a87e:	6963      	ldr	r3, [r4, #20]
 800a880:	b2f6      	uxtb	r6, r6
 800a882:	4283      	cmp	r3, r0
 800a884:	4637      	mov	r7, r6
 800a886:	dc05      	bgt.n	800a894 <__swbuf_r+0x4e>
 800a888:	4621      	mov	r1, r4
 800a88a:	4628      	mov	r0, r5
 800a88c:	f7ff fa84 	bl	8009d98 <_fflush_r>
 800a890:	2800      	cmp	r0, #0
 800a892:	d1ed      	bne.n	800a870 <__swbuf_r+0x2a>
 800a894:	68a3      	ldr	r3, [r4, #8]
 800a896:	3b01      	subs	r3, #1
 800a898:	60a3      	str	r3, [r4, #8]
 800a89a:	6823      	ldr	r3, [r4, #0]
 800a89c:	1c5a      	adds	r2, r3, #1
 800a89e:	6022      	str	r2, [r4, #0]
 800a8a0:	701e      	strb	r6, [r3, #0]
 800a8a2:	6962      	ldr	r2, [r4, #20]
 800a8a4:	1c43      	adds	r3, r0, #1
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d004      	beq.n	800a8b4 <__swbuf_r+0x6e>
 800a8aa:	89a3      	ldrh	r3, [r4, #12]
 800a8ac:	07db      	lsls	r3, r3, #31
 800a8ae:	d5e1      	bpl.n	800a874 <__swbuf_r+0x2e>
 800a8b0:	2e0a      	cmp	r6, #10
 800a8b2:	d1df      	bne.n	800a874 <__swbuf_r+0x2e>
 800a8b4:	4621      	mov	r1, r4
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	f7ff fa6e 	bl	8009d98 <_fflush_r>
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	d0d9      	beq.n	800a874 <__swbuf_r+0x2e>
 800a8c0:	e7d6      	b.n	800a870 <__swbuf_r+0x2a>
	...

0800a8c4 <__swsetup_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	4b29      	ldr	r3, [pc, #164]	@ (800a96c <__swsetup_r+0xa8>)
 800a8c8:	4605      	mov	r5, r0
 800a8ca:	6818      	ldr	r0, [r3, #0]
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	b118      	cbz	r0, 800a8d8 <__swsetup_r+0x14>
 800a8d0:	6a03      	ldr	r3, [r0, #32]
 800a8d2:	b90b      	cbnz	r3, 800a8d8 <__swsetup_r+0x14>
 800a8d4:	f7fc ff0c 	bl	80076f0 <__sinit>
 800a8d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8dc:	0719      	lsls	r1, r3, #28
 800a8de:	d422      	bmi.n	800a926 <__swsetup_r+0x62>
 800a8e0:	06da      	lsls	r2, r3, #27
 800a8e2:	d407      	bmi.n	800a8f4 <__swsetup_r+0x30>
 800a8e4:	2209      	movs	r2, #9
 800a8e6:	602a      	str	r2, [r5, #0]
 800a8e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8ec:	81a3      	strh	r3, [r4, #12]
 800a8ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a8f2:	e033      	b.n	800a95c <__swsetup_r+0x98>
 800a8f4:	0758      	lsls	r0, r3, #29
 800a8f6:	d512      	bpl.n	800a91e <__swsetup_r+0x5a>
 800a8f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8fa:	b141      	cbz	r1, 800a90e <__swsetup_r+0x4a>
 800a8fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a900:	4299      	cmp	r1, r3
 800a902:	d002      	beq.n	800a90a <__swsetup_r+0x46>
 800a904:	4628      	mov	r0, r5
 800a906:	f000 f967 	bl	800abd8 <_free_r>
 800a90a:	2300      	movs	r3, #0
 800a90c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a90e:	89a3      	ldrh	r3, [r4, #12]
 800a910:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a914:	81a3      	strh	r3, [r4, #12]
 800a916:	2300      	movs	r3, #0
 800a918:	6063      	str	r3, [r4, #4]
 800a91a:	6923      	ldr	r3, [r4, #16]
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	89a3      	ldrh	r3, [r4, #12]
 800a920:	f043 0308 	orr.w	r3, r3, #8
 800a924:	81a3      	strh	r3, [r4, #12]
 800a926:	6923      	ldr	r3, [r4, #16]
 800a928:	b94b      	cbnz	r3, 800a93e <__swsetup_r+0x7a>
 800a92a:	89a3      	ldrh	r3, [r4, #12]
 800a92c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a934:	d003      	beq.n	800a93e <__swsetup_r+0x7a>
 800a936:	4621      	mov	r1, r4
 800a938:	4628      	mov	r0, r5
 800a93a:	f000 f84c 	bl	800a9d6 <__smakebuf_r>
 800a93e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a942:	f013 0201 	ands.w	r2, r3, #1
 800a946:	d00a      	beq.n	800a95e <__swsetup_r+0x9a>
 800a948:	2200      	movs	r2, #0
 800a94a:	60a2      	str	r2, [r4, #8]
 800a94c:	6962      	ldr	r2, [r4, #20]
 800a94e:	4252      	negs	r2, r2
 800a950:	61a2      	str	r2, [r4, #24]
 800a952:	6922      	ldr	r2, [r4, #16]
 800a954:	b942      	cbnz	r2, 800a968 <__swsetup_r+0xa4>
 800a956:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a95a:	d1c5      	bne.n	800a8e8 <__swsetup_r+0x24>
 800a95c:	bd38      	pop	{r3, r4, r5, pc}
 800a95e:	0799      	lsls	r1, r3, #30
 800a960:	bf58      	it	pl
 800a962:	6962      	ldrpl	r2, [r4, #20]
 800a964:	60a2      	str	r2, [r4, #8]
 800a966:	e7f4      	b.n	800a952 <__swsetup_r+0x8e>
 800a968:	2000      	movs	r0, #0
 800a96a:	e7f7      	b.n	800a95c <__swsetup_r+0x98>
 800a96c:	2000019c 	.word	0x2000019c

0800a970 <__ascii_wctomb>:
 800a970:	4603      	mov	r3, r0
 800a972:	4608      	mov	r0, r1
 800a974:	b141      	cbz	r1, 800a988 <__ascii_wctomb+0x18>
 800a976:	2aff      	cmp	r2, #255	@ 0xff
 800a978:	d904      	bls.n	800a984 <__ascii_wctomb+0x14>
 800a97a:	228a      	movs	r2, #138	@ 0x8a
 800a97c:	601a      	str	r2, [r3, #0]
 800a97e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a982:	4770      	bx	lr
 800a984:	700a      	strb	r2, [r1, #0]
 800a986:	2001      	movs	r0, #1
 800a988:	4770      	bx	lr

0800a98a <__swhatbuf_r>:
 800a98a:	b570      	push	{r4, r5, r6, lr}
 800a98c:	460c      	mov	r4, r1
 800a98e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a992:	2900      	cmp	r1, #0
 800a994:	b096      	sub	sp, #88	@ 0x58
 800a996:	4615      	mov	r5, r2
 800a998:	461e      	mov	r6, r3
 800a99a:	da0d      	bge.n	800a9b8 <__swhatbuf_r+0x2e>
 800a99c:	89a3      	ldrh	r3, [r4, #12]
 800a99e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a9a2:	f04f 0100 	mov.w	r1, #0
 800a9a6:	bf14      	ite	ne
 800a9a8:	2340      	movne	r3, #64	@ 0x40
 800a9aa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a9ae:	2000      	movs	r0, #0
 800a9b0:	6031      	str	r1, [r6, #0]
 800a9b2:	602b      	str	r3, [r5, #0]
 800a9b4:	b016      	add	sp, #88	@ 0x58
 800a9b6:	bd70      	pop	{r4, r5, r6, pc}
 800a9b8:	466a      	mov	r2, sp
 800a9ba:	f000 f873 	bl	800aaa4 <_fstat_r>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	dbec      	blt.n	800a99c <__swhatbuf_r+0x12>
 800a9c2:	9901      	ldr	r1, [sp, #4]
 800a9c4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a9c8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a9cc:	4259      	negs	r1, r3
 800a9ce:	4159      	adcs	r1, r3
 800a9d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9d4:	e7eb      	b.n	800a9ae <__swhatbuf_r+0x24>

0800a9d6 <__smakebuf_r>:
 800a9d6:	898b      	ldrh	r3, [r1, #12]
 800a9d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9da:	079d      	lsls	r5, r3, #30
 800a9dc:	4606      	mov	r6, r0
 800a9de:	460c      	mov	r4, r1
 800a9e0:	d507      	bpl.n	800a9f2 <__smakebuf_r+0x1c>
 800a9e2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a9e6:	6023      	str	r3, [r4, #0]
 800a9e8:	6123      	str	r3, [r4, #16]
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	6163      	str	r3, [r4, #20]
 800a9ee:	b003      	add	sp, #12
 800a9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9f2:	ab01      	add	r3, sp, #4
 800a9f4:	466a      	mov	r2, sp
 800a9f6:	f7ff ffc8 	bl	800a98a <__swhatbuf_r>
 800a9fa:	9f00      	ldr	r7, [sp, #0]
 800a9fc:	4605      	mov	r5, r0
 800a9fe:	4639      	mov	r1, r7
 800aa00:	4630      	mov	r0, r6
 800aa02:	f7ff f8b3 	bl	8009b6c <_malloc_r>
 800aa06:	b948      	cbnz	r0, 800aa1c <__smakebuf_r+0x46>
 800aa08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa0c:	059a      	lsls	r2, r3, #22
 800aa0e:	d4ee      	bmi.n	800a9ee <__smakebuf_r+0x18>
 800aa10:	f023 0303 	bic.w	r3, r3, #3
 800aa14:	f043 0302 	orr.w	r3, r3, #2
 800aa18:	81a3      	strh	r3, [r4, #12]
 800aa1a:	e7e2      	b.n	800a9e2 <__smakebuf_r+0xc>
 800aa1c:	89a3      	ldrh	r3, [r4, #12]
 800aa1e:	6020      	str	r0, [r4, #0]
 800aa20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa24:	81a3      	strh	r3, [r4, #12]
 800aa26:	9b01      	ldr	r3, [sp, #4]
 800aa28:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa2c:	b15b      	cbz	r3, 800aa46 <__smakebuf_r+0x70>
 800aa2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa32:	4630      	mov	r0, r6
 800aa34:	f000 f848 	bl	800aac8 <_isatty_r>
 800aa38:	b128      	cbz	r0, 800aa46 <__smakebuf_r+0x70>
 800aa3a:	89a3      	ldrh	r3, [r4, #12]
 800aa3c:	f023 0303 	bic.w	r3, r3, #3
 800aa40:	f043 0301 	orr.w	r3, r3, #1
 800aa44:	81a3      	strh	r3, [r4, #12]
 800aa46:	89a3      	ldrh	r3, [r4, #12]
 800aa48:	431d      	orrs	r5, r3
 800aa4a:	81a5      	strh	r5, [r4, #12]
 800aa4c:	e7cf      	b.n	800a9ee <__smakebuf_r+0x18>

0800aa4e <memmove>:
 800aa4e:	4288      	cmp	r0, r1
 800aa50:	b510      	push	{r4, lr}
 800aa52:	eb01 0402 	add.w	r4, r1, r2
 800aa56:	d902      	bls.n	800aa5e <memmove+0x10>
 800aa58:	4284      	cmp	r4, r0
 800aa5a:	4623      	mov	r3, r4
 800aa5c:	d807      	bhi.n	800aa6e <memmove+0x20>
 800aa5e:	1e43      	subs	r3, r0, #1
 800aa60:	42a1      	cmp	r1, r4
 800aa62:	d008      	beq.n	800aa76 <memmove+0x28>
 800aa64:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa68:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa6c:	e7f8      	b.n	800aa60 <memmove+0x12>
 800aa6e:	4402      	add	r2, r0
 800aa70:	4601      	mov	r1, r0
 800aa72:	428a      	cmp	r2, r1
 800aa74:	d100      	bne.n	800aa78 <memmove+0x2a>
 800aa76:	bd10      	pop	{r4, pc}
 800aa78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa7c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa80:	e7f7      	b.n	800aa72 <memmove+0x24>
	...

0800aa84 <_close_r>:
 800aa84:	b538      	push	{r3, r4, r5, lr}
 800aa86:	4d06      	ldr	r5, [pc, #24]	@ (800aaa0 <_close_r+0x1c>)
 800aa88:	2300      	movs	r3, #0
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	4608      	mov	r0, r1
 800aa8e:	602b      	str	r3, [r5, #0]
 800aa90:	f7f6 ff58 	bl	8001944 <_close>
 800aa94:	1c43      	adds	r3, r0, #1
 800aa96:	d102      	bne.n	800aa9e <_close_r+0x1a>
 800aa98:	682b      	ldr	r3, [r5, #0]
 800aa9a:	b103      	cbz	r3, 800aa9e <_close_r+0x1a>
 800aa9c:	6023      	str	r3, [r4, #0]
 800aa9e:	bd38      	pop	{r3, r4, r5, pc}
 800aaa0:	200008c4 	.word	0x200008c4

0800aaa4 <_fstat_r>:
 800aaa4:	b538      	push	{r3, r4, r5, lr}
 800aaa6:	4d07      	ldr	r5, [pc, #28]	@ (800aac4 <_fstat_r+0x20>)
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	4604      	mov	r4, r0
 800aaac:	4608      	mov	r0, r1
 800aaae:	4611      	mov	r1, r2
 800aab0:	602b      	str	r3, [r5, #0]
 800aab2:	f7f6 ff53 	bl	800195c <_fstat>
 800aab6:	1c43      	adds	r3, r0, #1
 800aab8:	d102      	bne.n	800aac0 <_fstat_r+0x1c>
 800aaba:	682b      	ldr	r3, [r5, #0]
 800aabc:	b103      	cbz	r3, 800aac0 <_fstat_r+0x1c>
 800aabe:	6023      	str	r3, [r4, #0]
 800aac0:	bd38      	pop	{r3, r4, r5, pc}
 800aac2:	bf00      	nop
 800aac4:	200008c4 	.word	0x200008c4

0800aac8 <_isatty_r>:
 800aac8:	b538      	push	{r3, r4, r5, lr}
 800aaca:	4d06      	ldr	r5, [pc, #24]	@ (800aae4 <_isatty_r+0x1c>)
 800aacc:	2300      	movs	r3, #0
 800aace:	4604      	mov	r4, r0
 800aad0:	4608      	mov	r0, r1
 800aad2:	602b      	str	r3, [r5, #0]
 800aad4:	f7f6 ff52 	bl	800197c <_isatty>
 800aad8:	1c43      	adds	r3, r0, #1
 800aada:	d102      	bne.n	800aae2 <_isatty_r+0x1a>
 800aadc:	682b      	ldr	r3, [r5, #0]
 800aade:	b103      	cbz	r3, 800aae2 <_isatty_r+0x1a>
 800aae0:	6023      	str	r3, [r4, #0]
 800aae2:	bd38      	pop	{r3, r4, r5, pc}
 800aae4:	200008c4 	.word	0x200008c4

0800aae8 <_lseek_r>:
 800aae8:	b538      	push	{r3, r4, r5, lr}
 800aaea:	4d07      	ldr	r5, [pc, #28]	@ (800ab08 <_lseek_r+0x20>)
 800aaec:	4604      	mov	r4, r0
 800aaee:	4608      	mov	r0, r1
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	602a      	str	r2, [r5, #0]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	f7f6 ff4b 	bl	8001992 <_lseek>
 800aafc:	1c43      	adds	r3, r0, #1
 800aafe:	d102      	bne.n	800ab06 <_lseek_r+0x1e>
 800ab00:	682b      	ldr	r3, [r5, #0]
 800ab02:	b103      	cbz	r3, 800ab06 <_lseek_r+0x1e>
 800ab04:	6023      	str	r3, [r4, #0]
 800ab06:	bd38      	pop	{r3, r4, r5, pc}
 800ab08:	200008c4 	.word	0x200008c4

0800ab0c <_read_r>:
 800ab0c:	b538      	push	{r3, r4, r5, lr}
 800ab0e:	4d07      	ldr	r5, [pc, #28]	@ (800ab2c <_read_r+0x20>)
 800ab10:	4604      	mov	r4, r0
 800ab12:	4608      	mov	r0, r1
 800ab14:	4611      	mov	r1, r2
 800ab16:	2200      	movs	r2, #0
 800ab18:	602a      	str	r2, [r5, #0]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	f7f6 fed9 	bl	80018d2 <_read>
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	d102      	bne.n	800ab2a <_read_r+0x1e>
 800ab24:	682b      	ldr	r3, [r5, #0]
 800ab26:	b103      	cbz	r3, 800ab2a <_read_r+0x1e>
 800ab28:	6023      	str	r3, [r4, #0]
 800ab2a:	bd38      	pop	{r3, r4, r5, pc}
 800ab2c:	200008c4 	.word	0x200008c4

0800ab30 <_sbrk_r>:
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	4d06      	ldr	r5, [pc, #24]	@ (800ab4c <_sbrk_r+0x1c>)
 800ab34:	2300      	movs	r3, #0
 800ab36:	4604      	mov	r4, r0
 800ab38:	4608      	mov	r0, r1
 800ab3a:	602b      	str	r3, [r5, #0]
 800ab3c:	f7f6 ff36 	bl	80019ac <_sbrk>
 800ab40:	1c43      	adds	r3, r0, #1
 800ab42:	d102      	bne.n	800ab4a <_sbrk_r+0x1a>
 800ab44:	682b      	ldr	r3, [r5, #0]
 800ab46:	b103      	cbz	r3, 800ab4a <_sbrk_r+0x1a>
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	bd38      	pop	{r3, r4, r5, pc}
 800ab4c:	200008c4 	.word	0x200008c4

0800ab50 <_write_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	4d07      	ldr	r5, [pc, #28]	@ (800ab70 <_write_r+0x20>)
 800ab54:	4604      	mov	r4, r0
 800ab56:	4608      	mov	r0, r1
 800ab58:	4611      	mov	r1, r2
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	602a      	str	r2, [r5, #0]
 800ab5e:	461a      	mov	r2, r3
 800ab60:	f7f6 fed4 	bl	800190c <_write>
 800ab64:	1c43      	adds	r3, r0, #1
 800ab66:	d102      	bne.n	800ab6e <_write_r+0x1e>
 800ab68:	682b      	ldr	r3, [r5, #0]
 800ab6a:	b103      	cbz	r3, 800ab6e <_write_r+0x1e>
 800ab6c:	6023      	str	r3, [r4, #0]
 800ab6e:	bd38      	pop	{r3, r4, r5, pc}
 800ab70:	200008c4 	.word	0x200008c4

0800ab74 <__assert_func>:
 800ab74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab76:	4614      	mov	r4, r2
 800ab78:	461a      	mov	r2, r3
 800ab7a:	4b09      	ldr	r3, [pc, #36]	@ (800aba0 <__assert_func+0x2c>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4605      	mov	r5, r0
 800ab80:	68d8      	ldr	r0, [r3, #12]
 800ab82:	b954      	cbnz	r4, 800ab9a <__assert_func+0x26>
 800ab84:	4b07      	ldr	r3, [pc, #28]	@ (800aba4 <__assert_func+0x30>)
 800ab86:	461c      	mov	r4, r3
 800ab88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab8c:	9100      	str	r1, [sp, #0]
 800ab8e:	462b      	mov	r3, r5
 800ab90:	4905      	ldr	r1, [pc, #20]	@ (800aba8 <__assert_func+0x34>)
 800ab92:	f000 f873 	bl	800ac7c <fiprintf>
 800ab96:	f000 f883 	bl	800aca0 <abort>
 800ab9a:	4b04      	ldr	r3, [pc, #16]	@ (800abac <__assert_func+0x38>)
 800ab9c:	e7f4      	b.n	800ab88 <__assert_func+0x14>
 800ab9e:	bf00      	nop
 800aba0:	2000019c 	.word	0x2000019c
 800aba4:	0800b713 	.word	0x0800b713
 800aba8:	0800b6e5 	.word	0x0800b6e5
 800abac:	0800b6d8 	.word	0x0800b6d8

0800abb0 <_calloc_r>:
 800abb0:	b570      	push	{r4, r5, r6, lr}
 800abb2:	fba1 5402 	umull	r5, r4, r1, r2
 800abb6:	b93c      	cbnz	r4, 800abc8 <_calloc_r+0x18>
 800abb8:	4629      	mov	r1, r5
 800abba:	f7fe ffd7 	bl	8009b6c <_malloc_r>
 800abbe:	4606      	mov	r6, r0
 800abc0:	b928      	cbnz	r0, 800abce <_calloc_r+0x1e>
 800abc2:	2600      	movs	r6, #0
 800abc4:	4630      	mov	r0, r6
 800abc6:	bd70      	pop	{r4, r5, r6, pc}
 800abc8:	220c      	movs	r2, #12
 800abca:	6002      	str	r2, [r0, #0]
 800abcc:	e7f9      	b.n	800abc2 <_calloc_r+0x12>
 800abce:	462a      	mov	r2, r5
 800abd0:	4621      	mov	r1, r4
 800abd2:	f7fd fc6b 	bl	80084ac <memset>
 800abd6:	e7f5      	b.n	800abc4 <_calloc_r+0x14>

0800abd8 <_free_r>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	4605      	mov	r5, r0
 800abdc:	2900      	cmp	r1, #0
 800abde:	d041      	beq.n	800ac64 <_free_r+0x8c>
 800abe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abe4:	1f0c      	subs	r4, r1, #4
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	bfb8      	it	lt
 800abea:	18e4      	addlt	r4, r4, r3
 800abec:	f7ff f8fc 	bl	8009de8 <__malloc_lock>
 800abf0:	4a1d      	ldr	r2, [pc, #116]	@ (800ac68 <_free_r+0x90>)
 800abf2:	6813      	ldr	r3, [r2, #0]
 800abf4:	b933      	cbnz	r3, 800ac04 <_free_r+0x2c>
 800abf6:	6063      	str	r3, [r4, #4]
 800abf8:	6014      	str	r4, [r2, #0]
 800abfa:	4628      	mov	r0, r5
 800abfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac00:	f7ff b8f8 	b.w	8009df4 <__malloc_unlock>
 800ac04:	42a3      	cmp	r3, r4
 800ac06:	d908      	bls.n	800ac1a <_free_r+0x42>
 800ac08:	6820      	ldr	r0, [r4, #0]
 800ac0a:	1821      	adds	r1, r4, r0
 800ac0c:	428b      	cmp	r3, r1
 800ac0e:	bf01      	itttt	eq
 800ac10:	6819      	ldreq	r1, [r3, #0]
 800ac12:	685b      	ldreq	r3, [r3, #4]
 800ac14:	1809      	addeq	r1, r1, r0
 800ac16:	6021      	streq	r1, [r4, #0]
 800ac18:	e7ed      	b.n	800abf6 <_free_r+0x1e>
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	b10b      	cbz	r3, 800ac24 <_free_r+0x4c>
 800ac20:	42a3      	cmp	r3, r4
 800ac22:	d9fa      	bls.n	800ac1a <_free_r+0x42>
 800ac24:	6811      	ldr	r1, [r2, #0]
 800ac26:	1850      	adds	r0, r2, r1
 800ac28:	42a0      	cmp	r0, r4
 800ac2a:	d10b      	bne.n	800ac44 <_free_r+0x6c>
 800ac2c:	6820      	ldr	r0, [r4, #0]
 800ac2e:	4401      	add	r1, r0
 800ac30:	1850      	adds	r0, r2, r1
 800ac32:	4283      	cmp	r3, r0
 800ac34:	6011      	str	r1, [r2, #0]
 800ac36:	d1e0      	bne.n	800abfa <_free_r+0x22>
 800ac38:	6818      	ldr	r0, [r3, #0]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	6053      	str	r3, [r2, #4]
 800ac3e:	4408      	add	r0, r1
 800ac40:	6010      	str	r0, [r2, #0]
 800ac42:	e7da      	b.n	800abfa <_free_r+0x22>
 800ac44:	d902      	bls.n	800ac4c <_free_r+0x74>
 800ac46:	230c      	movs	r3, #12
 800ac48:	602b      	str	r3, [r5, #0]
 800ac4a:	e7d6      	b.n	800abfa <_free_r+0x22>
 800ac4c:	6820      	ldr	r0, [r4, #0]
 800ac4e:	1821      	adds	r1, r4, r0
 800ac50:	428b      	cmp	r3, r1
 800ac52:	bf04      	itt	eq
 800ac54:	6819      	ldreq	r1, [r3, #0]
 800ac56:	685b      	ldreq	r3, [r3, #4]
 800ac58:	6063      	str	r3, [r4, #4]
 800ac5a:	bf04      	itt	eq
 800ac5c:	1809      	addeq	r1, r1, r0
 800ac5e:	6021      	streq	r1, [r4, #0]
 800ac60:	6054      	str	r4, [r2, #4]
 800ac62:	e7ca      	b.n	800abfa <_free_r+0x22>
 800ac64:	bd38      	pop	{r3, r4, r5, pc}
 800ac66:	bf00      	nop
 800ac68:	200008c0 	.word	0x200008c0

0800ac6c <_malloc_usable_size_r>:
 800ac6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac70:	1f18      	subs	r0, r3, #4
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	bfbc      	itt	lt
 800ac76:	580b      	ldrlt	r3, [r1, r0]
 800ac78:	18c0      	addlt	r0, r0, r3
 800ac7a:	4770      	bx	lr

0800ac7c <fiprintf>:
 800ac7c:	b40e      	push	{r1, r2, r3}
 800ac7e:	b503      	push	{r0, r1, lr}
 800ac80:	4601      	mov	r1, r0
 800ac82:	ab03      	add	r3, sp, #12
 800ac84:	4805      	ldr	r0, [pc, #20]	@ (800ac9c <fiprintf+0x20>)
 800ac86:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac8a:	6800      	ldr	r0, [r0, #0]
 800ac8c:	9301      	str	r3, [sp, #4]
 800ac8e:	f000 f837 	bl	800ad00 <_vfiprintf_r>
 800ac92:	b002      	add	sp, #8
 800ac94:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac98:	b003      	add	sp, #12
 800ac9a:	4770      	bx	lr
 800ac9c:	2000019c 	.word	0x2000019c

0800aca0 <abort>:
 800aca0:	b508      	push	{r3, lr}
 800aca2:	2006      	movs	r0, #6
 800aca4:	f000 f96c 	bl	800af80 <raise>
 800aca8:	2001      	movs	r0, #1
 800acaa:	f7f6 fe07 	bl	80018bc <_exit>

0800acae <__sfputc_r>:
 800acae:	6893      	ldr	r3, [r2, #8]
 800acb0:	3b01      	subs	r3, #1
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	b410      	push	{r4}
 800acb6:	6093      	str	r3, [r2, #8]
 800acb8:	da08      	bge.n	800accc <__sfputc_r+0x1e>
 800acba:	6994      	ldr	r4, [r2, #24]
 800acbc:	42a3      	cmp	r3, r4
 800acbe:	db01      	blt.n	800acc4 <__sfputc_r+0x16>
 800acc0:	290a      	cmp	r1, #10
 800acc2:	d103      	bne.n	800accc <__sfputc_r+0x1e>
 800acc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acc8:	f7ff bdbd 	b.w	800a846 <__swbuf_r>
 800accc:	6813      	ldr	r3, [r2, #0]
 800acce:	1c58      	adds	r0, r3, #1
 800acd0:	6010      	str	r0, [r2, #0]
 800acd2:	7019      	strb	r1, [r3, #0]
 800acd4:	4608      	mov	r0, r1
 800acd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <__sfputs_r>:
 800acdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acde:	4606      	mov	r6, r0
 800ace0:	460f      	mov	r7, r1
 800ace2:	4614      	mov	r4, r2
 800ace4:	18d5      	adds	r5, r2, r3
 800ace6:	42ac      	cmp	r4, r5
 800ace8:	d101      	bne.n	800acee <__sfputs_r+0x12>
 800acea:	2000      	movs	r0, #0
 800acec:	e007      	b.n	800acfe <__sfputs_r+0x22>
 800acee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acf2:	463a      	mov	r2, r7
 800acf4:	4630      	mov	r0, r6
 800acf6:	f7ff ffda 	bl	800acae <__sfputc_r>
 800acfa:	1c43      	adds	r3, r0, #1
 800acfc:	d1f3      	bne.n	800ace6 <__sfputs_r+0xa>
 800acfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad00 <_vfiprintf_r>:
 800ad00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad04:	460d      	mov	r5, r1
 800ad06:	b09d      	sub	sp, #116	@ 0x74
 800ad08:	4614      	mov	r4, r2
 800ad0a:	4698      	mov	r8, r3
 800ad0c:	4606      	mov	r6, r0
 800ad0e:	b118      	cbz	r0, 800ad18 <_vfiprintf_r+0x18>
 800ad10:	6a03      	ldr	r3, [r0, #32]
 800ad12:	b90b      	cbnz	r3, 800ad18 <_vfiprintf_r+0x18>
 800ad14:	f7fc fcec 	bl	80076f0 <__sinit>
 800ad18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad1a:	07d9      	lsls	r1, r3, #31
 800ad1c:	d405      	bmi.n	800ad2a <_vfiprintf_r+0x2a>
 800ad1e:	89ab      	ldrh	r3, [r5, #12]
 800ad20:	059a      	lsls	r2, r3, #22
 800ad22:	d402      	bmi.n	800ad2a <_vfiprintf_r+0x2a>
 800ad24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad26:	f7fd fbf8 	bl	800851a <__retarget_lock_acquire_recursive>
 800ad2a:	89ab      	ldrh	r3, [r5, #12]
 800ad2c:	071b      	lsls	r3, r3, #28
 800ad2e:	d501      	bpl.n	800ad34 <_vfiprintf_r+0x34>
 800ad30:	692b      	ldr	r3, [r5, #16]
 800ad32:	b99b      	cbnz	r3, 800ad5c <_vfiprintf_r+0x5c>
 800ad34:	4629      	mov	r1, r5
 800ad36:	4630      	mov	r0, r6
 800ad38:	f7ff fdc4 	bl	800a8c4 <__swsetup_r>
 800ad3c:	b170      	cbz	r0, 800ad5c <_vfiprintf_r+0x5c>
 800ad3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad40:	07dc      	lsls	r4, r3, #31
 800ad42:	d504      	bpl.n	800ad4e <_vfiprintf_r+0x4e>
 800ad44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad48:	b01d      	add	sp, #116	@ 0x74
 800ad4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad4e:	89ab      	ldrh	r3, [r5, #12]
 800ad50:	0598      	lsls	r0, r3, #22
 800ad52:	d4f7      	bmi.n	800ad44 <_vfiprintf_r+0x44>
 800ad54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad56:	f7fd fbe1 	bl	800851c <__retarget_lock_release_recursive>
 800ad5a:	e7f3      	b.n	800ad44 <_vfiprintf_r+0x44>
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad60:	2320      	movs	r3, #32
 800ad62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad66:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad6a:	2330      	movs	r3, #48	@ 0x30
 800ad6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800af1c <_vfiprintf_r+0x21c>
 800ad70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad74:	f04f 0901 	mov.w	r9, #1
 800ad78:	4623      	mov	r3, r4
 800ad7a:	469a      	mov	sl, r3
 800ad7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad80:	b10a      	cbz	r2, 800ad86 <_vfiprintf_r+0x86>
 800ad82:	2a25      	cmp	r2, #37	@ 0x25
 800ad84:	d1f9      	bne.n	800ad7a <_vfiprintf_r+0x7a>
 800ad86:	ebba 0b04 	subs.w	fp, sl, r4
 800ad8a:	d00b      	beq.n	800ada4 <_vfiprintf_r+0xa4>
 800ad8c:	465b      	mov	r3, fp
 800ad8e:	4622      	mov	r2, r4
 800ad90:	4629      	mov	r1, r5
 800ad92:	4630      	mov	r0, r6
 800ad94:	f7ff ffa2 	bl	800acdc <__sfputs_r>
 800ad98:	3001      	adds	r0, #1
 800ad9a:	f000 80a7 	beq.w	800aeec <_vfiprintf_r+0x1ec>
 800ad9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ada0:	445a      	add	r2, fp
 800ada2:	9209      	str	r2, [sp, #36]	@ 0x24
 800ada4:	f89a 3000 	ldrb.w	r3, [sl]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f000 809f 	beq.w	800aeec <_vfiprintf_r+0x1ec>
 800adae:	2300      	movs	r3, #0
 800adb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800adb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adb8:	f10a 0a01 	add.w	sl, sl, #1
 800adbc:	9304      	str	r3, [sp, #16]
 800adbe:	9307      	str	r3, [sp, #28]
 800adc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800adc4:	931a      	str	r3, [sp, #104]	@ 0x68
 800adc6:	4654      	mov	r4, sl
 800adc8:	2205      	movs	r2, #5
 800adca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adce:	4853      	ldr	r0, [pc, #332]	@ (800af1c <_vfiprintf_r+0x21c>)
 800add0:	f7f5 f9fe 	bl	80001d0 <memchr>
 800add4:	9a04      	ldr	r2, [sp, #16]
 800add6:	b9d8      	cbnz	r0, 800ae10 <_vfiprintf_r+0x110>
 800add8:	06d1      	lsls	r1, r2, #27
 800adda:	bf44      	itt	mi
 800addc:	2320      	movmi	r3, #32
 800adde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ade2:	0713      	lsls	r3, r2, #28
 800ade4:	bf44      	itt	mi
 800ade6:	232b      	movmi	r3, #43	@ 0x2b
 800ade8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adec:	f89a 3000 	ldrb.w	r3, [sl]
 800adf0:	2b2a      	cmp	r3, #42	@ 0x2a
 800adf2:	d015      	beq.n	800ae20 <_vfiprintf_r+0x120>
 800adf4:	9a07      	ldr	r2, [sp, #28]
 800adf6:	4654      	mov	r4, sl
 800adf8:	2000      	movs	r0, #0
 800adfa:	f04f 0c0a 	mov.w	ip, #10
 800adfe:	4621      	mov	r1, r4
 800ae00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae04:	3b30      	subs	r3, #48	@ 0x30
 800ae06:	2b09      	cmp	r3, #9
 800ae08:	d94b      	bls.n	800aea2 <_vfiprintf_r+0x1a2>
 800ae0a:	b1b0      	cbz	r0, 800ae3a <_vfiprintf_r+0x13a>
 800ae0c:	9207      	str	r2, [sp, #28]
 800ae0e:	e014      	b.n	800ae3a <_vfiprintf_r+0x13a>
 800ae10:	eba0 0308 	sub.w	r3, r0, r8
 800ae14:	fa09 f303 	lsl.w	r3, r9, r3
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	9304      	str	r3, [sp, #16]
 800ae1c:	46a2      	mov	sl, r4
 800ae1e:	e7d2      	b.n	800adc6 <_vfiprintf_r+0xc6>
 800ae20:	9b03      	ldr	r3, [sp, #12]
 800ae22:	1d19      	adds	r1, r3, #4
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	9103      	str	r1, [sp, #12]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	bfbb      	ittet	lt
 800ae2c:	425b      	neglt	r3, r3
 800ae2e:	f042 0202 	orrlt.w	r2, r2, #2
 800ae32:	9307      	strge	r3, [sp, #28]
 800ae34:	9307      	strlt	r3, [sp, #28]
 800ae36:	bfb8      	it	lt
 800ae38:	9204      	strlt	r2, [sp, #16]
 800ae3a:	7823      	ldrb	r3, [r4, #0]
 800ae3c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae3e:	d10a      	bne.n	800ae56 <_vfiprintf_r+0x156>
 800ae40:	7863      	ldrb	r3, [r4, #1]
 800ae42:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae44:	d132      	bne.n	800aeac <_vfiprintf_r+0x1ac>
 800ae46:	9b03      	ldr	r3, [sp, #12]
 800ae48:	1d1a      	adds	r2, r3, #4
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	9203      	str	r2, [sp, #12]
 800ae4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae52:	3402      	adds	r4, #2
 800ae54:	9305      	str	r3, [sp, #20]
 800ae56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800af2c <_vfiprintf_r+0x22c>
 800ae5a:	7821      	ldrb	r1, [r4, #0]
 800ae5c:	2203      	movs	r2, #3
 800ae5e:	4650      	mov	r0, sl
 800ae60:	f7f5 f9b6 	bl	80001d0 <memchr>
 800ae64:	b138      	cbz	r0, 800ae76 <_vfiprintf_r+0x176>
 800ae66:	9b04      	ldr	r3, [sp, #16]
 800ae68:	eba0 000a 	sub.w	r0, r0, sl
 800ae6c:	2240      	movs	r2, #64	@ 0x40
 800ae6e:	4082      	lsls	r2, r0
 800ae70:	4313      	orrs	r3, r2
 800ae72:	3401      	adds	r4, #1
 800ae74:	9304      	str	r3, [sp, #16]
 800ae76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae7a:	4829      	ldr	r0, [pc, #164]	@ (800af20 <_vfiprintf_r+0x220>)
 800ae7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae80:	2206      	movs	r2, #6
 800ae82:	f7f5 f9a5 	bl	80001d0 <memchr>
 800ae86:	2800      	cmp	r0, #0
 800ae88:	d03f      	beq.n	800af0a <_vfiprintf_r+0x20a>
 800ae8a:	4b26      	ldr	r3, [pc, #152]	@ (800af24 <_vfiprintf_r+0x224>)
 800ae8c:	bb1b      	cbnz	r3, 800aed6 <_vfiprintf_r+0x1d6>
 800ae8e:	9b03      	ldr	r3, [sp, #12]
 800ae90:	3307      	adds	r3, #7
 800ae92:	f023 0307 	bic.w	r3, r3, #7
 800ae96:	3308      	adds	r3, #8
 800ae98:	9303      	str	r3, [sp, #12]
 800ae9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae9c:	443b      	add	r3, r7
 800ae9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800aea0:	e76a      	b.n	800ad78 <_vfiprintf_r+0x78>
 800aea2:	fb0c 3202 	mla	r2, ip, r2, r3
 800aea6:	460c      	mov	r4, r1
 800aea8:	2001      	movs	r0, #1
 800aeaa:	e7a8      	b.n	800adfe <_vfiprintf_r+0xfe>
 800aeac:	2300      	movs	r3, #0
 800aeae:	3401      	adds	r4, #1
 800aeb0:	9305      	str	r3, [sp, #20]
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	f04f 0c0a 	mov.w	ip, #10
 800aeb8:	4620      	mov	r0, r4
 800aeba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aebe:	3a30      	subs	r2, #48	@ 0x30
 800aec0:	2a09      	cmp	r2, #9
 800aec2:	d903      	bls.n	800aecc <_vfiprintf_r+0x1cc>
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d0c6      	beq.n	800ae56 <_vfiprintf_r+0x156>
 800aec8:	9105      	str	r1, [sp, #20]
 800aeca:	e7c4      	b.n	800ae56 <_vfiprintf_r+0x156>
 800aecc:	fb0c 2101 	mla	r1, ip, r1, r2
 800aed0:	4604      	mov	r4, r0
 800aed2:	2301      	movs	r3, #1
 800aed4:	e7f0      	b.n	800aeb8 <_vfiprintf_r+0x1b8>
 800aed6:	ab03      	add	r3, sp, #12
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	462a      	mov	r2, r5
 800aedc:	4b12      	ldr	r3, [pc, #72]	@ (800af28 <_vfiprintf_r+0x228>)
 800aede:	a904      	add	r1, sp, #16
 800aee0:	4630      	mov	r0, r6
 800aee2:	f7fb fd8d 	bl	8006a00 <_printf_float>
 800aee6:	4607      	mov	r7, r0
 800aee8:	1c78      	adds	r0, r7, #1
 800aeea:	d1d6      	bne.n	800ae9a <_vfiprintf_r+0x19a>
 800aeec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aeee:	07d9      	lsls	r1, r3, #31
 800aef0:	d405      	bmi.n	800aefe <_vfiprintf_r+0x1fe>
 800aef2:	89ab      	ldrh	r3, [r5, #12]
 800aef4:	059a      	lsls	r2, r3, #22
 800aef6:	d402      	bmi.n	800aefe <_vfiprintf_r+0x1fe>
 800aef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aefa:	f7fd fb0f 	bl	800851c <__retarget_lock_release_recursive>
 800aefe:	89ab      	ldrh	r3, [r5, #12]
 800af00:	065b      	lsls	r3, r3, #25
 800af02:	f53f af1f 	bmi.w	800ad44 <_vfiprintf_r+0x44>
 800af06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af08:	e71e      	b.n	800ad48 <_vfiprintf_r+0x48>
 800af0a:	ab03      	add	r3, sp, #12
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	462a      	mov	r2, r5
 800af10:	4b05      	ldr	r3, [pc, #20]	@ (800af28 <_vfiprintf_r+0x228>)
 800af12:	a904      	add	r1, sp, #16
 800af14:	4630      	mov	r0, r6
 800af16:	f7fc f80b 	bl	8006f30 <_printf_i>
 800af1a:	e7e4      	b.n	800aee6 <_vfiprintf_r+0x1e6>
 800af1c:	0800b56e 	.word	0x0800b56e
 800af20:	0800b578 	.word	0x0800b578
 800af24:	08006a01 	.word	0x08006a01
 800af28:	0800acdd 	.word	0x0800acdd
 800af2c:	0800b574 	.word	0x0800b574

0800af30 <_raise_r>:
 800af30:	291f      	cmp	r1, #31
 800af32:	b538      	push	{r3, r4, r5, lr}
 800af34:	4605      	mov	r5, r0
 800af36:	460c      	mov	r4, r1
 800af38:	d904      	bls.n	800af44 <_raise_r+0x14>
 800af3a:	2316      	movs	r3, #22
 800af3c:	6003      	str	r3, [r0, #0]
 800af3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af42:	bd38      	pop	{r3, r4, r5, pc}
 800af44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800af46:	b112      	cbz	r2, 800af4e <_raise_r+0x1e>
 800af48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af4c:	b94b      	cbnz	r3, 800af62 <_raise_r+0x32>
 800af4e:	4628      	mov	r0, r5
 800af50:	f000 f830 	bl	800afb4 <_getpid_r>
 800af54:	4622      	mov	r2, r4
 800af56:	4601      	mov	r1, r0
 800af58:	4628      	mov	r0, r5
 800af5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af5e:	f000 b817 	b.w	800af90 <_kill_r>
 800af62:	2b01      	cmp	r3, #1
 800af64:	d00a      	beq.n	800af7c <_raise_r+0x4c>
 800af66:	1c59      	adds	r1, r3, #1
 800af68:	d103      	bne.n	800af72 <_raise_r+0x42>
 800af6a:	2316      	movs	r3, #22
 800af6c:	6003      	str	r3, [r0, #0]
 800af6e:	2001      	movs	r0, #1
 800af70:	e7e7      	b.n	800af42 <_raise_r+0x12>
 800af72:	2100      	movs	r1, #0
 800af74:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800af78:	4620      	mov	r0, r4
 800af7a:	4798      	blx	r3
 800af7c:	2000      	movs	r0, #0
 800af7e:	e7e0      	b.n	800af42 <_raise_r+0x12>

0800af80 <raise>:
 800af80:	4b02      	ldr	r3, [pc, #8]	@ (800af8c <raise+0xc>)
 800af82:	4601      	mov	r1, r0
 800af84:	6818      	ldr	r0, [r3, #0]
 800af86:	f7ff bfd3 	b.w	800af30 <_raise_r>
 800af8a:	bf00      	nop
 800af8c:	2000019c 	.word	0x2000019c

0800af90 <_kill_r>:
 800af90:	b538      	push	{r3, r4, r5, lr}
 800af92:	4d07      	ldr	r5, [pc, #28]	@ (800afb0 <_kill_r+0x20>)
 800af94:	2300      	movs	r3, #0
 800af96:	4604      	mov	r4, r0
 800af98:	4608      	mov	r0, r1
 800af9a:	4611      	mov	r1, r2
 800af9c:	602b      	str	r3, [r5, #0]
 800af9e:	f7f6 fc7d 	bl	800189c <_kill>
 800afa2:	1c43      	adds	r3, r0, #1
 800afa4:	d102      	bne.n	800afac <_kill_r+0x1c>
 800afa6:	682b      	ldr	r3, [r5, #0]
 800afa8:	b103      	cbz	r3, 800afac <_kill_r+0x1c>
 800afaa:	6023      	str	r3, [r4, #0]
 800afac:	bd38      	pop	{r3, r4, r5, pc}
 800afae:	bf00      	nop
 800afb0:	200008c4 	.word	0x200008c4

0800afb4 <_getpid_r>:
 800afb4:	f7f6 bc6a 	b.w	800188c <_getpid>

0800afb8 <sqrt>:
 800afb8:	b538      	push	{r3, r4, r5, lr}
 800afba:	ed2d 8b02 	vpush	{d8}
 800afbe:	ec55 4b10 	vmov	r4, r5, d0
 800afc2:	f000 f825 	bl	800b010 <__ieee754_sqrt>
 800afc6:	4622      	mov	r2, r4
 800afc8:	462b      	mov	r3, r5
 800afca:	4620      	mov	r0, r4
 800afcc:	4629      	mov	r1, r5
 800afce:	eeb0 8a40 	vmov.f32	s16, s0
 800afd2:	eef0 8a60 	vmov.f32	s17, s1
 800afd6:	f7f5 fda9 	bl	8000b2c <__aeabi_dcmpun>
 800afda:	b990      	cbnz	r0, 800b002 <sqrt+0x4a>
 800afdc:	2200      	movs	r2, #0
 800afde:	2300      	movs	r3, #0
 800afe0:	4620      	mov	r0, r4
 800afe2:	4629      	mov	r1, r5
 800afe4:	f7f5 fd7a 	bl	8000adc <__aeabi_dcmplt>
 800afe8:	b158      	cbz	r0, 800b002 <sqrt+0x4a>
 800afea:	f7fd fa6b 	bl	80084c4 <__errno>
 800afee:	2321      	movs	r3, #33	@ 0x21
 800aff0:	6003      	str	r3, [r0, #0]
 800aff2:	2200      	movs	r2, #0
 800aff4:	2300      	movs	r3, #0
 800aff6:	4610      	mov	r0, r2
 800aff8:	4619      	mov	r1, r3
 800affa:	f7f5 fc27 	bl	800084c <__aeabi_ddiv>
 800affe:	ec41 0b18 	vmov	d8, r0, r1
 800b002:	eeb0 0a48 	vmov.f32	s0, s16
 800b006:	eef0 0a68 	vmov.f32	s1, s17
 800b00a:	ecbd 8b02 	vpop	{d8}
 800b00e:	bd38      	pop	{r3, r4, r5, pc}

0800b010 <__ieee754_sqrt>:
 800b010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b014:	4a68      	ldr	r2, [pc, #416]	@ (800b1b8 <__ieee754_sqrt+0x1a8>)
 800b016:	ec55 4b10 	vmov	r4, r5, d0
 800b01a:	43aa      	bics	r2, r5
 800b01c:	462b      	mov	r3, r5
 800b01e:	4621      	mov	r1, r4
 800b020:	d110      	bne.n	800b044 <__ieee754_sqrt+0x34>
 800b022:	4622      	mov	r2, r4
 800b024:	4620      	mov	r0, r4
 800b026:	4629      	mov	r1, r5
 800b028:	f7f5 fae6 	bl	80005f8 <__aeabi_dmul>
 800b02c:	4602      	mov	r2, r0
 800b02e:	460b      	mov	r3, r1
 800b030:	4620      	mov	r0, r4
 800b032:	4629      	mov	r1, r5
 800b034:	f7f5 f92a 	bl	800028c <__adddf3>
 800b038:	4604      	mov	r4, r0
 800b03a:	460d      	mov	r5, r1
 800b03c:	ec45 4b10 	vmov	d0, r4, r5
 800b040:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b044:	2d00      	cmp	r5, #0
 800b046:	dc0e      	bgt.n	800b066 <__ieee754_sqrt+0x56>
 800b048:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b04c:	4322      	orrs	r2, r4
 800b04e:	d0f5      	beq.n	800b03c <__ieee754_sqrt+0x2c>
 800b050:	b19d      	cbz	r5, 800b07a <__ieee754_sqrt+0x6a>
 800b052:	4622      	mov	r2, r4
 800b054:	4620      	mov	r0, r4
 800b056:	4629      	mov	r1, r5
 800b058:	f7f5 f916 	bl	8000288 <__aeabi_dsub>
 800b05c:	4602      	mov	r2, r0
 800b05e:	460b      	mov	r3, r1
 800b060:	f7f5 fbf4 	bl	800084c <__aeabi_ddiv>
 800b064:	e7e8      	b.n	800b038 <__ieee754_sqrt+0x28>
 800b066:	152a      	asrs	r2, r5, #20
 800b068:	d115      	bne.n	800b096 <__ieee754_sqrt+0x86>
 800b06a:	2000      	movs	r0, #0
 800b06c:	e009      	b.n	800b082 <__ieee754_sqrt+0x72>
 800b06e:	0acb      	lsrs	r3, r1, #11
 800b070:	3a15      	subs	r2, #21
 800b072:	0549      	lsls	r1, r1, #21
 800b074:	2b00      	cmp	r3, #0
 800b076:	d0fa      	beq.n	800b06e <__ieee754_sqrt+0x5e>
 800b078:	e7f7      	b.n	800b06a <__ieee754_sqrt+0x5a>
 800b07a:	462a      	mov	r2, r5
 800b07c:	e7fa      	b.n	800b074 <__ieee754_sqrt+0x64>
 800b07e:	005b      	lsls	r3, r3, #1
 800b080:	3001      	adds	r0, #1
 800b082:	02dc      	lsls	r4, r3, #11
 800b084:	d5fb      	bpl.n	800b07e <__ieee754_sqrt+0x6e>
 800b086:	1e44      	subs	r4, r0, #1
 800b088:	1b12      	subs	r2, r2, r4
 800b08a:	f1c0 0420 	rsb	r4, r0, #32
 800b08e:	fa21 f404 	lsr.w	r4, r1, r4
 800b092:	4323      	orrs	r3, r4
 800b094:	4081      	lsls	r1, r0
 800b096:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b09a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b09e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b0a2:	07d2      	lsls	r2, r2, #31
 800b0a4:	bf5c      	itt	pl
 800b0a6:	005b      	lslpl	r3, r3, #1
 800b0a8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b0ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b0b0:	bf58      	it	pl
 800b0b2:	0049      	lslpl	r1, r1, #1
 800b0b4:	2600      	movs	r6, #0
 800b0b6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b0ba:	106d      	asrs	r5, r5, #1
 800b0bc:	0049      	lsls	r1, r1, #1
 800b0be:	2016      	movs	r0, #22
 800b0c0:	4632      	mov	r2, r6
 800b0c2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b0c6:	1917      	adds	r7, r2, r4
 800b0c8:	429f      	cmp	r7, r3
 800b0ca:	bfde      	ittt	le
 800b0cc:	193a      	addle	r2, r7, r4
 800b0ce:	1bdb      	suble	r3, r3, r7
 800b0d0:	1936      	addle	r6, r6, r4
 800b0d2:	0fcf      	lsrs	r7, r1, #31
 800b0d4:	3801      	subs	r0, #1
 800b0d6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b0da:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b0de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b0e2:	d1f0      	bne.n	800b0c6 <__ieee754_sqrt+0xb6>
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	2720      	movs	r7, #32
 800b0e8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	eb00 0e0c 	add.w	lr, r0, ip
 800b0f2:	db02      	blt.n	800b0fa <__ieee754_sqrt+0xea>
 800b0f4:	d113      	bne.n	800b11e <__ieee754_sqrt+0x10e>
 800b0f6:	458e      	cmp	lr, r1
 800b0f8:	d811      	bhi.n	800b11e <__ieee754_sqrt+0x10e>
 800b0fa:	f1be 0f00 	cmp.w	lr, #0
 800b0fe:	eb0e 000c 	add.w	r0, lr, ip
 800b102:	da42      	bge.n	800b18a <__ieee754_sqrt+0x17a>
 800b104:	2800      	cmp	r0, #0
 800b106:	db40      	blt.n	800b18a <__ieee754_sqrt+0x17a>
 800b108:	f102 0801 	add.w	r8, r2, #1
 800b10c:	1a9b      	subs	r3, r3, r2
 800b10e:	458e      	cmp	lr, r1
 800b110:	bf88      	it	hi
 800b112:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800b116:	eba1 010e 	sub.w	r1, r1, lr
 800b11a:	4464      	add	r4, ip
 800b11c:	4642      	mov	r2, r8
 800b11e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b122:	3f01      	subs	r7, #1
 800b124:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b128:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b12c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b130:	d1dc      	bne.n	800b0ec <__ieee754_sqrt+0xdc>
 800b132:	4319      	orrs	r1, r3
 800b134:	d01b      	beq.n	800b16e <__ieee754_sqrt+0x15e>
 800b136:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800b1bc <__ieee754_sqrt+0x1ac>
 800b13a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800b1c0 <__ieee754_sqrt+0x1b0>
 800b13e:	e9da 0100 	ldrd	r0, r1, [sl]
 800b142:	e9db 2300 	ldrd	r2, r3, [fp]
 800b146:	f7f5 f89f 	bl	8000288 <__aeabi_dsub>
 800b14a:	e9da 8900 	ldrd	r8, r9, [sl]
 800b14e:	4602      	mov	r2, r0
 800b150:	460b      	mov	r3, r1
 800b152:	4640      	mov	r0, r8
 800b154:	4649      	mov	r1, r9
 800b156:	f7f5 fccb 	bl	8000af0 <__aeabi_dcmple>
 800b15a:	b140      	cbz	r0, 800b16e <__ieee754_sqrt+0x15e>
 800b15c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800b160:	e9da 0100 	ldrd	r0, r1, [sl]
 800b164:	e9db 2300 	ldrd	r2, r3, [fp]
 800b168:	d111      	bne.n	800b18e <__ieee754_sqrt+0x17e>
 800b16a:	3601      	adds	r6, #1
 800b16c:	463c      	mov	r4, r7
 800b16e:	1072      	asrs	r2, r6, #1
 800b170:	0863      	lsrs	r3, r4, #1
 800b172:	07f1      	lsls	r1, r6, #31
 800b174:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b178:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b17c:	bf48      	it	mi
 800b17e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b182:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b186:	4618      	mov	r0, r3
 800b188:	e756      	b.n	800b038 <__ieee754_sqrt+0x28>
 800b18a:	4690      	mov	r8, r2
 800b18c:	e7be      	b.n	800b10c <__ieee754_sqrt+0xfc>
 800b18e:	f7f5 f87d 	bl	800028c <__adddf3>
 800b192:	e9da 8900 	ldrd	r8, r9, [sl]
 800b196:	4602      	mov	r2, r0
 800b198:	460b      	mov	r3, r1
 800b19a:	4640      	mov	r0, r8
 800b19c:	4649      	mov	r1, r9
 800b19e:	f7f5 fc9d 	bl	8000adc <__aeabi_dcmplt>
 800b1a2:	b120      	cbz	r0, 800b1ae <__ieee754_sqrt+0x19e>
 800b1a4:	1ca0      	adds	r0, r4, #2
 800b1a6:	bf08      	it	eq
 800b1a8:	3601      	addeq	r6, #1
 800b1aa:	3402      	adds	r4, #2
 800b1ac:	e7df      	b.n	800b16e <__ieee754_sqrt+0x15e>
 800b1ae:	1c63      	adds	r3, r4, #1
 800b1b0:	f023 0401 	bic.w	r4, r3, #1
 800b1b4:	e7db      	b.n	800b16e <__ieee754_sqrt+0x15e>
 800b1b6:	bf00      	nop
 800b1b8:	7ff00000 	.word	0x7ff00000
 800b1bc:	200001f8 	.word	0x200001f8
 800b1c0:	200001f0 	.word	0x200001f0

0800b1c4 <_init>:
 800b1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c6:	bf00      	nop
 800b1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ca:	bc08      	pop	{r3}
 800b1cc:	469e      	mov	lr, r3
 800b1ce:	4770      	bx	lr

0800b1d0 <_fini>:
 800b1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1d2:	bf00      	nop
 800b1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1d6:	bc08      	pop	{r3}
 800b1d8:	469e      	mov	lr, r3
 800b1da:	4770      	bx	lr
