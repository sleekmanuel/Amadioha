
Amadioha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058d0  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005a5c  08005a5c  00006a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aa4  08005aa4  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005aa4  08005aa4  00006aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005aac  08005aac  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aac  08005aac  00006aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ab0  08005ab0  00006ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005ab4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000000c  08005ac0  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08005ac0  0000718c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014891  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b96  00000000  00000000  0001b8cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  0001e468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dea  00000000  00000000  0001f650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022cbe  00000000  00000000  0002043a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001521d  00000000  00000000  000430f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9dbc  00000000  00000000  00058315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001320d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b40  00000000  00000000  00132114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00136c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005a44 	.word	0x08005a44

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08005a44 	.word	0x08005a44

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004c2:	463b      	mov	r3, r7
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
 80004ce:	611a      	str	r2, [r3, #16]
 80004d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004d2:	4b29      	ldr	r3, [pc, #164]	@ (8000578 <MX_ADC1_Init+0xbc>)
 80004d4:	4a29      	ldr	r2, [pc, #164]	@ (800057c <MX_ADC1_Init+0xc0>)
 80004d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004d8:	4b27      	ldr	r3, [pc, #156]	@ (8000578 <MX_ADC1_Init+0xbc>)
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004de:	4b26      	ldr	r3, [pc, #152]	@ (8000578 <MX_ADC1_Init+0xbc>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004e4:	4b24      	ldr	r3, [pc, #144]	@ (8000578 <MX_ADC1_Init+0xbc>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ea:	4b23      	ldr	r3, [pc, #140]	@ (8000578 <MX_ADC1_Init+0xbc>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004f0:	4b21      	ldr	r3, [pc, #132]	@ (8000578 <MX_ADC1_Init+0xbc>)
 80004f2:	2204      	movs	r2, #4
 80004f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004f6:	4b20      	ldr	r3, [pc, #128]	@ (8000578 <MX_ADC1_Init+0xbc>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000578 <MX_ADC1_Init+0xbc>)
 80004fe:	2200      	movs	r2, #0
 8000500:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000502:	4b1d      	ldr	r3, [pc, #116]	@ (8000578 <MX_ADC1_Init+0xbc>)
 8000504:	2201      	movs	r2, #1
 8000506:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000508:	4b1b      	ldr	r3, [pc, #108]	@ (8000578 <MX_ADC1_Init+0xbc>)
 800050a:	2200      	movs	r2, #0
 800050c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000510:	4b19      	ldr	r3, [pc, #100]	@ (8000578 <MX_ADC1_Init+0xbc>)
 8000512:	2200      	movs	r2, #0
 8000514:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000516:	4b18      	ldr	r3, [pc, #96]	@ (8000578 <MX_ADC1_Init+0xbc>)
 8000518:	2200      	movs	r2, #0
 800051a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800051c:	4b16      	ldr	r3, [pc, #88]	@ (8000578 <MX_ADC1_Init+0xbc>)
 800051e:	2200      	movs	r2, #0
 8000520:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000524:	4b14      	ldr	r3, [pc, #80]	@ (8000578 <MX_ADC1_Init+0xbc>)
 8000526:	2200      	movs	r2, #0
 8000528:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800052a:	4b13      	ldr	r3, [pc, #76]	@ (8000578 <MX_ADC1_Init+0xbc>)
 800052c:	2200      	movs	r2, #0
 800052e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000532:	4811      	ldr	r0, [pc, #68]	@ (8000578 <MX_ADC1_Init+0xbc>)
 8000534:	f000 feae 	bl	8001294 <HAL_ADC_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800053e:	f000 fa6d 	bl	8000a1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000542:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <MX_ADC1_Init+0xc4>)
 8000544:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000546:	2306      	movs	r3, #6
 8000548:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800054e:	237f      	movs	r3, #127	@ 0x7f
 8000550:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000552:	2304      	movs	r3, #4
 8000554:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055a:	463b      	mov	r3, r7
 800055c:	4619      	mov	r1, r3
 800055e:	4806      	ldr	r0, [pc, #24]	@ (8000578 <MX_ADC1_Init+0xbc>)
 8000560:	f001 f90c 	bl	800177c <HAL_ADC_ConfigChannel>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800056a:	f000 fa57 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800056e:	bf00      	nop
 8000570:	3718      	adds	r7, #24
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000028 	.word	0x20000028
 800057c:	50040000 	.word	0x50040000
 8000580:	1d500080 	.word	0x1d500080

08000584 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b09e      	sub	sp, #120	@ 0x78
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800059c:	f107 0310 	add.w	r3, r7, #16
 80005a0:	2254      	movs	r2, #84	@ 0x54
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f005 fa21 	bl	80059ec <memset>
  if(adcHandle->Instance==ADC1)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a25      	ldr	r2, [pc, #148]	@ (8000644 <HAL_ADC_MspInit+0xc0>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d143      	bne.n	800063c <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005b8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80005be:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80005c0:	2301      	movs	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80005c8:	2310      	movs	r3, #16
 80005ca:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005cc:	2307      	movs	r3, #7
 80005ce:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80005d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80005dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 f814 	bl	8003610 <HAL_RCCEx_PeriphCLKConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80005ee:	f000 fa15 	bl	8000a1c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005f2:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <HAL_ADC_MspInit+0xc4>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	4a14      	ldr	r2, [pc, #80]	@ (8000648 <HAL_ADC_MspInit+0xc4>)
 80005f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fe:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <HAL_ADC_MspInit+0xc4>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <HAL_ADC_MspInit+0xc4>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	4a0e      	ldr	r2, [pc, #56]	@ (8000648 <HAL_ADC_MspInit+0xc4>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000616:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <HAL_ADC_MspInit+0xc4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000622:	2304      	movs	r3, #4
 8000624:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000626:	230b      	movs	r3, #11
 8000628:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000632:	4619      	mov	r1, r3
 8000634:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000638:	f001 ffb4 	bl	80025a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800063c:	bf00      	nop
 800063e:	3778      	adds	r7, #120	@ 0x78
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	50040000 	.word	0x50040000
 8000648:	40021000 	.word	0x40021000

0800064c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b2c      	ldr	r3, [pc, #176]	@ (8000714 <MX_GPIO_Init+0xc8>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	4a2b      	ldr	r2, [pc, #172]	@ (8000714 <MX_GPIO_Init+0xc8>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066e:	4b29      	ldr	r3, [pc, #164]	@ (8000714 <MX_GPIO_Init+0xc8>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b26      	ldr	r3, [pc, #152]	@ (8000714 <MX_GPIO_Init+0xc8>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	4a25      	ldr	r2, [pc, #148]	@ (8000714 <MX_GPIO_Init+0xc8>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000686:	4b23      	ldr	r3, [pc, #140]	@ (8000714 <MX_GPIO_Init+0xc8>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VBase_Pin|Sense_CuttOff_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2118      	movs	r1, #24
 8000696:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069a:	f002 f8ed 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2102      	movs	r1, #2
 80006a2:	481d      	ldr	r0, [pc, #116]	@ (8000718 <MX_GPIO_Init+0xcc>)
 80006a4:	f002 f8e8 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VBase_Pin|Sense_CuttOff_Pin;
 80006a8:	2318      	movs	r3, #24
 80006aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	4619      	mov	r1, r3
 80006be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c2:	f001 ff6f 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Switch_Pin;
 80006c6:	2301      	movs	r3, #1
 80006c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Switch_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	4619      	mov	r1, r3
 80006da:	480f      	ldr	r0, [pc, #60]	@ (8000718 <MX_GPIO_Init+0xcc>)
 80006dc:	f001 ff62 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006e0:	2302      	movs	r3, #2
 80006e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	4619      	mov	r1, r3
 80006f6:	4808      	ldr	r0, [pc, #32]	@ (8000718 <MX_GPIO_Init+0xcc>)
 80006f8:	f001 ff54 	bl	80025a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2100      	movs	r1, #0
 8000700:	2006      	movs	r0, #6
 8000702:	f001 fe9a 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000706:	2006      	movs	r0, #6
 8000708:	f001 feb3 	bl	8002472 <HAL_NVIC_EnableIRQ>

}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000
 8000718:	48000400 	.word	0x48000400

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000720:	f000 fb2d 	bl	8000d7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000724:	f000 f85e 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000728:	f7ff ff90 	bl	800064c <MX_GPIO_Init>
  MX_ADC1_Init();
 800072c:	f7ff fec6 	bl	80004bc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000730:	f000 fa6c 	bl	8000c0c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000734:	f000 f9f8 	bl	8000b28 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000738:	481f      	ldr	r0, [pc, #124]	@ (80007b8 <main+0x9c>)
 800073a:	f003 faa9 	bl	8003c90 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 800073e:	220c      	movs	r2, #12
 8000740:	491e      	ldr	r1, [pc, #120]	@ (80007bc <main+0xa0>)
 8000742:	481f      	ldr	r0, [pc, #124]	@ (80007c0 <main+0xa4>)
 8000744:	f003 fecc 	bl	80044e0 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		if(data_received_flag)
 8000748:	4b1e      	ldr	r3, [pc, #120]	@ (80007c4 <main+0xa8>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d029      	beq.n	80007a6 <main+0x8a>
		{

			// called parse received data
			slAddress = Parse_RxSLData((char*)TxRxData);
 8000752:	481d      	ldr	r0, [pc, #116]	@ (80007c8 <main+0xac>)
 8000754:	f000 f8e0 	bl	8000918 <Parse_RxSLData>
 8000758:	4603      	mov	r3, r0
 800075a:	4a1c      	ldr	r2, [pc, #112]	@ (80007cc <main+0xb0>)
 800075c:	6013      	str	r3, [r2, #0]
			Control = rx_buffer[4];   // extract command information
 800075e:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <main+0xa0>)
 8000760:	791a      	ldrb	r2, [r3, #4]
 8000762:	4b1b      	ldr	r3, [pc, #108]	@ (80007d0 <main+0xb4>)
 8000764:	701a      	strb	r2, [r3, #0]
			Data = rx_buffer[5];
 8000766:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <main+0xa0>)
 8000768:	795a      	ldrb	r2, [r3, #5]
 800076a:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <main+0xb8>)
 800076c:	701a      	strb	r2, [r3, #0]
			if(Control == 0xC0){
 800076e:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <main+0xb4>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2bc0      	cmp	r3, #192	@ 0xc0
 8000774:	d114      	bne.n	80007a0 <main+0x84>
				if(Data == 0x0F){
 8000776:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <main+0xb8>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b0f      	cmp	r3, #15
 800077c:	d106      	bne.n	800078c <main+0x70>
					  if(loadActive){
 800077e:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <main+0xbc>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d10c      	bne.n	80007a0 <main+0x84>
						  ;
					  }else{
						  Enable_Load();
 8000786:	f000 f89b 	bl	80008c0 <Enable_Load>
 800078a:	e009      	b.n	80007a0 <main+0x84>
					  }
				}else if(Data == 0x0F){
 800078c:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <main+0xb8>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b0f      	cmp	r3, #15
 8000792:	d105      	bne.n	80007a0 <main+0x84>
					  if(loadActive){
 8000794:	4b10      	ldr	r3, [pc, #64]	@ (80007d8 <main+0xbc>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <main+0x84>
						  Disable_Load();
 800079c:	f000 f8a6 	bl	80008ec <Disable_Load>
					  }else{
						  ;
					  }
				}
			}
			data_received_flag = 0;  // resets received status to expect new data
 80007a0:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <main+0xa8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
		}

		CurrentRead = Read_ADC();
 80007a6:	f000 f871 	bl	800088c <Read_ADC>
 80007aa:	4603      	mov	r3, r0
 80007ac:	4a0b      	ldr	r2, [pc, #44]	@ (80007dc <main+0xc0>)
 80007ae:	6013      	str	r3, [r2, #0]
		txCurrentValue = 0xF0;
 80007b0:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <main+0xc4>)
 80007b2:	22f0      	movs	r2, #240	@ 0xf0
 80007b4:	701a      	strb	r2, [r3, #0]
		if(data_received_flag)
 80007b6:	e7c7      	b.n	8000748 <main+0x2c>
 80007b8:	200000b4 	.word	0x200000b4
 80007bc:	20000090 	.word	0x20000090
 80007c0:	20000100 	.word	0x20000100
 80007c4:	2000008d 	.word	0x2000008d
 80007c8:	2000009c 	.word	0x2000009c
 80007cc:	200000a8 	.word	0x200000a8
 80007d0:	200000ac 	.word	0x200000ac
 80007d4:	200000ad 	.word	0x200000ad
 80007d8:	2000008c 	.word	0x2000008c
 80007dc:	200000b0 	.word	0x200000b0
 80007e0:	200000ae 	.word	0x200000ae

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b096      	sub	sp, #88	@ 0x58
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	2244      	movs	r2, #68	@ 0x44
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f005 f8fa 	bl	80059ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	463b      	mov	r3, r7
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000806:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800080a:	f002 f873 	bl	80028f4 <HAL_PWREx_ControlVoltageScaling>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000814:	f000 f902 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000818:	2310      	movs	r3, #16
 800081a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800081c:	2301      	movs	r3, #1
 800081e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000824:	2360      	movs	r3, #96	@ 0x60
 8000826:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000828:	2302      	movs	r3, #2
 800082a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800082c:	2301      	movs	r3, #1
 800082e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000830:	2301      	movs	r3, #1
 8000832:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8000834:	2324      	movs	r3, #36	@ 0x24
 8000836:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000838:	2307      	movs	r3, #7
 800083a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800083c:	2302      	movs	r3, #2
 800083e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000840:	2302      	movs	r3, #2
 8000842:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4618      	mov	r0, r3
 800084a:	f002 f8a9 	bl	80029a0 <HAL_RCC_OscConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000854:	f000 f8e2 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000858:	230f      	movs	r3, #15
 800085a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085c:	2303      	movs	r3, #3
 800085e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000864:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000868:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800086e:	463b      	mov	r3, r7
 8000870:	2104      	movs	r1, #4
 8000872:	4618      	mov	r0, r3
 8000874:	f002 fca8 	bl	80031c8 <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800087e:	f000 f8cd 	bl	8000a1c <Error_Handler>
  }
}
 8000882:	bf00      	nop
 8000884:	3758      	adds	r7, #88	@ 0x58
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <Read_ADC>:

/* USER CODE BEGIN 4 */

// Function to read ADC value
uint32_t Read_ADC(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);  // Start ADC conversion
 8000892:	480a      	ldr	r0, [pc, #40]	@ (80008bc <Read_ADC+0x30>)
 8000894:	f000 fe40 	bl	8001518 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);  // Wait for conversion to finish
 8000898:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800089c:	4807      	ldr	r0, [pc, #28]	@ (80008bc <Read_ADC+0x30>)
 800089e:	f000 fed1 	bl	8001644 <HAL_ADC_PollForConversion>
    uint32_t adcValue = HAL_ADC_GetValue(&hadc1);  // Get the ADC value
 80008a2:	4806      	ldr	r0, [pc, #24]	@ (80008bc <Read_ADC+0x30>)
 80008a4:	f000 ff5d 	bl	8001762 <HAL_ADC_GetValue>
 80008a8:	6078      	str	r0, [r7, #4]
    HAL_ADC_Stop(&hadc1);  // Stop the ADC
 80008aa:	4804      	ldr	r0, [pc, #16]	@ (80008bc <Read_ADC+0x30>)
 80008ac:	f000 fe97 	bl	80015de <HAL_ADC_Stop>
    return adcValue;
 80008b0:	687b      	ldr	r3, [r7, #4]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000028 	.word	0x20000028

080008c0 <Enable_Load>:
/*
 * Enable Load when Load is disabled
 * Turn on Onboard LED
 */
void Enable_Load(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	loadActive = 1;
 80008c4:	4b07      	ldr	r3, [pc, #28]	@ (80008e4 <Enable_Load+0x24>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET); //engage relay
 80008ca:	2201      	movs	r2, #1
 80008cc:	2102      	movs	r1, #2
 80008ce:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <Enable_Load+0x28>)
 80008d0:	f001 ffd2 	bl	8002878 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, VBase_Pin, SET); // turn on LEDs
 80008d4:	2201      	movs	r2, #1
 80008d6:	2108      	movs	r1, #8
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008dc:	f001 ffcc 	bl	8002878 <HAL_GPIO_WritePin>
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000008c 	.word	0x2000008c
 80008e8:	48000400 	.word	0x48000400

080008ec <Disable_Load>:
/*
 * Disable Load when Load is active
 * Turn off Onboard LED
 */
void Disable_Load(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	loadActive = 0;
 80008f0:	4b07      	ldr	r3, [pc, #28]	@ (8000910 <Disable_Load+0x24>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET); // disengage relay
 80008f6:	2200      	movs	r2, #0
 80008f8:	2102      	movs	r1, #2
 80008fa:	4806      	ldr	r0, [pc, #24]	@ (8000914 <Disable_Load+0x28>)
 80008fc:	f001 ffbc 	bl	8002878 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, VBase_Pin, RESET); // turn off LEDs
 8000900:	2200      	movs	r2, #0
 8000902:	2108      	movs	r1, #8
 8000904:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000908:	f001 ffb6 	bl	8002878 <HAL_GPIO_WritePin>
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000008c 	.word	0x2000008c
 8000914:	48000400 	.word	0x48000400

08000918 <Parse_RxSLData>:
/*
 * Parse Received Data for ATSL
 *
 */
uint32_t Parse_RxSLData(uint8_t data[])
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	uint32_t address = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
    // Shift and merge the 4 bytes into a 32-bit integer
    address |= ((uint32_t)data[0] << 24);  // Most significant byte
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	061b      	lsls	r3, r3, #24
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	4313      	orrs	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]
    address |= ((uint32_t)data[1] << 16);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3301      	adds	r3, #1
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	041b      	lsls	r3, r3, #16
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	4313      	orrs	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
    address |= ((uint32_t)data[2] << 8);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3302      	adds	r3, #2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	4313      	orrs	r3, r2
 800094a:	60fb      	str	r3, [r7, #12]
    address |= ((uint32_t)data[3] << 0);   // Least significant byte
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3303      	adds	r3, #3
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	4313      	orrs	r3, r2
 8000958:	60fb      	str	r3, [r7, #12]

    return address;
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <HAL_GPIO_EXTI_Callback>:

 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	80fb      	strh	r3, [r7, #6]
  /* Check if the power on button is pushed
   * if pushed when the load is active, it turns off the load and vice-versa
   *  */
  if((GPIO_Pin = Switch_Pin)){
 8000972:	2301      	movs	r3, #1
 8000974:	80fb      	strh	r3, [r7, #6]
	  if(loadActive){
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_GPIO_EXTI_Callback+0x28>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d002      	beq.n	8000984 <HAL_GPIO_EXTI_Callback+0x1c>
		  Disable_Load();
 800097e:	f7ff ffb5 	bl	80008ec <Disable_Load>
	  }

  }


}
 8000982:	e001      	b.n	8000988 <HAL_GPIO_EXTI_Callback+0x20>
		  Enable_Load();
 8000984:	f7ff ff9c 	bl	80008c0 <Enable_Load>
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2000008c 	.word	0x2000008c

08000994 <HAL_UART_RxCpltCallback>:
 /*
  * Receive interrupt callback function
  */

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
     if (huart->Instance == USART1)  // Ensure it's USART1
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a14      	ldr	r2, [pc, #80]	@ (80009f4 <HAL_UART_RxCpltCallback+0x60>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d111      	bne.n	80009ca <HAL_UART_RxCpltCallback+0x36>
     {
    	 data_received_flag = 1;    // Indicate data has been received
 80009a6:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <HAL_UART_RxCpltCallback+0x64>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]

    	 memcpy(TxRxData, rx_buffer, Data_BUFFER_SIZE);  // Move the received data to the transmission buffer
 80009ac:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <HAL_UART_RxCpltCallback+0x68>)
 80009ae:	4a14      	ldr	r2, [pc, #80]	@ (8000a00 <HAL_UART_RxCpltCallback+0x6c>)
 80009b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80009b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    	 memset(rx_buffer, 0, Data_BUFFER_SIZE); // Optionally clear the rx_buffer
 80009b6:	220c      	movs	r2, #12
 80009b8:	2100      	movs	r1, #0
 80009ba:	4811      	ldr	r0, [pc, #68]	@ (8000a00 <HAL_UART_RxCpltCallback+0x6c>)
 80009bc:	f005 f816 	bl	80059ec <memset>

         HAL_UART_Receive_IT(&huart1, rx_buffer, Data_BUFFER_SIZE);   // Re-enable receiving more data
 80009c0:	220c      	movs	r2, #12
 80009c2:	490f      	ldr	r1, [pc, #60]	@ (8000a00 <HAL_UART_RxCpltCallback+0x6c>)
 80009c4:	480f      	ldr	r0, [pc, #60]	@ (8000a04 <HAL_UART_RxCpltCallback+0x70>)
 80009c6:	f003 fd8b 	bl	80044e0 <HAL_UART_Receive_IT>
     }

     // Handle Overrun Error
     if (USART1->ISR & USART_ISR_ORE)
 80009ca:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <HAL_UART_RxCpltCallback+0x60>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d009      	beq.n	80009ea <HAL_UART_RxCpltCallback+0x56>
     {
         // Read status register to clear ORE flag
         uint32_t temp = USART1->ISR;
 80009d6:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <HAL_UART_RxCpltCallback+0x60>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	60fb      	str	r3, [r7, #12]
         // Read data register to clear the ORE flag
         (void)USART1->RDR;
 80009dc:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <HAL_UART_RxCpltCallback+0x60>)
 80009de:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
         // Re-enable UART receive interrupt
         HAL_UART_Receive_IT(&huart1, rx_buffer, Data_BUFFER_SIZE);
 80009e0:	220c      	movs	r2, #12
 80009e2:	4907      	ldr	r1, [pc, #28]	@ (8000a00 <HAL_UART_RxCpltCallback+0x6c>)
 80009e4:	4807      	ldr	r0, [pc, #28]	@ (8000a04 <HAL_UART_RxCpltCallback+0x70>)
 80009e6:	f003 fd7b 	bl	80044e0 <HAL_UART_Receive_IT>
     }
 }
 80009ea:	bf00      	nop
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40013800 	.word	0x40013800
 80009f8:	2000008d 	.word	0x2000008d
 80009fc:	2000009c 	.word	0x2000009c
 8000a00:	20000090 	.word	0x20000090
 8000a04:	20000100 	.word	0x20000100

08000a08 <HAL_TIM_PeriodElapsedCallback>:

 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
   {
     /* Transmit current value after .1 sec */
	 //HAL_UART_Transmit(&huart1, &txCurrentValue, sizeof(txCurrentValue), HAL_MAX_DELAY);
	   //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
   }
 }
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <Error_Handler+0x8>

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a32:	4a0e      	ldr	r2, [pc, #56]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4a:	4a08      	ldr	r2, [pc, #32]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a50:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a52:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <NMI_Handler+0x4>

08000a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <MemManage_Handler+0x4>

08000a88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac6:	f000 f9af 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}

08000ace <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Switch_Pin);
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f001 fee8 	bl	80028a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ae0:	4802      	ldr	r0, [pc, #8]	@ (8000aec <TIM2_IRQHandler+0x10>)
 8000ae2:	f003 f929 	bl	8003d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200000b4 	.word	0x200000b4

08000af0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000af4:	4802      	ldr	r0, [pc, #8]	@ (8000b00 <USART1_IRQHandler+0x10>)
 8000af6:	f003 fd3f 	bl	8004578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000100 	.word	0x20000100

08000b04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <SystemInit+0x20>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b0e:	4a05      	ldr	r2, [pc, #20]	@ (8000b24 <SystemInit+0x20>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b46:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc0 <MX_TIM2_Init+0x98>)
 8000b48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc0 <MX_TIM2_Init+0x98>)
 8000b50:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b56:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc0 <MX_TIM2_Init+0x98>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7199;
 8000b5c:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <MX_TIM2_Init+0x98>)
 8000b5e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000b62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b64:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <MX_TIM2_Init+0x98>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <MX_TIM2_Init+0x98>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b70:	4813      	ldr	r0, [pc, #76]	@ (8000bc0 <MX_TIM2_Init+0x98>)
 8000b72:	f003 f835 	bl	8003be0 <HAL_TIM_Base_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000b7c:	f7ff ff4e 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480c      	ldr	r0, [pc, #48]	@ (8000bc0 <MX_TIM2_Init+0x98>)
 8000b8e:	f003 f9da 	bl	8003f46 <HAL_TIM_ConfigClockSource>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000b98:	f7ff ff40 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_TIM2_Init+0x98>)
 8000baa:	f003 fbc7 	bl	800433c <HAL_TIMEx_MasterConfigSynchronization>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000bb4:	f7ff ff32 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	3720      	adds	r7, #32
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200000b4 	.word	0x200000b4

08000bc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bd4:	d113      	bne.n	8000bfe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <HAL_TIM_Base_MspInit+0x44>)
 8000bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bda:	4a0b      	ldr	r2, [pc, #44]	@ (8000c08 <HAL_TIM_Base_MspInit+0x44>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <HAL_TIM_Base_MspInit+0x44>)
 8000be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	201c      	movs	r0, #28
 8000bf4:	f001 fc21 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bf8:	201c      	movs	r0, #28
 8000bfa:	f001 fc3a 	bl	8002472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000

08000c0c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c10:	4b14      	ldr	r3, [pc, #80]	@ (8000c64 <MX_USART1_UART_Init+0x58>)
 8000c12:	4a15      	ldr	r2, [pc, #84]	@ (8000c68 <MX_USART1_UART_Init+0x5c>)
 8000c14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c16:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <MX_USART1_UART_Init+0x58>)
 8000c18:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1e:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <MX_USART1_UART_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <MX_USART1_UART_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <MX_USART1_UART_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <MX_USART1_UART_Init+0x58>)
 8000c32:	220c      	movs	r2, #12
 8000c34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <MX_USART1_UART_Init+0x58>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <MX_USART1_UART_Init+0x58>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c42:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <MX_USART1_UART_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <MX_USART1_UART_Init+0x58>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c4e:	4805      	ldr	r0, [pc, #20]	@ (8000c64 <MX_USART1_UART_Init+0x58>)
 8000c50:	f003 fbf8 	bl	8004444 <HAL_UART_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c5a:	f7ff fedf 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000100 	.word	0x20000100
 8000c68:	40013800 	.word	0x40013800

08000c6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b09e      	sub	sp, #120	@ 0x78
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	2254      	movs	r2, #84	@ 0x54
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f004 fead 	bl	80059ec <memset>
  if(uartHandle->Instance==USART1)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a23      	ldr	r2, [pc, #140]	@ (8000d24 <HAL_UART_MspInit+0xb8>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d13f      	bne.n	8000d1c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 fcb1 	bl	8003610 <HAL_RCCEx_PeriphCLKConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cb4:	f7ff feb2 	bl	8000a1c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <HAL_UART_MspInit+0xbc>)
 8000cba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8000d28 <HAL_UART_MspInit+0xbc>)
 8000cbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cc4:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <HAL_UART_MspInit+0xbc>)
 8000cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <HAL_UART_MspInit+0xbc>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd4:	4a14      	ldr	r2, [pc, #80]	@ (8000d28 <HAL_UART_MspInit+0xbc>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <HAL_UART_MspInit+0xbc>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ce8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cec:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cfa:	2307      	movs	r3, #7
 8000cfc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d02:	4619      	mov	r1, r3
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d08:	f001 fc4c 	bl	80025a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2025      	movs	r0, #37	@ 0x25
 8000d12:	f001 fb92 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d16:	2025      	movs	r0, #37	@ 0x25
 8000d18:	f001 fbab 	bl	8002472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	3778      	adds	r7, #120	@ 0x78
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40013800 	.word	0x40013800
 8000d28:	40021000 	.word	0x40021000

08000d2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d30:	f7ff fee8 	bl	8000b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d34:	480c      	ldr	r0, [pc, #48]	@ (8000d68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d36:	490d      	ldr	r1, [pc, #52]	@ (8000d6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d38:	4a0d      	ldr	r2, [pc, #52]	@ (8000d70 <LoopForever+0xe>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d78 <LoopForever+0x16>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f004 fe4f 	bl	80059fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d5e:	f7ff fcdd 	bl	800071c <main>

08000d62 <LoopForever>:

LoopForever:
    b LoopForever
 8000d62:	e7fe      	b.n	8000d62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d64:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d70:	08005ab4 	.word	0x08005ab4
  ldr r2, =_sbss
 8000d74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d78:	2000018c 	.word	0x2000018c

08000d7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC1_IRQHandler>

08000d7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d84:	2300      	movs	r3, #0
 8000d86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f001 fb4b 	bl	8002424 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d8e:	200f      	movs	r0, #15
 8000d90:	f000 f80e 	bl	8000db0 <HAL_InitTick>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d002      	beq.n	8000da0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	71fb      	strb	r3, [r7, #7]
 8000d9e:	e001      	b.n	8000da4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000da0:	f7ff fe42 	bl	8000a28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000da4:	79fb      	ldrb	r3, [r7, #7]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dbc:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <HAL_InitTick+0x6c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d023      	beq.n	8000e0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dc4:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <HAL_InitTick+0x70>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b14      	ldr	r3, [pc, #80]	@ (8000e1c <HAL_InitTick+0x6c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 fb57 	bl	800248e <HAL_SYSTICK_Config>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10f      	bne.n	8000e06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d809      	bhi.n	8000e00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000df4:	f001 fb21 	bl	800243a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <HAL_InitTick+0x74>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e007      	b.n	8000e10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	e004      	b.n	8000e10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]
 8000e0a:	e001      	b.n	8000e10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000000 	.word	0x20000000
 8000e24:	20000004 	.word	0x20000004

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	@ (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000188 	.word	0x20000188

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b03      	ldr	r3, [pc, #12]	@ (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000188 	.word	0x20000188

08000e68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	609a      	str	r2, [r3, #8]
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b087      	sub	sp, #28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	3360      	adds	r3, #96	@ 0x60
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <LL_ADC_SetOffset+0x44>)
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	430a      	orrs	r2, r1
 8000efe:	4313      	orrs	r3, r2
 8000f00:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f08:	bf00      	nop
 8000f0a:	371c      	adds	r7, #28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	03fff000 	.word	0x03fff000

08000f18 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3360      	adds	r3, #96	@ 0x60
 8000f26:	461a      	mov	r2, r3
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	3360      	adds	r3, #96	@ 0x60
 8000f54:	461a      	mov	r2, r3
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f6e:	bf00      	nop
 8000f70:	371c      	adds	r7, #28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e000      	b.n	8000f94 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	3330      	adds	r3, #48	@ 0x30
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	f003 030c 	and.w	r3, r3, #12
 8000fbc:	4413      	add	r3, r2
 8000fbe:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	f003 031f 	and.w	r3, r3, #31
 8000fca:	211f      	movs	r1, #31
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	0e9b      	lsrs	r3, r3, #26
 8000fd8:	f003 011f 	and.w	r1, r3, #31
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	f003 031f 	and.w	r3, r3, #31
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fec:	bf00      	nop
 8000fee:	371c      	adds	r7, #28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3314      	adds	r3, #20
 8001008:	461a      	mov	r2, r3
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	0e5b      	lsrs	r3, r3, #25
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	4413      	add	r3, r2
 8001016:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	0d1b      	lsrs	r3, r3, #20
 8001020:	f003 031f 	and.w	r3, r3, #31
 8001024:	2107      	movs	r1, #7
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	401a      	ands	r2, r3
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	0d1b      	lsrs	r3, r3, #20
 8001032:	f003 031f 	and.w	r3, r3, #31
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	431a      	orrs	r2, r3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001042:	bf00      	nop
 8001044:	371c      	adds	r7, #28
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001068:	43db      	mvns	r3, r3
 800106a:	401a      	ands	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f003 0318 	and.w	r3, r3, #24
 8001072:	4908      	ldr	r1, [pc, #32]	@ (8001094 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001074:	40d9      	lsrs	r1, r3
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	400b      	ands	r3, r1
 800107a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800107e:	431a      	orrs	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	0007ffff 	.word	0x0007ffff

08001098 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80010a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	6093      	str	r3, [r2, #8]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80010cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80010d0:	d101      	bne.n	80010d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80010f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800111c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001120:	d101      	bne.n	8001126 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001144:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001148:	f043 0201 	orr.w	r2, r3, #1
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800116c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001170:	f043 0202 	orr.w	r2, r3, #2
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b01      	cmp	r3, #1
 8001196:	d101      	bne.n	800119c <LL_ADC_IsEnabled+0x18>
 8001198:	2301      	movs	r3, #1
 800119a:	e000      	b.n	800119e <LL_ADC_IsEnabled+0x1a>
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d101      	bne.n	80011c2 <LL_ADC_IsDisableOngoing+0x18>
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <LL_ADC_IsDisableOngoing+0x1a>
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011e4:	f043 0204 	orr.w	r2, r3, #4
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001208:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800120c:	f043 0210 	orr.w	r2, r3, #16
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b04      	cmp	r3, #4
 8001232:	d101      	bne.n	8001238 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001256:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800125a:	f043 0220 	orr.w	r2, r3, #32
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b08      	cmp	r3, #8
 8001280:	d101      	bne.n	8001286 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800129c:	2300      	movs	r3, #0
 800129e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e126      	b.n	80014fc <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d109      	bne.n	80012d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff f961 	bl	8000584 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fef1 	bl	80010bc <LL_ADC_IsDeepPowerDownEnabled>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d004      	beq.n	80012ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fed7 	bl	8001098 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff0c 	bl	800110c <LL_ADC_IsInternalRegulatorEnabled>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d115      	bne.n	8001326 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fef0 	bl	80010e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001304:	4b7f      	ldr	r3, [pc, #508]	@ (8001504 <HAL_ADC_Init+0x270>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	099b      	lsrs	r3, r3, #6
 800130a:	4a7f      	ldr	r2, [pc, #508]	@ (8001508 <HAL_ADC_Init+0x274>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	099b      	lsrs	r3, r3, #6
 8001312:	3301      	adds	r3, #1
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001318:	e002      	b.n	8001320 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3b01      	subs	r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f9      	bne.n	800131a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff feee 	bl	800110c <LL_ADC_IsInternalRegulatorEnabled>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10d      	bne.n	8001352 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800133a:	f043 0210 	orr.w	r2, r3, #16
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001346:	f043 0201 	orr.w	r2, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff62 	bl	8001220 <LL_ADC_REG_IsConversionOngoing>
 800135c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	2b00      	cmp	r3, #0
 8001368:	f040 80bf 	bne.w	80014ea <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	2b00      	cmp	r3, #0
 8001370:	f040 80bb 	bne.w	80014ea <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001378:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800137c:	f043 0202 	orr.w	r2, r3, #2
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fefb 	bl	8001184 <LL_ADC_IsEnabled>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d10b      	bne.n	80013ac <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001394:	485d      	ldr	r0, [pc, #372]	@ (800150c <HAL_ADC_Init+0x278>)
 8001396:	f7ff fef5 	bl	8001184 <LL_ADC_IsEnabled>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d105      	bne.n	80013ac <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	4619      	mov	r1, r3
 80013a6:	485a      	ldr	r0, [pc, #360]	@ (8001510 <HAL_ADC_Init+0x27c>)
 80013a8:	f7ff fd5e 	bl	8000e68 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7e5b      	ldrb	r3, [r3, #25]
 80013b0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013b6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80013bc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80013c2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d106      	bne.n	80013e8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013de:	3b01      	subs	r3, #1
 80013e0:	045b      	lsls	r3, r3, #17
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d009      	beq.n	8001404 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013fc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	4b42      	ldr	r3, [pc, #264]	@ (8001514 <HAL_ADC_Init+0x280>)
 800140c:	4013      	ands	r3, r2
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	69b9      	ldr	r1, [r7, #24]
 8001414:	430b      	orrs	r3, r1
 8001416:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff26 	bl	800126e <LL_ADC_INJ_IsConversionOngoing>
 8001422:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d13d      	bne.n	80014a6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d13a      	bne.n	80014a6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001434:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800143c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800144c:	f023 0302 	bic.w	r3, r3, #2
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	69b9      	ldr	r1, [r7, #24]
 8001456:	430b      	orrs	r3, r1
 8001458:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001460:	2b01      	cmp	r3, #1
 8001462:	d118      	bne.n	8001496 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800146e:	f023 0304 	bic.w	r3, r3, #4
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800147a:	4311      	orrs	r1, r2
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001480:	4311      	orrs	r1, r2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001486:	430a      	orrs	r2, r1
 8001488:	431a      	orrs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	e007      	b.n	80014a6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	691a      	ldr	r2, [r3, #16]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0201 	bic.w	r2, r2, #1
 80014a4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d10c      	bne.n	80014c8 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b4:	f023 010f 	bic.w	r1, r3, #15
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	1e5a      	subs	r2, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80014c6:	e007      	b.n	80014d8 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 020f 	bic.w	r2, r2, #15
 80014d6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014dc:	f023 0303 	bic.w	r3, r3, #3
 80014e0:	f043 0201 	orr.w	r2, r3, #1
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80014e8:	e007      	b.n	80014fa <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ee:	f043 0210 	orr.w	r2, r3, #16
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3720      	adds	r7, #32
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000000 	.word	0x20000000
 8001508:	053e2d63 	.word	0x053e2d63
 800150c:	50040000 	.word	0x50040000
 8001510:	50040300 	.word	0x50040300
 8001514:	fff0c007 	.word	0xfff0c007

08001518 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fe7b 	bl	8001220 <LL_ADC_REG_IsConversionOngoing>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d14f      	bne.n	80015d0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001536:	2b01      	cmp	r3, #1
 8001538:	d101      	bne.n	800153e <HAL_ADC_Start+0x26>
 800153a:	2302      	movs	r3, #2
 800153c:	e04b      	b.n	80015d6 <HAL_ADC_Start+0xbe>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 fdb6 	bl	80020b8 <ADC_Enable>
 800154c:	4603      	mov	r3, r0
 800154e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d137      	bne.n	80015c6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800155a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800155e:	f023 0301 	bic.w	r3, r3, #1
 8001562:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800156e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001576:	d106      	bne.n	8001586 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157c:	f023 0206 	bic.w	r2, r3, #6
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	659a      	str	r2, [r3, #88]	@ 0x58
 8001584:	e002      	b.n	800158c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	221c      	movs	r2, #28
 8001592:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d007      	beq.n	80015ba <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fe06 	bl	80011d0 <LL_ADC_REG_StartConversion>
 80015c4:	e006      	b.n	80015d4 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80015ce:	e001      	b.n	80015d4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015d0:	2302      	movs	r3, #2
 80015d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b084      	sub	sp, #16
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d101      	bne.n	80015f4 <HAL_ADC_Stop+0x16>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e023      	b.n	800163c <HAL_ADC_Stop+0x5e>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80015fc:	2103      	movs	r1, #3
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 fc9e 	bl	8001f40 <ADC_ConversionStop>
 8001604:	4603      	mov	r3, r0
 8001606:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d111      	bne.n	8001632 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 fdd8 	bl	80021c4 <ADC_Disable>
 8001614:	4603      	mov	r3, r0
 8001616:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d109      	bne.n	8001632 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001622:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	f043 0201 	orr.w	r2, r3, #1
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	2b08      	cmp	r3, #8
 8001654:	d102      	bne.n	800165c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001656:	2308      	movs	r3, #8
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e010      	b.n	800167e <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d007      	beq.n	800167a <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800166e:	f043 0220 	orr.w	r2, r3, #32
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e06f      	b.n	800175a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800167a:	2304      	movs	r3, #4
 800167c:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800167e:	f7ff fbe7 	bl	8000e50 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001684:	e021      	b.n	80016ca <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800168c:	d01d      	beq.n	80016ca <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800168e:	f7ff fbdf 	bl	8000e50 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d302      	bcc.n	80016a4 <HAL_ADC_PollForConversion+0x60>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d112      	bne.n	80016ca <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10b      	bne.n	80016ca <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016b6:	f043 0204 	orr.w	r2, r3, #4
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e047      	b.n	800175a <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0d6      	beq.n	8001686 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fc46 	bl	8000f7a <LL_ADC_REG_IsTriggerSourceSWStart>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d01c      	beq.n	800172e <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7e5b      	ldrb	r3, [r3, #25]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d118      	bne.n	800172e <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b08      	cmp	r3, #8
 8001708:	d111      	bne.n	800172e <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800170e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800171a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d105      	bne.n	800172e <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001726:	f043 0201 	orr.w	r2, r3, #1
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	2b08      	cmp	r3, #8
 800173a:	d104      	bne.n	8001746 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2208      	movs	r2, #8
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	e008      	b.n	8001758 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d103      	bne.n	8001758 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	220c      	movs	r2, #12
 8001756:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b0b6      	sub	sp, #216	@ 0xd8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <HAL_ADC_ConfigChannel+0x22>
 800179a:	2302      	movs	r3, #2
 800179c:	e3bb      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x79a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fd38 	bl	8001220 <LL_ADC_REG_IsConversionOngoing>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f040 83a0 	bne.w	8001ef8 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b05      	cmp	r3, #5
 80017c6:	d824      	bhi.n	8001812 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	3b02      	subs	r3, #2
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d81b      	bhi.n	800180a <HAL_ADC_ConfigChannel+0x8e>
 80017d2:	a201      	add	r2, pc, #4	@ (adr r2, 80017d8 <HAL_ADC_ConfigChannel+0x5c>)
 80017d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d8:	080017e9 	.word	0x080017e9
 80017dc:	080017f1 	.word	0x080017f1
 80017e0:	080017f9 	.word	0x080017f9
 80017e4:	08001801 	.word	0x08001801
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80017e8:	230c      	movs	r3, #12
 80017ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017ee:	e010      	b.n	8001812 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80017f0:	2312      	movs	r3, #18
 80017f2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017f6:	e00c      	b.n	8001812 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80017f8:	2318      	movs	r3, #24
 80017fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017fe:	e008      	b.n	8001812 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001800:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001804:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001808:	e003      	b.n	8001812 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800180a:	2306      	movs	r3, #6
 800180c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001810:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001820:	f7ff fbbe 	bl	8000fa0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fcf9 	bl	8001220 <LL_ADC_REG_IsConversionOngoing>
 800182e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fd19 	bl	800126e <LL_ADC_INJ_IsConversionOngoing>
 800183c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001840:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001844:	2b00      	cmp	r3, #0
 8001846:	f040 81a4 	bne.w	8001b92 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800184a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800184e:	2b00      	cmp	r3, #0
 8001850:	f040 819f 	bne.w	8001b92 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	6819      	ldr	r1, [r3, #0]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	461a      	mov	r2, r3
 8001862:	f7ff fbc9 	bl	8000ff8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	08db      	lsrs	r3, r3, #3
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	2b04      	cmp	r3, #4
 8001886:	d00a      	beq.n	800189e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6818      	ldr	r0, [r3, #0]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	6919      	ldr	r1, [r3, #16]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001898:	f7ff fb1a 	bl	8000ed0 <LL_ADC_SetOffset>
 800189c:	e179      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fb37 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d10a      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x14e>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fb2c 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 80018c0:	4603      	mov	r3, r0
 80018c2:	0e9b      	lsrs	r3, r3, #26
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	e01e      	b.n	8001908 <HAL_ADC_ConfigChannel+0x18c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fb21 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80018e0:	fa93 f3a3 	rbit	r3, r3
 80018e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80018ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80018f8:	2320      	movs	r3, #32
 80018fa:	e004      	b.n	8001906 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80018fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001910:	2b00      	cmp	r3, #0
 8001912:	d105      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x1a4>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	0e9b      	lsrs	r3, r3, #26
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	e018      	b.n	8001952 <HAL_ADC_ConfigChannel+0x1d6>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001928:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800192c:	fa93 f3a3 	rbit	r3, r3
 8001930:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001934:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001938:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800193c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001944:	2320      	movs	r3, #32
 8001946:	e004      	b.n	8001952 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001948:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800194c:	fab3 f383 	clz	r3, r3
 8001950:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001952:	429a      	cmp	r2, r3
 8001954:	d106      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff faf0 	bl	8000f44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2101      	movs	r1, #1
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fad4 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10a      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x214>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2101      	movs	r1, #1
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fac9 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 8001986:	4603      	mov	r3, r0
 8001988:	0e9b      	lsrs	r3, r3, #26
 800198a:	f003 021f 	and.w	r2, r3, #31
 800198e:	e01e      	b.n	80019ce <HAL_ADC_ConfigChannel+0x252>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2101      	movs	r1, #1
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fabe 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80019ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80019b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80019be:	2320      	movs	r3, #32
 80019c0:	e004      	b.n	80019cc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80019c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019c6:	fab3 f383 	clz	r3, r3
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d105      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x26a>
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	0e9b      	lsrs	r3, r3, #26
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	e018      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x29c>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80019fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80019fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001a02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001a0a:	2320      	movs	r3, #32
 8001a0c:	e004      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001a0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a12:	fab3 f383 	clz	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d106      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2200      	movs	r2, #0
 8001a22:	2101      	movs	r1, #1
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fa8d 	bl	8000f44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2102      	movs	r1, #2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fa71 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10a      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x2da>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2102      	movs	r1, #2
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fa66 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	0e9b      	lsrs	r3, r3, #26
 8001a50:	f003 021f 	and.w	r2, r3, #31
 8001a54:	e01e      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x318>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2102      	movs	r1, #2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fa5b 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a6c:	fa93 f3a3 	rbit	r3, r3
 8001a70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001a84:	2320      	movs	r3, #32
 8001a86:	e004      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a8c:	fab3 f383 	clz	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d105      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x330>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	0e9b      	lsrs	r3, r3, #26
 8001aa6:	f003 031f 	and.w	r3, r3, #31
 8001aaa:	e014      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x35a>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ab4:	fa93 f3a3 	rbit	r3, r3
 8001ab8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001aba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001abc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001ac0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001ac8:	2320      	movs	r3, #32
 8001aca:	e004      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001acc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ad0:	fab3 f383 	clz	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d106      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fa2e 	bl	8000f44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2103      	movs	r1, #3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fa12 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10a      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x398>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2103      	movs	r1, #3
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fa07 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	0e9b      	lsrs	r3, r3, #26
 8001b0e:	f003 021f 	and.w	r2, r3, #31
 8001b12:	e017      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x3c8>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2103      	movs	r1, #3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff f9fc 	bl	8000f18 <LL_ADC_GetOffsetChannel>
 8001b20:	4603      	mov	r3, r0
 8001b22:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b2e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001b30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001b36:	2320      	movs	r3, #32
 8001b38:	e003      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001b3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b3c:	fab3 f383 	clz	r3, r3
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d105      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x3e0>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	0e9b      	lsrs	r3, r3, #26
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	e011      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x404>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b64:	fa93 f3a3 	rbit	r3, r3
 8001b68:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001b6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b6c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001b6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001b74:	2320      	movs	r3, #32
 8001b76:	e003      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001b78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b7a:	fab3 f383 	clz	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d106      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2103      	movs	r1, #3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff f9d9 	bl	8000f44 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff faf4 	bl	8001184 <LL_ADC_IsEnabled>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 8140 	bne.w	8001e24 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6819      	ldr	r1, [r3, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	f7ff fa4d 	bl	8001050 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	4a8f      	ldr	r2, [pc, #572]	@ (8001df8 <HAL_ADC_ConfigChannel+0x67c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	f040 8131 	bne.w	8001e24 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10b      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x46e>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	0e9b      	lsrs	r3, r3, #26
 8001bd8:	3301      	adds	r3, #1
 8001bda:	f003 031f 	and.w	r3, r3, #31
 8001bde:	2b09      	cmp	r3, #9
 8001be0:	bf94      	ite	ls
 8001be2:	2301      	movls	r3, #1
 8001be4:	2300      	movhi	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	e019      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x4a2>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001bf2:	fa93 f3a3 	rbit	r3, r3
 8001bf6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001bf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001bfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001c02:	2320      	movs	r3, #32
 8001c04:	e003      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c08:	fab3 f383 	clz	r3, r3
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	3301      	adds	r3, #1
 8001c10:	f003 031f 	and.w	r3, r3, #31
 8001c14:	2b09      	cmp	r3, #9
 8001c16:	bf94      	ite	ls
 8001c18:	2301      	movls	r3, #1
 8001c1a:	2300      	movhi	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d079      	beq.n	8001d16 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d107      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x4c2>
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	0e9b      	lsrs	r3, r3, #26
 8001c34:	3301      	adds	r3, #1
 8001c36:	069b      	lsls	r3, r3, #26
 8001c38:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c3c:	e015      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x4ee>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001c4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c4e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001c50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001c56:	2320      	movs	r3, #32
 8001c58:	e003      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001c5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c5c:	fab3 f383 	clz	r3, r3
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	3301      	adds	r3, #1
 8001c64:	069b      	lsls	r3, r3, #26
 8001c66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d109      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x50e>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	0e9b      	lsrs	r3, r3, #26
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	f003 031f 	and.w	r3, r3, #31
 8001c82:	2101      	movs	r1, #1
 8001c84:	fa01 f303 	lsl.w	r3, r1, r3
 8001c88:	e017      	b.n	8001cba <HAL_ADC_ConfigChannel+0x53e>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c92:	fa93 f3a3 	rbit	r3, r3
 8001c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c9a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001c9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001ca2:	2320      	movs	r3, #32
 8001ca4:	e003      	b.n	8001cae <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ca8:	fab3 f383 	clz	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	ea42 0103 	orr.w	r1, r2, r3
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10a      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x564>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	0e9b      	lsrs	r3, r3, #26
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f003 021f 	and.w	r2, r3, #31
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	051b      	lsls	r3, r3, #20
 8001cde:	e018      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x596>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ce8:	fa93 f3a3 	rbit	r3, r3
 8001cec:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001cf8:	2320      	movs	r3, #32
 8001cfa:	e003      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cfe:	fab3 f383 	clz	r3, r3
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	3301      	adds	r3, #1
 8001d06:	f003 021f 	and.w	r2, r3, #31
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4413      	add	r3, r2
 8001d10:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d12:	430b      	orrs	r3, r1
 8001d14:	e081      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d107      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x5b6>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	0e9b      	lsrs	r3, r3, #26
 8001d28:	3301      	adds	r3, #1
 8001d2a:	069b      	lsls	r3, r3, #26
 8001d2c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d30:	e015      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x5e2>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001d4a:	2320      	movs	r3, #32
 8001d4c:	e003      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d50:	fab3 f383 	clz	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	3301      	adds	r3, #1
 8001d58:	069b      	lsls	r3, r3, #26
 8001d5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d109      	bne.n	8001d7e <HAL_ADC_ConfigChannel+0x602>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	0e9b      	lsrs	r3, r3, #26
 8001d70:	3301      	adds	r3, #1
 8001d72:	f003 031f 	and.w	r3, r3, #31
 8001d76:	2101      	movs	r1, #1
 8001d78:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7c:	e017      	b.n	8001dae <HAL_ADC_ConfigChannel+0x632>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	61bb      	str	r3, [r7, #24]
  return result;
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001d96:	2320      	movs	r3, #32
 8001d98:	e003      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	fab3 f383 	clz	r3, r3
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	3301      	adds	r3, #1
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	2101      	movs	r1, #1
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	ea42 0103 	orr.w	r1, r2, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10d      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x65e>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	0e9b      	lsrs	r3, r3, #26
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f003 021f 	and.w	r2, r3, #31
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	3b1e      	subs	r3, #30
 8001dd2:	051b      	lsls	r3, r3, #20
 8001dd4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dd8:	e01e      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x69c>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	60fb      	str	r3, [r7, #12]
  return result;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d104      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001df2:	2320      	movs	r3, #32
 8001df4:	e006      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x688>
 8001df6:	bf00      	nop
 8001df8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	3301      	adds	r3, #1
 8001e06:	f003 021f 	and.w	r2, r3, #31
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	3b1e      	subs	r3, #30
 8001e12:	051b      	lsls	r3, r3, #20
 8001e14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e18:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f7ff f8ea 	bl	8000ff8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b3d      	ldr	r3, [pc, #244]	@ (8001f20 <HAL_ADC_ConfigChannel+0x7a4>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d06c      	beq.n	8001f0a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e30:	483c      	ldr	r0, [pc, #240]	@ (8001f24 <HAL_ADC_ConfigChannel+0x7a8>)
 8001e32:	f7ff f83f 	bl	8000eb4 <LL_ADC_GetCommonPathInternalCh>
 8001e36:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a3a      	ldr	r2, [pc, #232]	@ (8001f28 <HAL_ADC_ConfigChannel+0x7ac>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d127      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d121      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a35      	ldr	r2, [pc, #212]	@ (8001f2c <HAL_ADC_ConfigChannel+0x7b0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d157      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e5e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e62:	4619      	mov	r1, r3
 8001e64:	482f      	ldr	r0, [pc, #188]	@ (8001f24 <HAL_ADC_ConfigChannel+0x7a8>)
 8001e66:	f7ff f812 	bl	8000e8e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e6a:	4b31      	ldr	r3, [pc, #196]	@ (8001f30 <HAL_ADC_ConfigChannel+0x7b4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	099b      	lsrs	r3, r3, #6
 8001e70:	4a30      	ldr	r2, [pc, #192]	@ (8001f34 <HAL_ADC_ConfigChannel+0x7b8>)
 8001e72:	fba2 2303 	umull	r2, r3, r2, r3
 8001e76:	099b      	lsrs	r3, r3, #6
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e84:	e002      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f9      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e92:	e03a      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a27      	ldr	r2, [pc, #156]	@ (8001f38 <HAL_ADC_ConfigChannel+0x7bc>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d113      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ea2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10d      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1f      	ldr	r2, [pc, #124]	@ (8001f2c <HAL_ADC_ConfigChannel+0x7b0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d12a      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001eb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4819      	ldr	r0, [pc, #100]	@ (8001f24 <HAL_ADC_ConfigChannel+0x7a8>)
 8001ec0:	f7fe ffe5 	bl	8000e8e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ec4:	e021      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1c      	ldr	r2, [pc, #112]	@ (8001f3c <HAL_ADC_ConfigChannel+0x7c0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d11c      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ed0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ed4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d116      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a12      	ldr	r2, [pc, #72]	@ (8001f2c <HAL_ADC_ConfigChannel+0x7b0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d111      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ee6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001eea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001eee:	4619      	mov	r1, r3
 8001ef0:	480c      	ldr	r0, [pc, #48]	@ (8001f24 <HAL_ADC_ConfigChannel+0x7a8>)
 8001ef2:	f7fe ffcc 	bl	8000e8e <LL_ADC_SetCommonPathInternalCh>
 8001ef6:	e008      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001efc:	f043 0220 	orr.w	r2, r3, #32
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f12:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	37d8      	adds	r7, #216	@ 0xd8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	80080000 	.word	0x80080000
 8001f24:	50040300 	.word	0x50040300
 8001f28:	c7520000 	.word	0xc7520000
 8001f2c:	50040000 	.word	0x50040000
 8001f30:	20000000 	.word	0x20000000
 8001f34:	053e2d63 	.word	0x053e2d63
 8001f38:	cb840000 	.word	0xcb840000
 8001f3c:	80000001 	.word	0x80000001

08001f40 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff f962 	bl	8001220 <LL_ADC_REG_IsConversionOngoing>
 8001f5c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff f983 	bl	800126e <LL_ADC_INJ_IsConversionOngoing>
 8001f68:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d103      	bne.n	8001f78 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 8098 	beq.w	80020a8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d02a      	beq.n	8001fdc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	7e5b      	ldrb	r3, [r3, #25]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d126      	bne.n	8001fdc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	7e1b      	ldrb	r3, [r3, #24]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d122      	bne.n	8001fdc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001f96:	2301      	movs	r3, #1
 8001f98:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001f9a:	e014      	b.n	8001fc6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	4a45      	ldr	r2, [pc, #276]	@ (80020b4 <ADC_ConversionStop+0x174>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d90d      	bls.n	8001fc0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa8:	f043 0210 	orr.w	r2, r3, #16
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb4:	f043 0201 	orr.w	r2, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e074      	b.n	80020aa <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd0:	2b40      	cmp	r3, #64	@ 0x40
 8001fd2:	d1e3      	bne.n	8001f9c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2240      	movs	r2, #64	@ 0x40
 8001fda:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d014      	beq.n	800200c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff f91a 	bl	8001220 <LL_ADC_REG_IsConversionOngoing>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00c      	beq.n	800200c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff f8d7 	bl	80011aa <LL_ADC_IsDisableOngoing>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d104      	bne.n	800200c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff f8f6 	bl	80011f8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d014      	beq.n	800203c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff f929 	bl	800126e <LL_ADC_INJ_IsConversionOngoing>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00c      	beq.n	800203c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff f8bf 	bl	80011aa <LL_ADC_IsDisableOngoing>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d104      	bne.n	800203c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff f905 	bl	8001246 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2b02      	cmp	r3, #2
 8002040:	d005      	beq.n	800204e <ADC_ConversionStop+0x10e>
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	2b03      	cmp	r3, #3
 8002046:	d105      	bne.n	8002054 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002048:	230c      	movs	r3, #12
 800204a:	617b      	str	r3, [r7, #20]
        break;
 800204c:	e005      	b.n	800205a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800204e:	2308      	movs	r3, #8
 8002050:	617b      	str	r3, [r7, #20]
        break;
 8002052:	e002      	b.n	800205a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002054:	2304      	movs	r3, #4
 8002056:	617b      	str	r3, [r7, #20]
        break;
 8002058:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800205a:	f7fe fef9 	bl	8000e50 <HAL_GetTick>
 800205e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002060:	e01b      	b.n	800209a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002062:	f7fe fef5 	bl	8000e50 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b05      	cmp	r3, #5
 800206e:	d914      	bls.n	800209a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	4013      	ands	r3, r2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00d      	beq.n	800209a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002082:	f043 0210 	orr.w	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208e:	f043 0201 	orr.w	r2, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e007      	b.n	80020aa <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1dc      	bne.n	8002062 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3720      	adds	r7, #32
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	a33fffff 	.word	0xa33fffff

080020b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff f85b 	bl	8001184 <LL_ADC_IsEnabled>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d169      	bne.n	80021a8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	4b36      	ldr	r3, [pc, #216]	@ (80021b4 <ADC_Enable+0xfc>)
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00d      	beq.n	80020fe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e6:	f043 0210 	orr.w	r2, r3, #16
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f2:	f043 0201 	orr.w	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e055      	b.n	80021aa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff f816 	bl	8001134 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002108:	482b      	ldr	r0, [pc, #172]	@ (80021b8 <ADC_Enable+0x100>)
 800210a:	f7fe fed3 	bl	8000eb4 <LL_ADC_GetCommonPathInternalCh>
 800210e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002110:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002114:	2b00      	cmp	r3, #0
 8002116:	d013      	beq.n	8002140 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002118:	4b28      	ldr	r3, [pc, #160]	@ (80021bc <ADC_Enable+0x104>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	099b      	lsrs	r3, r3, #6
 800211e:	4a28      	ldr	r2, [pc, #160]	@ (80021c0 <ADC_Enable+0x108>)
 8002120:	fba2 2303 	umull	r2, r3, r2, r3
 8002124:	099b      	lsrs	r3, r3, #6
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	4613      	mov	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002132:	e002      	b.n	800213a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	3b01      	subs	r3, #1
 8002138:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f9      	bne.n	8002134 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002140:	f7fe fe86 	bl	8000e50 <HAL_GetTick>
 8002144:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002146:	e028      	b.n	800219a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff f819 	bl	8001184 <LL_ADC_IsEnabled>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d104      	bne.n	8002162 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe ffe9 	bl	8001134 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002162:	f7fe fe75 	bl	8000e50 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d914      	bls.n	800219a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b01      	cmp	r3, #1
 800217c:	d00d      	beq.n	800219a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002182:	f043 0210 	orr.w	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218e:	f043 0201 	orr.w	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e007      	b.n	80021aa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d1cf      	bne.n	8002148 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	8000003f 	.word	0x8000003f
 80021b8:	50040300 	.word	0x50040300
 80021bc:	20000000 	.word	0x20000000
 80021c0:	053e2d63 	.word	0x053e2d63

080021c4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe ffea 	bl	80011aa <LL_ADC_IsDisableOngoing>
 80021d6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe ffd1 	bl	8001184 <LL_ADC_IsEnabled>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d047      	beq.n	8002278 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d144      	bne.n	8002278 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 030d 	and.w	r3, r3, #13
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d10c      	bne.n	8002216 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe ffab 	bl	800115c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2203      	movs	r2, #3
 800220c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800220e:	f7fe fe1f 	bl	8000e50 <HAL_GetTick>
 8002212:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002214:	e029      	b.n	800226a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221a:	f043 0210 	orr.w	r2, r3, #16
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002226:	f043 0201 	orr.w	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e023      	b.n	800227a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002232:	f7fe fe0d 	bl	8000e50 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d914      	bls.n	800226a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00d      	beq.n	800226a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002252:	f043 0210 	orr.w	r2, r3, #16
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225e:	f043 0201 	orr.w	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e007      	b.n	800227a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1dc      	bne.n	8002232 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002294:	4b0c      	ldr	r3, [pc, #48]	@ (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022a0:	4013      	ands	r3, r2
 80022a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b6:	4a04      	ldr	r2, [pc, #16]	@ (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	60d3      	str	r3, [r2, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d0:	4b04      	ldr	r3, [pc, #16]	@ (80022e4 <__NVIC_GetPriorityGrouping+0x18>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	f003 0307 	and.w	r3, r3, #7
}
 80022da:	4618      	mov	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	db0b      	blt.n	8002312 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	f003 021f 	and.w	r2, r3, #31
 8002300:	4907      	ldr	r1, [pc, #28]	@ (8002320 <__NVIC_EnableIRQ+0x38>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	2001      	movs	r0, #1
 800230a:	fa00 f202 	lsl.w	r2, r0, r2
 800230e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000e100 	.word	0xe000e100

08002324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	2b00      	cmp	r3, #0
 8002336:	db0a      	blt.n	800234e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	490c      	ldr	r1, [pc, #48]	@ (8002370 <__NVIC_SetPriority+0x4c>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	0112      	lsls	r2, r2, #4
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	440b      	add	r3, r1
 8002348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800234c:	e00a      	b.n	8002364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4908      	ldr	r1, [pc, #32]	@ (8002374 <__NVIC_SetPriority+0x50>)
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3b04      	subs	r3, #4
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	440b      	add	r3, r1
 8002362:	761a      	strb	r2, [r3, #24]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000e100 	.word	0xe000e100
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	@ 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f1c3 0307 	rsb	r3, r3, #7
 8002392:	2b04      	cmp	r3, #4
 8002394:	bf28      	it	cs
 8002396:	2304      	movcs	r3, #4
 8002398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3304      	adds	r3, #4
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d902      	bls.n	80023a8 <NVIC_EncodePriority+0x30>
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3b03      	subs	r3, #3
 80023a6:	e000      	b.n	80023aa <NVIC_EncodePriority+0x32>
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	401a      	ands	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	4313      	orrs	r3, r2
         );
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	@ 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023f0:	d301      	bcc.n	80023f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00f      	b.n	8002416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002420 <SysTick_Config+0x40>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fe:	210f      	movs	r1, #15
 8002400:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002404:	f7ff ff8e 	bl	8002324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002408:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <SysTick_Config+0x40>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240e:	4b04      	ldr	r3, [pc, #16]	@ (8002420 <SysTick_Config+0x40>)
 8002410:	2207      	movs	r2, #7
 8002412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	e000e010 	.word	0xe000e010

08002424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff29 	bl	8002284 <__NVIC_SetPriorityGrouping>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800244c:	f7ff ff3e 	bl	80022cc <__NVIC_GetPriorityGrouping>
 8002450:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	6978      	ldr	r0, [r7, #20]
 8002458:	f7ff ff8e 	bl	8002378 <NVIC_EncodePriority>
 800245c:	4602      	mov	r2, r0
 800245e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff5d 	bl	8002324 <__NVIC_SetPriority>
}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800247c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff31 	bl	80022e8 <__NVIC_EnableIRQ>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ffa2 	bl	80023e0 <SysTick_Config>
 800249c:	4603      	mov	r3, r0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b085      	sub	sp, #20
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d008      	beq.n	80024d0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2204      	movs	r2, #4
 80024c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e022      	b.n	8002516 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 020e 	bic.w	r2, r2, #14
 80024de:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0201 	bic.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f4:	f003 021c 	and.w	r2, r3, #28
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fc:	2101      	movs	r1, #1
 80024fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002502:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002514:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d005      	beq.n	8002546 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2204      	movs	r2, #4
 800253e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
 8002544:	e029      	b.n	800259a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 020e 	bic.w	r2, r2, #14
 8002554:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0201 	bic.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256a:	f003 021c 	and.w	r2, r3, #28
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	2101      	movs	r1, #1
 8002574:	fa01 f202 	lsl.w	r2, r1, r2
 8002578:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	4798      	blx	r3
    }
  }
  return status;
 800259a:	7bfb      	ldrb	r3, [r7, #15]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b2:	e148      	b.n	8002846 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	2101      	movs	r1, #1
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	fa01 f303 	lsl.w	r3, r1, r3
 80025c0:	4013      	ands	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 813a 	beq.w	8002840 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d005      	beq.n	80025e4 <HAL_GPIO_Init+0x40>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d130      	bne.n	8002646 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800261a:	2201      	movs	r2, #1
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	f003 0201 	and.w	r2, r3, #1
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b03      	cmp	r3, #3
 8002650:	d017      	beq.n	8002682 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	2203      	movs	r2, #3
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d123      	bne.n	80026d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	08da      	lsrs	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3208      	adds	r2, #8
 8002696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800269a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	220f      	movs	r2, #15
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	08da      	lsrs	r2, r3, #3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3208      	adds	r2, #8
 80026d0:	6939      	ldr	r1, [r7, #16]
 80026d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	2203      	movs	r2, #3
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4013      	ands	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0203 	and.w	r2, r3, #3
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 8094 	beq.w	8002840 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002718:	4b52      	ldr	r3, [pc, #328]	@ (8002864 <HAL_GPIO_Init+0x2c0>)
 800271a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800271c:	4a51      	ldr	r2, [pc, #324]	@ (8002864 <HAL_GPIO_Init+0x2c0>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6613      	str	r3, [r2, #96]	@ 0x60
 8002724:	4b4f      	ldr	r3, [pc, #316]	@ (8002864 <HAL_GPIO_Init+0x2c0>)
 8002726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002730:	4a4d      	ldr	r2, [pc, #308]	@ (8002868 <HAL_GPIO_Init+0x2c4>)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	3302      	adds	r3, #2
 8002738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	220f      	movs	r2, #15
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800275a:	d00d      	beq.n	8002778 <HAL_GPIO_Init+0x1d4>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a43      	ldr	r2, [pc, #268]	@ (800286c <HAL_GPIO_Init+0x2c8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d007      	beq.n	8002774 <HAL_GPIO_Init+0x1d0>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a42      	ldr	r2, [pc, #264]	@ (8002870 <HAL_GPIO_Init+0x2cc>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d101      	bne.n	8002770 <HAL_GPIO_Init+0x1cc>
 800276c:	2302      	movs	r3, #2
 800276e:	e004      	b.n	800277a <HAL_GPIO_Init+0x1d6>
 8002770:	2307      	movs	r3, #7
 8002772:	e002      	b.n	800277a <HAL_GPIO_Init+0x1d6>
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <HAL_GPIO_Init+0x1d6>
 8002778:	2300      	movs	r3, #0
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	f002 0203 	and.w	r2, r2, #3
 8002780:	0092      	lsls	r2, r2, #2
 8002782:	4093      	lsls	r3, r2
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800278a:	4937      	ldr	r1, [pc, #220]	@ (8002868 <HAL_GPIO_Init+0x2c4>)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	089b      	lsrs	r3, r3, #2
 8002790:	3302      	adds	r3, #2
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002798:	4b36      	ldr	r3, [pc, #216]	@ (8002874 <HAL_GPIO_Init+0x2d0>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	43db      	mvns	r3, r3
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002874 <HAL_GPIO_Init+0x2d0>)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002874 <HAL_GPIO_Init+0x2d0>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	43db      	mvns	r3, r3
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4013      	ands	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027e6:	4a23      	ldr	r2, [pc, #140]	@ (8002874 <HAL_GPIO_Init+0x2d0>)
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027ec:	4b21      	ldr	r3, [pc, #132]	@ (8002874 <HAL_GPIO_Init+0x2d0>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4013      	ands	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002810:	4a18      	ldr	r2, [pc, #96]	@ (8002874 <HAL_GPIO_Init+0x2d0>)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002816:	4b17      	ldr	r3, [pc, #92]	@ (8002874 <HAL_GPIO_Init+0x2d0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	43db      	mvns	r3, r3
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4013      	ands	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800283a:	4a0e      	ldr	r2, [pc, #56]	@ (8002874 <HAL_GPIO_Init+0x2d0>)
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	3301      	adds	r3, #1
 8002844:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	f47f aeaf 	bne.w	80025b4 <HAL_GPIO_Init+0x10>
  }
}
 8002856:	bf00      	nop
 8002858:	bf00      	nop
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	40021000 	.word	0x40021000
 8002868:	40010000 	.word	0x40010000
 800286c:	48000400 	.word	0x48000400
 8002870:	48000800 	.word	0x48000800
 8002874:	40010400 	.word	0x40010400

08002878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	807b      	strh	r3, [r7, #2]
 8002884:	4613      	mov	r3, r2
 8002886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002888:	787b      	ldrb	r3, [r7, #1]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800288e:	887a      	ldrh	r2, [r7, #2]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002894:	e002      	b.n	800289c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002896:	887a      	ldrh	r2, [r7, #2]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028b2:	4b08      	ldr	r3, [pc, #32]	@ (80028d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d006      	beq.n	80028cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028be:	4a05      	ldr	r2, [pc, #20]	@ (80028d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe f84e 	bl	8000968 <HAL_GPIO_EXTI_Callback>
  }
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40010400 	.word	0x40010400

080028d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028dc:	4b04      	ldr	r3, [pc, #16]	@ (80028f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40007000 	.word	0x40007000

080028f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002902:	d130      	bne.n	8002966 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002904:	4b23      	ldr	r3, [pc, #140]	@ (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800290c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002910:	d038      	beq.n	8002984 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002912:	4b20      	ldr	r3, [pc, #128]	@ (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800291a:	4a1e      	ldr	r2, [pc, #120]	@ (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800291c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002920:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002922:	4b1d      	ldr	r3, [pc, #116]	@ (8002998 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2232      	movs	r2, #50	@ 0x32
 8002928:	fb02 f303 	mul.w	r3, r2, r3
 800292c:	4a1b      	ldr	r2, [pc, #108]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800292e:	fba2 2303 	umull	r2, r3, r2, r3
 8002932:	0c9b      	lsrs	r3, r3, #18
 8002934:	3301      	adds	r3, #1
 8002936:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002938:	e002      	b.n	8002940 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	3b01      	subs	r3, #1
 800293e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002940:	4b14      	ldr	r3, [pc, #80]	@ (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002948:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800294c:	d102      	bne.n	8002954 <HAL_PWREx_ControlVoltageScaling+0x60>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f2      	bne.n	800293a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002954:	4b0f      	ldr	r3, [pc, #60]	@ (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800295c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002960:	d110      	bne.n	8002984 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e00f      	b.n	8002986 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002966:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800296e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002972:	d007      	beq.n	8002984 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002974:	4b07      	ldr	r3, [pc, #28]	@ (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800297c:	4a05      	ldr	r2, [pc, #20]	@ (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002982:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40007000 	.word	0x40007000
 8002998:	20000000 	.word	0x20000000
 800299c:	431bde83 	.word	0x431bde83

080029a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d102      	bne.n	80029b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	f000 bc02 	b.w	80031b8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029b4:	4b96      	ldr	r3, [pc, #600]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029be:	4b94      	ldr	r3, [pc, #592]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 80e4 	beq.w	8002b9e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d007      	beq.n	80029ec <HAL_RCC_OscConfig+0x4c>
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	2b0c      	cmp	r3, #12
 80029e0:	f040 808b 	bne.w	8002afa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	f040 8087 	bne.w	8002afa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029ec:	4b88      	ldr	r3, [pc, #544]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_OscConfig+0x64>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e3d9      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a1a      	ldr	r2, [r3, #32]
 8002a08:	4b81      	ldr	r3, [pc, #516]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d004      	beq.n	8002a1e <HAL_RCC_OscConfig+0x7e>
 8002a14:	4b7e      	ldr	r3, [pc, #504]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a1c:	e005      	b.n	8002a2a <HAL_RCC_OscConfig+0x8a>
 8002a1e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d223      	bcs.n	8002a76 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fd8c 	bl	8003550 <RCC_SetFlashLatencyFromMSIRange>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e3ba      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a42:	4b73      	ldr	r3, [pc, #460]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a72      	ldr	r2, [pc, #456]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a48:	f043 0308 	orr.w	r3, r3, #8
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	4b70      	ldr	r3, [pc, #448]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	496d      	ldr	r1, [pc, #436]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a60:	4b6b      	ldr	r3, [pc, #428]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	021b      	lsls	r3, r3, #8
 8002a6e:	4968      	ldr	r1, [pc, #416]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
 8002a74:	e025      	b.n	8002ac2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a76:	4b66      	ldr	r3, [pc, #408]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a65      	ldr	r2, [pc, #404]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a7c:	f043 0308 	orr.w	r3, r3, #8
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b63      	ldr	r3, [pc, #396]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	4960      	ldr	r1, [pc, #384]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a94:	4b5e      	ldr	r3, [pc, #376]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	495b      	ldr	r1, [pc, #364]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fd4c 	bl	8003550 <RCC_SetFlashLatencyFromMSIRange>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e37a      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ac2:	f000 fc81 	bl	80033c8 <HAL_RCC_GetSysClockFreq>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	4b51      	ldr	r3, [pc, #324]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	4950      	ldr	r1, [pc, #320]	@ (8002c14 <HAL_RCC_OscConfig+0x274>)
 8002ad4:	5ccb      	ldrb	r3, [r1, r3]
 8002ad6:	f003 031f 	and.w	r3, r3, #31
 8002ada:	fa22 f303 	lsr.w	r3, r2, r3
 8002ade:	4a4e      	ldr	r2, [pc, #312]	@ (8002c18 <HAL_RCC_OscConfig+0x278>)
 8002ae0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ae2:	4b4e      	ldr	r3, [pc, #312]	@ (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe f962 	bl	8000db0 <HAL_InitTick>
 8002aec:	4603      	mov	r3, r0
 8002aee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d052      	beq.n	8002b9c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	e35e      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d032      	beq.n	8002b68 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b02:	4b43      	ldr	r3, [pc, #268]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a42      	ldr	r2, [pc, #264]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b0e:	f7fe f99f 	bl	8000e50 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b16:	f7fe f99b 	bl	8000e50 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e347      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b28:	4b39      	ldr	r3, [pc, #228]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0f0      	beq.n	8002b16 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b34:	4b36      	ldr	r3, [pc, #216]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a35      	ldr	r2, [pc, #212]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b3a:	f043 0308 	orr.w	r3, r3, #8
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	4b33      	ldr	r3, [pc, #204]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4930      	ldr	r1, [pc, #192]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b52:	4b2f      	ldr	r3, [pc, #188]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	492b      	ldr	r1, [pc, #172]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	604b      	str	r3, [r1, #4]
 8002b66:	e01a      	b.n	8002b9e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b68:	4b29      	ldr	r3, [pc, #164]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a28      	ldr	r2, [pc, #160]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b74:	f7fe f96c 	bl	8000e50 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b7c:	f7fe f968 	bl	8000e50 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e314      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b8e:	4b20      	ldr	r3, [pc, #128]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x1dc>
 8002b9a:	e000      	b.n	8002b9e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d073      	beq.n	8002c92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_OscConfig+0x21c>
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	2b0c      	cmp	r3, #12
 8002bb4:	d10e      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d10b      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbc:	4b14      	ldr	r3, [pc, #80]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d063      	beq.n	8002c90 <HAL_RCC_OscConfig+0x2f0>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d15f      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e2f1      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bdc:	d106      	bne.n	8002bec <HAL_RCC_OscConfig+0x24c>
 8002bde:	4b0c      	ldr	r3, [pc, #48]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a0b      	ldr	r2, [pc, #44]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e025      	b.n	8002c38 <HAL_RCC_OscConfig+0x298>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bf4:	d114      	bne.n	8002c20 <HAL_RCC_OscConfig+0x280>
 8002bf6:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a05      	ldr	r2, [pc, #20]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002bfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b03      	ldr	r3, [pc, #12]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a02      	ldr	r2, [pc, #8]	@ (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e013      	b.n	8002c38 <HAL_RCC_OscConfig+0x298>
 8002c10:	40021000 	.word	0x40021000
 8002c14:	08005a5c 	.word	0x08005a5c
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	20000004 	.word	0x20000004
 8002c20:	4ba0      	ldr	r3, [pc, #640]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a9f      	ldr	r2, [pc, #636]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	4b9d      	ldr	r3, [pc, #628]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a9c      	ldr	r2, [pc, #624]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d013      	beq.n	8002c68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7fe f906 	bl	8000e50 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c48:	f7fe f902 	bl	8000e50 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	@ 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e2ae      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c5a:	4b92      	ldr	r3, [pc, #584]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x2a8>
 8002c66:	e014      	b.n	8002c92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe f8f2 	bl	8000e50 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c70:	f7fe f8ee 	bl	8000e50 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	@ 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e29a      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c82:	4b88      	ldr	r3, [pc, #544]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x2d0>
 8002c8e:	e000      	b.n	8002c92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d060      	beq.n	8002d60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d005      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x310>
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2b0c      	cmp	r3, #12
 8002ca8:	d119      	bne.n	8002cde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d116      	bne.n	8002cde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb0:	4b7c      	ldr	r3, [pc, #496]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x328>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e277      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc8:	4b76      	ldr	r3, [pc, #472]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	061b      	lsls	r3, r3, #24
 8002cd6:	4973      	ldr	r1, [pc, #460]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cdc:	e040      	b.n	8002d60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d023      	beq.n	8002d2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce6:	4b6f      	ldr	r3, [pc, #444]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a6e      	ldr	r2, [pc, #440]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7fe f8ad 	bl	8000e50 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfa:	f7fe f8a9 	bl	8000e50 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e255      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d0c:	4b65      	ldr	r3, [pc, #404]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d18:	4b62      	ldr	r3, [pc, #392]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	061b      	lsls	r3, r3, #24
 8002d26:	495f      	ldr	r1, [pc, #380]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]
 8002d2c:	e018      	b.n	8002d60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d2e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a5c      	ldr	r2, [pc, #368]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3a:	f7fe f889 	bl	8000e50 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d42:	f7fe f885 	bl	8000e50 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e231      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d54:	4b53      	ldr	r3, [pc, #332]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1f0      	bne.n	8002d42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d03c      	beq.n	8002de6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01c      	beq.n	8002dae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d74:	4b4b      	ldr	r3, [pc, #300]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d7a:	4a4a      	ldr	r2, [pc, #296]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7fe f864 	bl	8000e50 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d8c:	f7fe f860 	bl	8000e50 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e20c      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d9e:	4b41      	ldr	r3, [pc, #260]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ef      	beq.n	8002d8c <HAL_RCC_OscConfig+0x3ec>
 8002dac:	e01b      	b.n	8002de6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dae:	4b3d      	ldr	r3, [pc, #244]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002db4:	4a3b      	ldr	r2, [pc, #236]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbe:	f7fe f847 	bl	8000e50 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc6:	f7fe f843 	bl	8000e50 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e1ef      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dd8:	4b32      	ldr	r3, [pc, #200]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1ef      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80a6 	beq.w	8002f40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df4:	2300      	movs	r3, #0
 8002df6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002df8:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10d      	bne.n	8002e20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e04:	4b27      	ldr	r3, [pc, #156]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e08:	4a26      	ldr	r2, [pc, #152]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e10:	4b24      	ldr	r3, [pc, #144]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e20:	4b21      	ldr	r3, [pc, #132]	@ (8002ea8 <HAL_RCC_OscConfig+0x508>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d118      	bne.n	8002e5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea8 <HAL_RCC_OscConfig+0x508>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea8 <HAL_RCC_OscConfig+0x508>)
 8002e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e38:	f7fe f80a 	bl	8000e50 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e40:	f7fe f806 	bl	8000e50 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e1b2      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e52:	4b15      	ldr	r3, [pc, #84]	@ (8002ea8 <HAL_RCC_OscConfig+0x508>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d108      	bne.n	8002e78 <HAL_RCC_OscConfig+0x4d8>
 8002e66:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e76:	e029      	b.n	8002ecc <HAL_RCC_OscConfig+0x52c>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b05      	cmp	r3, #5
 8002e7e:	d115      	bne.n	8002eac <HAL_RCC_OscConfig+0x50c>
 8002e80:	4b08      	ldr	r3, [pc, #32]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e86:	4a07      	ldr	r2, [pc, #28]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e88:	f043 0304 	orr.w	r3, r3, #4
 8002e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e90:	4b04      	ldr	r3, [pc, #16]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e96:	4a03      	ldr	r2, [pc, #12]	@ (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ea0:	e014      	b.n	8002ecc <HAL_RCC_OscConfig+0x52c>
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40007000 	.word	0x40007000
 8002eac:	4b9a      	ldr	r3, [pc, #616]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb2:	4a99      	ldr	r2, [pc, #612]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ebc:	4b96      	ldr	r3, [pc, #600]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec2:	4a95      	ldr	r2, [pc, #596]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 8002ec4:	f023 0304 	bic.w	r3, r3, #4
 8002ec8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d016      	beq.n	8002f02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed4:	f7fd ffbc 	bl	8000e50 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eda:	e00a      	b.n	8002ef2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002edc:	f7fd ffb8 	bl	8000e50 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e162      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef2:	4b89      	ldr	r3, [pc, #548]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 8002ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0ed      	beq.n	8002edc <HAL_RCC_OscConfig+0x53c>
 8002f00:	e015      	b.n	8002f2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7fd ffa5 	bl	8000e50 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7fd ffa1 	bl	8000e50 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e14b      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f20:	4b7d      	ldr	r3, [pc, #500]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1ed      	bne.n	8002f0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f2e:	7ffb      	ldrb	r3, [r7, #31]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d105      	bne.n	8002f40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f34:	4b78      	ldr	r3, [pc, #480]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f38:	4a77      	ldr	r2, [pc, #476]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 8002f3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f3e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d03c      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d01c      	beq.n	8002f8e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f54:	4b70      	ldr	r3, [pc, #448]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 8002f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f5a:	4a6f      	ldr	r2, [pc, #444]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f64:	f7fd ff74 	bl	8000e50 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f6c:	f7fd ff70 	bl	8000e50 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e11c      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f7e:	4b66      	ldr	r3, [pc, #408]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 8002f80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0ef      	beq.n	8002f6c <HAL_RCC_OscConfig+0x5cc>
 8002f8c:	e01b      	b.n	8002fc6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f8e:	4b62      	ldr	r3, [pc, #392]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 8002f90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f94:	4a60      	ldr	r2, [pc, #384]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 8002f96:	f023 0301 	bic.w	r3, r3, #1
 8002f9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9e:	f7fd ff57 	bl	8000e50 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fa6:	f7fd ff53 	bl	8000e50 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e0ff      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fb8:	4b57      	ldr	r3, [pc, #348]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 8002fba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1ef      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80f3 	beq.w	80031b6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	f040 80c9 	bne.w	800316c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fda:	4b4f      	ldr	r3, [pc, #316]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f003 0203 	and.w	r2, r3, #3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d12c      	bne.n	8003048 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d123      	bne.n	8003048 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800300a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800300c:	429a      	cmp	r2, r3
 800300e:	d11b      	bne.n	8003048 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800301c:	429a      	cmp	r2, r3
 800301e:	d113      	bne.n	8003048 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302a:	085b      	lsrs	r3, r3, #1
 800302c:	3b01      	subs	r3, #1
 800302e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d109      	bne.n	8003048 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	085b      	lsrs	r3, r3, #1
 8003040:	3b01      	subs	r3, #1
 8003042:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d06b      	beq.n	8003120 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2b0c      	cmp	r3, #12
 800304c:	d062      	beq.n	8003114 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800304e:	4b32      	ldr	r3, [pc, #200]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e0ac      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800305e:	4b2e      	ldr	r3, [pc, #184]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a2d      	ldr	r2, [pc, #180]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 8003064:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003068:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800306a:	f7fd fef1 	bl	8000e50 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003072:	f7fd feed 	bl	8000e50 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e099      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003084:	4b24      	ldr	r3, [pc, #144]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f0      	bne.n	8003072 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003090:	4b21      	ldr	r3, [pc, #132]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	4b21      	ldr	r3, [pc, #132]	@ (800311c <HAL_RCC_OscConfig+0x77c>)
 8003096:	4013      	ands	r3, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80030a0:	3a01      	subs	r2, #1
 80030a2:	0112      	lsls	r2, r2, #4
 80030a4:	4311      	orrs	r1, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030aa:	0212      	lsls	r2, r2, #8
 80030ac:	4311      	orrs	r1, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80030b2:	0852      	lsrs	r2, r2, #1
 80030b4:	3a01      	subs	r2, #1
 80030b6:	0552      	lsls	r2, r2, #21
 80030b8:	4311      	orrs	r1, r2
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80030be:	0852      	lsrs	r2, r2, #1
 80030c0:	3a01      	subs	r2, #1
 80030c2:	0652      	lsls	r2, r2, #25
 80030c4:	4311      	orrs	r1, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030ca:	06d2      	lsls	r2, r2, #27
 80030cc:	430a      	orrs	r2, r1
 80030ce:	4912      	ldr	r1, [pc, #72]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030d4:	4b10      	ldr	r3, [pc, #64]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a0f      	ldr	r2, [pc, #60]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 80030da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4a0c      	ldr	r2, [pc, #48]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 80030e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030ec:	f7fd feb0 	bl	8000e50 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f4:	f7fd feac 	bl	8000e50 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e058      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003106:	4b04      	ldr	r3, [pc, #16]	@ (8003118 <HAL_RCC_OscConfig+0x778>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003112:	e050      	b.n	80031b6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e04f      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
 8003118:	40021000 	.word	0x40021000
 800311c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003120:	4b27      	ldr	r3, [pc, #156]	@ (80031c0 <HAL_RCC_OscConfig+0x820>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d144      	bne.n	80031b6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800312c:	4b24      	ldr	r3, [pc, #144]	@ (80031c0 <HAL_RCC_OscConfig+0x820>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a23      	ldr	r2, [pc, #140]	@ (80031c0 <HAL_RCC_OscConfig+0x820>)
 8003132:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003136:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003138:	4b21      	ldr	r3, [pc, #132]	@ (80031c0 <HAL_RCC_OscConfig+0x820>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4a20      	ldr	r2, [pc, #128]	@ (80031c0 <HAL_RCC_OscConfig+0x820>)
 800313e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003142:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003144:	f7fd fe84 	bl	8000e50 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314c:	f7fd fe80 	bl	8000e50 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e02c      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315e:	4b18      	ldr	r3, [pc, #96]	@ (80031c0 <HAL_RCC_OscConfig+0x820>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCC_OscConfig+0x7ac>
 800316a:	e024      	b.n	80031b6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2b0c      	cmp	r3, #12
 8003170:	d01f      	beq.n	80031b2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003172:	4b13      	ldr	r3, [pc, #76]	@ (80031c0 <HAL_RCC_OscConfig+0x820>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a12      	ldr	r2, [pc, #72]	@ (80031c0 <HAL_RCC_OscConfig+0x820>)
 8003178:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800317c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317e:	f7fd fe67 	bl	8000e50 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003186:	f7fd fe63 	bl	8000e50 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e00f      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003198:	4b09      	ldr	r3, [pc, #36]	@ (80031c0 <HAL_RCC_OscConfig+0x820>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f0      	bne.n	8003186 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80031a4:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <HAL_RCC_OscConfig+0x820>)
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	4905      	ldr	r1, [pc, #20]	@ (80031c0 <HAL_RCC_OscConfig+0x820>)
 80031aa:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <HAL_RCC_OscConfig+0x824>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	60cb      	str	r3, [r1, #12]
 80031b0:	e001      	b.n	80031b6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3720      	adds	r7, #32
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000
 80031c4:	feeefffc 	.word	0xfeeefffc

080031c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0e7      	b.n	80033ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031dc:	4b75      	ldr	r3, [pc, #468]	@ (80033b4 <HAL_RCC_ClockConfig+0x1ec>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d910      	bls.n	800320c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b72      	ldr	r3, [pc, #456]	@ (80033b4 <HAL_RCC_ClockConfig+0x1ec>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 0207 	bic.w	r2, r3, #7
 80031f2:	4970      	ldr	r1, [pc, #448]	@ (80033b4 <HAL_RCC_ClockConfig+0x1ec>)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b6e      	ldr	r3, [pc, #440]	@ (80033b4 <HAL_RCC_ClockConfig+0x1ec>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0cf      	b.n	80033ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d010      	beq.n	800323a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	4b66      	ldr	r3, [pc, #408]	@ (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003224:	429a      	cmp	r2, r3
 8003226:	d908      	bls.n	800323a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003228:	4b63      	ldr	r3, [pc, #396]	@ (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4960      	ldr	r1, [pc, #384]	@ (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003236:	4313      	orrs	r3, r2
 8003238:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d04c      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b03      	cmp	r3, #3
 800324c:	d107      	bne.n	800325e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800324e:	4b5a      	ldr	r3, [pc, #360]	@ (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d121      	bne.n	800329e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e0a6      	b.n	80033ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d107      	bne.n	8003276 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003266:	4b54      	ldr	r3, [pc, #336]	@ (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d115      	bne.n	800329e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e09a      	b.n	80033ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800327e:	4b4e      	ldr	r3, [pc, #312]	@ (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e08e      	b.n	80033ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800328e:	4b4a      	ldr	r3, [pc, #296]	@ (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e086      	b.n	80033ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800329e:	4b46      	ldr	r3, [pc, #280]	@ (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f023 0203 	bic.w	r2, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4943      	ldr	r1, [pc, #268]	@ (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b0:	f7fd fdce 	bl	8000e50 <HAL_GetTick>
 80032b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b6:	e00a      	b.n	80032ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b8:	f7fd fdca 	bl	8000e50 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e06e      	b.n	80033ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ce:	4b3a      	ldr	r3, [pc, #232]	@ (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 020c 	and.w	r2, r3, #12
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	429a      	cmp	r2, r3
 80032de:	d1eb      	bne.n	80032b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d010      	beq.n	800330e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	4b31      	ldr	r3, [pc, #196]	@ (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d208      	bcs.n	800330e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032fc:	4b2e      	ldr	r3, [pc, #184]	@ (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	492b      	ldr	r1, [pc, #172]	@ (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800330e:	4b29      	ldr	r3, [pc, #164]	@ (80033b4 <HAL_RCC_ClockConfig+0x1ec>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d210      	bcs.n	800333e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331c:	4b25      	ldr	r3, [pc, #148]	@ (80033b4 <HAL_RCC_ClockConfig+0x1ec>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f023 0207 	bic.w	r2, r3, #7
 8003324:	4923      	ldr	r1, [pc, #140]	@ (80033b4 <HAL_RCC_ClockConfig+0x1ec>)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	4313      	orrs	r3, r2
 800332a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332c:	4b21      	ldr	r3, [pc, #132]	@ (80033b4 <HAL_RCC_ClockConfig+0x1ec>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d001      	beq.n	800333e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e036      	b.n	80033ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	d008      	beq.n	800335c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800334a:	4b1b      	ldr	r3, [pc, #108]	@ (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	4918      	ldr	r1, [pc, #96]	@ (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003358:	4313      	orrs	r3, r2
 800335a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d009      	beq.n	800337c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003368:	4b13      	ldr	r3, [pc, #76]	@ (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4910      	ldr	r1, [pc, #64]	@ (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003378:	4313      	orrs	r3, r2
 800337a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800337c:	f000 f824 	bl	80033c8 <HAL_RCC_GetSysClockFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	490b      	ldr	r1, [pc, #44]	@ (80033bc <HAL_RCC_ClockConfig+0x1f4>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
 8003398:	4a09      	ldr	r2, [pc, #36]	@ (80033c0 <HAL_RCC_ClockConfig+0x1f8>)
 800339a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800339c:	4b09      	ldr	r3, [pc, #36]	@ (80033c4 <HAL_RCC_ClockConfig+0x1fc>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fd fd05 	bl	8000db0 <HAL_InitTick>
 80033a6:	4603      	mov	r3, r0
 80033a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80033aa:	7afb      	ldrb	r3, [r7, #11]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40022000 	.word	0x40022000
 80033b8:	40021000 	.word	0x40021000
 80033bc:	08005a5c 	.word	0x08005a5c
 80033c0:	20000000 	.word	0x20000000
 80033c4:	20000004 	.word	0x20000004

080033c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b089      	sub	sp, #36	@ 0x24
 80033cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	2300      	movs	r3, #0
 80033d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033d6:	4b3e      	ldr	r3, [pc, #248]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033e0:	4b3b      	ldr	r3, [pc, #236]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0x34>
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	2b0c      	cmp	r3, #12
 80033f4:	d121      	bne.n	800343a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d11e      	bne.n	800343a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033fc:	4b34      	ldr	r3, [pc, #208]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d107      	bne.n	8003418 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003408:	4b31      	ldr	r3, [pc, #196]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800340a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800340e:	0a1b      	lsrs	r3, r3, #8
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	61fb      	str	r3, [r7, #28]
 8003416:	e005      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003418:	4b2d      	ldr	r3, [pc, #180]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	091b      	lsrs	r3, r3, #4
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003424:	4a2b      	ldr	r2, [pc, #172]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800342c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10d      	bne.n	8003450 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003438:	e00a      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2b04      	cmp	r3, #4
 800343e:	d102      	bne.n	8003446 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003440:	4b25      	ldr	r3, [pc, #148]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003442:	61bb      	str	r3, [r7, #24]
 8003444:	e004      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b08      	cmp	r3, #8
 800344a:	d101      	bne.n	8003450 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800344c:	4b23      	ldr	r3, [pc, #140]	@ (80034dc <HAL_RCC_GetSysClockFreq+0x114>)
 800344e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	2b0c      	cmp	r3, #12
 8003454:	d134      	bne.n	80034c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003456:	4b1e      	ldr	r3, [pc, #120]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d003      	beq.n	800346e <HAL_RCC_GetSysClockFreq+0xa6>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b03      	cmp	r3, #3
 800346a:	d003      	beq.n	8003474 <HAL_RCC_GetSysClockFreq+0xac>
 800346c:	e005      	b.n	800347a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800346e:	4b1a      	ldr	r3, [pc, #104]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003470:	617b      	str	r3, [r7, #20]
      break;
 8003472:	e005      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003474:	4b19      	ldr	r3, [pc, #100]	@ (80034dc <HAL_RCC_GetSysClockFreq+0x114>)
 8003476:	617b      	str	r3, [r7, #20]
      break;
 8003478:	e002      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	617b      	str	r3, [r7, #20]
      break;
 800347e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003480:	4b13      	ldr	r3, [pc, #76]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	3301      	adds	r3, #1
 800348c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800348e:	4b10      	ldr	r3, [pc, #64]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	0a1b      	lsrs	r3, r3, #8
 8003494:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	fb03 f202 	mul.w	r2, r3, r2
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034a6:	4b0a      	ldr	r3, [pc, #40]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	0e5b      	lsrs	r3, r3, #25
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	3301      	adds	r3, #1
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80034be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034c0:	69bb      	ldr	r3, [r7, #24]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3724      	adds	r7, #36	@ 0x24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40021000 	.word	0x40021000
 80034d4:	08005a74 	.word	0x08005a74
 80034d8:	00f42400 	.word	0x00f42400
 80034dc:	007a1200 	.word	0x007a1200

080034e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e4:	4b03      	ldr	r3, [pc, #12]	@ (80034f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034e6:	681b      	ldr	r3, [r3, #0]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	20000000 	.word	0x20000000

080034f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034fc:	f7ff fff0 	bl	80034e0 <HAL_RCC_GetHCLKFreq>
 8003500:	4602      	mov	r2, r0
 8003502:	4b06      	ldr	r3, [pc, #24]	@ (800351c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	4904      	ldr	r1, [pc, #16]	@ (8003520 <HAL_RCC_GetPCLK1Freq+0x28>)
 800350e:	5ccb      	ldrb	r3, [r1, r3]
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003518:	4618      	mov	r0, r3
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40021000 	.word	0x40021000
 8003520:	08005a6c 	.word	0x08005a6c

08003524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003528:	f7ff ffda 	bl	80034e0 <HAL_RCC_GetHCLKFreq>
 800352c:	4602      	mov	r2, r0
 800352e:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	0adb      	lsrs	r3, r3, #11
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	4904      	ldr	r1, [pc, #16]	@ (800354c <HAL_RCC_GetPCLK2Freq+0x28>)
 800353a:	5ccb      	ldrb	r3, [r1, r3]
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003544:	4618      	mov	r0, r3
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40021000 	.word	0x40021000
 800354c:	08005a6c 	.word	0x08005a6c

08003550 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003558:	2300      	movs	r3, #0
 800355a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800355c:	4b2a      	ldr	r3, [pc, #168]	@ (8003608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800355e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003568:	f7ff f9b6 	bl	80028d8 <HAL_PWREx_GetVoltageRange>
 800356c:	6178      	str	r0, [r7, #20]
 800356e:	e014      	b.n	800359a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003570:	4b25      	ldr	r3, [pc, #148]	@ (8003608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003574:	4a24      	ldr	r2, [pc, #144]	@ (8003608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800357a:	6593      	str	r3, [r2, #88]	@ 0x58
 800357c:	4b22      	ldr	r3, [pc, #136]	@ (8003608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003588:	f7ff f9a6 	bl	80028d8 <HAL_PWREx_GetVoltageRange>
 800358c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800358e:	4b1e      	ldr	r3, [pc, #120]	@ (8003608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003592:	4a1d      	ldr	r2, [pc, #116]	@ (8003608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003594:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003598:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035a0:	d10b      	bne.n	80035ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b80      	cmp	r3, #128	@ 0x80
 80035a6:	d919      	bls.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2ba0      	cmp	r3, #160	@ 0xa0
 80035ac:	d902      	bls.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035ae:	2302      	movs	r3, #2
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	e013      	b.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035b4:	2301      	movs	r3, #1
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	e010      	b.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b80      	cmp	r3, #128	@ 0x80
 80035be:	d902      	bls.n	80035c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035c0:	2303      	movs	r3, #3
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	e00a      	b.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b80      	cmp	r3, #128	@ 0x80
 80035ca:	d102      	bne.n	80035d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035cc:	2302      	movs	r3, #2
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	e004      	b.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b70      	cmp	r3, #112	@ 0x70
 80035d6:	d101      	bne.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035d8:	2301      	movs	r3, #1
 80035da:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035dc:	4b0b      	ldr	r3, [pc, #44]	@ (800360c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f023 0207 	bic.w	r2, r3, #7
 80035e4:	4909      	ldr	r1, [pc, #36]	@ (800360c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035ec:	4b07      	ldr	r3, [pc, #28]	@ (800360c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d001      	beq.n	80035fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40021000 	.word	0x40021000
 800360c:	40022000 	.word	0x40022000

08003610 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003618:	2300      	movs	r3, #0
 800361a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800361c:	2300      	movs	r3, #0
 800361e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003628:	2b00      	cmp	r3, #0
 800362a:	d031      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003630:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003634:	d01a      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003636:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800363a:	d814      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d009      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003640:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003644:	d10f      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003646:	4b5d      	ldr	r3, [pc, #372]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	4a5c      	ldr	r2, [pc, #368]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800364c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003650:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003652:	e00c      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	2100      	movs	r1, #0
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f9ce 	bl	80039fc <RCCEx_PLLSAI1_Config>
 8003660:	4603      	mov	r3, r0
 8003662:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003664:	e003      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	74fb      	strb	r3, [r7, #19]
      break;
 800366a:	e000      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800366c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800366e:	7cfb      	ldrb	r3, [r7, #19]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10b      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003674:	4b51      	ldr	r3, [pc, #324]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003682:	494e      	ldr	r1, [pc, #312]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800368a:	e001      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368c:	7cfb      	ldrb	r3, [r7, #19]
 800368e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 809e 	beq.w	80037da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800369e:	2300      	movs	r3, #0
 80036a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036a2:	4b46      	ldr	r3, [pc, #280]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80036b2:	2300      	movs	r3, #0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00d      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036b8:	4b40      	ldr	r3, [pc, #256]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036bc:	4a3f      	ldr	r2, [pc, #252]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80036c4:	4b3d      	ldr	r3, [pc, #244]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036d0:	2301      	movs	r3, #1
 80036d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036d4:	4b3a      	ldr	r3, [pc, #232]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a39      	ldr	r2, [pc, #228]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036e0:	f7fd fbb6 	bl	8000e50 <HAL_GetTick>
 80036e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036e6:	e009      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e8:	f7fd fbb2 	bl	8000e50 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d902      	bls.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	74fb      	strb	r3, [r7, #19]
        break;
 80036fa:	e005      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036fc:	4b30      	ldr	r3, [pc, #192]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0ef      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003708:	7cfb      	ldrb	r3, [r7, #19]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d15a      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800370e:	4b2b      	ldr	r3, [pc, #172]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003714:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003718:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01e      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	429a      	cmp	r2, r3
 8003728:	d019      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800372a:	4b24      	ldr	r3, [pc, #144]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003730:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003734:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003736:	4b21      	ldr	r3, [pc, #132]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373c:	4a1f      	ldr	r2, [pc, #124]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800373e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003742:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003746:	4b1d      	ldr	r3, [pc, #116]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800374c:	4a1b      	ldr	r2, [pc, #108]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800374e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003752:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003756:	4a19      	ldr	r2, [pc, #100]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d016      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003768:	f7fd fb72 	bl	8000e50 <HAL_GetTick>
 800376c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800376e:	e00b      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003770:	f7fd fb6e 	bl	8000e50 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800377e:	4293      	cmp	r3, r2
 8003780:	d902      	bls.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	74fb      	strb	r3, [r7, #19]
            break;
 8003786:	e006      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003788:	4b0c      	ldr	r3, [pc, #48]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0ec      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003796:	7cfb      	ldrb	r3, [r7, #19]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10b      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800379c:	4b07      	ldr	r3, [pc, #28]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800379e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037aa:	4904      	ldr	r1, [pc, #16]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80037b2:	e009      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037b4:	7cfb      	ldrb	r3, [r7, #19]
 80037b6:	74bb      	strb	r3, [r7, #18]
 80037b8:	e006      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c4:	7cfb      	ldrb	r3, [r7, #19]
 80037c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037c8:	7c7b      	ldrb	r3, [r7, #17]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d105      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ce:	4b8a      	ldr	r3, [pc, #552]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d2:	4a89      	ldr	r2, [pc, #548]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037e6:	4b84      	ldr	r3, [pc, #528]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ec:	f023 0203 	bic.w	r2, r3, #3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	4980      	ldr	r1, [pc, #512]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003808:	4b7b      	ldr	r3, [pc, #492]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380e:	f023 020c 	bic.w	r2, r3, #12
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003816:	4978      	ldr	r1, [pc, #480]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800382a:	4b73      	ldr	r3, [pc, #460]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003830:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003838:	496f      	ldr	r1, [pc, #444]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800384c:	4b6a      	ldr	r3, [pc, #424]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003852:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800385a:	4967      	ldr	r1, [pc, #412]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800386e:	4b62      	ldr	r3, [pc, #392]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003874:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800387c:	495e      	ldr	r1, [pc, #376]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003890:	4b59      	ldr	r3, [pc, #356]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003896:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389e:	4956      	ldr	r1, [pc, #344]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038b2:	4b51      	ldr	r3, [pc, #324]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c0:	494d      	ldr	r1, [pc, #308]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d028      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038d4:	4b48      	ldr	r3, [pc, #288]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e2:	4945      	ldr	r1, [pc, #276]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038f2:	d106      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038f4:	4b40      	ldr	r3, [pc, #256]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4a3f      	ldr	r2, [pc, #252]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038fe:	60d3      	str	r3, [r2, #12]
 8003900:	e011      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800390a:	d10c      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3304      	adds	r3, #4
 8003910:	2101      	movs	r1, #1
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f872 	bl	80039fc <RCCEx_PLLSAI1_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800391c:	7cfb      	ldrb	r3, [r7, #19]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003922:	7cfb      	ldrb	r3, [r7, #19]
 8003924:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d028      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003932:	4b31      	ldr	r3, [pc, #196]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003938:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003940:	492d      	ldr	r1, [pc, #180]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003950:	d106      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003952:	4b29      	ldr	r3, [pc, #164]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	4a28      	ldr	r2, [pc, #160]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003958:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800395c:	60d3      	str	r3, [r2, #12]
 800395e:	e011      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003964:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003968:	d10c      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3304      	adds	r3, #4
 800396e:	2101      	movs	r1, #1
 8003970:	4618      	mov	r0, r3
 8003972:	f000 f843 	bl	80039fc <RCCEx_PLLSAI1_Config>
 8003976:	4603      	mov	r3, r0
 8003978:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800397a:	7cfb      	ldrb	r3, [r7, #19]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003980:	7cfb      	ldrb	r3, [r7, #19]
 8003982:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d01c      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003990:	4b19      	ldr	r3, [pc, #100]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003996:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800399e:	4916      	ldr	r1, [pc, #88]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039ae:	d10c      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3304      	adds	r3, #4
 80039b4:	2102      	movs	r1, #2
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 f820 	bl	80039fc <RCCEx_PLLSAI1_Config>
 80039bc:	4603      	mov	r3, r0
 80039be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039c0:	7cfb      	ldrb	r3, [r7, #19]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80039c6:	7cfb      	ldrb	r3, [r7, #19]
 80039c8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039d6:	4b08      	ldr	r3, [pc, #32]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039dc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e4:	4904      	ldr	r1, [pc, #16]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000

080039fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a0a:	4b74      	ldr	r3, [pc, #464]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d018      	beq.n	8003a48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a16:	4b71      	ldr	r3, [pc, #452]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f003 0203 	and.w	r2, r3, #3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d10d      	bne.n	8003a42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
       ||
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a2e:	4b6b      	ldr	r3, [pc, #428]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	091b      	lsrs	r3, r3, #4
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d047      	beq.n	8003ad2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
 8003a46:	e044      	b.n	8003ad2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d018      	beq.n	8003a82 <RCCEx_PLLSAI1_Config+0x86>
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d825      	bhi.n	8003aa0 <RCCEx_PLLSAI1_Config+0xa4>
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d002      	beq.n	8003a5e <RCCEx_PLLSAI1_Config+0x62>
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d009      	beq.n	8003a70 <RCCEx_PLLSAI1_Config+0x74>
 8003a5c:	e020      	b.n	8003aa0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a5e:	4b5f      	ldr	r3, [pc, #380]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d11d      	bne.n	8003aa6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a6e:	e01a      	b.n	8003aa6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a70:	4b5a      	ldr	r3, [pc, #360]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d116      	bne.n	8003aaa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a80:	e013      	b.n	8003aaa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a82:	4b56      	ldr	r3, [pc, #344]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10f      	bne.n	8003aae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a8e:	4b53      	ldr	r3, [pc, #332]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a9e:	e006      	b.n	8003aae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa4:	e004      	b.n	8003ab0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e002      	b.n	8003ab0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aaa:	bf00      	nop
 8003aac:	e000      	b.n	8003ab0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aae:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10d      	bne.n	8003ad2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ab6:	4b49      	ldr	r3, [pc, #292]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6819      	ldr	r1, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	430b      	orrs	r3, r1
 8003acc:	4943      	ldr	r1, [pc, #268]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d17c      	bne.n	8003bd2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ad8:	4b40      	ldr	r3, [pc, #256]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a3f      	ldr	r2, [pc, #252]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ade:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae4:	f7fd f9b4 	bl	8000e50 <HAL_GetTick>
 8003ae8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003aea:	e009      	b.n	8003b00 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aec:	f7fd f9b0 	bl	8000e50 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d902      	bls.n	8003b00 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	73fb      	strb	r3, [r7, #15]
        break;
 8003afe:	e005      	b.n	8003b0c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b00:	4b36      	ldr	r3, [pc, #216]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1ef      	bne.n	8003aec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d15f      	bne.n	8003bd2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d110      	bne.n	8003b3a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b18:	4b30      	ldr	r3, [pc, #192]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003b20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6892      	ldr	r2, [r2, #8]
 8003b28:	0211      	lsls	r1, r2, #8
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68d2      	ldr	r2, [r2, #12]
 8003b2e:	06d2      	lsls	r2, r2, #27
 8003b30:	430a      	orrs	r2, r1
 8003b32:	492a      	ldr	r1, [pc, #168]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	610b      	str	r3, [r1, #16]
 8003b38:	e027      	b.n	8003b8a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d112      	bne.n	8003b66 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b40:	4b26      	ldr	r3, [pc, #152]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003b48:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6892      	ldr	r2, [r2, #8]
 8003b50:	0211      	lsls	r1, r2, #8
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6912      	ldr	r2, [r2, #16]
 8003b56:	0852      	lsrs	r2, r2, #1
 8003b58:	3a01      	subs	r2, #1
 8003b5a:	0552      	lsls	r2, r2, #21
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	491f      	ldr	r1, [pc, #124]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	610b      	str	r3, [r1, #16]
 8003b64:	e011      	b.n	8003b8a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b66:	4b1d      	ldr	r3, [pc, #116]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003b6e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6892      	ldr	r2, [r2, #8]
 8003b76:	0211      	lsls	r1, r2, #8
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6952      	ldr	r2, [r2, #20]
 8003b7c:	0852      	lsrs	r2, r2, #1
 8003b7e:	3a01      	subs	r2, #1
 8003b80:	0652      	lsls	r2, r2, #25
 8003b82:	430a      	orrs	r2, r1
 8003b84:	4915      	ldr	r1, [pc, #84]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b8a:	4b14      	ldr	r3, [pc, #80]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a13      	ldr	r2, [pc, #76]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b94:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b96:	f7fd f95b 	bl	8000e50 <HAL_GetTick>
 8003b9a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b9c:	e009      	b.n	8003bb2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b9e:	f7fd f957 	bl	8000e50 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d902      	bls.n	8003bb2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	73fb      	strb	r3, [r7, #15]
          break;
 8003bb0:	e005      	b.n	8003bbe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0ef      	beq.n	8003b9e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d106      	bne.n	8003bd2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bc4:	4b05      	ldr	r3, [pc, #20]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	4903      	ldr	r1, [pc, #12]	@ (8003bdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40021000 	.word	0x40021000

08003be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e049      	b.n	8003c86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fc ffdc 	bl	8000bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	f000 fa82 	bl	8004128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d001      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e03b      	b.n	8003d20 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a19      	ldr	r2, [pc, #100]	@ (8003d2c <HAL_TIM_Base_Start_IT+0x9c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d009      	beq.n	8003cde <HAL_TIM_Base_Start_IT+0x4e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cd2:	d004      	beq.n	8003cde <HAL_TIM_Base_Start_IT+0x4e>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a15      	ldr	r2, [pc, #84]	@ (8003d30 <HAL_TIM_Base_Start_IT+0xa0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d115      	bne.n	8003d0a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	4b13      	ldr	r3, [pc, #76]	@ (8003d34 <HAL_TIM_Base_Start_IT+0xa4>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b06      	cmp	r3, #6
 8003cee:	d015      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x8c>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cf6:	d011      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d08:	e008      	b.n	8003d1c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0201 	orr.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	e000      	b.n	8003d1e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40014000 	.word	0x40014000
 8003d34:	00010007 	.word	0x00010007

08003d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d020      	beq.n	8003d9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d01b      	beq.n	8003d9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f06f 0202 	mvn.w	r2, #2
 8003d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f9b2 	bl	80040ec <HAL_TIM_IC_CaptureCallback>
 8003d88:	e005      	b.n	8003d96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f9a4 	bl	80040d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f9b5 	bl	8004100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d020      	beq.n	8003de8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01b      	beq.n	8003de8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0204 	mvn.w	r2, #4
 8003db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f98c 	bl	80040ec <HAL_TIM_IC_CaptureCallback>
 8003dd4:	e005      	b.n	8003de2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f97e 	bl	80040d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f98f 	bl	8004100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d020      	beq.n	8003e34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01b      	beq.n	8003e34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0208 	mvn.w	r2, #8
 8003e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2204      	movs	r2, #4
 8003e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f966 	bl	80040ec <HAL_TIM_IC_CaptureCallback>
 8003e20:	e005      	b.n	8003e2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f958 	bl	80040d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f969 	bl	8004100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f003 0310 	and.w	r3, r3, #16
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d020      	beq.n	8003e80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01b      	beq.n	8003e80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 0210 	mvn.w	r2, #16
 8003e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2208      	movs	r2, #8
 8003e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f940 	bl	80040ec <HAL_TIM_IC_CaptureCallback>
 8003e6c:	e005      	b.n	8003e7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f932 	bl	80040d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f943 	bl	8004100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00c      	beq.n	8003ea4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d007      	beq.n	8003ea4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0201 	mvn.w	r2, #1
 8003e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fc fdb2 	bl	8000a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d104      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00c      	beq.n	8003ed2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d007      	beq.n	8003ed2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 faa5 	bl	800441c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00c      	beq.n	8003ef6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 fa9d 	bl	8004430 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00c      	beq.n	8003f1a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f8fd 	bl	8004114 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00c      	beq.n	8003f3e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d007      	beq.n	8003f3e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f06f 0220 	mvn.w	r2, #32
 8003f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 fa65 	bl	8004408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b084      	sub	sp, #16
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_TIM_ConfigClockSource+0x1c>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e0b6      	b.n	80040d0 <HAL_TIM_ConfigClockSource+0x18a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f80:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f84:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f8c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f9e:	d03e      	beq.n	800401e <HAL_TIM_ConfigClockSource+0xd8>
 8003fa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fa4:	f200 8087 	bhi.w	80040b6 <HAL_TIM_ConfigClockSource+0x170>
 8003fa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fac:	f000 8086 	beq.w	80040bc <HAL_TIM_ConfigClockSource+0x176>
 8003fb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fb4:	d87f      	bhi.n	80040b6 <HAL_TIM_ConfigClockSource+0x170>
 8003fb6:	2b70      	cmp	r3, #112	@ 0x70
 8003fb8:	d01a      	beq.n	8003ff0 <HAL_TIM_ConfigClockSource+0xaa>
 8003fba:	2b70      	cmp	r3, #112	@ 0x70
 8003fbc:	d87b      	bhi.n	80040b6 <HAL_TIM_ConfigClockSource+0x170>
 8003fbe:	2b60      	cmp	r3, #96	@ 0x60
 8003fc0:	d050      	beq.n	8004064 <HAL_TIM_ConfigClockSource+0x11e>
 8003fc2:	2b60      	cmp	r3, #96	@ 0x60
 8003fc4:	d877      	bhi.n	80040b6 <HAL_TIM_ConfigClockSource+0x170>
 8003fc6:	2b50      	cmp	r3, #80	@ 0x50
 8003fc8:	d03c      	beq.n	8004044 <HAL_TIM_ConfigClockSource+0xfe>
 8003fca:	2b50      	cmp	r3, #80	@ 0x50
 8003fcc:	d873      	bhi.n	80040b6 <HAL_TIM_ConfigClockSource+0x170>
 8003fce:	2b40      	cmp	r3, #64	@ 0x40
 8003fd0:	d058      	beq.n	8004084 <HAL_TIM_ConfigClockSource+0x13e>
 8003fd2:	2b40      	cmp	r3, #64	@ 0x40
 8003fd4:	d86f      	bhi.n	80040b6 <HAL_TIM_ConfigClockSource+0x170>
 8003fd6:	2b30      	cmp	r3, #48	@ 0x30
 8003fd8:	d064      	beq.n	80040a4 <HAL_TIM_ConfigClockSource+0x15e>
 8003fda:	2b30      	cmp	r3, #48	@ 0x30
 8003fdc:	d86b      	bhi.n	80040b6 <HAL_TIM_ConfigClockSource+0x170>
 8003fde:	2b20      	cmp	r3, #32
 8003fe0:	d060      	beq.n	80040a4 <HAL_TIM_ConfigClockSource+0x15e>
 8003fe2:	2b20      	cmp	r3, #32
 8003fe4:	d867      	bhi.n	80040b6 <HAL_TIM_ConfigClockSource+0x170>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d05c      	beq.n	80040a4 <HAL_TIM_ConfigClockSource+0x15e>
 8003fea:	2b10      	cmp	r3, #16
 8003fec:	d05a      	beq.n	80040a4 <HAL_TIM_ConfigClockSource+0x15e>
 8003fee:	e062      	b.n	80040b6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004000:	f000 f97c 	bl	80042fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004012:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	609a      	str	r2, [r3, #8]
      break;
 800401c:	e04f      	b.n	80040be <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800402e:	f000 f965 	bl	80042fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004040:	609a      	str	r2, [r3, #8]
      break;
 8004042:	e03c      	b.n	80040be <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004050:	461a      	mov	r2, r3
 8004052:	f000 f8d9 	bl	8004208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2150      	movs	r1, #80	@ 0x50
 800405c:	4618      	mov	r0, r3
 800405e:	f000 f932 	bl	80042c6 <TIM_ITRx_SetConfig>
      break;
 8004062:	e02c      	b.n	80040be <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004070:	461a      	mov	r2, r3
 8004072:	f000 f8f8 	bl	8004266 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2160      	movs	r1, #96	@ 0x60
 800407c:	4618      	mov	r0, r3
 800407e:	f000 f922 	bl	80042c6 <TIM_ITRx_SetConfig>
      break;
 8004082:	e01c      	b.n	80040be <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004090:	461a      	mov	r2, r3
 8004092:	f000 f8b9 	bl	8004208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2140      	movs	r1, #64	@ 0x40
 800409c:	4618      	mov	r0, r3
 800409e:	f000 f912 	bl	80042c6 <TIM_ITRx_SetConfig>
      break;
 80040a2:	e00c      	b.n	80040be <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4619      	mov	r1, r3
 80040ae:	4610      	mov	r0, r2
 80040b0:	f000 f909 	bl	80042c6 <TIM_ITRx_SetConfig>
      break;
 80040b4:	e003      	b.n	80040be <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	73fb      	strb	r3, [r7, #15]
      break;
 80040ba:	e000      	b.n	80040be <HAL_TIM_ConfigClockSource+0x178>
      break;
 80040bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a30      	ldr	r2, [pc, #192]	@ (80041fc <TIM_Base_SetConfig+0xd4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d003      	beq.n	8004148 <TIM_Base_SetConfig+0x20>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004146:	d108      	bne.n	800415a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800414e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a27      	ldr	r2, [pc, #156]	@ (80041fc <TIM_Base_SetConfig+0xd4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00b      	beq.n	800417a <TIM_Base_SetConfig+0x52>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004168:	d007      	beq.n	800417a <TIM_Base_SetConfig+0x52>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a24      	ldr	r2, [pc, #144]	@ (8004200 <TIM_Base_SetConfig+0xd8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d003      	beq.n	800417a <TIM_Base_SetConfig+0x52>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a23      	ldr	r2, [pc, #140]	@ (8004204 <TIM_Base_SetConfig+0xdc>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d108      	bne.n	800418c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a12      	ldr	r2, [pc, #72]	@ (80041fc <TIM_Base_SetConfig+0xd4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d007      	beq.n	80041c8 <TIM_Base_SetConfig+0xa0>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a11      	ldr	r2, [pc, #68]	@ (8004200 <TIM_Base_SetConfig+0xd8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d003      	beq.n	80041c8 <TIM_Base_SetConfig+0xa0>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a10      	ldr	r2, [pc, #64]	@ (8004204 <TIM_Base_SetConfig+0xdc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d103      	bne.n	80041d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d105      	bne.n	80041ee <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f023 0201 	bic.w	r2, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	611a      	str	r2, [r3, #16]
  }
}
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40012c00 	.word	0x40012c00
 8004200:	40014000 	.word	0x40014000
 8004204:	40014400 	.word	0x40014400

08004208 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f023 0201 	bic.w	r2, r3, #1
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f023 030a 	bic.w	r3, r3, #10
 8004244:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	621a      	str	r2, [r3, #32]
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004266:	b480      	push	{r7}
 8004268:	b087      	sub	sp, #28
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	f023 0210 	bic.w	r2, r3, #16
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004290:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	031b      	lsls	r3, r3, #12
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80042a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b085      	sub	sp, #20
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f043 0307 	orr.w	r3, r3, #7
 80042e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	609a      	str	r2, [r3, #8]
}
 80042f0:	bf00      	nop
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004316:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	021a      	lsls	r2, r3, #8
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	431a      	orrs	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	4313      	orrs	r3, r2
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	609a      	str	r2, [r3, #8]
}
 8004330:	bf00      	nop
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004350:	2302      	movs	r3, #2
 8004352:	e04f      	b.n	80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a21      	ldr	r2, [pc, #132]	@ (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d108      	bne.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004384:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a14      	ldr	r2, [pc, #80]	@ (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d009      	beq.n	80043c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043bc:	d004      	beq.n	80043c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a10      	ldr	r2, [pc, #64]	@ (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d10c      	bne.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	40012c00 	.word	0x40012c00
 8004404:	40014000 	.word	0x40014000

08004408 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e040      	b.n	80044d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fc fc00 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2224      	movs	r2, #36	@ 0x24
 8004470:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0201 	bic.w	r2, r2, #1
 8004480:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fdc6 	bl	800501c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fb97 	bl	8004bc4 <UART_SetConfig>
 8004496:	4603      	mov	r3, r0
 8004498:	2b01      	cmp	r3, #1
 800449a:	d101      	bne.n	80044a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e01b      	b.n	80044d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fe45 	bl	8005160 <UART_CheckIdleState>
 80044d6:	4603      	mov	r3, r0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08a      	sub	sp, #40	@ 0x28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	4613      	mov	r3, r2
 80044ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044f4:	2b20      	cmp	r3, #32
 80044f6:	d137      	bne.n	8004568 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <HAL_UART_Receive_IT+0x24>
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e030      	b.n	800456a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a18      	ldr	r2, [pc, #96]	@ (8004574 <HAL_UART_Receive_IT+0x94>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d01f      	beq.n	8004558 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d018      	beq.n	8004558 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	613b      	str	r3, [r7, #16]
   return(result);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800453a:	627b      	str	r3, [r7, #36]	@ 0x24
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	623b      	str	r3, [r7, #32]
 8004546:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	69f9      	ldr	r1, [r7, #28]
 800454a:	6a3a      	ldr	r2, [r7, #32]
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	61bb      	str	r3, [r7, #24]
   return(result);
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e6      	bne.n	8004526 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004558:	88fb      	ldrh	r3, [r7, #6]
 800455a:	461a      	mov	r2, r3
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 ff14 	bl	800538c <UART_Start_Receive_IT>
 8004564:	4603      	mov	r3, r0
 8004566:	e000      	b.n	800456a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004568:	2302      	movs	r3, #2
  }
}
 800456a:	4618      	mov	r0, r3
 800456c:	3728      	adds	r7, #40	@ 0x28
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40008000 	.word	0x40008000

08004578 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b0ba      	sub	sp, #232	@ 0xe8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800459e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80045a2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80045a6:	4013      	ands	r3, r2
 80045a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80045ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d115      	bne.n	80045e0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80045b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00f      	beq.n	80045e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d009      	beq.n	80045e0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 82ca 	beq.w	8004b6a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	4798      	blx	r3
      }
      return;
 80045de:	e2c4      	b.n	8004b6a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80045e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 8117 	beq.w	8004818 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80045ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80045fa:	4b85      	ldr	r3, [pc, #532]	@ (8004810 <HAL_UART_IRQHandler+0x298>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 810a 	beq.w	8004818 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d011      	beq.n	8004634 <HAL_UART_IRQHandler+0xbc>
 8004610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00b      	beq.n	8004634 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2201      	movs	r2, #1
 8004622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800462a:	f043 0201 	orr.w	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d011      	beq.n	8004664 <HAL_UART_IRQHandler+0xec>
 8004640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00b      	beq.n	8004664 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2202      	movs	r2, #2
 8004652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800465a:	f043 0204 	orr.w	r2, r3, #4
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d011      	beq.n	8004694 <HAL_UART_IRQHandler+0x11c>
 8004670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00b      	beq.n	8004694 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2204      	movs	r2, #4
 8004682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800468a:	f043 0202 	orr.w	r2, r3, #2
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d017      	beq.n	80046d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d105      	bne.n	80046b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80046ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00b      	beq.n	80046d0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2208      	movs	r2, #8
 80046be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046c6:	f043 0208 	orr.w	r2, r3, #8
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d012      	beq.n	8004702 <HAL_UART_IRQHandler+0x18a>
 80046dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00c      	beq.n	8004702 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046f8:	f043 0220 	orr.w	r2, r3, #32
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8230 	beq.w	8004b6e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800470e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00d      	beq.n	8004736 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800471a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800473c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800474a:	2b40      	cmp	r3, #64	@ 0x40
 800474c:	d005      	beq.n	800475a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800474e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004752:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004756:	2b00      	cmp	r3, #0
 8004758:	d04f      	beq.n	80047fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fedc 	bl	8005518 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800476a:	2b40      	cmp	r3, #64	@ 0x40
 800476c:	d141      	bne.n	80047f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3308      	adds	r3, #8
 8004774:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800477c:	e853 3f00 	ldrex	r3, [r3]
 8004780:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004784:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800478c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	3308      	adds	r3, #8
 8004796:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800479a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800479e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80047a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80047aa:	e841 2300 	strex	r3, r2, [r1]
 80047ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80047b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1d9      	bne.n	800476e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d013      	beq.n	80047ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047c6:	4a13      	ldr	r2, [pc, #76]	@ (8004814 <HAL_UART_IRQHandler+0x29c>)
 80047c8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fd fea7 	bl	8002522 <HAL_DMA_Abort_IT>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d017      	beq.n	800480a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80047e4:	4610      	mov	r0, r2
 80047e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e8:	e00f      	b.n	800480a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f9d4 	bl	8004b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f0:	e00b      	b.n	800480a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f9d0 	bl	8004b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f8:	e007      	b.n	800480a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f9cc 	bl	8004b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004808:	e1b1      	b.n	8004b6e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800480a:	bf00      	nop
    return;
 800480c:	e1af      	b.n	8004b6e <HAL_UART_IRQHandler+0x5f6>
 800480e:	bf00      	nop
 8004810:	04000120 	.word	0x04000120
 8004814:	080055e1 	.word	0x080055e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481c:	2b01      	cmp	r3, #1
 800481e:	f040 816a 	bne.w	8004af6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004826:	f003 0310 	and.w	r3, r3, #16
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 8163 	beq.w	8004af6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004834:	f003 0310 	and.w	r3, r3, #16
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 815c 	beq.w	8004af6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2210      	movs	r2, #16
 8004844:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004850:	2b40      	cmp	r3, #64	@ 0x40
 8004852:	f040 80d4 	bne.w	80049fe <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004862:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80ad 	beq.w	80049c6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004876:	429a      	cmp	r2, r3
 8004878:	f080 80a5 	bcs.w	80049c6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004882:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b00      	cmp	r3, #0
 8004894:	f040 8086 	bne.w	80049a4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048a4:	e853 3f00 	ldrex	r3, [r3]
 80048a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80048ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80048c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80048c6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80048ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80048da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1da      	bne.n	8004898 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3308      	adds	r3, #8
 80048e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80048f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048f4:	f023 0301 	bic.w	r3, r3, #1
 80048f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3308      	adds	r3, #8
 8004902:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004906:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800490a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800490e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004912:	e841 2300 	strex	r3, r2, [r1]
 8004916:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004918:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1e1      	bne.n	80048e2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3308      	adds	r3, #8
 8004924:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004926:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004928:	e853 3f00 	ldrex	r3, [r3]
 800492c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800492e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004930:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004934:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3308      	adds	r3, #8
 800493e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004942:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004944:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004946:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004948:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800494a:	e841 2300 	strex	r3, r2, [r1]
 800494e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004950:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1e3      	bne.n	800491e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2220      	movs	r2, #32
 800495a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800496c:	e853 3f00 	ldrex	r3, [r3]
 8004970:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004974:	f023 0310 	bic.w	r3, r3, #16
 8004978:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	461a      	mov	r2, r3
 8004982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004986:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004988:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800498c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800498e:	e841 2300 	strex	r3, r2, [r1]
 8004992:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1e4      	bne.n	8004964 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fd fd81 	bl	80024a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	4619      	mov	r1, r3
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f8f4 	bl	8004bac <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80049c4:	e0d5      	b.n	8004b72 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80049cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80049d0:	429a      	cmp	r2, r3
 80049d2:	f040 80ce 	bne.w	8004b72 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	f040 80c5 	bne.w	8004b72 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80049f4:	4619      	mov	r1, r3
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f8d8 	bl	8004bac <HAL_UARTEx_RxEventCallback>
      return;
 80049fc:	e0b9      	b.n	8004b72 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 80ab 	beq.w	8004b76 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004a20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 80a6 	beq.w	8004b76 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a32:	e853 3f00 	ldrex	r3, [r3]
 8004a36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004a4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a54:	e841 2300 	strex	r3, r2, [r1]
 8004a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1e4      	bne.n	8004a2a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3308      	adds	r3, #8
 8004a66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6a:	e853 3f00 	ldrex	r3, [r3]
 8004a6e:	623b      	str	r3, [r7, #32]
   return(result);
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	f023 0301 	bic.w	r3, r3, #1
 8004a76:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3308      	adds	r3, #8
 8004a80:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a84:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e3      	bne.n	8004a60 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	e853 3f00 	ldrex	r3, [r3]
 8004ab8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f023 0310 	bic.w	r3, r3, #16
 8004ac0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	69b9      	ldr	r1, [r7, #24]
 8004ad4:	69fa      	ldr	r2, [r7, #28]
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	617b      	str	r3, [r7, #20]
   return(result);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e4      	bne.n	8004aac <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ae8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004aec:	4619      	mov	r1, r3
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f85c 	bl	8004bac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004af4:	e03f      	b.n	8004b76 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00e      	beq.n	8004b20 <HAL_UART_IRQHandler+0x5a8>
 8004b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d008      	beq.n	8004b20 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004b16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 ff5d 	bl	80059d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b1e:	e02d      	b.n	8004b7c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00e      	beq.n	8004b4a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d008      	beq.n	8004b4a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d01c      	beq.n	8004b7a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	4798      	blx	r3
    }
    return;
 8004b48:	e017      	b.n	8004b7a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d012      	beq.n	8004b7c <HAL_UART_IRQHandler+0x604>
 8004b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00c      	beq.n	8004b7c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fd52 	bl	800560c <UART_EndTransmit_IT>
    return;
 8004b68:	e008      	b.n	8004b7c <HAL_UART_IRQHandler+0x604>
      return;
 8004b6a:	bf00      	nop
 8004b6c:	e006      	b.n	8004b7c <HAL_UART_IRQHandler+0x604>
    return;
 8004b6e:	bf00      	nop
 8004b70:	e004      	b.n	8004b7c <HAL_UART_IRQHandler+0x604>
      return;
 8004b72:	bf00      	nop
 8004b74:	e002      	b.n	8004b7c <HAL_UART_IRQHandler+0x604>
      return;
 8004b76:	bf00      	nop
 8004b78:	e000      	b.n	8004b7c <HAL_UART_IRQHandler+0x604>
    return;
 8004b7a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004b7c:	37e8      	adds	r7, #232	@ 0xe8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop

08004b84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc8:	b08a      	sub	sp, #40	@ 0x28
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	4bb4      	ldr	r3, [pc, #720]	@ (8004ec4 <UART_SetConfig+0x300>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	6812      	ldr	r2, [r2, #0]
 8004bfa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004bfc:	430b      	orrs	r3, r1
 8004bfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4aa9      	ldr	r2, [pc, #676]	@ (8004ec8 <UART_SetConfig+0x304>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d004      	beq.n	8004c30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c40:	430a      	orrs	r2, r1
 8004c42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4aa0      	ldr	r2, [pc, #640]	@ (8004ecc <UART_SetConfig+0x308>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d126      	bne.n	8004c9c <UART_SetConfig+0xd8>
 8004c4e:	4ba0      	ldr	r3, [pc, #640]	@ (8004ed0 <UART_SetConfig+0x30c>)
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c54:	f003 0303 	and.w	r3, r3, #3
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d81b      	bhi.n	8004c94 <UART_SetConfig+0xd0>
 8004c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c64 <UART_SetConfig+0xa0>)
 8004c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c62:	bf00      	nop
 8004c64:	08004c75 	.word	0x08004c75
 8004c68:	08004c85 	.word	0x08004c85
 8004c6c:	08004c7d 	.word	0x08004c7d
 8004c70:	08004c8d 	.word	0x08004c8d
 8004c74:	2301      	movs	r3, #1
 8004c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c7a:	e080      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c82:	e07c      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004c84:	2304      	movs	r3, #4
 8004c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c8a:	e078      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004c8c:	2308      	movs	r3, #8
 8004c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c92:	e074      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004c94:	2310      	movs	r3, #16
 8004c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c9a:	e070      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a8c      	ldr	r2, [pc, #560]	@ (8004ed4 <UART_SetConfig+0x310>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d138      	bne.n	8004d18 <UART_SetConfig+0x154>
 8004ca6:	4b8a      	ldr	r3, [pc, #552]	@ (8004ed0 <UART_SetConfig+0x30c>)
 8004ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cac:	f003 030c 	and.w	r3, r3, #12
 8004cb0:	2b0c      	cmp	r3, #12
 8004cb2:	d82d      	bhi.n	8004d10 <UART_SetConfig+0x14c>
 8004cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cbc <UART_SetConfig+0xf8>)
 8004cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cba:	bf00      	nop
 8004cbc:	08004cf1 	.word	0x08004cf1
 8004cc0:	08004d11 	.word	0x08004d11
 8004cc4:	08004d11 	.word	0x08004d11
 8004cc8:	08004d11 	.word	0x08004d11
 8004ccc:	08004d01 	.word	0x08004d01
 8004cd0:	08004d11 	.word	0x08004d11
 8004cd4:	08004d11 	.word	0x08004d11
 8004cd8:	08004d11 	.word	0x08004d11
 8004cdc:	08004cf9 	.word	0x08004cf9
 8004ce0:	08004d11 	.word	0x08004d11
 8004ce4:	08004d11 	.word	0x08004d11
 8004ce8:	08004d11 	.word	0x08004d11
 8004cec:	08004d09 	.word	0x08004d09
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cf6:	e042      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cfe:	e03e      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004d00:	2304      	movs	r3, #4
 8004d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d06:	e03a      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004d08:	2308      	movs	r3, #8
 8004d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d0e:	e036      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004d10:	2310      	movs	r3, #16
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d16:	e032      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a6a      	ldr	r2, [pc, #424]	@ (8004ec8 <UART_SetConfig+0x304>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d12a      	bne.n	8004d78 <UART_SetConfig+0x1b4>
 8004d22:	4b6b      	ldr	r3, [pc, #428]	@ (8004ed0 <UART_SetConfig+0x30c>)
 8004d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d30:	d01a      	beq.n	8004d68 <UART_SetConfig+0x1a4>
 8004d32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d36:	d81b      	bhi.n	8004d70 <UART_SetConfig+0x1ac>
 8004d38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d3c:	d00c      	beq.n	8004d58 <UART_SetConfig+0x194>
 8004d3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d42:	d815      	bhi.n	8004d70 <UART_SetConfig+0x1ac>
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <UART_SetConfig+0x18c>
 8004d48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d4c:	d008      	beq.n	8004d60 <UART_SetConfig+0x19c>
 8004d4e:	e00f      	b.n	8004d70 <UART_SetConfig+0x1ac>
 8004d50:	2300      	movs	r3, #0
 8004d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d56:	e012      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d5e:	e00e      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004d60:	2304      	movs	r3, #4
 8004d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d66:	e00a      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004d68:	2308      	movs	r3, #8
 8004d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d6e:	e006      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004d70:	2310      	movs	r3, #16
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d76:	e002      	b.n	8004d7e <UART_SetConfig+0x1ba>
 8004d78:	2310      	movs	r3, #16
 8004d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a51      	ldr	r2, [pc, #324]	@ (8004ec8 <UART_SetConfig+0x304>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d17a      	bne.n	8004e7e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d824      	bhi.n	8004dda <UART_SetConfig+0x216>
 8004d90:	a201      	add	r2, pc, #4	@ (adr r2, 8004d98 <UART_SetConfig+0x1d4>)
 8004d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d96:	bf00      	nop
 8004d98:	08004dbd 	.word	0x08004dbd
 8004d9c:	08004ddb 	.word	0x08004ddb
 8004da0:	08004dc5 	.word	0x08004dc5
 8004da4:	08004ddb 	.word	0x08004ddb
 8004da8:	08004dcb 	.word	0x08004dcb
 8004dac:	08004ddb 	.word	0x08004ddb
 8004db0:	08004ddb 	.word	0x08004ddb
 8004db4:	08004ddb 	.word	0x08004ddb
 8004db8:	08004dd3 	.word	0x08004dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dbc:	f7fe fb9c 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 8004dc0:	61f8      	str	r0, [r7, #28]
        break;
 8004dc2:	e010      	b.n	8004de6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dc4:	4b44      	ldr	r3, [pc, #272]	@ (8004ed8 <UART_SetConfig+0x314>)
 8004dc6:	61fb      	str	r3, [r7, #28]
        break;
 8004dc8:	e00d      	b.n	8004de6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dca:	f7fe fafd 	bl	80033c8 <HAL_RCC_GetSysClockFreq>
 8004dce:	61f8      	str	r0, [r7, #28]
        break;
 8004dd0:	e009      	b.n	8004de6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dd6:	61fb      	str	r3, [r7, #28]
        break;
 8004dd8:	e005      	b.n	8004de6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004de4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 8107 	beq.w	8004ffc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	4413      	add	r3, r2
 8004df8:	69fa      	ldr	r2, [r7, #28]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d305      	bcc.n	8004e0a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e04:	69fa      	ldr	r2, [r7, #28]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d903      	bls.n	8004e12 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e10:	e0f4      	b.n	8004ffc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	2200      	movs	r2, #0
 8004e16:	461c      	mov	r4, r3
 8004e18:	4615      	mov	r5, r2
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	022b      	lsls	r3, r5, #8
 8004e24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e28:	0222      	lsls	r2, r4, #8
 8004e2a:	68f9      	ldr	r1, [r7, #12]
 8004e2c:	6849      	ldr	r1, [r1, #4]
 8004e2e:	0849      	lsrs	r1, r1, #1
 8004e30:	2000      	movs	r0, #0
 8004e32:	4688      	mov	r8, r1
 8004e34:	4681      	mov	r9, r0
 8004e36:	eb12 0a08 	adds.w	sl, r2, r8
 8004e3a:	eb43 0b09 	adc.w	fp, r3, r9
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	603b      	str	r3, [r7, #0]
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e4c:	4650      	mov	r0, sl
 8004e4e:	4659      	mov	r1, fp
 8004e50:	f7fb f9bc 	bl	80001cc <__aeabi_uldivmod>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4613      	mov	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e62:	d308      	bcc.n	8004e76 <UART_SetConfig+0x2b2>
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e6a:	d204      	bcs.n	8004e76 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	60da      	str	r2, [r3, #12]
 8004e74:	e0c2      	b.n	8004ffc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e7c:	e0be      	b.n	8004ffc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e86:	d16a      	bne.n	8004f5e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004e88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d834      	bhi.n	8004efa <UART_SetConfig+0x336>
 8004e90:	a201      	add	r2, pc, #4	@ (adr r2, 8004e98 <UART_SetConfig+0x2d4>)
 8004e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e96:	bf00      	nop
 8004e98:	08004ebd 	.word	0x08004ebd
 8004e9c:	08004edd 	.word	0x08004edd
 8004ea0:	08004ee5 	.word	0x08004ee5
 8004ea4:	08004efb 	.word	0x08004efb
 8004ea8:	08004eeb 	.word	0x08004eeb
 8004eac:	08004efb 	.word	0x08004efb
 8004eb0:	08004efb 	.word	0x08004efb
 8004eb4:	08004efb 	.word	0x08004efb
 8004eb8:	08004ef3 	.word	0x08004ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ebc:	f7fe fb1c 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 8004ec0:	61f8      	str	r0, [r7, #28]
        break;
 8004ec2:	e020      	b.n	8004f06 <UART_SetConfig+0x342>
 8004ec4:	efff69f3 	.word	0xefff69f3
 8004ec8:	40008000 	.word	0x40008000
 8004ecc:	40013800 	.word	0x40013800
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	40004400 	.word	0x40004400
 8004ed8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004edc:	f7fe fb22 	bl	8003524 <HAL_RCC_GetPCLK2Freq>
 8004ee0:	61f8      	str	r0, [r7, #28]
        break;
 8004ee2:	e010      	b.n	8004f06 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee4:	4b4c      	ldr	r3, [pc, #304]	@ (8005018 <UART_SetConfig+0x454>)
 8004ee6:	61fb      	str	r3, [r7, #28]
        break;
 8004ee8:	e00d      	b.n	8004f06 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eea:	f7fe fa6d 	bl	80033c8 <HAL_RCC_GetSysClockFreq>
 8004eee:	61f8      	str	r0, [r7, #28]
        break;
 8004ef0:	e009      	b.n	8004f06 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ef2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ef6:	61fb      	str	r3, [r7, #28]
        break;
 8004ef8:	e005      	b.n	8004f06 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d077      	beq.n	8004ffc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	005a      	lsls	r2, r3, #1
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	085b      	lsrs	r3, r3, #1
 8004f16:	441a      	add	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f20:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b0f      	cmp	r3, #15
 8004f26:	d916      	bls.n	8004f56 <UART_SetConfig+0x392>
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f2e:	d212      	bcs.n	8004f56 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	f023 030f 	bic.w	r3, r3, #15
 8004f38:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	085b      	lsrs	r3, r3, #1
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	8afb      	ldrh	r3, [r7, #22]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	8afa      	ldrh	r2, [r7, #22]
 8004f52:	60da      	str	r2, [r3, #12]
 8004f54:	e052      	b.n	8004ffc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f5c:	e04e      	b.n	8004ffc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d827      	bhi.n	8004fb6 <UART_SetConfig+0x3f2>
 8004f66:	a201      	add	r2, pc, #4	@ (adr r2, 8004f6c <UART_SetConfig+0x3a8>)
 8004f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6c:	08004f91 	.word	0x08004f91
 8004f70:	08004f99 	.word	0x08004f99
 8004f74:	08004fa1 	.word	0x08004fa1
 8004f78:	08004fb7 	.word	0x08004fb7
 8004f7c:	08004fa7 	.word	0x08004fa7
 8004f80:	08004fb7 	.word	0x08004fb7
 8004f84:	08004fb7 	.word	0x08004fb7
 8004f88:	08004fb7 	.word	0x08004fb7
 8004f8c:	08004faf 	.word	0x08004faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f90:	f7fe fab2 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 8004f94:	61f8      	str	r0, [r7, #28]
        break;
 8004f96:	e014      	b.n	8004fc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f98:	f7fe fac4 	bl	8003524 <HAL_RCC_GetPCLK2Freq>
 8004f9c:	61f8      	str	r0, [r7, #28]
        break;
 8004f9e:	e010      	b.n	8004fc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8005018 <UART_SetConfig+0x454>)
 8004fa2:	61fb      	str	r3, [r7, #28]
        break;
 8004fa4:	e00d      	b.n	8004fc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa6:	f7fe fa0f 	bl	80033c8 <HAL_RCC_GetSysClockFreq>
 8004faa:	61f8      	str	r0, [r7, #28]
        break;
 8004fac:	e009      	b.n	8004fc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fb2:	61fb      	str	r3, [r7, #28]
        break;
 8004fb4:	e005      	b.n	8004fc2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004fc0:	bf00      	nop
    }

    if (pclk != 0U)
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d019      	beq.n	8004ffc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	085a      	lsrs	r2, r3, #1
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	441a      	add	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fda:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	2b0f      	cmp	r3, #15
 8004fe0:	d909      	bls.n	8004ff6 <UART_SetConfig+0x432>
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fe8:	d205      	bcs.n	8004ff6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	60da      	str	r2, [r3, #12]
 8004ff4:	e002      	b.n	8004ffc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005008:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800500c:	4618      	mov	r0, r3
 800500e:	3728      	adds	r7, #40	@ 0x28
 8005010:	46bd      	mov	sp, r7
 8005012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005016:	bf00      	nop
 8005018:	00f42400 	.word	0x00f42400

0800501c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00a      	beq.n	80050ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01a      	beq.n	8005132 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800511a:	d10a      	bne.n	8005132 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	605a      	str	r2, [r3, #4]
  }
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b098      	sub	sp, #96	@ 0x60
 8005164:	af02      	add	r7, sp, #8
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005170:	f7fb fe6e 	bl	8000e50 <HAL_GetTick>
 8005174:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b08      	cmp	r3, #8
 8005182:	d12e      	bne.n	80051e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005184:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800518c:	2200      	movs	r2, #0
 800518e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f88c 	bl	80052b0 <UART_WaitOnFlagUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d021      	beq.n	80051e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80051be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e6      	bne.n	800519e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2220      	movs	r2, #32
 80051d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e062      	b.n	80052a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d149      	bne.n	8005284 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051f8:	2200      	movs	r2, #0
 80051fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f856 	bl	80052b0 <UART_WaitOnFlagUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d03c      	beq.n	8005284 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	623b      	str	r3, [r7, #32]
   return(result);
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800521e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005228:	633b      	str	r3, [r7, #48]	@ 0x30
 800522a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800522e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e6      	bne.n	800520a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3308      	adds	r3, #8
 8005242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	e853 3f00 	ldrex	r3, [r3]
 800524a:	60fb      	str	r3, [r7, #12]
   return(result);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0301 	bic.w	r3, r3, #1
 8005252:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3308      	adds	r3, #8
 800525a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800525c:	61fa      	str	r2, [r7, #28]
 800525e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	69b9      	ldr	r1, [r7, #24]
 8005262:	69fa      	ldr	r2, [r7, #28]
 8005264:	e841 2300 	strex	r3, r2, [r1]
 8005268:	617b      	str	r3, [r7, #20]
   return(result);
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e5      	bne.n	800523c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e011      	b.n	80052a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2220      	movs	r2, #32
 8005288:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2220      	movs	r2, #32
 800528e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3758      	adds	r7, #88	@ 0x58
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	603b      	str	r3, [r7, #0]
 80052bc:	4613      	mov	r3, r2
 80052be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c0:	e04f      	b.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052c8:	d04b      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ca:	f7fb fdc1 	bl	8000e50 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d302      	bcc.n	80052e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e04e      	b.n	8005382 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d037      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b80      	cmp	r3, #128	@ 0x80
 80052f6:	d034      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b40      	cmp	r3, #64	@ 0x40
 80052fc:	d031      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69db      	ldr	r3, [r3, #28]
 8005304:	f003 0308 	and.w	r3, r3, #8
 8005308:	2b08      	cmp	r3, #8
 800530a:	d110      	bne.n	800532e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2208      	movs	r2, #8
 8005312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f8ff 	bl	8005518 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2208      	movs	r2, #8
 800531e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e029      	b.n	8005382 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005338:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800533c:	d111      	bne.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005346:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f8e5 	bl	8005518 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2220      	movs	r2, #32
 8005352:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e00f      	b.n	8005382 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69da      	ldr	r2, [r3, #28]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4013      	ands	r3, r2
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	429a      	cmp	r2, r3
 8005370:	bf0c      	ite	eq
 8005372:	2301      	moveq	r3, #1
 8005374:	2300      	movne	r3, #0
 8005376:	b2db      	uxtb	r3, r3
 8005378:	461a      	mov	r2, r3
 800537a:	79fb      	ldrb	r3, [r7, #7]
 800537c:	429a      	cmp	r2, r3
 800537e:	d0a0      	beq.n	80052c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800538c:	b480      	push	{r7}
 800538e:	b097      	sub	sp, #92	@ 0x5c
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	4613      	mov	r3, r2
 8005398:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	88fa      	ldrh	r2, [r7, #6]
 80053a4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	88fa      	ldrh	r2, [r7, #6]
 80053ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053be:	d10e      	bne.n	80053de <UART_Start_Receive_IT+0x52>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d105      	bne.n	80053d4 <UART_Start_Receive_IT+0x48>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80053ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80053d2:	e02d      	b.n	8005430 <UART_Start_Receive_IT+0xa4>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	22ff      	movs	r2, #255	@ 0xff
 80053d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80053dc:	e028      	b.n	8005430 <UART_Start_Receive_IT+0xa4>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10d      	bne.n	8005402 <UART_Start_Receive_IT+0x76>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d104      	bne.n	80053f8 <UART_Start_Receive_IT+0x6c>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	22ff      	movs	r2, #255	@ 0xff
 80053f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80053f6:	e01b      	b.n	8005430 <UART_Start_Receive_IT+0xa4>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	227f      	movs	r2, #127	@ 0x7f
 80053fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005400:	e016      	b.n	8005430 <UART_Start_Receive_IT+0xa4>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800540a:	d10d      	bne.n	8005428 <UART_Start_Receive_IT+0x9c>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d104      	bne.n	800541e <UART_Start_Receive_IT+0x92>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	227f      	movs	r2, #127	@ 0x7f
 8005418:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800541c:	e008      	b.n	8005430 <UART_Start_Receive_IT+0xa4>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	223f      	movs	r2, #63	@ 0x3f
 8005422:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005426:	e003      	b.n	8005430 <UART_Start_Receive_IT+0xa4>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2222      	movs	r2, #34	@ 0x22
 800543c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3308      	adds	r3, #8
 8005446:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800544a:	e853 3f00 	ldrex	r3, [r3]
 800544e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005452:	f043 0301 	orr.w	r3, r3, #1
 8005456:	657b      	str	r3, [r7, #84]	@ 0x54
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	3308      	adds	r3, #8
 800545e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005460:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005462:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005464:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005466:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005468:	e841 2300 	strex	r3, r2, [r1]
 800546c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800546e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1e5      	bne.n	8005440 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800547c:	d107      	bne.n	800548e <UART_Start_Receive_IT+0x102>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d103      	bne.n	800548e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4a21      	ldr	r2, [pc, #132]	@ (8005510 <UART_Start_Receive_IT+0x184>)
 800548a:	669a      	str	r2, [r3, #104]	@ 0x68
 800548c:	e002      	b.n	8005494 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4a20      	ldr	r2, [pc, #128]	@ (8005514 <UART_Start_Receive_IT+0x188>)
 8005492:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d019      	beq.n	80054d0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80054b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80054bc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80054c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80054c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e6      	bne.n	800549c <UART_Start_Receive_IT+0x110>
 80054ce:	e018      	b.n	8005502 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	613b      	str	r3, [r7, #16]
   return(result);
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f043 0320 	orr.w	r3, r3, #32
 80054e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054ee:	623b      	str	r3, [r7, #32]
 80054f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	69f9      	ldr	r1, [r7, #28]
 80054f4:	6a3a      	ldr	r2, [r7, #32]
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e6      	bne.n	80054d0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	375c      	adds	r7, #92	@ 0x5c
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	0800581d 	.word	0x0800581d
 8005514:	08005661 	.word	0x08005661

08005518 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005518:	b480      	push	{r7}
 800551a:	b095      	sub	sp, #84	@ 0x54
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005530:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005534:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800553e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005540:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005544:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800554c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e6      	bne.n	8005520 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3308      	adds	r3, #8
 8005558:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	61fb      	str	r3, [r7, #28]
   return(result);
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	f023 0301 	bic.w	r3, r3, #1
 8005568:	64bb      	str	r3, [r7, #72]	@ 0x48
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3308      	adds	r3, #8
 8005570:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005572:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005574:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005578:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1e5      	bne.n	8005552 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800558a:	2b01      	cmp	r3, #1
 800558c:	d118      	bne.n	80055c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	e853 3f00 	ldrex	r3, [r3]
 800559a:	60bb      	str	r3, [r7, #8]
   return(result);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f023 0310 	bic.w	r3, r3, #16
 80055a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	461a      	mov	r2, r3
 80055aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055ac:	61bb      	str	r3, [r7, #24]
 80055ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b0:	6979      	ldr	r1, [r7, #20]
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	e841 2300 	strex	r3, r2, [r1]
 80055b8:	613b      	str	r3, [r7, #16]
   return(result);
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e6      	bne.n	800558e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80055d4:	bf00      	nop
 80055d6:	3754      	adds	r7, #84	@ 0x54
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f7ff faca 	bl	8004b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005604:	bf00      	nop
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	60bb      	str	r3, [r7, #8]
   return(result);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005628:	61fb      	str	r3, [r7, #28]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	61bb      	str	r3, [r7, #24]
 8005634:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6979      	ldr	r1, [r7, #20]
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	613b      	str	r3, [r7, #16]
   return(result);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e6      	bne.n	8005614 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7ff fa96 	bl	8004b84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005658:	bf00      	nop
 800565a:	3720      	adds	r7, #32
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b09c      	sub	sp, #112	@ 0x70
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800566e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005678:	2b22      	cmp	r3, #34	@ 0x22
 800567a:	f040 80be 	bne.w	80057fa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005684:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005688:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800568c:	b2d9      	uxtb	r1, r3
 800568e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005692:	b2da      	uxtb	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005698:	400a      	ands	r2, r1
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a2:	1c5a      	adds	r2, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3b01      	subs	r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f040 80a3 	bne.w	800580e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056d0:	e853 3f00 	ldrex	r3, [r3]
 80056d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80056d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056ee:	e841 2300 	strex	r3, r2, [r1]
 80056f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80056f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1e6      	bne.n	80056c8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3308      	adds	r3, #8
 8005700:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800570a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800570c:	f023 0301 	bic.w	r3, r3, #1
 8005710:	667b      	str	r3, [r7, #100]	@ 0x64
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3308      	adds	r3, #8
 8005718:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800571a:	647a      	str	r2, [r7, #68]	@ 0x44
 800571c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005720:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005722:	e841 2300 	strex	r3, r2, [r1]
 8005726:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1e5      	bne.n	80056fa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a34      	ldr	r2, [pc, #208]	@ (8005818 <UART_RxISR_8BIT+0x1b8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d01f      	beq.n	800578c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d018      	beq.n	800578c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005762:	e853 3f00 	ldrex	r3, [r3]
 8005766:	623b      	str	r3, [r7, #32]
   return(result);
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800576e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	461a      	mov	r2, r3
 8005776:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005778:	633b      	str	r3, [r7, #48]	@ 0x30
 800577a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800577e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005780:	e841 2300 	strex	r3, r2, [r1]
 8005784:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1e6      	bne.n	800575a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005790:	2b01      	cmp	r3, #1
 8005792:	d12e      	bne.n	80057f2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	e853 3f00 	ldrex	r3, [r3]
 80057a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0310 	bic.w	r3, r3, #16
 80057ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	461a      	mov	r2, r3
 80057b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057b8:	61fb      	str	r3, [r7, #28]
 80057ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057bc:	69b9      	ldr	r1, [r7, #24]
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	e841 2300 	strex	r3, r2, [r1]
 80057c4:	617b      	str	r3, [r7, #20]
   return(result);
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e6      	bne.n	800579a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	2b10      	cmp	r3, #16
 80057d8:	d103      	bne.n	80057e2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2210      	movs	r2, #16
 80057e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7ff f9de 	bl	8004bac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057f0:	e00d      	b.n	800580e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7fb f8ce 	bl	8000994 <HAL_UART_RxCpltCallback>
}
 80057f8:	e009      	b.n	800580e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	8b1b      	ldrh	r3, [r3, #24]
 8005800:	b29a      	uxth	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0208 	orr.w	r2, r2, #8
 800580a:	b292      	uxth	r2, r2
 800580c:	831a      	strh	r2, [r3, #24]
}
 800580e:	bf00      	nop
 8005810:	3770      	adds	r7, #112	@ 0x70
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	40008000 	.word	0x40008000

0800581c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b09c      	sub	sp, #112	@ 0x70
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800582a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005834:	2b22      	cmp	r3, #34	@ 0x22
 8005836:	f040 80be 	bne.w	80059b6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005840:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005848:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800584a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800584e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005852:	4013      	ands	r3, r2
 8005854:	b29a      	uxth	r2, r3
 8005856:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005858:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800585e:	1c9a      	adds	r2, r3, #2
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800586a:	b29b      	uxth	r3, r3
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	f040 80a3 	bne.w	80059ca <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005892:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005894:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005898:	667b      	str	r3, [r7, #100]	@ 0x64
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80058a4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80058a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80058b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e6      	bne.n	8005884 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3308      	adds	r3, #8
 80058bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c8:	f023 0301 	bic.w	r3, r3, #1
 80058cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3308      	adds	r3, #8
 80058d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80058d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80058d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058de:	e841 2300 	strex	r3, r2, [r1]
 80058e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1e5      	bne.n	80058b6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a34      	ldr	r2, [pc, #208]	@ (80059d4 <UART_RxISR_16BIT+0x1b8>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d01f      	beq.n	8005948 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d018      	beq.n	8005948 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	e853 3f00 	ldrex	r3, [r3]
 8005922:	61fb      	str	r3, [r7, #28]
   return(result);
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800592a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	461a      	mov	r2, r3
 8005932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005934:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005936:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005938:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800593a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800593c:	e841 2300 	strex	r3, r2, [r1]
 8005940:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1e6      	bne.n	8005916 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800594c:	2b01      	cmp	r3, #1
 800594e:	d12e      	bne.n	80059ae <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	e853 3f00 	ldrex	r3, [r3]
 8005962:	60bb      	str	r3, [r7, #8]
   return(result);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f023 0310 	bic.w	r3, r3, #16
 800596a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005974:	61bb      	str	r3, [r7, #24]
 8005976:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	6979      	ldr	r1, [r7, #20]
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	e841 2300 	strex	r3, r2, [r1]
 8005980:	613b      	str	r3, [r7, #16]
   return(result);
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e6      	bne.n	8005956 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	f003 0310 	and.w	r3, r3, #16
 8005992:	2b10      	cmp	r3, #16
 8005994:	d103      	bne.n	800599e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2210      	movs	r2, #16
 800599c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80059a4:	4619      	mov	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7ff f900 	bl	8004bac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059ac:	e00d      	b.n	80059ca <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7fa fff0 	bl	8000994 <HAL_UART_RxCpltCallback>
}
 80059b4:	e009      	b.n	80059ca <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	8b1b      	ldrh	r3, [r3, #24]
 80059bc:	b29a      	uxth	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0208 	orr.w	r2, r2, #8
 80059c6:	b292      	uxth	r2, r2
 80059c8:	831a      	strh	r2, [r3, #24]
}
 80059ca:	bf00      	nop
 80059cc:	3770      	adds	r7, #112	@ 0x70
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	40008000 	.word	0x40008000

080059d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <memset>:
 80059ec:	4402      	add	r2, r0
 80059ee:	4603      	mov	r3, r0
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d100      	bne.n	80059f6 <memset+0xa>
 80059f4:	4770      	bx	lr
 80059f6:	f803 1b01 	strb.w	r1, [r3], #1
 80059fa:	e7f9      	b.n	80059f0 <memset+0x4>

080059fc <__libc_init_array>:
 80059fc:	b570      	push	{r4, r5, r6, lr}
 80059fe:	4d0d      	ldr	r5, [pc, #52]	@ (8005a34 <__libc_init_array+0x38>)
 8005a00:	4c0d      	ldr	r4, [pc, #52]	@ (8005a38 <__libc_init_array+0x3c>)
 8005a02:	1b64      	subs	r4, r4, r5
 8005a04:	10a4      	asrs	r4, r4, #2
 8005a06:	2600      	movs	r6, #0
 8005a08:	42a6      	cmp	r6, r4
 8005a0a:	d109      	bne.n	8005a20 <__libc_init_array+0x24>
 8005a0c:	4d0b      	ldr	r5, [pc, #44]	@ (8005a3c <__libc_init_array+0x40>)
 8005a0e:	4c0c      	ldr	r4, [pc, #48]	@ (8005a40 <__libc_init_array+0x44>)
 8005a10:	f000 f818 	bl	8005a44 <_init>
 8005a14:	1b64      	subs	r4, r4, r5
 8005a16:	10a4      	asrs	r4, r4, #2
 8005a18:	2600      	movs	r6, #0
 8005a1a:	42a6      	cmp	r6, r4
 8005a1c:	d105      	bne.n	8005a2a <__libc_init_array+0x2e>
 8005a1e:	bd70      	pop	{r4, r5, r6, pc}
 8005a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a24:	4798      	blx	r3
 8005a26:	3601      	adds	r6, #1
 8005a28:	e7ee      	b.n	8005a08 <__libc_init_array+0xc>
 8005a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a2e:	4798      	blx	r3
 8005a30:	3601      	adds	r6, #1
 8005a32:	e7f2      	b.n	8005a1a <__libc_init_array+0x1e>
 8005a34:	08005aac 	.word	0x08005aac
 8005a38:	08005aac 	.word	0x08005aac
 8005a3c:	08005aac 	.word	0x08005aac
 8005a40:	08005ab0 	.word	0x08005ab0

08005a44 <_init>:
 8005a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a46:	bf00      	nop
 8005a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a4a:	bc08      	pop	{r3}
 8005a4c:	469e      	mov	lr, r3
 8005a4e:	4770      	bx	lr

08005a50 <_fini>:
 8005a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a52:	bf00      	nop
 8005a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a56:	bc08      	pop	{r3}
 8005a58:	469e      	mov	lr, r3
 8005a5a:	4770      	bx	lr
