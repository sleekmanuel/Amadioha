
Amadioha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0a4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  0800b238  0800b238  0000c238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7a4  0800b7a4  0000d200  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7a4  0800b7a4  0000c7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7ac  0800b7ac  0000d200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7ac  0800b7ac  0000c7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b7b0  0800b7b0  0000c7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800b7b4  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ec  20000200  0800b9b4  0000d200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008ec  0800b9b4  0000d8ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e83  00000000  00000000  0000d230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ee  00000000  00000000  000230b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  000261a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ed9  00000000  00000000  000274c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024255  00000000  00000000  00028399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e29  00000000  00000000  0004c5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dca62  00000000  00000000  00063417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013fe79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006580  00000000  00000000  0013febc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0014643c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b21c 	.word	0x0800b21c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800b21c 	.word	0x0800b21c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fea:	463b      	mov	r3, r7
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
 8000ff8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ffa:	4b29      	ldr	r3, [pc, #164]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 8000ffc:	4a29      	ldr	r2, [pc, #164]	@ (80010a4 <MX_ADC1_Init+0xc0>)
 8000ffe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001000:	4b27      	ldr	r3, [pc, #156]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 8001002:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001006:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001008:	4b25      	ldr	r3, [pc, #148]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800100e:	4b24      	ldr	r3, [pc, #144]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001014:	4b22      	ldr	r3, [pc, #136]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800101a:	4b21      	ldr	r3, [pc, #132]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 800101c:	2204      	movs	r2, #4
 800101e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001020:	4b1f      	ldr	r3, [pc, #124]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 8001022:	2200      	movs	r2, #0
 8001024:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001026:	4b1e      	ldr	r3, [pc, #120]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 8001028:	2200      	movs	r2, #0
 800102a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800102c:	4b1c      	ldr	r3, [pc, #112]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 800102e:	2201      	movs	r2, #1
 8001030:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001032:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800103a:	4b19      	ldr	r3, [pc, #100]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 800103c:	2200      	movs	r2, #0
 800103e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001040:	4b17      	ldr	r3, [pc, #92]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 8001042:	2200      	movs	r2, #0
 8001044:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001046:	4b16      	ldr	r3, [pc, #88]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800104e:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 8001050:	2200      	movs	r2, #0
 8001052:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001054:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800105c:	4810      	ldr	r0, [pc, #64]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 800105e:	f001 f93f 	bl	80022e0 <HAL_ADC_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001068:	f000 fbc4 	bl	80017f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800106c:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <MX_ADC1_Init+0xc4>)
 800106e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001070:	2306      	movs	r3, #6
 8001072:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001078:	237f      	movs	r3, #127	@ 0x7f
 800107a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800107c:	2304      	movs	r3, #4
 800107e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001084:	463b      	mov	r3, r7
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <MX_ADC1_Init+0xbc>)
 800108a:	f001 fb6b 	bl	8002764 <HAL_ADC_ConfigChannel>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001094:	f000 fbae 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2000021c 	.word	0x2000021c
 80010a4:	50040000 	.word	0x50040000
 80010a8:	1d500080 	.word	0x1d500080

080010ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b09e      	sub	sp, #120	@ 0x78
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	2254      	movs	r2, #84	@ 0x54
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f007 fa18 	bl	8008502 <memset>
  if(adcHandle->Instance==ADC1)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a25      	ldr	r2, [pc, #148]	@ (800116c <HAL_ADC_MspInit+0xc0>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d143      	bne.n	8001164 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010e0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010e2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80010e6:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80010e8:	2301      	movs	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80010f0:	2310      	movs	r3, #16
 80010f2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010f4:	2307      	movs	r3, #7
 80010f6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001100:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001104:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4618      	mov	r0, r3
 800110c:	f003 f972 	bl	80043f4 <HAL_RCCEx_PeriphCLKConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001116:	f000 fb6d 	bl	80017f4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <HAL_ADC_MspInit+0xc4>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	4a14      	ldr	r2, [pc, #80]	@ (8001170 <HAL_ADC_MspInit+0xc4>)
 8001120:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001126:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <HAL_ADC_MspInit+0xc4>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <HAL_ADC_MspInit+0xc4>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	4a0e      	ldr	r2, [pc, #56]	@ (8001170 <HAL_ADC_MspInit+0xc4>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113e:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <HAL_ADC_MspInit+0xc4>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800114a:	2304      	movs	r3, #4
 800114c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800114e:	230b      	movs	r3, #11
 8001150:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001160:	f002 f8f8 	bl	8003354 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001164:	bf00      	nop
 8001166:	3778      	adds	r7, #120	@ 0x78
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	50040000 	.word	0x50040000
 8001170:	40021000 	.word	0x40021000

08001174 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	4b2c      	ldr	r3, [pc, #176]	@ (800123c <MX_GPIO_Init+0xc8>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118e:	4a2b      	ldr	r2, [pc, #172]	@ (800123c <MX_GPIO_Init+0xc8>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001196:	4b29      	ldr	r3, [pc, #164]	@ (800123c <MX_GPIO_Init+0xc8>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	4b26      	ldr	r3, [pc, #152]	@ (800123c <MX_GPIO_Init+0xc8>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	4a25      	ldr	r2, [pc, #148]	@ (800123c <MX_GPIO_Init+0xc8>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ae:	4b23      	ldr	r3, [pc, #140]	@ (800123c <MX_GPIO_Init+0xc8>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VBase_Pin|Sense_CuttOff_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2118      	movs	r1, #24
 80011be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c2:	f002 fa31 	bl	8003628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2102      	movs	r1, #2
 80011ca:	481d      	ldr	r0, [pc, #116]	@ (8001240 <MX_GPIO_Init+0xcc>)
 80011cc:	f002 fa2c 	bl	8003628 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VBase_Pin|Sense_CuttOff_Pin;
 80011d0:	2318      	movs	r3, #24
 80011d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	4619      	mov	r1, r3
 80011e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ea:	f002 f8b3 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Switch_Pin;
 80011ee:	2301      	movs	r3, #1
 80011f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Switch_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	4619      	mov	r1, r3
 8001202:	480f      	ldr	r0, [pc, #60]	@ (8001240 <MX_GPIO_Init+0xcc>)
 8001204:	f002 f8a6 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001208:	2302      	movs	r3, #2
 800120a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	4619      	mov	r1, r3
 800121e:	4808      	ldr	r0, [pc, #32]	@ (8001240 <MX_GPIO_Init+0xcc>)
 8001220:	f002 f898 	bl	8003354 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	2100      	movs	r1, #0
 8001228:	2006      	movs	r0, #6
 800122a:	f001 ffde 	bl	80031ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800122e:	2006      	movs	r0, #6
 8001230:	f001 fff7 	bl	8003222 <HAL_NVIC_EnableIRQ>

}
 8001234:	bf00      	nop
 8001236:	3720      	adds	r7, #32
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40021000 	.word	0x40021000
 8001240:	48000400 	.word	0x48000400

08001244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800124a:	f000 fde8 	bl	8001e1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124e:	f000 f88b 	bl	8001368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001252:	f7ff ff8f 	bl	8001174 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001256:	f7ff fec5 	bl	8000fe4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800125a:	f000 fc89 	bl	8001b70 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800125e:	f000 fc15 	bl	8001a8c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001262:	4837      	ldr	r0, [pc, #220]	@ (8001340 <main+0xfc>)
 8001264:	f003 fc06 	bl	8004a74 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, &XBeeData.received_byte, 1);  // start IT receiving
 8001268:	2201      	movs	r2, #1
 800126a:	4936      	ldr	r1, [pc, #216]	@ (8001344 <main+0x100>)
 800126c:	4836      	ldr	r0, [pc, #216]	@ (8001348 <main+0x104>)
 800126e:	f004 f8bd 	bl	80053ec <HAL_UART_Receive_IT>
 // HAL_Delay(2000);
  //requestParameter("ATdb\r", myDestLow, sizeof(myDestLow));
  //setDestinationAddress(ADDRESS_HIGH, 0x4270271A);
  //setParameter("ATNI SWITCH\r");
 // Request and store XBee Serial Number Low
   enterCommandMode();
 8001272:	f000 fd0d 	bl	8001c90 <enterCommandMode>
   if (requestParameter("ATSL\r", XBeeData.myAddress, sizeof(XBeeData.myAddress)) == XBEE_SUCCESS) {
 8001276:	2208      	movs	r2, #8
 8001278:	4934      	ldr	r1, [pc, #208]	@ (800134c <main+0x108>)
 800127a:	4835      	ldr	r0, [pc, #212]	@ (8001350 <main+0x10c>)
 800127c:	f000 fd32 	bl	8001ce4 <requestParameter>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d008      	beq.n	8001298 <main+0x54>
  } else {
	  //Blink LED in a loop to indicate issue
      while(1){
    	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // turn on LEDs
 8001286:	2102      	movs	r1, #2
 8001288:	4832      	ldr	r0, [pc, #200]	@ (8001354 <main+0x110>)
 800128a:	f002 f9e5 	bl	8003658 <HAL_GPIO_TogglePin>
    	  HAL_Delay(100);
 800128e:	2064      	movs	r0, #100	@ 0x64
 8001290:	f000 fe3a 	bl	8001f08 <HAL_Delay>
    	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // turn on LEDs
 8001294:	bf00      	nop
 8001296:	e7f6      	b.n	8001286 <main+0x42>
      }
  }

/* XBEE Configuration Ends--------------------------------------------------*/
  /* USER CODE END 2 */
  memcpy(currentResponse, XBeeData.myAddress, 8);  //append my serial # low to current value response variable
 8001298:	4b2f      	ldr	r3, [pc, #188]	@ (8001358 <main+0x114>)
 800129a:	4a30      	ldr	r2, [pc, #192]	@ (800135c <main+0x118>)
 800129c:	320f      	adds	r2, #15
 800129e:	6810      	ldr	r0, [r2, #0]
 80012a0:	6851      	ldr	r1, [r2, #4]
 80012a2:	c303      	stmia	r3!, {r0, r1}
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /*        BLICK TWICE FOR SUCCESSFUL INITIALIZATION       */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2102      	movs	r1, #2
 80012a8:	482a      	ldr	r0, [pc, #168]	@ (8001354 <main+0x110>)
 80012aa:	f002 f9bd 	bl	8003628 <HAL_GPIO_WritePin>
  for(int j = 0; j < 2; j++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	e00a      	b.n	80012ca <main+0x86>
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80012b4:	2102      	movs	r1, #2
 80012b6:	4827      	ldr	r0, [pc, #156]	@ (8001354 <main+0x110>)
 80012b8:	f002 f9ce 	bl	8003658 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80012bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012c0:	f000 fe22 	bl	8001f08 <HAL_Delay>
  for(int j = 0; j < 2; j++)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3301      	adds	r3, #1
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	ddf1      	ble.n	80012b4 <main+0x70>


  while (1)
  {

	  if (XBeeData.data_received_flag) {
 80012d0:	4b22      	ldr	r3, [pc, #136]	@ (800135c <main+0x118>)
 80012d2:	7b5b      	ldrb	r3, [r3, #13]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0fa      	beq.n	80012d0 <main+0x8c>
	           // Check if the message is meant for me
	           if (memcmp(XBeeData.myAddress, XBeeData.rx_buffer, 8) == 0) {
 80012da:	2208      	movs	r2, #8
 80012dc:	491f      	ldr	r1, [pc, #124]	@ (800135c <main+0x118>)
 80012de:	481b      	ldr	r0, [pc, #108]	@ (800134c <main+0x108>)
 80012e0:	f007 f8ff 	bl	80084e2 <memcmp>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d11b      	bne.n	8001322 <main+0xde>
	               // Extract and handle command and data
	               Control = XBeeData.rx_buffer[8];
 80012ea:	4b1c      	ldr	r3, [pc, #112]	@ (800135c <main+0x118>)
 80012ec:	7a1a      	ldrb	r2, [r3, #8]
 80012ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001360 <main+0x11c>)
 80012f0:	701a      	strb	r2, [r3, #0]
	               Data = XBeeData.rx_buffer[9];
 80012f2:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <main+0x118>)
 80012f4:	7a5a      	ldrb	r2, [r3, #9]
 80012f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <main+0x120>)
 80012f8:	701a      	strb	r2, [r3, #0]

	               if (Control == 0xC0) {
 80012fa:	4b19      	ldr	r3, [pc, #100]	@ (8001360 <main+0x11c>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8001300:	d105      	bne.n	800130e <main+0xca>
	                   handleSwitchControl(Data);
 8001302:	4b18      	ldr	r3, [pc, #96]	@ (8001364 <main+0x120>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f958 	bl	80015bc <handleSwitchControl>
 800130c:	e009      	b.n	8001322 <main+0xde>
	               } else if (Control == 0xFF && Data == 0x01) {
 800130e:	4b14      	ldr	r3, [pc, #80]	@ (8001360 <main+0x11c>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2bff      	cmp	r3, #255	@ 0xff
 8001314:	d105      	bne.n	8001322 <main+0xde>
 8001316:	4b13      	ldr	r3, [pc, #76]	@ (8001364 <main+0x120>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d101      	bne.n	8001322 <main+0xde>
	                   handleCurrentControl();
 800131e:	f000 f96b 	bl	80015f8 <handleCurrentControl>
	               }
	           }

	           // Reset flags and buffers after processing
	           XBeeData.data_received_flag = 0;
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <main+0x118>)
 8001324:	2200      	movs	r2, #0
 8001326:	735a      	strb	r2, [r3, #13]
	           memset(XBeeData.rx_buffer, 0, DATA_BUFFER_SIZE);
 8001328:	220c      	movs	r2, #12
 800132a:	2100      	movs	r1, #0
 800132c:	480b      	ldr	r0, [pc, #44]	@ (800135c <main+0x118>)
 800132e:	f007 f8e8 	bl	8008502 <memset>
	           HAL_UART_Receive_IT(&huart1, &XBeeData.received_byte, 1);
 8001332:	2201      	movs	r2, #1
 8001334:	4903      	ldr	r1, [pc, #12]	@ (8001344 <main+0x100>)
 8001336:	4804      	ldr	r0, [pc, #16]	@ (8001348 <main+0x104>)
 8001338:	f004 f858 	bl	80053ec <HAL_UART_Receive_IT>
	  if (XBeeData.data_received_flag) {
 800133c:	e7c8      	b.n	80012d0 <main+0x8c>
 800133e:	bf00      	nop
 8001340:	200006c8 	.word	0x200006c8
 8001344:	20000290 	.word	0x20000290
 8001348:	20000714 	.word	0x20000714
 800134c:	20000293 	.word	0x20000293
 8001350:	0800b238 	.word	0x0800b238
 8001354:	48000400 	.word	0x48000400
 8001358:	200006b4 	.word	0x200006b4
 800135c:	20000284 	.word	0x20000284
 8001360:	2000029b 	.word	0x2000029b
 8001364:	2000029c 	.word	0x2000029c

08001368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b096      	sub	sp, #88	@ 0x58
 800136c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	2244      	movs	r2, #68	@ 0x44
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f007 f8c3 	bl	8008502 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800137c:	463b      	mov	r3, r7
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800138a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800138e:	f002 f9a3 	bl	80036d8 <HAL_PWREx_ControlVoltageScaling>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001398:	f000 fa2c 	bl	80017f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800139c:	2310      	movs	r3, #16
 800139e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013a0:	2301      	movs	r3, #1
 80013a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013a8:	2360      	movs	r3, #96	@ 0x60
 80013aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ac:	2302      	movs	r3, #2
 80013ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013b0:	2301      	movs	r3, #1
 80013b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 80013b8:	2324      	movs	r3, #36	@ 0x24
 80013ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013bc:	2307      	movs	r3, #7
 80013be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013c0:	2302      	movs	r3, #2
 80013c2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013c4:	2302      	movs	r3, #2
 80013c6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 f9d9 	bl	8003784 <HAL_RCC_OscConfig>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80013d8:	f000 fa0c 	bl	80017f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013dc:	230f      	movs	r3, #15
 80013de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e0:	2303      	movs	r3, #3
 80013e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013f2:	463b      	mov	r3, r7
 80013f4:	2104      	movs	r1, #4
 80013f6:	4618      	mov	r0, r3
 80013f8:	f002 fdd8 	bl	8003fac <HAL_RCC_ClockConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001402:	f000 f9f7 	bl	80017f4 <Error_Handler>
  }
}
 8001406:	bf00      	nop
 8001408:	3758      	adds	r7, #88	@ 0x58
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <Read_ADC>:

/* USER CODE BEGIN 4 */

// Function to read ADC value
float Read_ADC(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);  // Start ADC conversion
 8001416:	482c      	ldr	r0, [pc, #176]	@ (80014c8 <Read_ADC+0xb8>)
 8001418:	f001 f8a4 	bl	8002564 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);  // Wait for conversion to finish
 800141c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001420:	4829      	ldr	r0, [pc, #164]	@ (80014c8 <Read_ADC+0xb8>)
 8001422:	f001 f902 	bl	800262a <HAL_ADC_PollForConversion>
     adcValue = HAL_ADC_GetValue(&hadc1);  // Get the ADC value
 8001426:	4828      	ldr	r0, [pc, #160]	@ (80014c8 <Read_ADC+0xb8>)
 8001428:	f001 f98e 	bl	8002748 <HAL_ADC_GetValue>
 800142c:	4603      	mov	r3, r0
 800142e:	b29a      	uxth	r2, r3
 8001430:	4b26      	ldr	r3, [pc, #152]	@ (80014cc <Read_ADC+0xbc>)
 8001432:	801a      	strh	r2, [r3, #0]

    volatile float voltage = (adcValue / ADC_RESOLUTION) * V_REF;  // Convert ADC value to voltage
 8001434:	4b25      	ldr	r3, [pc, #148]	@ (80014cc <Read_ADC+0xbc>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	b29b      	uxth	r3, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff f872 	bl	8000524 <__aeabi_i2d>
 8001440:	a31b      	add	r3, pc, #108	@ (adr r3, 80014b0 <Read_ADC+0xa0>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff fa01 	bl	800084c <__aeabi_ddiv>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	a319      	add	r3, pc, #100	@ (adr r3, 80014b8 <Read_ADC+0xa8>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	f7ff f8ce 	bl	80005f8 <__aeabi_dmul>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fbc0 	bl	8000be8 <__aeabi_d2f>
 8001468:	4603      	mov	r3, r0
 800146a:	607b      	str	r3, [r7, #4]
    float zeroCurrentVoltage = 2.45;      // Measured sensor output voltage at zero current
 800146c:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <Read_ADC+0xc0>)
 800146e:	60fb      	str	r3, [r7, #12]
    // Calculate current using sensor sensitivity (mV/A)
    float current = (voltage - zeroCurrentVoltage) / SENSITIVITY;  // in Amps
 8001470:	ed97 7a01 	vldr	s14, [r7, #4]
 8001474:	edd7 7a03 	vldr	s15, [r7, #12]
 8001478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800147c:	ee17 0a90 	vmov	r0, s15
 8001480:	f7ff f862 	bl	8000548 <__aeabi_f2d>
 8001484:	a30e      	add	r3, pc, #56	@ (adr r3, 80014c0 <Read_ADC+0xb0>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7ff f9df 	bl	800084c <__aeabi_ddiv>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f7ff fba7 	bl	8000be8 <__aeabi_d2f>
 800149a:	4603      	mov	r3, r0
 800149c:	60bb      	str	r3, [r7, #8]
    return current;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	ee07 3a90 	vmov	s15, r3
}
 80014a4:	eeb0 0a67 	vmov.f32	s0, s15
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	00000000 	.word	0x00000000
 80014b4:	40affe00 	.word	0x40affe00
 80014b8:	66666666 	.word	0x66666666
 80014bc:	400a6666 	.word	0x400a6666
 80014c0:	7ae147ae 	.word	0x7ae147ae
 80014c4:	3fc7ae14 	.word	0x3fc7ae14
 80014c8:	2000021c 	.word	0x2000021c
 80014cc:	200002a4 	.word	0x200002a4
 80014d0:	401ccccd 	.word	0x401ccccd

080014d4 <Calculate_RMS>:
// Function to calculate the RMS value of the sampled current
float Calculate_RMS(float samples[], int sampleCount) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
    float sumSquares = 0;
 80014de:	f04f 0300 	mov.w	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < sampleCount; i++) {
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	e016      	b.n	8001518 <Calculate_RMS+0x44>
        sumSquares += samples[i] * samples[i];
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	ed93 7a00 	vldr	s14, [r3]
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	edd3 7a00 	vldr	s15, [r3]
 8001502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001506:	ed97 7a03 	vldr	s14, [r7, #12]
 800150a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150e:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i = 0; i < sampleCount; i++) {
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	3301      	adds	r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	dbe4      	blt.n	80014ea <Calculate_RMS+0x16>
    }

    // Return the square root of the mean of the squares (RMS value)
    return sqrt(sumSquares / sampleCount);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152a:	ed97 7a03 	vldr	s14, [r7, #12]
 800152e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001532:	ee16 0a90 	vmov	r0, s13
 8001536:	f7ff f807 	bl	8000548 <__aeabi_f2d>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	ec43 2b10 	vmov	d0, r2, r3
 8001542:	f009 fd65 	bl	800b010 <sqrt>
 8001546:	ec53 2b10 	vmov	r2, r3, d0
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff fb4b 	bl	8000be8 <__aeabi_d2f>
 8001552:	4603      	mov	r3, r0
 8001554:	ee07 3a90 	vmov	s15, r3
}
 8001558:	eeb0 0a67 	vmov.f32	s0, s15
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <CheckAndTransmitLoadChange>:

/*
 * checks if load changed state and transmits new state to motion sensor
 */
void CheckAndTransmitLoadChange(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
    if (loadActive != previousLoadActive) {
 8001568:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <CheckAndTransmitLoadChange+0x44>)
 800156a:	781a      	ldrb	r2, [r3, #0]
 800156c:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <CheckAndTransmitLoadChange+0x48>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d016      	beq.n	80015a2 <CheckAndTransmitLoadChange+0x3e>

        if (loadActive) {
 8001574:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <CheckAndTransmitLoadChange+0x44>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d007      	beq.n	800158c <CheckAndTransmitLoadChange+0x28>
            HAL_UART_Transmit(&huart1, Load_Active, sizeof(Load_Active), HAL_MAX_DELAY);  // Send "load active" message
 800157c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001580:	220b      	movs	r2, #11
 8001582:	490b      	ldr	r1, [pc, #44]	@ (80015b0 <CheckAndTransmitLoadChange+0x4c>)
 8001584:	480b      	ldr	r0, [pc, #44]	@ (80015b4 <CheckAndTransmitLoadChange+0x50>)
 8001586:	f003 fea7 	bl	80052d8 <HAL_UART_Transmit>
 800158a:	e006      	b.n	800159a <CheckAndTransmitLoadChange+0x36>
        } else {
            HAL_UART_Transmit(&huart1, Load_Inactive, sizeof(Load_Inactive), HAL_MAX_DELAY);  // Send "load inactive" message
 800158c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001590:	220b      	movs	r2, #11
 8001592:	4909      	ldr	r1, [pc, #36]	@ (80015b8 <CheckAndTransmitLoadChange+0x54>)
 8001594:	4807      	ldr	r0, [pc, #28]	@ (80015b4 <CheckAndTransmitLoadChange+0x50>)
 8001596:	f003 fe9f 	bl	80052d8 <HAL_UART_Transmit>
        }

        previousLoadActive = loadActive;
 800159a:	4b03      	ldr	r3, [pc, #12]	@ (80015a8 <CheckAndTransmitLoadChange+0x44>)
 800159c:	781a      	ldrb	r2, [r3, #0]
 800159e:	4b03      	ldr	r3, [pc, #12]	@ (80015ac <CheckAndTransmitLoadChange+0x48>)
 80015a0:	701a      	strb	r2, [r3, #0]
    }
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000280 	.word	0x20000280
 80015ac:	20000281 	.word	0x20000281
 80015b0:	20000000 	.word	0x20000000
 80015b4:	20000714 	.word	0x20000714
 80015b8:	2000000c 	.word	0x2000000c

080015bc <handleSwitchControl>:
/*
 * @func processes information for load control
 * @param Data section of Rx transmission
 */
void handleSwitchControl(uint8_t Data)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
    if (Data == 0x0F) {
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	2b0f      	cmp	r3, #15
 80015ca:	d106      	bne.n	80015da <handleSwitchControl+0x1e>
        if (!loadActive) {
 80015cc:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <handleSwitchControl+0x38>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10b      	bne.n	80015ec <handleSwitchControl+0x30>
            Enable_Load();
 80015d4:	f000 f876 	bl	80016c4 <Enable_Load>
    } else if (Data == 0x0A) {
        if (loadActive) {
            Disable_Load();
        }
    }
}
 80015d8:	e008      	b.n	80015ec <handleSwitchControl+0x30>
    } else if (Data == 0x0A) {
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b0a      	cmp	r3, #10
 80015de:	d105      	bne.n	80015ec <handleSwitchControl+0x30>
        if (loadActive) {
 80015e0:	4b04      	ldr	r3, [pc, #16]	@ (80015f4 <handleSwitchControl+0x38>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <handleSwitchControl+0x30>
            Disable_Load();
 80015e8:	f000 f884 	bl	80016f4 <Disable_Load>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000280 	.word	0x20000280

080015f8 <handleCurrentControl>:

// Function to handle Control == 0xFF and Data == 0x01
void handleCurrentControl()
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
    // Take sample of SAMPLE_COUNT of current readings
    for (int i = 0; i < SAMPLE_COUNT; i++) {
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	e00f      	b.n	8001624 <handleCurrentControl+0x2c>
        samples[i] = Read_ADC();
 8001604:	f7ff ff04 	bl	8001410 <Read_ADC>
 8001608:	eef0 7a40 	vmov.f32	s15, s0
 800160c:	4a26      	ldr	r2, [pc, #152]	@ (80016a8 <handleCurrentControl+0xb0>)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	edc3 7a00 	vstr	s15, [r3]
        HAL_Delay(1);
 8001618:	2001      	movs	r0, #1
 800161a:	f000 fc75 	bl	8001f08 <HAL_Delay>
    for (int i = 0; i < SAMPLE_COUNT; i++) {
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	3301      	adds	r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2bf9      	cmp	r3, #249	@ 0xf9
 8001628:	ddec      	ble.n	8001604 <handleCurrentControl+0xc>
    }
    currentRMS = Calculate_RMS(samples, SAMPLE_COUNT); // Calculate the RMS value
 800162a:	21fa      	movs	r1, #250	@ 0xfa
 800162c:	481e      	ldr	r0, [pc, #120]	@ (80016a8 <handleCurrentControl+0xb0>)
 800162e:	f7ff ff51 	bl	80014d4 <Calculate_RMS>
 8001632:	eef0 7a40 	vmov.f32	s15, s0
 8001636:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <handleCurrentControl+0xb4>)
 8001638:	edc3 7a00 	vstr	s15, [r3]
    sprintf(buffer, "%.2f\r", currentRMS); // Format float to a string
 800163c:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <handleCurrentControl+0xb4>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ff81 	bl	8000548 <__aeabi_f2d>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4919      	ldr	r1, [pc, #100]	@ (80016b0 <handleCurrentControl+0xb8>)
 800164c:	4819      	ldr	r0, [pc, #100]	@ (80016b4 <handleCurrentControl+0xbc>)
 800164e:	f005 ffbf 	bl	80075d0 <siprintf>

    int msgLength = strlen((char*)currentResponse);
 8001652:	4819      	ldr	r0, [pc, #100]	@ (80016b8 <handleCurrentControl+0xc0>)
 8001654:	f7fe fe0c 	bl	8000270 <strlen>
 8001658:	4603      	mov	r3, r0
 800165a:	60bb      	str	r3, [r7, #8]
    int bufferLength = strlen(buffer);
 800165c:	4815      	ldr	r0, [pc, #84]	@ (80016b4 <handleCurrentControl+0xbc>)
 800165e:	f7fe fe07 	bl	8000270 <strlen>
 8001662:	4603      	mov	r3, r0
 8001664:	607b      	str	r3, [r7, #4]
    if (msgLength + bufferLength  < CURRENT_RESPONSE_SIZE){
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4413      	add	r3, r2
 800166c:	2b0e      	cmp	r3, #14
 800166e:	dc03      	bgt.n	8001678 <handleCurrentControl+0x80>
        strcat((char *)currentResponse, buffer); // Append currentRMS to xbeeMessage
 8001670:	4910      	ldr	r1, [pc, #64]	@ (80016b4 <handleCurrentControl+0xbc>)
 8001672:	4811      	ldr	r0, [pc, #68]	@ (80016b8 <handleCurrentControl+0xc0>)
 8001674:	f006 ff14 	bl	80084a0 <strcat>
    }
    HAL_UART_Transmit(&huart1,  (uint8_t *)currentResponse, strlen((char*)currentResponse), HAL_MAX_DELAY);
 8001678:	480f      	ldr	r0, [pc, #60]	@ (80016b8 <handleCurrentControl+0xc0>)
 800167a:	f7fe fdf9 	bl	8000270 <strlen>
 800167e:	4603      	mov	r3, r0
 8001680:	b29a      	uxth	r2, r3
 8001682:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001686:	490c      	ldr	r1, [pc, #48]	@ (80016b8 <handleCurrentControl+0xc0>)
 8001688:	480c      	ldr	r0, [pc, #48]	@ (80016bc <handleCurrentControl+0xc4>)
 800168a:	f003 fe25 	bl	80052d8 <HAL_UART_Transmit>

    // Reset the currentResponse to its initial state
    memset(currentResponse + 8, 0, CURRENT_RESPONSE_SIZE - 8); // Clear all content after the 8-byte address
 800168e:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <handleCurrentControl+0xc8>)
 8001690:	2207      	movs	r2, #7
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f006 ff34 	bl	8008502 <memset>
    currentResponse[8] = '\0'; // Ensure null termination
 800169a:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <handleCurrentControl+0xc0>)
 800169c:	2200      	movs	r2, #0
 800169e:	721a      	strb	r2, [r3, #8]
}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200002ac 	.word	0x200002ac
 80016ac:	200002a0 	.word	0x200002a0
 80016b0:	0800b240 	.word	0x0800b240
 80016b4:	20000694 	.word	0x20000694
 80016b8:	200006b4 	.word	0x200006b4
 80016bc:	20000714 	.word	0x20000714
 80016c0:	200006bc 	.word	0x200006bc

080016c4 <Enable_Load>:
/*
 * Enable Load when Load is disabled
 * Turn on Onboard LED
 */
void Enable_Load(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	loadActive = 1;
 80016c8:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <Enable_Load+0x28>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET); // turn on LEDs
 80016ce:	2201      	movs	r2, #1
 80016d0:	2102      	movs	r1, #2
 80016d2:	4807      	ldr	r0, [pc, #28]	@ (80016f0 <Enable_Load+0x2c>)
 80016d4:	f001 ffa8 	bl	8003628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, VBase_Pin, SET); //engage relay
 80016d8:	2201      	movs	r2, #1
 80016da:	2108      	movs	r1, #8
 80016dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016e0:	f001 ffa2 	bl	8003628 <HAL_GPIO_WritePin>
	CheckAndTransmitLoadChange();
 80016e4:	f7ff ff3e 	bl	8001564 <CheckAndTransmitLoadChange>
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000280 	.word	0x20000280
 80016f0:	48000400 	.word	0x48000400

080016f4 <Disable_Load>:
/*
 * Disable Load when Load is active
 * Turn off Onboard LED
 */
void Disable_Load(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	loadActive = 0;
 80016f8:	4b08      	ldr	r3, [pc, #32]	@ (800171c <Disable_Load+0x28>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET); // turn off LEDs
 80016fe:	2200      	movs	r2, #0
 8001700:	2102      	movs	r1, #2
 8001702:	4807      	ldr	r0, [pc, #28]	@ (8001720 <Disable_Load+0x2c>)
 8001704:	f001 ff90 	bl	8003628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, VBase_Pin, RESET); // disengage relay
 8001708:	2200      	movs	r2, #0
 800170a:	2108      	movs	r1, #8
 800170c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001710:	f001 ff8a 	bl	8003628 <HAL_GPIO_WritePin>
	CheckAndTransmitLoadChange();
 8001714:	f7ff ff26 	bl	8001564 <CheckAndTransmitLoadChange>
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000280 	.word	0x20000280
 8001720:	48000400 	.word	0x48000400

08001724 <HAL_GPIO_EXTI_Callback>:

/* Check if the power on button is pushed
 * if pushed when the load is active, it turns off the load and vice-versa
*/
 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	80fb      	strh	r3, [r7, #6]

	 if(GPIO_Pin == Switch_Pin)
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d114      	bne.n	800175e <HAL_GPIO_EXTI_Callback+0x3a>
	     {
	         /* Get the current time (in milliseconds) */
	         uint32_t currentTime = HAL_GetTick(); // HAL_GetTick() returns the system time in ms
 8001734:	f000 fbdc 	bl	8001ef0 <HAL_GetTick>
 8001738:	60f8      	str	r0, [r7, #12]
	         /* Check if enough time has passed since the last press to consider this a valid press */
	         if((currentTime - lastDebounceTime) >= DEBOUNCE_DELAY_MS)
 800173a:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <HAL_GPIO_EXTI_Callback+0x44>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b31      	cmp	r3, #49	@ 0x31
 8001744:	d90b      	bls.n	800175e <HAL_GPIO_EXTI_Callback+0x3a>
	         {
	             /* Toggle the load state */
	             (loadActive) ? Disable_Load(): Enable_Load();
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <HAL_GPIO_EXTI_Callback+0x48>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <HAL_GPIO_EXTI_Callback+0x30>
 800174e:	f7ff ffd1 	bl	80016f4 <Disable_Load>
 8001752:	e001      	b.n	8001758 <HAL_GPIO_EXTI_Callback+0x34>
 8001754:	f7ff ffb6 	bl	80016c4 <Enable_Load>
	             /* Update the last debounce time */
	             lastDebounceTime = currentTime;
 8001758:	4a03      	ldr	r2, [pc, #12]	@ (8001768 <HAL_GPIO_EXTI_Callback+0x44>)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6013      	str	r3, [r2, #0]
	         }
	     }
}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200002a8 	.word	0x200002a8
 800176c:	20000280 	.word	0x20000280

08001770 <HAL_UART_RxCpltCallback>:

 /*
  * Receive interrupt callback function
  */

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
     static uint8_t index = 0;

     if (huart->Instance == USART1) {
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a18      	ldr	r2, [pc, #96]	@ (80017e0 <HAL_UART_RxCpltCallback+0x70>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d12a      	bne.n	80017d8 <HAL_UART_RxCpltCallback+0x68>
         if (index < DATA_BUFFER_SIZE - 1) {
 8001782:	4b18      	ldr	r3, [pc, #96]	@ (80017e4 <HAL_UART_RxCpltCallback+0x74>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b0a      	cmp	r3, #10
 8001788:	d81b      	bhi.n	80017c2 <HAL_UART_RxCpltCallback+0x52>
        	 XBeeData.rx_buffer[index++] = XBeeData.received_byte;
 800178a:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <HAL_UART_RxCpltCallback+0x74>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	b2d1      	uxtb	r1, r2
 8001792:	4a14      	ldr	r2, [pc, #80]	@ (80017e4 <HAL_UART_RxCpltCallback+0x74>)
 8001794:	7011      	strb	r1, [r2, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	4b13      	ldr	r3, [pc, #76]	@ (80017e8 <HAL_UART_RxCpltCallback+0x78>)
 800179a:	7b19      	ldrb	r1, [r3, #12]
 800179c:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <HAL_UART_RxCpltCallback+0x78>)
 800179e:	5499      	strb	r1, [r3, r2]

             if (XBeeData.received_byte == '\r') {  // End of response
 80017a0:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <HAL_UART_RxCpltCallback+0x78>)
 80017a2:	7b1b      	ldrb	r3, [r3, #12]
 80017a4:	2b0d      	cmp	r3, #13
 80017a6:	d112      	bne.n	80017ce <HAL_UART_RxCpltCallback+0x5e>
            	 XBeeData.data_received_flag = 1;
 80017a8:	4b0f      	ldr	r3, [pc, #60]	@ (80017e8 <HAL_UART_RxCpltCallback+0x78>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	735a      	strb	r2, [r3, #13]
                 XBeeData.rx_buffer[index] = '\0';  // Null-terminate
 80017ae:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <HAL_UART_RxCpltCallback+0x74>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <HAL_UART_RxCpltCallback+0x78>)
 80017b6:	2100      	movs	r1, #0
 80017b8:	5499      	strb	r1, [r3, r2]
                 index = 0;  // Reset for next reception
 80017ba:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <HAL_UART_RxCpltCallback+0x74>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
 80017c0:	e005      	b.n	80017ce <HAL_UART_RxCpltCallback+0x5e>
             }
         } else {
        	 XBeeData.overflow_flag = 1;  // Signal buffer overflow
 80017c2:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <HAL_UART_RxCpltCallback+0x78>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	739a      	strb	r2, [r3, #14]
             index = 0;  // Optionally reset the buffer
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <HAL_UART_RxCpltCallback+0x74>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
         }

         HAL_UART_Receive_IT(&huart1, &XBeeData.received_byte, 1);  // Continue receiving
 80017ce:	2201      	movs	r2, #1
 80017d0:	4906      	ldr	r1, [pc, #24]	@ (80017ec <HAL_UART_RxCpltCallback+0x7c>)
 80017d2:	4807      	ldr	r0, [pc, #28]	@ (80017f0 <HAL_UART_RxCpltCallback+0x80>)
 80017d4:	f003 fe0a 	bl	80053ec <HAL_UART_Receive_IT>
     }
 }
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40013800 	.word	0x40013800
 80017e4:	200006c3 	.word	0x200006c3
 80017e8:	20000284 	.word	0x20000284
 80017ec:	20000290 	.word	0x20000290
 80017f0:	20000714 	.word	0x20000714

080017f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
}
 80017fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <Error_Handler+0x8>

08001800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001806:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <HAL_MspInit+0x44>)
 8001808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800180a:	4a0e      	ldr	r2, [pc, #56]	@ (8001844 <HAL_MspInit+0x44>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6613      	str	r3, [r2, #96]	@ 0x60
 8001812:	4b0c      	ldr	r3, [pc, #48]	@ (8001844 <HAL_MspInit+0x44>)
 8001814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <HAL_MspInit+0x44>)
 8001820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001822:	4a08      	ldr	r2, [pc, #32]	@ (8001844 <HAL_MspInit+0x44>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001828:	6593      	str	r3, [r2, #88]	@ 0x58
 800182a:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_MspInit+0x44>)
 800182c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40021000 	.word	0x40021000

08001848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <NMI_Handler+0x4>

08001850 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <HardFault_Handler+0x4>

08001858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <MemManage_Handler+0x4>

08001860 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <BusFault_Handler+0x4>

08001868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <UsageFault_Handler+0x4>

08001870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800189e:	f000 fb13 	bl	8001ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Switch_Pin);
 80018aa:	2001      	movs	r0, #1
 80018ac:	f001 feee 	bl	800368c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018b8:	4802      	ldr	r0, [pc, #8]	@ (80018c4 <TIM2_IRQHandler+0x10>)
 80018ba:	f003 f92f 	bl	8004b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200006c8 	.word	0x200006c8

080018c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018cc:	4802      	ldr	r0, [pc, #8]	@ (80018d8 <USART1_IRQHandler+0x10>)
 80018ce:	f003 fdd9 	bl	8005484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000714 	.word	0x20000714

080018dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return 1;
 80018e0:	2301      	movs	r3, #1
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_kill>:

int _kill(int pid, int sig)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018f6:	f006 fe11 	bl	800851c <__errno>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2216      	movs	r2, #22
 80018fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001900:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <_exit>:

void _exit (int status)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001914:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ffe7 	bl	80018ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800191e:	bf00      	nop
 8001920:	e7fd      	b.n	800191e <_exit+0x12>

08001922 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	e00a      	b.n	800194a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001934:	f3af 8000 	nop.w
 8001938:	4601      	mov	r1, r0
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	60ba      	str	r2, [r7, #8]
 8001940:	b2ca      	uxtb	r2, r1
 8001942:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	3301      	adds	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	429a      	cmp	r2, r3
 8001950:	dbf0      	blt.n	8001934 <_read+0x12>
  }

  return len;
 8001952:	687b      	ldr	r3, [r7, #4]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	e009      	b.n	8001982 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	60ba      	str	r2, [r7, #8]
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	3301      	adds	r3, #1
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	429a      	cmp	r2, r3
 8001988:	dbf1      	blt.n	800196e <_write+0x12>
  }
  return len;
 800198a:	687b      	ldr	r3, [r7, #4]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <_close>:

int _close(int file)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800199c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019bc:	605a      	str	r2, [r3, #4]
  return 0;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <_isatty>:

int _isatty(int file)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019d4:	2301      	movs	r3, #1
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b085      	sub	sp, #20
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a04:	4a14      	ldr	r2, [pc, #80]	@ (8001a58 <_sbrk+0x5c>)
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <_sbrk+0x60>)
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a10:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d102      	bne.n	8001a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a18:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <_sbrk+0x64>)
 8001a1a:	4a12      	ldr	r2, [pc, #72]	@ (8001a64 <_sbrk+0x68>)
 8001a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1e:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d207      	bcs.n	8001a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a2c:	f006 fd76 	bl	800851c <__errno>
 8001a30:	4603      	mov	r3, r0
 8001a32:	220c      	movs	r2, #12
 8001a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a3a:	e009      	b.n	8001a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a3c:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a42:	4b07      	ldr	r3, [pc, #28]	@ (8001a60 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	4a05      	ldr	r2, [pc, #20]	@ (8001a60 <_sbrk+0x64>)
 8001a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20010000 	.word	0x20010000
 8001a5c:	00000400 	.word	0x00000400
 8001a60:	200006c4 	.word	0x200006c4
 8001a64:	200008f0 	.word	0x200008f0

08001a68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a6c:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <SystemInit+0x20>)
 8001a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a72:	4a05      	ldr	r2, [pc, #20]	@ (8001a88 <SystemInit+0x20>)
 8001a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a92:	f107 0310 	add.w	r3, r7, #16
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8001b24 <MX_TIM2_Init+0x98>)
 8001aac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ab0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b24 <MX_TIM2_Init+0x98>)
 8001ab4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ab8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aba:	4b1a      	ldr	r3, [pc, #104]	@ (8001b24 <MX_TIM2_Init+0x98>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7199;
 8001ac0:	4b18      	ldr	r3, [pc, #96]	@ (8001b24 <MX_TIM2_Init+0x98>)
 8001ac2:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001ac6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac8:	4b16      	ldr	r3, [pc, #88]	@ (8001b24 <MX_TIM2_Init+0x98>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ace:	4b15      	ldr	r3, [pc, #84]	@ (8001b24 <MX_TIM2_Init+0x98>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ad4:	4813      	ldr	r0, [pc, #76]	@ (8001b24 <MX_TIM2_Init+0x98>)
 8001ad6:	f002 ff75 	bl	80049c4 <HAL_TIM_Base_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001ae0:	f7ff fe88 	bl	80017f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001aea:	f107 0310 	add.w	r3, r7, #16
 8001aee:	4619      	mov	r1, r3
 8001af0:	480c      	ldr	r0, [pc, #48]	@ (8001b24 <MX_TIM2_Init+0x98>)
 8001af2:	f003 f91a 	bl	8004d2a <HAL_TIM_ConfigClockSource>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001afc:	f7ff fe7a 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b00:	2300      	movs	r3, #0
 8001b02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4805      	ldr	r0, [pc, #20]	@ (8001b24 <MX_TIM2_Init+0x98>)
 8001b0e:	f003 fb11 	bl	8005134 <HAL_TIMEx_MasterConfigSynchronization>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001b18:	f7ff fe6c 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	3720      	adds	r7, #32
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	200006c8 	.word	0x200006c8

08001b28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b38:	d113      	bne.n	8001b62 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <HAL_TIM_Base_MspInit+0x44>)
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b6c <HAL_TIM_Base_MspInit+0x44>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b46:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <HAL_TIM_Base_MspInit+0x44>)
 8001b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	201c      	movs	r0, #28
 8001b58:	f001 fb47 	bl	80031ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b5c:	201c      	movs	r0, #28
 8001b5e:	f001 fb60 	bl	8003222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000

08001b70 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b74:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001b76:	4a15      	ldr	r2, [pc, #84]	@ (8001bcc <MX_USART1_UART_Init+0x5c>)
 8001b78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b7a:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001b7c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001b80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b82:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b88:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001b96:	220c      	movs	r2, #12
 8001b98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bb2:	4805      	ldr	r0, [pc, #20]	@ (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001bb4:	f003 fb42 	bl	800523c <HAL_UART_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001bbe:	f7ff fe19 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000714 	.word	0x20000714
 8001bcc:	40013800 	.word	0x40013800

08001bd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b09e      	sub	sp, #120	@ 0x78
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	2254      	movs	r2, #84	@ 0x54
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f006 fc86 	bl	8008502 <memset>
  if(uartHandle->Instance==USART1)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a23      	ldr	r2, [pc, #140]	@ (8001c88 <HAL_UART_MspInit+0xb8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d13f      	bne.n	8001c80 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c00:	2301      	movs	r3, #1
 8001c02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c04:	2300      	movs	r3, #0
 8001c06:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c08:	f107 0310 	add.w	r3, r7, #16
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f002 fbf1 	bl	80043f4 <HAL_RCCEx_PeriphCLKConfig>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c18:	f7ff fdec 	bl	80017f4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <HAL_UART_MspInit+0xbc>)
 8001c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c20:	4a1a      	ldr	r2, [pc, #104]	@ (8001c8c <HAL_UART_MspInit+0xbc>)
 8001c22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c26:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c28:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <HAL_UART_MspInit+0xbc>)
 8001c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c34:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <HAL_UART_MspInit+0xbc>)
 8001c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c38:	4a14      	ldr	r2, [pc, #80]	@ (8001c8c <HAL_UART_MspInit+0xbc>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c40:	4b12      	ldr	r3, [pc, #72]	@ (8001c8c <HAL_UART_MspInit+0xbc>)
 8001c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c4c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c50:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c5e:	2307      	movs	r3, #7
 8001c60:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c62:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c66:	4619      	mov	r1, r3
 8001c68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c6c:	f001 fb72 	bl	8003354 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2100      	movs	r1, #0
 8001c74:	2025      	movs	r0, #37	@ 0x25
 8001c76:	f001 fab8 	bl	80031ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c7a:	2025      	movs	r0, #37	@ 0x25
 8001c7c:	f001 fad1 	bl	8003222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c80:	bf00      	nop
 8001c82:	3778      	adds	r7, #120	@ 0x78
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40013800 	.word	0x40013800
 8001c8c:	40021000 	.word	0x40021000

08001c90 <enterCommandMode>:
#include <zigbee.h>

uint32_t start_time;

void enterCommandMode(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
    char command_mode[3] = "+++";
 8001c96:	4a10      	ldr	r2, [pc, #64]	@ (8001cd8 <enterCommandMode+0x48>)
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	8019      	strh	r1, [r3, #0]
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	0c12      	lsrs	r2, r2, #16
 8001ca4:	701a      	strb	r2, [r3, #0]
    // Send "+++" to enter AT command mode
    HAL_UART_Transmit(&huart1, (uint8_t*)command_mode, strlen(command_mode), HAL_MAX_DELAY);
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fae1 	bl	8000270 <strlen>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	1d39      	adds	r1, r7, #4
 8001cb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cb8:	4808      	ldr	r0, [pc, #32]	@ (8001cdc <enterCommandMode+0x4c>)
 8001cba:	f003 fb0d 	bl	80052d8 <HAL_UART_Transmit>
    HAL_Delay(1000);  // Small delay for XBee to respond
 8001cbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cc2:	f000 f921 	bl	8001f08 <HAL_Delay>
    // Receive the "OK" response from XBee
    HAL_UART_Receive_IT(&huart1, (uint8_t*)XBeeData.rx_buffer, 3);
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	4905      	ldr	r1, [pc, #20]	@ (8001ce0 <enterCommandMode+0x50>)
 8001cca:	4804      	ldr	r0, [pc, #16]	@ (8001cdc <enterCommandMode+0x4c>)
 8001ccc:	f003 fb8e 	bl	80053ec <HAL_UART_Receive_IT>
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	0800b248 	.word	0x0800b248
 8001cdc:	20000714 	.word	0x20000714
 8001ce0:	20000284 	.word	0x20000284

08001ce4 <requestParameter>:
 * Enter AT command mode, request parameter and exit AT command mode
 * @param at_command: at command to enter
 * @param output_buffer: xbee response for at command
 * @param length: length of output buffer
 */
int requestParameter(const char *at_command, uint8_t *output_buffer, size_t length) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
    // Clear buffer and reset flag
//    memset(XBeeData.rx_buffer, 0, DATA_BUFFER_SIZE);
//    XBeeData.data_received_flag = 0;

    //char command_mode[] = "+++";
    char exit_command[] = "ATCN\r";
 8001cf0:	4a31      	ldr	r2, [pc, #196]	@ (8001db8 <requestParameter+0xd4>)
 8001cf2:	f107 0310 	add.w	r3, r7, #16
 8001cf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cfa:	6018      	str	r0, [r3, #0]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	8019      	strh	r1, [r3, #0]
//
//    while (!XBeeData.data_received_flag);
//    if (strncmp((char *)XBeeData.rx_buffer, "OK", 2) != 0) return XBEE_ERROR_RESPONSE;

    // Send the parameter request command
    XBeeData.data_received_flag = 0;
 8001d00:	4b2e      	ldr	r3, [pc, #184]	@ (8001dbc <requestParameter+0xd8>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	735a      	strb	r2, [r3, #13]
    memset(XBeeData.rx_buffer, 0, DATA_BUFFER_SIZE);
 8001d06:	220c      	movs	r2, #12
 8001d08:	2100      	movs	r1, #0
 8001d0a:	482c      	ldr	r0, [pc, #176]	@ (8001dbc <requestParameter+0xd8>)
 8001d0c:	f006 fbf9 	bl	8008502 <memset>
    HAL_UART_Transmit(&huart1, (uint8_t *)at_command, strlen(at_command), HAL_MAX_DELAY);
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f7fe faad 	bl	8000270 <strlen>
 8001d16:	4603      	mov	r3, r0
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d1e:	68f9      	ldr	r1, [r7, #12]
 8001d20:	4827      	ldr	r0, [pc, #156]	@ (8001dc0 <requestParameter+0xdc>)
 8001d22:	f003 fad9 	bl	80052d8 <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart1, &XBeeData.received_byte, 1);
 8001d26:	2201      	movs	r2, #1
 8001d28:	4926      	ldr	r1, [pc, #152]	@ (8001dc4 <requestParameter+0xe0>)
 8001d2a:	4825      	ldr	r0, [pc, #148]	@ (8001dc0 <requestParameter+0xdc>)
 8001d2c:	f003 fb5e 	bl	80053ec <HAL_UART_Receive_IT>

    while (!XBeeData.data_received_flag);
 8001d30:	bf00      	nop
 8001d32:	4b22      	ldr	r3, [pc, #136]	@ (8001dbc <requestParameter+0xd8>)
 8001d34:	7b5b      	ldrb	r3, [r3, #13]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0fa      	beq.n	8001d32 <requestParameter+0x4e>
    if (strlen((char *)XBeeData.rx_buffer) < length) return XBEE_ERROR_RESPONSE;
 8001d3c:	481f      	ldr	r0, [pc, #124]	@ (8001dbc <requestParameter+0xd8>)
 8001d3e:	f7fe fa97 	bl	8000270 <strlen>
 8001d42:	4602      	mov	r2, r0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <requestParameter+0x6a>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e030      	b.n	8001db0 <requestParameter+0xcc>
    memcpy(output_buffer, XBeeData.rx_buffer, length);
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	491a      	ldr	r1, [pc, #104]	@ (8001dbc <requestParameter+0xd8>)
 8001d52:	68b8      	ldr	r0, [r7, #8]
 8001d54:	f006 fc0f 	bl	8008576 <memcpy>

    // Exit AT command mode
    XBeeData.data_received_flag = 0;
 8001d58:	4b18      	ldr	r3, [pc, #96]	@ (8001dbc <requestParameter+0xd8>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	735a      	strb	r2, [r3, #13]
    memset(XBeeData.rx_buffer, 0, DATA_BUFFER_SIZE);
 8001d5e:	220c      	movs	r2, #12
 8001d60:	2100      	movs	r1, #0
 8001d62:	4816      	ldr	r0, [pc, #88]	@ (8001dbc <requestParameter+0xd8>)
 8001d64:	f006 fbcd 	bl	8008502 <memset>
    HAL_UART_Transmit(&huart1, (uint8_t *)exit_command, strlen(exit_command), HAL_MAX_DELAY);
 8001d68:	f107 0310 	add.w	r3, r7, #16
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fa7f 	bl	8000270 <strlen>
 8001d72:	4603      	mov	r3, r0
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	f107 0110 	add.w	r1, r7, #16
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d7e:	4810      	ldr	r0, [pc, #64]	@ (8001dc0 <requestParameter+0xdc>)
 8001d80:	f003 faaa 	bl	80052d8 <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart1, &XBeeData.received_byte, 1);
 8001d84:	2201      	movs	r2, #1
 8001d86:	490f      	ldr	r1, [pc, #60]	@ (8001dc4 <requestParameter+0xe0>)
 8001d88:	480d      	ldr	r0, [pc, #52]	@ (8001dc0 <requestParameter+0xdc>)
 8001d8a:	f003 fb2f 	bl	80053ec <HAL_UART_Receive_IT>

    while (!XBeeData.data_received_flag);
 8001d8e:	bf00      	nop
 8001d90:	4b0a      	ldr	r3, [pc, #40]	@ (8001dbc <requestParameter+0xd8>)
 8001d92:	7b5b      	ldrb	r3, [r3, #13]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0fa      	beq.n	8001d90 <requestParameter+0xac>
    return strncmp((char *)XBeeData.rx_buffer, "OK", 2) == 0 ? XBEE_SUCCESS : XBEE_ERROR_RESPONSE;
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	490a      	ldr	r1, [pc, #40]	@ (8001dc8 <requestParameter+0xe4>)
 8001d9e:	4807      	ldr	r0, [pc, #28]	@ (8001dbc <requestParameter+0xd8>)
 8001da0:	f006 fb8d 	bl	80084be <strncmp>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	bf14      	ite	ne
 8001daa:	2301      	movne	r3, #1
 8001dac:	2300      	moveq	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	0800b250 	.word	0x0800b250
 8001dbc:	20000284 	.word	0x20000284
 8001dc0:	20000714 	.word	0x20000714
 8001dc4:	20000290 	.word	0x20000290
 8001dc8:	0800b24c 	.word	0x0800b24c

08001dcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001dcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dd0:	f7ff fe4a 	bl	8001a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dd4:	480c      	ldr	r0, [pc, #48]	@ (8001e08 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dd6:	490d      	ldr	r1, [pc, #52]	@ (8001e0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e10 <LoopForever+0xe>)
  movs r3, #0
 8001dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ddc:	e002      	b.n	8001de4 <LoopCopyDataInit>

08001dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001de2:	3304      	adds	r3, #4

08001de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de8:	d3f9      	bcc.n	8001dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dea:	4a0a      	ldr	r2, [pc, #40]	@ (8001e14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dec:	4c0a      	ldr	r4, [pc, #40]	@ (8001e18 <LoopForever+0x16>)
  movs r3, #0
 8001dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df0:	e001      	b.n	8001df6 <LoopFillZerobss>

08001df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df4:	3204      	adds	r2, #4

08001df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df8:	d3fb      	bcc.n	8001df2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dfa:	f006 fb95 	bl	8008528 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dfe:	f7ff fa21 	bl	8001244 <main>

08001e02 <LoopForever>:

LoopForever:
    b LoopForever
 8001e02:	e7fe      	b.n	8001e02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e04:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e0c:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8001e10:	0800b7b4 	.word	0x0800b7b4
  ldr r2, =_sbss
 8001e14:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001e18:	200008ec 	.word	0x200008ec

08001e1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e1c:	e7fe      	b.n	8001e1c <ADC1_IRQHandler>

08001e1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f001 f9d3 	bl	80031d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e2e:	200f      	movs	r0, #15
 8001e30:	f000 f80e 	bl	8001e50 <HAL_InitTick>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d002      	beq.n	8001e40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	71fb      	strb	r3, [r7, #7]
 8001e3e:	e001      	b.n	8001e44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e40:	f7ff fcde 	bl	8001800 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e44:	79fb      	ldrb	r3, [r7, #7]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e5c:	4b17      	ldr	r3, [pc, #92]	@ (8001ebc <HAL_InitTick+0x6c>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d023      	beq.n	8001eac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e64:	4b16      	ldr	r3, [pc, #88]	@ (8001ec0 <HAL_InitTick+0x70>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b14      	ldr	r3, [pc, #80]	@ (8001ebc <HAL_InitTick+0x6c>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f001 f9df 	bl	800323e <HAL_SYSTICK_Config>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10f      	bne.n	8001ea6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b0f      	cmp	r3, #15
 8001e8a:	d809      	bhi.n	8001ea0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e94:	f001 f9a9 	bl	80031ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e98:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec4 <HAL_InitTick+0x74>)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e007      	b.n	8001eb0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
 8001ea4:	e004      	b.n	8001eb0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	73fb      	strb	r3, [r7, #15]
 8001eaa:	e001      	b.n	8001eb0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000020 	.word	0x20000020
 8001ec0:	20000018 	.word	0x20000018
 8001ec4:	2000001c 	.word	0x2000001c

08001ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_IncTick+0x20>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_IncTick+0x24>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	4a04      	ldr	r2, [pc, #16]	@ (8001eec <HAL_IncTick+0x24>)
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000020 	.word	0x20000020
 8001eec:	2000079c 	.word	0x2000079c

08001ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef4:	4b03      	ldr	r3, [pc, #12]	@ (8001f04 <HAL_GetTick+0x14>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	2000079c 	.word	0x2000079c

08001f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f10:	f7ff ffee 	bl	8001ef0 <HAL_GetTick>
 8001f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f20:	d005      	beq.n	8001f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f22:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <HAL_Delay+0x44>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f2e:	bf00      	nop
 8001f30:	f7ff ffde 	bl	8001ef0 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d8f7      	bhi.n	8001f30 <HAL_Delay+0x28>
  {
  }
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000020 	.word	0x20000020

08001f50 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	609a      	str	r2, [r3, #8]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	3360      	adds	r3, #96	@ 0x60
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <LL_ADC_SetOffset+0x44>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ff0:	bf00      	nop
 8001ff2:	371c      	adds	r7, #28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	03fff000 	.word	0x03fff000

08002000 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3360      	adds	r3, #96	@ 0x60
 800200e:	461a      	mov	r2, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3360      	adds	r3, #96	@ 0x60
 800203c:	461a      	mov	r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	431a      	orrs	r2, r3
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002056:	bf00      	nop
 8002058:	371c      	adds	r7, #28
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3330      	adds	r3, #48	@ 0x30
 8002098:	461a      	mov	r2, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	4413      	add	r3, r2
 80020a6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f003 031f 	and.w	r3, r3, #31
 80020b2:	211f      	movs	r1, #31
 80020b4:	fa01 f303 	lsl.w	r3, r1, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	401a      	ands	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	0e9b      	lsrs	r3, r3, #26
 80020c0:	f003 011f 	and.w	r1, r3, #31
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f003 031f 	and.w	r3, r3, #31
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	431a      	orrs	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020d4:	bf00      	nop
 80020d6:	371c      	adds	r7, #28
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	3314      	adds	r3, #20
 80020f0:	461a      	mov	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	0e5b      	lsrs	r3, r3, #25
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	4413      	add	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	0d1b      	lsrs	r3, r3, #20
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	2107      	movs	r1, #7
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	401a      	ands	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	0d1b      	lsrs	r3, r3, #20
 800211a:	f003 031f 	and.w	r3, r3, #31
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	fa01 f303 	lsl.w	r3, r1, r3
 8002124:	431a      	orrs	r2, r3
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800212a:	bf00      	nop
 800212c:	371c      	adds	r7, #28
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002150:	43db      	mvns	r3, r3
 8002152:	401a      	ands	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f003 0318 	and.w	r3, r3, #24
 800215a:	4908      	ldr	r1, [pc, #32]	@ (800217c <LL_ADC_SetChannelSingleDiff+0x44>)
 800215c:	40d9      	lsrs	r1, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	400b      	ands	r3, r1
 8002162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002166:	431a      	orrs	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800216e:	bf00      	nop
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	0007ffff 	.word	0x0007ffff

08002180 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002190:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6093      	str	r3, [r2, #8]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021b8:	d101      	bne.n	80021be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80021dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002204:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002208:	d101      	bne.n	800220e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800222c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002230:	f043 0201 	orr.w	r2, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <LL_ADC_IsEnabled+0x18>
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <LL_ADC_IsEnabled+0x1a>
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800227a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800227e:	f043 0204 	orr.w	r2, r3, #4
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d101      	bne.n	80022aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d101      	bne.n	80022d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e126      	b.n	8002548 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002304:	2b00      	cmp	r3, #0
 8002306:	d109      	bne.n	800231c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7fe fecf 	bl	80010ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff3f 	bl	80021a4 <LL_ADC_IsDeepPowerDownEnabled>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d004      	beq.n	8002336 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff25 	bl	8002180 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff ff5a 	bl	80021f4 <LL_ADC_IsInternalRegulatorEnabled>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d115      	bne.n	8002372 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ff3e 	bl	80021cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002350:	4b7f      	ldr	r3, [pc, #508]	@ (8002550 <HAL_ADC_Init+0x270>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	099b      	lsrs	r3, r3, #6
 8002356:	4a7f      	ldr	r2, [pc, #508]	@ (8002554 <HAL_ADC_Init+0x274>)
 8002358:	fba2 2303 	umull	r2, r3, r2, r3
 800235c:	099b      	lsrs	r3, r3, #6
 800235e:	3301      	adds	r3, #1
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002364:	e002      	b.n	800236c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3b01      	subs	r3, #1
 800236a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f9      	bne.n	8002366 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff ff3c 	bl	80021f4 <LL_ADC_IsInternalRegulatorEnabled>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10d      	bne.n	800239e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002386:	f043 0210 	orr.w	r2, r3, #16
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002392:	f043 0201 	orr.w	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff ff75 	bl	8002292 <LL_ADC_REG_IsConversionOngoing>
 80023a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f040 80bf 	bne.w	8002536 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f040 80bb 	bne.w	8002536 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80023c8:	f043 0202 	orr.w	r2, r3, #2
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff35 	bl	8002244 <LL_ADC_IsEnabled>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10b      	bne.n	80023f8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023e0:	485d      	ldr	r0, [pc, #372]	@ (8002558 <HAL_ADC_Init+0x278>)
 80023e2:	f7ff ff2f 	bl	8002244 <LL_ADC_IsEnabled>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d105      	bne.n	80023f8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4619      	mov	r1, r3
 80023f2:	485a      	ldr	r0, [pc, #360]	@ (800255c <HAL_ADC_Init+0x27c>)
 80023f4:	f7ff fdac 	bl	8001f50 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7e5b      	ldrb	r3, [r3, #25]
 80023fc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002402:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002408:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800240e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002416:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d106      	bne.n	8002434 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242a:	3b01      	subs	r3, #1
 800242c:	045b      	lsls	r3, r3, #17
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002438:	2b00      	cmp	r3, #0
 800243a:	d009      	beq.n	8002450 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002440:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002448:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	4b42      	ldr	r3, [pc, #264]	@ (8002560 <HAL_ADC_Init+0x280>)
 8002458:	4013      	ands	r3, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	69b9      	ldr	r1, [r7, #24]
 8002460:	430b      	orrs	r3, r1
 8002462:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff25 	bl	80022b8 <LL_ADC_INJ_IsConversionOngoing>
 800246e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d13d      	bne.n	80024f2 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d13a      	bne.n	80024f2 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002480:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002488:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002498:	f023 0302 	bic.w	r3, r3, #2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	69b9      	ldr	r1, [r7, #24]
 80024a2:	430b      	orrs	r3, r1
 80024a4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d118      	bne.n	80024e2 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80024ba:	f023 0304 	bic.w	r3, r3, #4
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80024c6:	4311      	orrs	r1, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80024cc:	4311      	orrs	r1, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80024d2:	430a      	orrs	r2, r1
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	611a      	str	r2, [r3, #16]
 80024e0:	e007      	b.n	80024f2 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0201 	bic.w	r2, r2, #1
 80024f0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d10c      	bne.n	8002514 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002500:	f023 010f 	bic.w	r1, r3, #15
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	1e5a      	subs	r2, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	631a      	str	r2, [r3, #48]	@ 0x30
 8002512:	e007      	b.n	8002524 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 020f 	bic.w	r2, r2, #15
 8002522:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002528:	f023 0303 	bic.w	r3, r3, #3
 800252c:	f043 0201 	orr.w	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	655a      	str	r2, [r3, #84]	@ 0x54
 8002534:	e007      	b.n	8002546 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800253a:	f043 0210 	orr.w	r2, r3, #16
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002546:	7ffb      	ldrb	r3, [r7, #31]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3720      	adds	r7, #32
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000018 	.word	0x20000018
 8002554:	053e2d63 	.word	0x053e2d63
 8002558:	50040000 	.word	0x50040000
 800255c:	50040300 	.word	0x50040300
 8002560:	fff0c007 	.word	0xfff0c007

08002564 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fe8e 	bl	8002292 <LL_ADC_REG_IsConversionOngoing>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d14f      	bne.n	800261c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_ADC_Start+0x26>
 8002586:	2302      	movs	r3, #2
 8002588:	e04b      	b.n	8002622 <HAL_ADC_Start+0xbe>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 fcc8 	bl	8002f28 <ADC_Enable>
 8002598:	4603      	mov	r3, r0
 800259a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d137      	bne.n	8002612 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025aa:	f023 0301 	bic.w	r3, r3, #1
 80025ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025c2:	d106      	bne.n	80025d2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c8:	f023 0206 	bic.w	r2, r3, #6
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80025d0:	e002      	b.n	80025d8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	221c      	movs	r2, #28
 80025de:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d007      	beq.n	8002606 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fe2d 	bl	800226a <LL_ADC_REG_StartConversion>
 8002610:	e006      	b.n	8002620 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800261a:	e001      	b.n	8002620 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800261c:	2302      	movs	r3, #2
 800261e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002620:	7bfb      	ldrb	r3, [r7, #15]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b086      	sub	sp, #24
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	2b08      	cmp	r3, #8
 800263a:	d102      	bne.n	8002642 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800263c:	2308      	movs	r3, #8
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	e010      	b.n	8002664 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002654:	f043 0220 	orr.w	r2, r3, #32
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e06f      	b.n	8002740 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002660:	2304      	movs	r3, #4
 8002662:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002664:	f7ff fc44 	bl	8001ef0 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800266a:	e021      	b.n	80026b0 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002672:	d01d      	beq.n	80026b0 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002674:	f7ff fc3c 	bl	8001ef0 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d302      	bcc.n	800268a <HAL_ADC_PollForConversion+0x60>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d112      	bne.n	80026b0 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10b      	bne.n	80026b0 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269c:	f043 0204 	orr.w	r2, r3, #4
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e047      	b.n	8002740 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0d6      	beq.n	800266c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fcc7 	bl	8002062 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d01c      	beq.n	8002714 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	7e5b      	ldrb	r3, [r3, #25]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d118      	bne.n	8002714 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d111      	bne.n	8002714 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002700:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d105      	bne.n	8002714 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270c:	f043 0201 	orr.w	r2, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2b08      	cmp	r3, #8
 8002720:	d104      	bne.n	800272c <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2208      	movs	r2, #8
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	e008      	b.n	800273e <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d103      	bne.n	800273e <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	220c      	movs	r2, #12
 800273c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b0b6      	sub	sp, #216	@ 0xd8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002774:	2300      	movs	r3, #0
 8002776:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x22>
 8002782:	2302      	movs	r3, #2
 8002784:	e3bb      	b.n	8002efe <HAL_ADC_ConfigChannel+0x79a>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fd7d 	bl	8002292 <LL_ADC_REG_IsConversionOngoing>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	f040 83a0 	bne.w	8002ee0 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b05      	cmp	r3, #5
 80027ae:	d824      	bhi.n	80027fa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	3b02      	subs	r3, #2
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d81b      	bhi.n	80027f2 <HAL_ADC_ConfigChannel+0x8e>
 80027ba:	a201      	add	r2, pc, #4	@ (adr r2, 80027c0 <HAL_ADC_ConfigChannel+0x5c>)
 80027bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c0:	080027d1 	.word	0x080027d1
 80027c4:	080027d9 	.word	0x080027d9
 80027c8:	080027e1 	.word	0x080027e1
 80027cc:	080027e9 	.word	0x080027e9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80027d0:	230c      	movs	r3, #12
 80027d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027d6:	e010      	b.n	80027fa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80027d8:	2312      	movs	r3, #18
 80027da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027de:	e00c      	b.n	80027fa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80027e0:	2318      	movs	r3, #24
 80027e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027e6:	e008      	b.n	80027fa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80027e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027f0:	e003      	b.n	80027fa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80027f2:	2306      	movs	r3, #6
 80027f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027f8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002808:	f7ff fc3e 	bl	8002088 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff fd3e 	bl	8002292 <LL_ADC_REG_IsConversionOngoing>
 8002816:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fd4a 	bl	80022b8 <LL_ADC_INJ_IsConversionOngoing>
 8002824:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002828:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800282c:	2b00      	cmp	r3, #0
 800282e:	f040 81a4 	bne.w	8002b7a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002832:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002836:	2b00      	cmp	r3, #0
 8002838:	f040 819f 	bne.w	8002b7a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6819      	ldr	r1, [r3, #0]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	461a      	mov	r2, r3
 800284a:	f7ff fc49 	bl	80020e0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	08db      	lsrs	r3, r3, #3
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b04      	cmp	r3, #4
 800286e:	d00a      	beq.n	8002886 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	6919      	ldr	r1, [r3, #16]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002880:	f7ff fb9a 	bl	8001fb8 <LL_ADC_SetOffset>
 8002884:	e179      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fbb7 	bl	8002000 <LL_ADC_GetOffsetChannel>
 8002892:	4603      	mov	r3, r0
 8002894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x14e>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff fbac 	bl	8002000 <LL_ADC_GetOffsetChannel>
 80028a8:	4603      	mov	r3, r0
 80028aa:	0e9b      	lsrs	r3, r3, #26
 80028ac:	f003 021f 	and.w	r2, r3, #31
 80028b0:	e01e      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x18c>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fba1 	bl	8002000 <LL_ADC_GetOffsetChannel>
 80028be:	4603      	mov	r3, r0
 80028c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80028d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80028e0:	2320      	movs	r3, #32
 80028e2:	e004      	b.n	80028ee <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80028e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80028e8:	fab3 f383 	clz	r3, r3
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d105      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x1a4>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	0e9b      	lsrs	r3, r3, #26
 8002902:	f003 031f 	and.w	r3, r3, #31
 8002906:	e018      	b.n	800293a <HAL_ADC_ConfigChannel+0x1d6>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002914:	fa93 f3a3 	rbit	r3, r3
 8002918:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800291c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002920:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002924:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800292c:	2320      	movs	r3, #32
 800292e:	e004      	b.n	800293a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002930:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002934:	fab3 f383 	clz	r3, r3
 8002938:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800293a:	429a      	cmp	r2, r3
 800293c:	d106      	bne.n	800294c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2200      	movs	r2, #0
 8002944:	2100      	movs	r1, #0
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fb70 	bl	800202c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2101      	movs	r1, #1
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff fb54 	bl	8002000 <LL_ADC_GetOffsetChannel>
 8002958:	4603      	mov	r3, r0
 800295a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10a      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x214>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2101      	movs	r1, #1
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fb49 	bl	8002000 <LL_ADC_GetOffsetChannel>
 800296e:	4603      	mov	r3, r0
 8002970:	0e9b      	lsrs	r3, r3, #26
 8002972:	f003 021f 	and.w	r2, r3, #31
 8002976:	e01e      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x252>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2101      	movs	r1, #1
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fb3e 	bl	8002000 <LL_ADC_GetOffsetChannel>
 8002984:	4603      	mov	r3, r0
 8002986:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002996:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800299a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800299e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80029a6:	2320      	movs	r3, #32
 80029a8:	e004      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80029aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029ae:	fab3 f383 	clz	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d105      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x26a>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	0e9b      	lsrs	r3, r3, #26
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	e018      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x29c>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80029e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80029ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80029f2:	2320      	movs	r3, #32
 80029f4:	e004      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80029f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d106      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fb0d 	bl	800202c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2102      	movs	r1, #2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff faf1 	bl	8002000 <LL_ADC_GetOffsetChannel>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10a      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x2da>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2102      	movs	r1, #2
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fae6 	bl	8002000 <LL_ADC_GetOffsetChannel>
 8002a34:	4603      	mov	r3, r0
 8002a36:	0e9b      	lsrs	r3, r3, #26
 8002a38:	f003 021f 	and.w	r2, r3, #31
 8002a3c:	e01e      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x318>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2102      	movs	r1, #2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fadb 	bl	8002000 <LL_ADC_GetOffsetChannel>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002a5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002a64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002a6c:	2320      	movs	r3, #32
 8002a6e:	e004      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002a70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a74:	fab3 f383 	clz	r3, r3
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d105      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x330>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	0e9b      	lsrs	r3, r3, #26
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	e014      	b.n	8002abe <HAL_ADC_ConfigChannel+0x35a>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a9c:	fa93 f3a3 	rbit	r3, r3
 8002aa0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002aa2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002aa4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002aa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002ab0:	2320      	movs	r3, #32
 8002ab2:	e004      	b.n	8002abe <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002ab4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d106      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2102      	movs	r1, #2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff faae 	bl	800202c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2103      	movs	r1, #3
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fa92 	bl	8002000 <LL_ADC_GetOffsetChannel>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10a      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x398>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2103      	movs	r1, #3
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fa87 	bl	8002000 <LL_ADC_GetOffsetChannel>
 8002af2:	4603      	mov	r3, r0
 8002af4:	0e9b      	lsrs	r3, r3, #26
 8002af6:	f003 021f 	and.w	r2, r3, #31
 8002afa:	e017      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x3c8>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2103      	movs	r1, #3
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fa7c 	bl	8002000 <LL_ADC_GetOffsetChannel>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002b14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b16:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002b18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002b1e:	2320      	movs	r3, #32
 8002b20:	e003      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002b22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b24:	fab3 f383 	clz	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d105      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x3e0>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	0e9b      	lsrs	r3, r3, #26
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	e011      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x404>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b4c:	fa93 f3a3 	rbit	r3, r3
 8002b50:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002b52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b54:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002b56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002b5c:	2320      	movs	r3, #32
 8002b5e:	e003      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002b60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b62:	fab3 f383 	clz	r3, r3
 8002b66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d106      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2200      	movs	r2, #0
 8002b72:	2103      	movs	r1, #3
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fa59 	bl	800202c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff fb60 	bl	8002244 <LL_ADC_IsEnabled>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f040 8140 	bne.w	8002e0c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	6819      	ldr	r1, [r3, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f7ff facd 	bl	8002138 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	4a8f      	ldr	r2, [pc, #572]	@ (8002de0 <HAL_ADC_ConfigChannel+0x67c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	f040 8131 	bne.w	8002e0c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10b      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x46e>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	0e9b      	lsrs	r3, r3, #26
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	f003 031f 	and.w	r3, r3, #31
 8002bc6:	2b09      	cmp	r3, #9
 8002bc8:	bf94      	ite	ls
 8002bca:	2301      	movls	r3, #1
 8002bcc:	2300      	movhi	r3, #0
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	e019      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x4a2>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002be0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002be2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002be4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002bea:	2320      	movs	r3, #32
 8002bec:	e003      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002bee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bf0:	fab3 f383 	clz	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	2b09      	cmp	r3, #9
 8002bfe:	bf94      	ite	ls
 8002c00:	2301      	movls	r3, #1
 8002c02:	2300      	movhi	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d079      	beq.n	8002cfe <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d107      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x4c2>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	0e9b      	lsrs	r3, r3, #26
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	069b      	lsls	r3, r3, #26
 8002c20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c24:	e015      	b.n	8002c52 <HAL_ADC_ConfigChannel+0x4ee>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002c34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c36:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002c38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002c3e:	2320      	movs	r3, #32
 8002c40:	e003      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002c42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c44:	fab3 f383 	clz	r3, r3
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	069b      	lsls	r3, r3, #26
 8002c4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d109      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x50e>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	0e9b      	lsrs	r3, r3, #26
 8002c64:	3301      	adds	r3, #1
 8002c66:	f003 031f 	and.w	r3, r3, #31
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c70:	e017      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x53e>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c7a:	fa93 f3a3 	rbit	r3, r3
 8002c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c82:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002c8a:	2320      	movs	r3, #32
 8002c8c:	e003      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002c8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c90:	fab3 f383 	clz	r3, r3
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	3301      	adds	r3, #1
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca2:	ea42 0103 	orr.w	r1, r2, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10a      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x564>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	0e9b      	lsrs	r3, r3, #26
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f003 021f 	and.w	r2, r3, #31
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	4413      	add	r3, r2
 8002cc4:	051b      	lsls	r3, r3, #20
 8002cc6:	e018      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x596>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	e003      	b.n	8002cec <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	3301      	adds	r3, #1
 8002cee:	f003 021f 	and.w	r2, r3, #31
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4413      	add	r3, r2
 8002cf8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	e081      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d107      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x5b6>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	0e9b      	lsrs	r3, r3, #26
 8002d10:	3301      	adds	r3, #1
 8002d12:	069b      	lsls	r3, r3, #26
 8002d14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d18:	e015      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x5e2>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002d32:	2320      	movs	r3, #32
 8002d34:	e003      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	069b      	lsls	r3, r3, #26
 8002d42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x602>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	0e9b      	lsrs	r3, r3, #26
 8002d58:	3301      	adds	r3, #1
 8002d5a:	f003 031f 	and.w	r3, r3, #31
 8002d5e:	2101      	movs	r1, #1
 8002d60:	fa01 f303 	lsl.w	r3, r1, r3
 8002d64:	e017      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x632>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	61bb      	str	r3, [r7, #24]
  return result;
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002d7e:	2320      	movs	r3, #32
 8002d80:	e003      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	fab3 f383 	clz	r3, r3
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	2101      	movs	r1, #1
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	ea42 0103 	orr.w	r1, r2, r3
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10d      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x65e>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	0e9b      	lsrs	r3, r3, #26
 8002dac:	3301      	adds	r3, #1
 8002dae:	f003 021f 	and.w	r2, r3, #31
 8002db2:	4613      	mov	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	3b1e      	subs	r3, #30
 8002dba:	051b      	lsls	r3, r3, #20
 8002dbc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002dc0:	e01e      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x69c>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	fa93 f3a3 	rbit	r3, r3
 8002dce:	60fb      	str	r3, [r7, #12]
  return result;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d104      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002dda:	2320      	movs	r3, #32
 8002ddc:	e006      	b.n	8002dec <HAL_ADC_ConfigChannel+0x688>
 8002dde:	bf00      	nop
 8002de0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	3301      	adds	r3, #1
 8002dee:	f003 021f 	and.w	r2, r3, #31
 8002df2:	4613      	mov	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4413      	add	r3, r2
 8002df8:	3b1e      	subs	r3, #30
 8002dfa:	051b      	lsls	r3, r3, #20
 8002dfc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e00:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e06:	4619      	mov	r1, r3
 8002e08:	f7ff f96a 	bl	80020e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4b3d      	ldr	r3, [pc, #244]	@ (8002f08 <HAL_ADC_ConfigChannel+0x7a4>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d06c      	beq.n	8002ef2 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e18:	483c      	ldr	r0, [pc, #240]	@ (8002f0c <HAL_ADC_ConfigChannel+0x7a8>)
 8002e1a:	f7ff f8bf 	bl	8001f9c <LL_ADC_GetCommonPathInternalCh>
 8002e1e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a3a      	ldr	r2, [pc, #232]	@ (8002f10 <HAL_ADC_ConfigChannel+0x7ac>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d127      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d121      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a35      	ldr	r2, [pc, #212]	@ (8002f14 <HAL_ADC_ConfigChannel+0x7b0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d157      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	482f      	ldr	r0, [pc, #188]	@ (8002f0c <HAL_ADC_ConfigChannel+0x7a8>)
 8002e4e:	f7ff f892 	bl	8001f76 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e52:	4b31      	ldr	r3, [pc, #196]	@ (8002f18 <HAL_ADC_ConfigChannel+0x7b4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	099b      	lsrs	r3, r3, #6
 8002e58:	4a30      	ldr	r2, [pc, #192]	@ (8002f1c <HAL_ADC_ConfigChannel+0x7b8>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	099b      	lsrs	r3, r3, #6
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	4613      	mov	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e6c:	e002      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	3b01      	subs	r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f9      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e7a:	e03a      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a27      	ldr	r2, [pc, #156]	@ (8002f20 <HAL_ADC_ConfigChannel+0x7bc>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d113      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10d      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1f      	ldr	r2, [pc, #124]	@ (8002f14 <HAL_ADC_ConfigChannel+0x7b0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d12a      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ea0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4819      	ldr	r0, [pc, #100]	@ (8002f0c <HAL_ADC_ConfigChannel+0x7a8>)
 8002ea8:	f7ff f865 	bl	8001f76 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eac:	e021      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8002f24 <HAL_ADC_ConfigChannel+0x7c0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d11c      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002eb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ebc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d116      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a12      	ldr	r2, [pc, #72]	@ (8002f14 <HAL_ADC_ConfigChannel+0x7b0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d111      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ece:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ed2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	480c      	ldr	r0, [pc, #48]	@ (8002f0c <HAL_ADC_ConfigChannel+0x7a8>)
 8002eda:	f7ff f84c 	bl	8001f76 <LL_ADC_SetCommonPathInternalCh>
 8002ede:	e008      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee4:	f043 0220 	orr.w	r2, r3, #32
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002efa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	37d8      	adds	r7, #216	@ 0xd8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	80080000 	.word	0x80080000
 8002f0c:	50040300 	.word	0x50040300
 8002f10:	c7520000 	.word	0xc7520000
 8002f14:	50040000 	.word	0x50040000
 8002f18:	20000018 	.word	0x20000018
 8002f1c:	053e2d63 	.word	0x053e2d63
 8002f20:	cb840000 	.word	0xcb840000
 8002f24:	80000001 	.word	0x80000001

08002f28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff f983 	bl	8002244 <LL_ADC_IsEnabled>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d169      	bne.n	8003018 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	4b36      	ldr	r3, [pc, #216]	@ (8003024 <ADC_Enable+0xfc>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00d      	beq.n	8002f6e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f56:	f043 0210 	orr.w	r2, r3, #16
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f62:	f043 0201 	orr.w	r2, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e055      	b.n	800301a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff f952 	bl	800221c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f78:	482b      	ldr	r0, [pc, #172]	@ (8003028 <ADC_Enable+0x100>)
 8002f7a:	f7ff f80f 	bl	8001f9c <LL_ADC_GetCommonPathInternalCh>
 8002f7e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d013      	beq.n	8002fb0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f88:	4b28      	ldr	r3, [pc, #160]	@ (800302c <ADC_Enable+0x104>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	099b      	lsrs	r3, r3, #6
 8002f8e:	4a28      	ldr	r2, [pc, #160]	@ (8003030 <ADC_Enable+0x108>)
 8002f90:	fba2 2303 	umull	r2, r3, r2, r3
 8002f94:	099b      	lsrs	r3, r3, #6
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	4613      	mov	r3, r2
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fa2:	e002      	b.n	8002faa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f9      	bne.n	8002fa4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002fb0:	f7fe ff9e 	bl	8001ef0 <HAL_GetTick>
 8002fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fb6:	e028      	b.n	800300a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff f941 	bl	8002244 <LL_ADC_IsEnabled>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d104      	bne.n	8002fd2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff f925 	bl	800221c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fd2:	f7fe ff8d 	bl	8001ef0 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d914      	bls.n	800300a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d00d      	beq.n	800300a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff2:	f043 0210 	orr.w	r2, r3, #16
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffe:	f043 0201 	orr.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e007      	b.n	800301a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b01      	cmp	r3, #1
 8003016:	d1cf      	bne.n	8002fb8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	8000003f 	.word	0x8000003f
 8003028:	50040300 	.word	0x50040300
 800302c:	20000018 	.word	0x20000018
 8003030:	053e2d63 	.word	0x053e2d63

08003034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003044:	4b0c      	ldr	r3, [pc, #48]	@ (8003078 <__NVIC_SetPriorityGrouping+0x44>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003050:	4013      	ands	r3, r2
 8003052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800305c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003066:	4a04      	ldr	r2, [pc, #16]	@ (8003078 <__NVIC_SetPriorityGrouping+0x44>)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	60d3      	str	r3, [r2, #12]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003080:	4b04      	ldr	r3, [pc, #16]	@ (8003094 <__NVIC_GetPriorityGrouping+0x18>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	0a1b      	lsrs	r3, r3, #8
 8003086:	f003 0307 	and.w	r3, r3, #7
}
 800308a:	4618      	mov	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	db0b      	blt.n	80030c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	f003 021f 	and.w	r2, r3, #31
 80030b0:	4907      	ldr	r1, [pc, #28]	@ (80030d0 <__NVIC_EnableIRQ+0x38>)
 80030b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	2001      	movs	r0, #1
 80030ba:	fa00 f202 	lsl.w	r2, r0, r2
 80030be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	e000e100 	.word	0xe000e100

080030d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	6039      	str	r1, [r7, #0]
 80030de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	db0a      	blt.n	80030fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	490c      	ldr	r1, [pc, #48]	@ (8003120 <__NVIC_SetPriority+0x4c>)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	0112      	lsls	r2, r2, #4
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	440b      	add	r3, r1
 80030f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030fc:	e00a      	b.n	8003114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	b2da      	uxtb	r2, r3
 8003102:	4908      	ldr	r1, [pc, #32]	@ (8003124 <__NVIC_SetPriority+0x50>)
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	3b04      	subs	r3, #4
 800310c:	0112      	lsls	r2, r2, #4
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	440b      	add	r3, r1
 8003112:	761a      	strb	r2, [r3, #24]
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	e000e100 	.word	0xe000e100
 8003124:	e000ed00 	.word	0xe000ed00

08003128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003128:	b480      	push	{r7}
 800312a:	b089      	sub	sp, #36	@ 0x24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f1c3 0307 	rsb	r3, r3, #7
 8003142:	2b04      	cmp	r3, #4
 8003144:	bf28      	it	cs
 8003146:	2304      	movcs	r3, #4
 8003148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3304      	adds	r3, #4
 800314e:	2b06      	cmp	r3, #6
 8003150:	d902      	bls.n	8003158 <NVIC_EncodePriority+0x30>
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	3b03      	subs	r3, #3
 8003156:	e000      	b.n	800315a <NVIC_EncodePriority+0x32>
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800315c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43da      	mvns	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	401a      	ands	r2, r3
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003170:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	fa01 f303 	lsl.w	r3, r1, r3
 800317a:	43d9      	mvns	r1, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003180:	4313      	orrs	r3, r2
         );
}
 8003182:	4618      	mov	r0, r3
 8003184:	3724      	adds	r7, #36	@ 0x24
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3b01      	subs	r3, #1
 800319c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031a0:	d301      	bcc.n	80031a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031a2:	2301      	movs	r3, #1
 80031a4:	e00f      	b.n	80031c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031a6:	4a0a      	ldr	r2, [pc, #40]	@ (80031d0 <SysTick_Config+0x40>)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ae:	210f      	movs	r1, #15
 80031b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031b4:	f7ff ff8e 	bl	80030d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031b8:	4b05      	ldr	r3, [pc, #20]	@ (80031d0 <SysTick_Config+0x40>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031be:	4b04      	ldr	r3, [pc, #16]	@ (80031d0 <SysTick_Config+0x40>)
 80031c0:	2207      	movs	r2, #7
 80031c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	e000e010 	.word	0xe000e010

080031d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff ff29 	bl	8003034 <__NVIC_SetPriorityGrouping>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b086      	sub	sp, #24
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	4603      	mov	r3, r0
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031fc:	f7ff ff3e 	bl	800307c <__NVIC_GetPriorityGrouping>
 8003200:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	6978      	ldr	r0, [r7, #20]
 8003208:	f7ff ff8e 	bl	8003128 <NVIC_EncodePriority>
 800320c:	4602      	mov	r2, r0
 800320e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff5d 	bl	80030d4 <__NVIC_SetPriority>
}
 800321a:	bf00      	nop
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	4603      	mov	r3, r0
 800322a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800322c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff31 	bl	8003098 <__NVIC_EnableIRQ>
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff ffa2 	bl	8003190 <SysTick_Config>
 800324c:	4603      	mov	r3, r0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003256:	b480      	push	{r7}
 8003258:	b085      	sub	sp, #20
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d008      	beq.n	8003280 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2204      	movs	r2, #4
 8003272:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e022      	b.n	80032c6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 020e 	bic.w	r2, r2, #14
 800328e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0201 	bic.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a4:	f003 021c 	and.w	r2, r3, #28
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ac:	2101      	movs	r1, #1
 80032ae:	fa01 f202 	lsl.w	r2, r1, r2
 80032b2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d005      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2204      	movs	r2, #4
 80032ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	73fb      	strb	r3, [r7, #15]
 80032f4:	e029      	b.n	800334a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 020e 	bic.w	r2, r2, #14
 8003304:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0201 	bic.w	r2, r2, #1
 8003314:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331a:	f003 021c 	and.w	r2, r3, #28
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	2101      	movs	r1, #1
 8003324:	fa01 f202 	lsl.w	r2, r1, r2
 8003328:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	4798      	blx	r3
    }
  }
  return status;
 800334a:	7bfb      	ldrb	r3, [r7, #15]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003362:	e148      	b.n	80035f6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	2101      	movs	r1, #1
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	fa01 f303 	lsl.w	r3, r1, r3
 8003370:	4013      	ands	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 813a 	beq.w	80035f0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	2b01      	cmp	r3, #1
 8003386:	d005      	beq.n	8003394 <HAL_GPIO_Init+0x40>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d130      	bne.n	80033f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	2203      	movs	r2, #3
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4013      	ands	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ca:	2201      	movs	r2, #1
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43db      	mvns	r3, r3
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4013      	ands	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	091b      	lsrs	r3, r3, #4
 80033e0:	f003 0201 	and.w	r2, r3, #1
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d017      	beq.n	8003432 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	2203      	movs	r2, #3
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4013      	ands	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d123      	bne.n	8003486 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	08da      	lsrs	r2, r3, #3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3208      	adds	r2, #8
 8003446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800344a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	220f      	movs	r2, #15
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4013      	ands	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	691a      	ldr	r2, [r3, #16]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	08da      	lsrs	r2, r3, #3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3208      	adds	r2, #8
 8003480:	6939      	ldr	r1, [r7, #16]
 8003482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	2203      	movs	r2, #3
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4013      	ands	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 0203 	and.w	r2, r3, #3
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 8094 	beq.w	80035f0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034c8:	4b52      	ldr	r3, [pc, #328]	@ (8003614 <HAL_GPIO_Init+0x2c0>)
 80034ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034cc:	4a51      	ldr	r2, [pc, #324]	@ (8003614 <HAL_GPIO_Init+0x2c0>)
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80034d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003614 <HAL_GPIO_Init+0x2c0>)
 80034d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034e0:	4a4d      	ldr	r2, [pc, #308]	@ (8003618 <HAL_GPIO_Init+0x2c4>)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	089b      	lsrs	r3, r3, #2
 80034e6:	3302      	adds	r3, #2
 80034e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	220f      	movs	r2, #15
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4013      	ands	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800350a:	d00d      	beq.n	8003528 <HAL_GPIO_Init+0x1d4>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a43      	ldr	r2, [pc, #268]	@ (800361c <HAL_GPIO_Init+0x2c8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d007      	beq.n	8003524 <HAL_GPIO_Init+0x1d0>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a42      	ldr	r2, [pc, #264]	@ (8003620 <HAL_GPIO_Init+0x2cc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d101      	bne.n	8003520 <HAL_GPIO_Init+0x1cc>
 800351c:	2302      	movs	r3, #2
 800351e:	e004      	b.n	800352a <HAL_GPIO_Init+0x1d6>
 8003520:	2307      	movs	r3, #7
 8003522:	e002      	b.n	800352a <HAL_GPIO_Init+0x1d6>
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <HAL_GPIO_Init+0x1d6>
 8003528:	2300      	movs	r3, #0
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	f002 0203 	and.w	r2, r2, #3
 8003530:	0092      	lsls	r2, r2, #2
 8003532:	4093      	lsls	r3, r2
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800353a:	4937      	ldr	r1, [pc, #220]	@ (8003618 <HAL_GPIO_Init+0x2c4>)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	089b      	lsrs	r3, r3, #2
 8003540:	3302      	adds	r3, #2
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003548:	4b36      	ldr	r3, [pc, #216]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	43db      	mvns	r3, r3
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4013      	ands	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800356c:	4a2d      	ldr	r2, [pc, #180]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003572:	4b2c      	ldr	r3, [pc, #176]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	43db      	mvns	r3, r3
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4013      	ands	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003596:	4a23      	ldr	r2, [pc, #140]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800359c:	4b21      	ldr	r3, [pc, #132]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4013      	ands	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035c0:	4a18      	ldr	r2, [pc, #96]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035c6:	4b17      	ldr	r3, [pc, #92]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4013      	ands	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035ea:	4a0e      	ldr	r2, [pc, #56]	@ (8003624 <HAL_GPIO_Init+0x2d0>)
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	3301      	adds	r3, #1
 80035f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	f47f aeaf 	bne.w	8003364 <HAL_GPIO_Init+0x10>
  }
}
 8003606:	bf00      	nop
 8003608:	bf00      	nop
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40021000 	.word	0x40021000
 8003618:	40010000 	.word	0x40010000
 800361c:	48000400 	.word	0x48000400
 8003620:	48000800 	.word	0x48000800
 8003624:	40010400 	.word	0x40010400

08003628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	807b      	strh	r3, [r7, #2]
 8003634:	4613      	mov	r3, r2
 8003636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003638:	787b      	ldrb	r3, [r7, #1]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800363e:	887a      	ldrh	r2, [r7, #2]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003644:	e002      	b.n	800364c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003646:	887a      	ldrh	r2, [r7, #2]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800366a:	887a      	ldrh	r2, [r7, #2]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4013      	ands	r3, r2
 8003670:	041a      	lsls	r2, r3, #16
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	43d9      	mvns	r1, r3
 8003676:	887b      	ldrh	r3, [r7, #2]
 8003678:	400b      	ands	r3, r1
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	619a      	str	r2, [r3, #24]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003696:	4b08      	ldr	r3, [pc, #32]	@ (80036b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	88fb      	ldrh	r3, [r7, #6]
 800369c:	4013      	ands	r3, r2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d006      	beq.n	80036b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036a2:	4a05      	ldr	r2, [pc, #20]	@ (80036b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036a8:	88fb      	ldrh	r3, [r7, #6]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fe f83a 	bl	8001724 <HAL_GPIO_EXTI_Callback>
  }
}
 80036b0:	bf00      	nop
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40010400 	.word	0x40010400

080036bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036c0:	4b04      	ldr	r3, [pc, #16]	@ (80036d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40007000 	.word	0x40007000

080036d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036e6:	d130      	bne.n	800374a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036e8:	4b23      	ldr	r3, [pc, #140]	@ (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036f4:	d038      	beq.n	8003768 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036f6:	4b20      	ldr	r3, [pc, #128]	@ (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003700:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003704:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003706:	4b1d      	ldr	r3, [pc, #116]	@ (800377c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2232      	movs	r2, #50	@ 0x32
 800370c:	fb02 f303 	mul.w	r3, r2, r3
 8003710:	4a1b      	ldr	r2, [pc, #108]	@ (8003780 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0c9b      	lsrs	r3, r3, #18
 8003718:	3301      	adds	r3, #1
 800371a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800371c:	e002      	b.n	8003724 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3b01      	subs	r3, #1
 8003722:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003724:	4b14      	ldr	r3, [pc, #80]	@ (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800372c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003730:	d102      	bne.n	8003738 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1f2      	bne.n	800371e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003738:	4b0f      	ldr	r3, [pc, #60]	@ (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003744:	d110      	bne.n	8003768 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e00f      	b.n	800376a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800374a:	4b0b      	ldr	r3, [pc, #44]	@ (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003756:	d007      	beq.n	8003768 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003758:	4b07      	ldr	r3, [pc, #28]	@ (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003760:	4a05      	ldr	r2, [pc, #20]	@ (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003762:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003766:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40007000 	.word	0x40007000
 800377c:	20000018 	.word	0x20000018
 8003780:	431bde83 	.word	0x431bde83

08003784 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d102      	bne.n	8003798 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	f000 bc02 	b.w	8003f9c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003798:	4b96      	ldr	r3, [pc, #600]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 030c 	and.w	r3, r3, #12
 80037a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037a2:	4b94      	ldr	r3, [pc, #592]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80e4 	beq.w	8003982 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d007      	beq.n	80037d0 <HAL_RCC_OscConfig+0x4c>
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	2b0c      	cmp	r3, #12
 80037c4:	f040 808b 	bne.w	80038de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	f040 8087 	bne.w	80038de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037d0:	4b88      	ldr	r3, [pc, #544]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_OscConfig+0x64>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e3d9      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a1a      	ldr	r2, [r3, #32]
 80037ec:	4b81      	ldr	r3, [pc, #516]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d004      	beq.n	8003802 <HAL_RCC_OscConfig+0x7e>
 80037f8:	4b7e      	ldr	r3, [pc, #504]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003800:	e005      	b.n	800380e <HAL_RCC_OscConfig+0x8a>
 8003802:	4b7c      	ldr	r3, [pc, #496]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800380e:	4293      	cmp	r3, r2
 8003810:	d223      	bcs.n	800385a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fd8c 	bl	8004334 <RCC_SetFlashLatencyFromMSIRange>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e3ba      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003826:	4b73      	ldr	r3, [pc, #460]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a72      	ldr	r2, [pc, #456]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 800382c:	f043 0308 	orr.w	r3, r3, #8
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	4b70      	ldr	r3, [pc, #448]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	496d      	ldr	r1, [pc, #436]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003840:	4313      	orrs	r3, r2
 8003842:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003844:	4b6b      	ldr	r3, [pc, #428]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	4968      	ldr	r1, [pc, #416]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003854:	4313      	orrs	r3, r2
 8003856:	604b      	str	r3, [r1, #4]
 8003858:	e025      	b.n	80038a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800385a:	4b66      	ldr	r3, [pc, #408]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a65      	ldr	r2, [pc, #404]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003860:	f043 0308 	orr.w	r3, r3, #8
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	4b63      	ldr	r3, [pc, #396]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	4960      	ldr	r1, [pc, #384]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003874:	4313      	orrs	r3, r2
 8003876:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003878:	4b5e      	ldr	r3, [pc, #376]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	495b      	ldr	r1, [pc, #364]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003888:	4313      	orrs	r3, r2
 800388a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fd4c 	bl	8004334 <RCC_SetFlashLatencyFromMSIRange>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e37a      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038a6:	f000 fc81 	bl	80041ac <HAL_RCC_GetSysClockFreq>
 80038aa:	4602      	mov	r2, r0
 80038ac:	4b51      	ldr	r3, [pc, #324]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	4950      	ldr	r1, [pc, #320]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 80038b8:	5ccb      	ldrb	r3, [r1, r3]
 80038ba:	f003 031f 	and.w	r3, r3, #31
 80038be:	fa22 f303 	lsr.w	r3, r2, r3
 80038c2:	4a4e      	ldr	r2, [pc, #312]	@ (80039fc <HAL_RCC_OscConfig+0x278>)
 80038c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038c6:	4b4e      	ldr	r3, [pc, #312]	@ (8003a00 <HAL_RCC_OscConfig+0x27c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe fac0 	bl	8001e50 <HAL_InitTick>
 80038d0:	4603      	mov	r3, r0
 80038d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d052      	beq.n	8003980 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	e35e      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d032      	beq.n	800394c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038e6:	4b43      	ldr	r3, [pc, #268]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a42      	ldr	r2, [pc, #264]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038f2:	f7fe fafd 	bl	8001ef0 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038fa:	f7fe faf9 	bl	8001ef0 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e347      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800390c:	4b39      	ldr	r3, [pc, #228]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003918:	4b36      	ldr	r3, [pc, #216]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a35      	ldr	r2, [pc, #212]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 800391e:	f043 0308 	orr.w	r3, r3, #8
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	4b33      	ldr	r3, [pc, #204]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	4930      	ldr	r1, [pc, #192]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003932:	4313      	orrs	r3, r2
 8003934:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003936:	4b2f      	ldr	r3, [pc, #188]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	492b      	ldr	r1, [pc, #172]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003946:	4313      	orrs	r3, r2
 8003948:	604b      	str	r3, [r1, #4]
 800394a:	e01a      	b.n	8003982 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800394c:	4b29      	ldr	r3, [pc, #164]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a28      	ldr	r2, [pc, #160]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003952:	f023 0301 	bic.w	r3, r3, #1
 8003956:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003958:	f7fe faca 	bl	8001ef0 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003960:	f7fe fac6 	bl	8001ef0 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e314      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003972:	4b20      	ldr	r3, [pc, #128]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x1dc>
 800397e:	e000      	b.n	8003982 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003980:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d073      	beq.n	8003a76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	2b08      	cmp	r3, #8
 8003992:	d005      	beq.n	80039a0 <HAL_RCC_OscConfig+0x21c>
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b0c      	cmp	r3, #12
 8003998:	d10e      	bne.n	80039b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2b03      	cmp	r3, #3
 800399e:	d10b      	bne.n	80039b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a0:	4b14      	ldr	r3, [pc, #80]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d063      	beq.n	8003a74 <HAL_RCC_OscConfig+0x2f0>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d15f      	bne.n	8003a74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e2f1      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039c0:	d106      	bne.n	80039d0 <HAL_RCC_OscConfig+0x24c>
 80039c2:	4b0c      	ldr	r3, [pc, #48]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a0b      	ldr	r2, [pc, #44]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 80039c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	e025      	b.n	8003a1c <HAL_RCC_OscConfig+0x298>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039d8:	d114      	bne.n	8003a04 <HAL_RCC_OscConfig+0x280>
 80039da:	4b06      	ldr	r3, [pc, #24]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a05      	ldr	r2, [pc, #20]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 80039e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	4b03      	ldr	r3, [pc, #12]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a02      	ldr	r2, [pc, #8]	@ (80039f4 <HAL_RCC_OscConfig+0x270>)
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e013      	b.n	8003a1c <HAL_RCC_OscConfig+0x298>
 80039f4:	40021000 	.word	0x40021000
 80039f8:	0800b334 	.word	0x0800b334
 80039fc:	20000018 	.word	0x20000018
 8003a00:	2000001c 	.word	0x2000001c
 8003a04:	4ba0      	ldr	r3, [pc, #640]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a9f      	ldr	r2, [pc, #636]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003a0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	4b9d      	ldr	r3, [pc, #628]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a9c      	ldr	r2, [pc, #624]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003a16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d013      	beq.n	8003a4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a24:	f7fe fa64 	bl	8001ef0 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a2c:	f7fe fa60 	bl	8001ef0 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b64      	cmp	r3, #100	@ 0x64
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e2ae      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a3e:	4b92      	ldr	r3, [pc, #584]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0x2a8>
 8003a4a:	e014      	b.n	8003a76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4c:	f7fe fa50 	bl	8001ef0 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a54:	f7fe fa4c 	bl	8001ef0 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	@ 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e29a      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a66:	4b88      	ldr	r3, [pc, #544]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0x2d0>
 8003a72:	e000      	b.n	8003a76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d060      	beq.n	8003b44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_OscConfig+0x310>
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2b0c      	cmp	r3, #12
 8003a8c:	d119      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d116      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a94:	4b7c      	ldr	r3, [pc, #496]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_OscConfig+0x328>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e277      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aac:	4b76      	ldr	r3, [pc, #472]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	061b      	lsls	r3, r3, #24
 8003aba:	4973      	ldr	r1, [pc, #460]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac0:	e040      	b.n	8003b44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d023      	beq.n	8003b12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aca:	4b6f      	ldr	r3, [pc, #444]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a6e      	ldr	r2, [pc, #440]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad6:	f7fe fa0b 	bl	8001ef0 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ade:	f7fe fa07 	bl	8001ef0 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e255      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003af0:	4b65      	ldr	r3, [pc, #404]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afc:	4b62      	ldr	r3, [pc, #392]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	061b      	lsls	r3, r3, #24
 8003b0a:	495f      	ldr	r1, [pc, #380]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]
 8003b10:	e018      	b.n	8003b44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b12:	4b5d      	ldr	r3, [pc, #372]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a5c      	ldr	r2, [pc, #368]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003b18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1e:	f7fe f9e7 	bl	8001ef0 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b26:	f7fe f9e3 	bl	8001ef0 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e231      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b38:	4b53      	ldr	r3, [pc, #332]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1f0      	bne.n	8003b26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d03c      	beq.n	8003bca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01c      	beq.n	8003b92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b58:	4b4b      	ldr	r3, [pc, #300]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b5e:	4a4a      	ldr	r2, [pc, #296]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b68:	f7fe f9c2 	bl	8001ef0 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b70:	f7fe f9be 	bl	8001ef0 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e20c      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b82:	4b41      	ldr	r3, [pc, #260]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0ef      	beq.n	8003b70 <HAL_RCC_OscConfig+0x3ec>
 8003b90:	e01b      	b.n	8003bca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b92:	4b3d      	ldr	r3, [pc, #244]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b98:	4a3b      	ldr	r2, [pc, #236]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003b9a:	f023 0301 	bic.w	r3, r3, #1
 8003b9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba2:	f7fe f9a5 	bl	8001ef0 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003baa:	f7fe f9a1 	bl	8001ef0 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e1ef      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bbc:	4b32      	ldr	r3, [pc, #200]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1ef      	bne.n	8003baa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 80a6 	beq.w	8003d24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10d      	bne.n	8003c04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be8:	4b27      	ldr	r3, [pc, #156]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bec:	4a26      	ldr	r2, [pc, #152]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003bee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bf4:	4b24      	ldr	r3, [pc, #144]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c00:	2301      	movs	r3, #1
 8003c02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c04:	4b21      	ldr	r3, [pc, #132]	@ (8003c8c <HAL_RCC_OscConfig+0x508>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d118      	bne.n	8003c42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c10:	4b1e      	ldr	r3, [pc, #120]	@ (8003c8c <HAL_RCC_OscConfig+0x508>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a1d      	ldr	r2, [pc, #116]	@ (8003c8c <HAL_RCC_OscConfig+0x508>)
 8003c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1c:	f7fe f968 	bl	8001ef0 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c24:	f7fe f964 	bl	8001ef0 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e1b2      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c36:	4b15      	ldr	r3, [pc, #84]	@ (8003c8c <HAL_RCC_OscConfig+0x508>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0f0      	beq.n	8003c24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d108      	bne.n	8003c5c <HAL_RCC_OscConfig+0x4d8>
 8003c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c50:	4a0d      	ldr	r2, [pc, #52]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c5a:	e029      	b.n	8003cb0 <HAL_RCC_OscConfig+0x52c>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b05      	cmp	r3, #5
 8003c62:	d115      	bne.n	8003c90 <HAL_RCC_OscConfig+0x50c>
 8003c64:	4b08      	ldr	r3, [pc, #32]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6a:	4a07      	ldr	r2, [pc, #28]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003c6c:	f043 0304 	orr.w	r3, r3, #4
 8003c70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c74:	4b04      	ldr	r3, [pc, #16]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7a:	4a03      	ldr	r2, [pc, #12]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c84:	e014      	b.n	8003cb0 <HAL_RCC_OscConfig+0x52c>
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40007000 	.word	0x40007000
 8003c90:	4b9a      	ldr	r3, [pc, #616]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c96:	4a99      	ldr	r2, [pc, #612]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003c98:	f023 0301 	bic.w	r3, r3, #1
 8003c9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ca0:	4b96      	ldr	r3, [pc, #600]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca6:	4a95      	ldr	r2, [pc, #596]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003ca8:	f023 0304 	bic.w	r3, r3, #4
 8003cac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d016      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb8:	f7fe f91a 	bl	8001ef0 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc0:	f7fe f916 	bl	8001ef0 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e162      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cd6:	4b89      	ldr	r3, [pc, #548]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0ed      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x53c>
 8003ce4:	e015      	b.n	8003d12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce6:	f7fe f903 	bl	8001ef0 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cec:	e00a      	b.n	8003d04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cee:	f7fe f8ff 	bl	8001ef0 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e14b      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d04:	4b7d      	ldr	r3, [pc, #500]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1ed      	bne.n	8003cee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d12:	7ffb      	ldrb	r3, [r7, #31]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d105      	bne.n	8003d24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d18:	4b78      	ldr	r3, [pc, #480]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1c:	4a77      	ldr	r2, [pc, #476]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003d1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d22:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d03c      	beq.n	8003daa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d01c      	beq.n	8003d72 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d38:	4b70      	ldr	r3, [pc, #448]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d3e:	4a6f      	ldr	r2, [pc, #444]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d48:	f7fe f8d2 	bl	8001ef0 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d50:	f7fe f8ce 	bl	8001ef0 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e11c      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d62:	4b66      	ldr	r3, [pc, #408]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003d64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0ef      	beq.n	8003d50 <HAL_RCC_OscConfig+0x5cc>
 8003d70:	e01b      	b.n	8003daa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d72:	4b62      	ldr	r3, [pc, #392]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003d74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d78:	4a60      	ldr	r2, [pc, #384]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d82:	f7fe f8b5 	bl	8001ef0 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d8a:	f7fe f8b1 	bl	8001ef0 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e0ff      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d9c:	4b57      	ldr	r3, [pc, #348]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1ef      	bne.n	8003d8a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 80f3 	beq.w	8003f9a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	f040 80c9 	bne.w	8003f50 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003dbe:	4b4f      	ldr	r3, [pc, #316]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f003 0203 	and.w	r2, r3, #3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d12c      	bne.n	8003e2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d123      	bne.n	8003e2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d11b      	bne.n	8003e2c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d113      	bne.n	8003e2c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e0e:	085b      	lsrs	r3, r3, #1
 8003e10:	3b01      	subs	r3, #1
 8003e12:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d109      	bne.n	8003e2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e22:	085b      	lsrs	r3, r3, #1
 8003e24:	3b01      	subs	r3, #1
 8003e26:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d06b      	beq.n	8003f04 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	2b0c      	cmp	r3, #12
 8003e30:	d062      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e32:	4b32      	ldr	r3, [pc, #200]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e0ac      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e42:	4b2e      	ldr	r3, [pc, #184]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a2d      	ldr	r2, [pc, #180]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003e48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e4c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e4e:	f7fe f84f 	bl	8001ef0 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e56:	f7fe f84b 	bl	8001ef0 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e099      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e68:	4b24      	ldr	r3, [pc, #144]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f0      	bne.n	8003e56 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e74:	4b21      	ldr	r3, [pc, #132]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	4b21      	ldr	r3, [pc, #132]	@ (8003f00 <HAL_RCC_OscConfig+0x77c>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003e84:	3a01      	subs	r2, #1
 8003e86:	0112      	lsls	r2, r2, #4
 8003e88:	4311      	orrs	r1, r2
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e8e:	0212      	lsls	r2, r2, #8
 8003e90:	4311      	orrs	r1, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e96:	0852      	lsrs	r2, r2, #1
 8003e98:	3a01      	subs	r2, #1
 8003e9a:	0552      	lsls	r2, r2, #21
 8003e9c:	4311      	orrs	r1, r2
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003ea2:	0852      	lsrs	r2, r2, #1
 8003ea4:	3a01      	subs	r2, #1
 8003ea6:	0652      	lsls	r2, r2, #25
 8003ea8:	4311      	orrs	r1, r2
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003eae:	06d2      	lsls	r2, r2, #27
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	4912      	ldr	r1, [pc, #72]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003eb8:	4b10      	ldr	r3, [pc, #64]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a0f      	ldr	r2, [pc, #60]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ec2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	4a0c      	ldr	r2, [pc, #48]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003eca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ece:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ed0:	f7fe f80e 	bl	8001ef0 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed8:	f7fe f80a 	bl	8001ef0 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e058      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eea:	4b04      	ldr	r3, [pc, #16]	@ (8003efc <HAL_RCC_OscConfig+0x778>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ef6:	e050      	b.n	8003f9a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e04f      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
 8003efc:	40021000 	.word	0x40021000
 8003f00:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f04:	4b27      	ldr	r3, [pc, #156]	@ (8003fa4 <HAL_RCC_OscConfig+0x820>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d144      	bne.n	8003f9a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f10:	4b24      	ldr	r3, [pc, #144]	@ (8003fa4 <HAL_RCC_OscConfig+0x820>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a23      	ldr	r2, [pc, #140]	@ (8003fa4 <HAL_RCC_OscConfig+0x820>)
 8003f16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f1c:	4b21      	ldr	r3, [pc, #132]	@ (8003fa4 <HAL_RCC_OscConfig+0x820>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	4a20      	ldr	r2, [pc, #128]	@ (8003fa4 <HAL_RCC_OscConfig+0x820>)
 8003f22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f28:	f7fd ffe2 	bl	8001ef0 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f30:	f7fd ffde 	bl	8001ef0 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e02c      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f42:	4b18      	ldr	r3, [pc, #96]	@ (8003fa4 <HAL_RCC_OscConfig+0x820>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0x7ac>
 8003f4e:	e024      	b.n	8003f9a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	2b0c      	cmp	r3, #12
 8003f54:	d01f      	beq.n	8003f96 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f56:	4b13      	ldr	r3, [pc, #76]	@ (8003fa4 <HAL_RCC_OscConfig+0x820>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a12      	ldr	r2, [pc, #72]	@ (8003fa4 <HAL_RCC_OscConfig+0x820>)
 8003f5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f62:	f7fd ffc5 	bl	8001ef0 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6a:	f7fd ffc1 	bl	8001ef0 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e00f      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f7c:	4b09      	ldr	r3, [pc, #36]	@ (8003fa4 <HAL_RCC_OscConfig+0x820>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1f0      	bne.n	8003f6a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003f88:	4b06      	ldr	r3, [pc, #24]	@ (8003fa4 <HAL_RCC_OscConfig+0x820>)
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	4905      	ldr	r1, [pc, #20]	@ (8003fa4 <HAL_RCC_OscConfig+0x820>)
 8003f8e:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <HAL_RCC_OscConfig+0x824>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	60cb      	str	r3, [r1, #12]
 8003f94:	e001      	b.n	8003f9a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e000      	b.n	8003f9c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3720      	adds	r7, #32
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	feeefffc 	.word	0xfeeefffc

08003fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0e7      	b.n	8004190 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc0:	4b75      	ldr	r3, [pc, #468]	@ (8004198 <HAL_RCC_ClockConfig+0x1ec>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d910      	bls.n	8003ff0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fce:	4b72      	ldr	r3, [pc, #456]	@ (8004198 <HAL_RCC_ClockConfig+0x1ec>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f023 0207 	bic.w	r2, r3, #7
 8003fd6:	4970      	ldr	r1, [pc, #448]	@ (8004198 <HAL_RCC_ClockConfig+0x1ec>)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fde:	4b6e      	ldr	r3, [pc, #440]	@ (8004198 <HAL_RCC_ClockConfig+0x1ec>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0cf      	b.n	8004190 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d010      	beq.n	800401e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	4b66      	ldr	r3, [pc, #408]	@ (800419c <HAL_RCC_ClockConfig+0x1f0>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004008:	429a      	cmp	r2, r3
 800400a:	d908      	bls.n	800401e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800400c:	4b63      	ldr	r3, [pc, #396]	@ (800419c <HAL_RCC_ClockConfig+0x1f0>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	4960      	ldr	r1, [pc, #384]	@ (800419c <HAL_RCC_ClockConfig+0x1f0>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d04c      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b03      	cmp	r3, #3
 8004030:	d107      	bne.n	8004042 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004032:	4b5a      	ldr	r3, [pc, #360]	@ (800419c <HAL_RCC_ClockConfig+0x1f0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d121      	bne.n	8004082 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e0a6      	b.n	8004190 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800404a:	4b54      	ldr	r3, [pc, #336]	@ (800419c <HAL_RCC_ClockConfig+0x1f0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d115      	bne.n	8004082 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e09a      	b.n	8004190 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d107      	bne.n	8004072 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004062:	4b4e      	ldr	r3, [pc, #312]	@ (800419c <HAL_RCC_ClockConfig+0x1f0>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e08e      	b.n	8004190 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004072:	4b4a      	ldr	r3, [pc, #296]	@ (800419c <HAL_RCC_ClockConfig+0x1f0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e086      	b.n	8004190 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004082:	4b46      	ldr	r3, [pc, #280]	@ (800419c <HAL_RCC_ClockConfig+0x1f0>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f023 0203 	bic.w	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4943      	ldr	r1, [pc, #268]	@ (800419c <HAL_RCC_ClockConfig+0x1f0>)
 8004090:	4313      	orrs	r3, r2
 8004092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004094:	f7fd ff2c 	bl	8001ef0 <HAL_GetTick>
 8004098:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409c:	f7fd ff28 	bl	8001ef0 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e06e      	b.n	8004190 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b2:	4b3a      	ldr	r3, [pc, #232]	@ (800419c <HAL_RCC_ClockConfig+0x1f0>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 020c 	and.w	r2, r3, #12
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d1eb      	bne.n	800409c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d010      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	4b31      	ldr	r3, [pc, #196]	@ (800419c <HAL_RCC_ClockConfig+0x1f0>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040dc:	429a      	cmp	r2, r3
 80040de:	d208      	bcs.n	80040f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e0:	4b2e      	ldr	r3, [pc, #184]	@ (800419c <HAL_RCC_ClockConfig+0x1f0>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	492b      	ldr	r1, [pc, #172]	@ (800419c <HAL_RCC_ClockConfig+0x1f0>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040f2:	4b29      	ldr	r3, [pc, #164]	@ (8004198 <HAL_RCC_ClockConfig+0x1ec>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d210      	bcs.n	8004122 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004100:	4b25      	ldr	r3, [pc, #148]	@ (8004198 <HAL_RCC_ClockConfig+0x1ec>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f023 0207 	bic.w	r2, r3, #7
 8004108:	4923      	ldr	r1, [pc, #140]	@ (8004198 <HAL_RCC_ClockConfig+0x1ec>)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	4313      	orrs	r3, r2
 800410e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004110:	4b21      	ldr	r3, [pc, #132]	@ (8004198 <HAL_RCC_ClockConfig+0x1ec>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d001      	beq.n	8004122 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e036      	b.n	8004190 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	d008      	beq.n	8004140 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800412e:	4b1b      	ldr	r3, [pc, #108]	@ (800419c <HAL_RCC_ClockConfig+0x1f0>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	4918      	ldr	r1, [pc, #96]	@ (800419c <HAL_RCC_ClockConfig+0x1f0>)
 800413c:	4313      	orrs	r3, r2
 800413e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b00      	cmp	r3, #0
 800414a:	d009      	beq.n	8004160 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800414c:	4b13      	ldr	r3, [pc, #76]	@ (800419c <HAL_RCC_ClockConfig+0x1f0>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	4910      	ldr	r1, [pc, #64]	@ (800419c <HAL_RCC_ClockConfig+0x1f0>)
 800415c:	4313      	orrs	r3, r2
 800415e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004160:	f000 f824 	bl	80041ac <HAL_RCC_GetSysClockFreq>
 8004164:	4602      	mov	r2, r0
 8004166:	4b0d      	ldr	r3, [pc, #52]	@ (800419c <HAL_RCC_ClockConfig+0x1f0>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	091b      	lsrs	r3, r3, #4
 800416c:	f003 030f 	and.w	r3, r3, #15
 8004170:	490b      	ldr	r1, [pc, #44]	@ (80041a0 <HAL_RCC_ClockConfig+0x1f4>)
 8004172:	5ccb      	ldrb	r3, [r1, r3]
 8004174:	f003 031f 	and.w	r3, r3, #31
 8004178:	fa22 f303 	lsr.w	r3, r2, r3
 800417c:	4a09      	ldr	r2, [pc, #36]	@ (80041a4 <HAL_RCC_ClockConfig+0x1f8>)
 800417e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004180:	4b09      	ldr	r3, [pc, #36]	@ (80041a8 <HAL_RCC_ClockConfig+0x1fc>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4618      	mov	r0, r3
 8004186:	f7fd fe63 	bl	8001e50 <HAL_InitTick>
 800418a:	4603      	mov	r3, r0
 800418c:	72fb      	strb	r3, [r7, #11]

  return status;
 800418e:	7afb      	ldrb	r3, [r7, #11]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40022000 	.word	0x40022000
 800419c:	40021000 	.word	0x40021000
 80041a0:	0800b334 	.word	0x0800b334
 80041a4:	20000018 	.word	0x20000018
 80041a8:	2000001c 	.word	0x2000001c

080041ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b089      	sub	sp, #36	@ 0x24
 80041b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61fb      	str	r3, [r7, #28]
 80041b6:	2300      	movs	r3, #0
 80041b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ba:	4b3e      	ldr	r3, [pc, #248]	@ (80042b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
 80041c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041c4:	4b3b      	ldr	r3, [pc, #236]	@ (80042b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d005      	beq.n	80041e0 <HAL_RCC_GetSysClockFreq+0x34>
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	2b0c      	cmp	r3, #12
 80041d8:	d121      	bne.n	800421e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d11e      	bne.n	800421e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041e0:	4b34      	ldr	r3, [pc, #208]	@ (80042b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d107      	bne.n	80041fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041ec:	4b31      	ldr	r3, [pc, #196]	@ (80042b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80041ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041f2:	0a1b      	lsrs	r3, r3, #8
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	61fb      	str	r3, [r7, #28]
 80041fa:	e005      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041fc:	4b2d      	ldr	r3, [pc, #180]	@ (80042b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004208:	4a2b      	ldr	r2, [pc, #172]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004210:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10d      	bne.n	8004234 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800421c:	e00a      	b.n	8004234 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b04      	cmp	r3, #4
 8004222:	d102      	bne.n	800422a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004224:	4b25      	ldr	r3, [pc, #148]	@ (80042bc <HAL_RCC_GetSysClockFreq+0x110>)
 8004226:	61bb      	str	r3, [r7, #24]
 8004228:	e004      	b.n	8004234 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	2b08      	cmp	r3, #8
 800422e:	d101      	bne.n	8004234 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004230:	4b23      	ldr	r3, [pc, #140]	@ (80042c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004232:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	2b0c      	cmp	r3, #12
 8004238:	d134      	bne.n	80042a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800423a:	4b1e      	ldr	r3, [pc, #120]	@ (80042b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d003      	beq.n	8004252 <HAL_RCC_GetSysClockFreq+0xa6>
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b03      	cmp	r3, #3
 800424e:	d003      	beq.n	8004258 <HAL_RCC_GetSysClockFreq+0xac>
 8004250:	e005      	b.n	800425e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004252:	4b1a      	ldr	r3, [pc, #104]	@ (80042bc <HAL_RCC_GetSysClockFreq+0x110>)
 8004254:	617b      	str	r3, [r7, #20]
      break;
 8004256:	e005      	b.n	8004264 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004258:	4b19      	ldr	r3, [pc, #100]	@ (80042c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800425a:	617b      	str	r3, [r7, #20]
      break;
 800425c:	e002      	b.n	8004264 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	617b      	str	r3, [r7, #20]
      break;
 8004262:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004264:	4b13      	ldr	r3, [pc, #76]	@ (80042b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	091b      	lsrs	r3, r3, #4
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	3301      	adds	r3, #1
 8004270:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004272:	4b10      	ldr	r3, [pc, #64]	@ (80042b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	0a1b      	lsrs	r3, r3, #8
 8004278:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	fb03 f202 	mul.w	r2, r3, r2
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	fbb2 f3f3 	udiv	r3, r2, r3
 8004288:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800428a:	4b0a      	ldr	r3, [pc, #40]	@ (80042b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	0e5b      	lsrs	r3, r3, #25
 8004290:	f003 0303 	and.w	r3, r3, #3
 8004294:	3301      	adds	r3, #1
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042a4:	69bb      	ldr	r3, [r7, #24]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3724      	adds	r7, #36	@ 0x24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	40021000 	.word	0x40021000
 80042b8:	0800b34c 	.word	0x0800b34c
 80042bc:	00f42400 	.word	0x00f42400
 80042c0:	007a1200 	.word	0x007a1200

080042c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042c8:	4b03      	ldr	r3, [pc, #12]	@ (80042d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042ca:	681b      	ldr	r3, [r3, #0]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	20000018 	.word	0x20000018

080042dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042e0:	f7ff fff0 	bl	80042c4 <HAL_RCC_GetHCLKFreq>
 80042e4:	4602      	mov	r2, r0
 80042e6:	4b06      	ldr	r3, [pc, #24]	@ (8004300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	0a1b      	lsrs	r3, r3, #8
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	4904      	ldr	r1, [pc, #16]	@ (8004304 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042f2:	5ccb      	ldrb	r3, [r1, r3]
 80042f4:	f003 031f 	and.w	r3, r3, #31
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40021000 	.word	0x40021000
 8004304:	0800b344 	.word	0x0800b344

08004308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800430c:	f7ff ffda 	bl	80042c4 <HAL_RCC_GetHCLKFreq>
 8004310:	4602      	mov	r2, r0
 8004312:	4b06      	ldr	r3, [pc, #24]	@ (800432c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	0adb      	lsrs	r3, r3, #11
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	4904      	ldr	r1, [pc, #16]	@ (8004330 <HAL_RCC_GetPCLK2Freq+0x28>)
 800431e:	5ccb      	ldrb	r3, [r1, r3]
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004328:	4618      	mov	r0, r3
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40021000 	.word	0x40021000
 8004330:	0800b344 	.word	0x0800b344

08004334 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800433c:	2300      	movs	r3, #0
 800433e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004340:	4b2a      	ldr	r3, [pc, #168]	@ (80043ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800434c:	f7ff f9b6 	bl	80036bc <HAL_PWREx_GetVoltageRange>
 8004350:	6178      	str	r0, [r7, #20]
 8004352:	e014      	b.n	800437e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004354:	4b25      	ldr	r3, [pc, #148]	@ (80043ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004358:	4a24      	ldr	r2, [pc, #144]	@ (80043ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800435a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800435e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004360:	4b22      	ldr	r3, [pc, #136]	@ (80043ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800436c:	f7ff f9a6 	bl	80036bc <HAL_PWREx_GetVoltageRange>
 8004370:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004372:	4b1e      	ldr	r3, [pc, #120]	@ (80043ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004376:	4a1d      	ldr	r2, [pc, #116]	@ (80043ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004378:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800437c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004384:	d10b      	bne.n	800439e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b80      	cmp	r3, #128	@ 0x80
 800438a:	d919      	bls.n	80043c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004390:	d902      	bls.n	8004398 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004392:	2302      	movs	r3, #2
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	e013      	b.n	80043c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004398:	2301      	movs	r3, #1
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	e010      	b.n	80043c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b80      	cmp	r3, #128	@ 0x80
 80043a2:	d902      	bls.n	80043aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80043a4:	2303      	movs	r3, #3
 80043a6:	613b      	str	r3, [r7, #16]
 80043a8:	e00a      	b.n	80043c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b80      	cmp	r3, #128	@ 0x80
 80043ae:	d102      	bne.n	80043b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043b0:	2302      	movs	r3, #2
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	e004      	b.n	80043c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b70      	cmp	r3, #112	@ 0x70
 80043ba:	d101      	bne.n	80043c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043bc:	2301      	movs	r3, #1
 80043be:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043c0:	4b0b      	ldr	r3, [pc, #44]	@ (80043f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f023 0207 	bic.w	r2, r3, #7
 80043c8:	4909      	ldr	r1, [pc, #36]	@ (80043f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043d0:	4b07      	ldr	r3, [pc, #28]	@ (80043f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d001      	beq.n	80043e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40021000 	.word	0x40021000
 80043f0:	40022000 	.word	0x40022000

080043f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043fc:	2300      	movs	r3, #0
 80043fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004400:	2300      	movs	r3, #0
 8004402:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800440c:	2b00      	cmp	r3, #0
 800440e:	d031      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004414:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004418:	d01a      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800441a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800441e:	d814      	bhi.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004420:	2b00      	cmp	r3, #0
 8004422:	d009      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004424:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004428:	d10f      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800442a:	4b5d      	ldr	r3, [pc, #372]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	4a5c      	ldr	r2, [pc, #368]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004434:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004436:	e00c      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3304      	adds	r3, #4
 800443c:	2100      	movs	r1, #0
 800443e:	4618      	mov	r0, r3
 8004440:	f000 f9ce 	bl	80047e0 <RCCEx_PLLSAI1_Config>
 8004444:	4603      	mov	r3, r0
 8004446:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004448:	e003      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	74fb      	strb	r3, [r7, #19]
      break;
 800444e:	e000      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004450:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004452:	7cfb      	ldrb	r3, [r7, #19]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10b      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004458:	4b51      	ldr	r3, [pc, #324]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800445a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800445e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004466:	494e      	ldr	r1, [pc, #312]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004468:	4313      	orrs	r3, r2
 800446a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800446e:	e001      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004470:	7cfb      	ldrb	r3, [r7, #19]
 8004472:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 809e 	beq.w	80045be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004482:	2300      	movs	r3, #0
 8004484:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004486:	4b46      	ldr	r3, [pc, #280]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004496:	2300      	movs	r3, #0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00d      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800449c:	4b40      	ldr	r3, [pc, #256]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800449e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a0:	4a3f      	ldr	r2, [pc, #252]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80044a8:	4b3d      	ldr	r3, [pc, #244]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b0:	60bb      	str	r3, [r7, #8]
 80044b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044b4:	2301      	movs	r3, #1
 80044b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044b8:	4b3a      	ldr	r3, [pc, #232]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a39      	ldr	r2, [pc, #228]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044c4:	f7fd fd14 	bl	8001ef0 <HAL_GetTick>
 80044c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044ca:	e009      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044cc:	f7fd fd10 	bl	8001ef0 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d902      	bls.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	74fb      	strb	r3, [r7, #19]
        break;
 80044de:	e005      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044e0:	4b30      	ldr	r3, [pc, #192]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0ef      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80044ec:	7cfb      	ldrb	r3, [r7, #19]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d15a      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044f2:	4b2b      	ldr	r3, [pc, #172]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01e      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	429a      	cmp	r2, r3
 800450c:	d019      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800450e:	4b24      	ldr	r3, [pc, #144]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004518:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800451a:	4b21      	ldr	r3, [pc, #132]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800451c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004520:	4a1f      	ldr	r2, [pc, #124]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004526:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800452a:	4b1d      	ldr	r3, [pc, #116]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800452c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004530:	4a1b      	ldr	r2, [pc, #108]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004536:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800453a:	4a19      	ldr	r2, [pc, #100]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d016      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7fd fcd0 	bl	8001ef0 <HAL_GetTick>
 8004550:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004552:	e00b      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004554:	f7fd fccc 	bl	8001ef0 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004562:	4293      	cmp	r3, r2
 8004564:	d902      	bls.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	74fb      	strb	r3, [r7, #19]
            break;
 800456a:	e006      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800456c:	4b0c      	ldr	r3, [pc, #48]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800456e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0ec      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800457a:	7cfb      	ldrb	r3, [r7, #19]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10b      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004580:	4b07      	ldr	r3, [pc, #28]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004586:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800458e:	4904      	ldr	r1, [pc, #16]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004596:	e009      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004598:	7cfb      	ldrb	r3, [r7, #19]
 800459a:	74bb      	strb	r3, [r7, #18]
 800459c:	e006      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800459e:	bf00      	nop
 80045a0:	40021000 	.word	0x40021000
 80045a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a8:	7cfb      	ldrb	r3, [r7, #19]
 80045aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045ac:	7c7b      	ldrb	r3, [r7, #17]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d105      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b2:	4b8a      	ldr	r3, [pc, #552]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b6:	4a89      	ldr	r2, [pc, #548]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045bc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045ca:	4b84      	ldr	r3, [pc, #528]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d0:	f023 0203 	bic.w	r2, r3, #3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	4980      	ldr	r1, [pc, #512]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045ec:	4b7b      	ldr	r3, [pc, #492]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f2:	f023 020c 	bic.w	r2, r3, #12
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fa:	4978      	ldr	r1, [pc, #480]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800460e:	4b73      	ldr	r3, [pc, #460]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004614:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461c:	496f      	ldr	r1, [pc, #444]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004630:	4b6a      	ldr	r3, [pc, #424]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004636:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800463e:	4967      	ldr	r1, [pc, #412]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004652:	4b62      	ldr	r3, [pc, #392]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004658:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004660:	495e      	ldr	r1, [pc, #376]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004674:	4b59      	ldr	r3, [pc, #356]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800467a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004682:	4956      	ldr	r1, [pc, #344]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004684:	4313      	orrs	r3, r2
 8004686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004696:	4b51      	ldr	r3, [pc, #324]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a4:	494d      	ldr	r1, [pc, #308]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d028      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046b8:	4b48      	ldr	r3, [pc, #288]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c6:	4945      	ldr	r1, [pc, #276]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046d6:	d106      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046d8:	4b40      	ldr	r3, [pc, #256]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4a3f      	ldr	r2, [pc, #252]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046e2:	60d3      	str	r3, [r2, #12]
 80046e4:	e011      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046ee:	d10c      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3304      	adds	r3, #4
 80046f4:	2101      	movs	r1, #1
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 f872 	bl	80047e0 <RCCEx_PLLSAI1_Config>
 80046fc:	4603      	mov	r3, r0
 80046fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004700:	7cfb      	ldrb	r3, [r7, #19]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004706:	7cfb      	ldrb	r3, [r7, #19]
 8004708:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d028      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004716:	4b31      	ldr	r3, [pc, #196]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004724:	492d      	ldr	r1, [pc, #180]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004730:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004734:	d106      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004736:	4b29      	ldr	r3, [pc, #164]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	4a28      	ldr	r2, [pc, #160]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800473c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004740:	60d3      	str	r3, [r2, #12]
 8004742:	e011      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004748:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800474c:	d10c      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3304      	adds	r3, #4
 8004752:	2101      	movs	r1, #1
 8004754:	4618      	mov	r0, r3
 8004756:	f000 f843 	bl	80047e0 <RCCEx_PLLSAI1_Config>
 800475a:	4603      	mov	r3, r0
 800475c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800475e:	7cfb      	ldrb	r3, [r7, #19]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004764:	7cfb      	ldrb	r3, [r7, #19]
 8004766:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01c      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004774:	4b19      	ldr	r3, [pc, #100]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800477a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004782:	4916      	ldr	r1, [pc, #88]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800478e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004792:	d10c      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3304      	adds	r3, #4
 8004798:	2102      	movs	r1, #2
 800479a:	4618      	mov	r0, r3
 800479c:	f000 f820 	bl	80047e0 <RCCEx_PLLSAI1_Config>
 80047a0:	4603      	mov	r3, r0
 80047a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047a4:	7cfb      	ldrb	r3, [r7, #19]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80047aa:	7cfb      	ldrb	r3, [r7, #19]
 80047ac:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047ba:	4b08      	ldr	r3, [pc, #32]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047c8:	4904      	ldr	r1, [pc, #16]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	40021000 	.word	0x40021000

080047e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047ee:	4b74      	ldr	r3, [pc, #464]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d018      	beq.n	800482c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047fa:	4b71      	ldr	r3, [pc, #452]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f003 0203 	and.w	r2, r3, #3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d10d      	bne.n	8004826 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
       ||
 800480e:	2b00      	cmp	r3, #0
 8004810:	d009      	beq.n	8004826 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004812:	4b6b      	ldr	r3, [pc, #428]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	091b      	lsrs	r3, r3, #4
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
       ||
 8004822:	429a      	cmp	r2, r3
 8004824:	d047      	beq.n	80048b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	73fb      	strb	r3, [r7, #15]
 800482a:	e044      	b.n	80048b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b03      	cmp	r3, #3
 8004832:	d018      	beq.n	8004866 <RCCEx_PLLSAI1_Config+0x86>
 8004834:	2b03      	cmp	r3, #3
 8004836:	d825      	bhi.n	8004884 <RCCEx_PLLSAI1_Config+0xa4>
 8004838:	2b01      	cmp	r3, #1
 800483a:	d002      	beq.n	8004842 <RCCEx_PLLSAI1_Config+0x62>
 800483c:	2b02      	cmp	r3, #2
 800483e:	d009      	beq.n	8004854 <RCCEx_PLLSAI1_Config+0x74>
 8004840:	e020      	b.n	8004884 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004842:	4b5f      	ldr	r3, [pc, #380]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d11d      	bne.n	800488a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004852:	e01a      	b.n	800488a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004854:	4b5a      	ldr	r3, [pc, #360]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800485c:	2b00      	cmp	r3, #0
 800485e:	d116      	bne.n	800488e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004864:	e013      	b.n	800488e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004866:	4b56      	ldr	r3, [pc, #344]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10f      	bne.n	8004892 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004872:	4b53      	ldr	r3, [pc, #332]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d109      	bne.n	8004892 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004882:	e006      	b.n	8004892 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	73fb      	strb	r3, [r7, #15]
      break;
 8004888:	e004      	b.n	8004894 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800488a:	bf00      	nop
 800488c:	e002      	b.n	8004894 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800488e:	bf00      	nop
 8004890:	e000      	b.n	8004894 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004892:	bf00      	nop
    }

    if(status == HAL_OK)
 8004894:	7bfb      	ldrb	r3, [r7, #15]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10d      	bne.n	80048b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800489a:	4b49      	ldr	r3, [pc, #292]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6819      	ldr	r1, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	430b      	orrs	r3, r1
 80048b0:	4943      	ldr	r1, [pc, #268]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d17c      	bne.n	80049b6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048bc:	4b40      	ldr	r3, [pc, #256]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a3f      	ldr	r2, [pc, #252]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048c8:	f7fd fb12 	bl	8001ef0 <HAL_GetTick>
 80048cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048ce:	e009      	b.n	80048e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048d0:	f7fd fb0e 	bl	8001ef0 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d902      	bls.n	80048e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	73fb      	strb	r3, [r7, #15]
        break;
 80048e2:	e005      	b.n	80048f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048e4:	4b36      	ldr	r3, [pc, #216]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1ef      	bne.n	80048d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d15f      	bne.n	80049b6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d110      	bne.n	800491e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048fc:	4b30      	ldr	r3, [pc, #192]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004904:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6892      	ldr	r2, [r2, #8]
 800490c:	0211      	lsls	r1, r2, #8
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	68d2      	ldr	r2, [r2, #12]
 8004912:	06d2      	lsls	r2, r2, #27
 8004914:	430a      	orrs	r2, r1
 8004916:	492a      	ldr	r1, [pc, #168]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004918:	4313      	orrs	r3, r2
 800491a:	610b      	str	r3, [r1, #16]
 800491c:	e027      	b.n	800496e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d112      	bne.n	800494a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004924:	4b26      	ldr	r3, [pc, #152]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800492c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6892      	ldr	r2, [r2, #8]
 8004934:	0211      	lsls	r1, r2, #8
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6912      	ldr	r2, [r2, #16]
 800493a:	0852      	lsrs	r2, r2, #1
 800493c:	3a01      	subs	r2, #1
 800493e:	0552      	lsls	r2, r2, #21
 8004940:	430a      	orrs	r2, r1
 8004942:	491f      	ldr	r1, [pc, #124]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004944:	4313      	orrs	r3, r2
 8004946:	610b      	str	r3, [r1, #16]
 8004948:	e011      	b.n	800496e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800494a:	4b1d      	ldr	r3, [pc, #116]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004952:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6892      	ldr	r2, [r2, #8]
 800495a:	0211      	lsls	r1, r2, #8
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6952      	ldr	r2, [r2, #20]
 8004960:	0852      	lsrs	r2, r2, #1
 8004962:	3a01      	subs	r2, #1
 8004964:	0652      	lsls	r2, r2, #25
 8004966:	430a      	orrs	r2, r1
 8004968:	4915      	ldr	r1, [pc, #84]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800496a:	4313      	orrs	r3, r2
 800496c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800496e:	4b14      	ldr	r3, [pc, #80]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a13      	ldr	r2, [pc, #76]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004974:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004978:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497a:	f7fd fab9 	bl	8001ef0 <HAL_GetTick>
 800497e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004980:	e009      	b.n	8004996 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004982:	f7fd fab5 	bl	8001ef0 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d902      	bls.n	8004996 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	73fb      	strb	r3, [r7, #15]
          break;
 8004994:	e005      	b.n	80049a2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004996:	4b0a      	ldr	r3, [pc, #40]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0ef      	beq.n	8004982 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d106      	bne.n	80049b6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049a8:	4b05      	ldr	r3, [pc, #20]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	4903      	ldr	r1, [pc, #12]	@ (80049c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40021000 	.word	0x40021000

080049c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e049      	b.n	8004a6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fd f89c 	bl	8001b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3304      	adds	r3, #4
 8004a00:	4619      	mov	r1, r3
 8004a02:	4610      	mov	r0, r2
 8004a04:	f000 fa8c 	bl	8004f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d001      	beq.n	8004a8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e03b      	b.n	8004b04 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0201 	orr.w	r2, r2, #1
 8004aa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a19      	ldr	r2, [pc, #100]	@ (8004b10 <HAL_TIM_Base_Start_IT+0x9c>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d009      	beq.n	8004ac2 <HAL_TIM_Base_Start_IT+0x4e>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ab6:	d004      	beq.n	8004ac2 <HAL_TIM_Base_Start_IT+0x4e>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a15      	ldr	r2, [pc, #84]	@ (8004b14 <HAL_TIM_Base_Start_IT+0xa0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d115      	bne.n	8004aee <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	4b13      	ldr	r3, [pc, #76]	@ (8004b18 <HAL_TIM_Base_Start_IT+0xa4>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b06      	cmp	r3, #6
 8004ad2:	d015      	beq.n	8004b00 <HAL_TIM_Base_Start_IT+0x8c>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ada:	d011      	beq.n	8004b00 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aec:	e008      	b.n	8004b00 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0201 	orr.w	r2, r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	e000      	b.n	8004b02 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	40012c00 	.word	0x40012c00
 8004b14:	40014000 	.word	0x40014000
 8004b18:	00010007 	.word	0x00010007

08004b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d020      	beq.n	8004b80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d01b      	beq.n	8004b80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0202 	mvn.w	r2, #2
 8004b50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f9bc 	bl	8004ee4 <HAL_TIM_IC_CaptureCallback>
 8004b6c:	e005      	b.n	8004b7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f9ae 	bl	8004ed0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f9bf 	bl	8004ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d020      	beq.n	8004bcc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01b      	beq.n	8004bcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0204 	mvn.w	r2, #4
 8004b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f996 	bl	8004ee4 <HAL_TIM_IC_CaptureCallback>
 8004bb8:	e005      	b.n	8004bc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f988 	bl	8004ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f999 	bl	8004ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d020      	beq.n	8004c18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f003 0308 	and.w	r3, r3, #8
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01b      	beq.n	8004c18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0208 	mvn.w	r2, #8
 8004be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2204      	movs	r2, #4
 8004bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f970 	bl	8004ee4 <HAL_TIM_IC_CaptureCallback>
 8004c04:	e005      	b.n	8004c12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f962 	bl	8004ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f973 	bl	8004ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f003 0310 	and.w	r3, r3, #16
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d020      	beq.n	8004c64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f003 0310 	and.w	r3, r3, #16
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01b      	beq.n	8004c64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f06f 0210 	mvn.w	r2, #16
 8004c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2208      	movs	r2, #8
 8004c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f94a 	bl	8004ee4 <HAL_TIM_IC_CaptureCallback>
 8004c50:	e005      	b.n	8004c5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f93c 	bl	8004ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f94d 	bl	8004ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00c      	beq.n	8004c88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d007      	beq.n	8004c88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0201 	mvn.w	r2, #1
 8004c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f91a 	bl	8004ebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d104      	bne.n	8004c9c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00c      	beq.n	8004cb6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d007      	beq.n	8004cb6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 faaf 	bl	8005214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00c      	beq.n	8004cda <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d007      	beq.n	8004cda <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 faa7 	bl	8005228 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00c      	beq.n	8004cfe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d007      	beq.n	8004cfe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f907 	bl	8004f0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f003 0320 	and.w	r3, r3, #32
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00c      	beq.n	8004d22 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 0320 	and.w	r3, r3, #32
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d007      	beq.n	8004d22 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f06f 0220 	mvn.w	r2, #32
 8004d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fa6f 	bl	8005200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <HAL_TIM_ConfigClockSource+0x1c>
 8004d42:	2302      	movs	r3, #2
 8004d44:	e0b6      	b.n	8004eb4 <HAL_TIM_ConfigClockSource+0x18a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2202      	movs	r2, #2
 8004d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d64:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d68:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d70:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d82:	d03e      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0xd8>
 8004d84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d88:	f200 8087 	bhi.w	8004e9a <HAL_TIM_ConfigClockSource+0x170>
 8004d8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d90:	f000 8086 	beq.w	8004ea0 <HAL_TIM_ConfigClockSource+0x176>
 8004d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d98:	d87f      	bhi.n	8004e9a <HAL_TIM_ConfigClockSource+0x170>
 8004d9a:	2b70      	cmp	r3, #112	@ 0x70
 8004d9c:	d01a      	beq.n	8004dd4 <HAL_TIM_ConfigClockSource+0xaa>
 8004d9e:	2b70      	cmp	r3, #112	@ 0x70
 8004da0:	d87b      	bhi.n	8004e9a <HAL_TIM_ConfigClockSource+0x170>
 8004da2:	2b60      	cmp	r3, #96	@ 0x60
 8004da4:	d050      	beq.n	8004e48 <HAL_TIM_ConfigClockSource+0x11e>
 8004da6:	2b60      	cmp	r3, #96	@ 0x60
 8004da8:	d877      	bhi.n	8004e9a <HAL_TIM_ConfigClockSource+0x170>
 8004daa:	2b50      	cmp	r3, #80	@ 0x50
 8004dac:	d03c      	beq.n	8004e28 <HAL_TIM_ConfigClockSource+0xfe>
 8004dae:	2b50      	cmp	r3, #80	@ 0x50
 8004db0:	d873      	bhi.n	8004e9a <HAL_TIM_ConfigClockSource+0x170>
 8004db2:	2b40      	cmp	r3, #64	@ 0x40
 8004db4:	d058      	beq.n	8004e68 <HAL_TIM_ConfigClockSource+0x13e>
 8004db6:	2b40      	cmp	r3, #64	@ 0x40
 8004db8:	d86f      	bhi.n	8004e9a <HAL_TIM_ConfigClockSource+0x170>
 8004dba:	2b30      	cmp	r3, #48	@ 0x30
 8004dbc:	d064      	beq.n	8004e88 <HAL_TIM_ConfigClockSource+0x15e>
 8004dbe:	2b30      	cmp	r3, #48	@ 0x30
 8004dc0:	d86b      	bhi.n	8004e9a <HAL_TIM_ConfigClockSource+0x170>
 8004dc2:	2b20      	cmp	r3, #32
 8004dc4:	d060      	beq.n	8004e88 <HAL_TIM_ConfigClockSource+0x15e>
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d867      	bhi.n	8004e9a <HAL_TIM_ConfigClockSource+0x170>
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d05c      	beq.n	8004e88 <HAL_TIM_ConfigClockSource+0x15e>
 8004dce:	2b10      	cmp	r3, #16
 8004dd0:	d05a      	beq.n	8004e88 <HAL_TIM_ConfigClockSource+0x15e>
 8004dd2:	e062      	b.n	8004e9a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004de4:	f000 f986 	bl	80050f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004df6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	609a      	str	r2, [r3, #8]
      break;
 8004e00:	e04f      	b.n	8004ea2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e12:	f000 f96f 	bl	80050f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e24:	609a      	str	r2, [r3, #8]
      break;
 8004e26:	e03c      	b.n	8004ea2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e34:	461a      	mov	r2, r3
 8004e36:	f000 f8e3 	bl	8005000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2150      	movs	r1, #80	@ 0x50
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 f93c 	bl	80050be <TIM_ITRx_SetConfig>
      break;
 8004e46:	e02c      	b.n	8004ea2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e54:	461a      	mov	r2, r3
 8004e56:	f000 f902 	bl	800505e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2160      	movs	r1, #96	@ 0x60
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 f92c 	bl	80050be <TIM_ITRx_SetConfig>
      break;
 8004e66:	e01c      	b.n	8004ea2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e74:	461a      	mov	r2, r3
 8004e76:	f000 f8c3 	bl	8005000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2140      	movs	r1, #64	@ 0x40
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 f91c 	bl	80050be <TIM_ITRx_SetConfig>
      break;
 8004e86:	e00c      	b.n	8004ea2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4619      	mov	r1, r3
 8004e92:	4610      	mov	r0, r2
 8004e94:	f000 f913 	bl	80050be <TIM_ITRx_SetConfig>
      break;
 8004e98:	e003      	b.n	8004ea2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e9e:	e000      	b.n	8004ea2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004ea0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a30      	ldr	r2, [pc, #192]	@ (8004ff4 <TIM_Base_SetConfig+0xd4>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_Base_SetConfig+0x20>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f3e:	d108      	bne.n	8004f52 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a27      	ldr	r2, [pc, #156]	@ (8004ff4 <TIM_Base_SetConfig+0xd4>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00b      	beq.n	8004f72 <TIM_Base_SetConfig+0x52>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f60:	d007      	beq.n	8004f72 <TIM_Base_SetConfig+0x52>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a24      	ldr	r2, [pc, #144]	@ (8004ff8 <TIM_Base_SetConfig+0xd8>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d003      	beq.n	8004f72 <TIM_Base_SetConfig+0x52>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a23      	ldr	r2, [pc, #140]	@ (8004ffc <TIM_Base_SetConfig+0xdc>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d108      	bne.n	8004f84 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a12      	ldr	r2, [pc, #72]	@ (8004ff4 <TIM_Base_SetConfig+0xd4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d007      	beq.n	8004fc0 <TIM_Base_SetConfig+0xa0>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a11      	ldr	r2, [pc, #68]	@ (8004ff8 <TIM_Base_SetConfig+0xd8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <TIM_Base_SetConfig+0xa0>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a10      	ldr	r2, [pc, #64]	@ (8004ffc <TIM_Base_SetConfig+0xdc>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d103      	bne.n	8004fc8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d105      	bne.n	8004fe6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f023 0201 	bic.w	r2, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	611a      	str	r2, [r3, #16]
  }
}
 8004fe6:	bf00      	nop
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	40012c00 	.word	0x40012c00
 8004ff8:	40014000 	.word	0x40014000
 8004ffc:	40014400 	.word	0x40014400

08005000 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	f023 0201 	bic.w	r2, r3, #1
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800502a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f023 030a 	bic.w	r3, r3, #10
 800503c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	621a      	str	r2, [r3, #32]
}
 8005052:	bf00      	nop
 8005054:	371c      	adds	r7, #28
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800505e:	b480      	push	{r7}
 8005060:	b087      	sub	sp, #28
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	f023 0210 	bic.w	r2, r3, #16
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005088:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	031b      	lsls	r3, r3, #12
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800509a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	621a      	str	r2, [r3, #32]
}
 80050b2:	bf00      	nop
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050be:	b480      	push	{r7}
 80050c0:	b085      	sub	sp, #20
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4313      	orrs	r3, r2
 80050dc:	f043 0307 	orr.w	r3, r3, #7
 80050e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	609a      	str	r2, [r3, #8]
}
 80050e8:	bf00      	nop
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800510e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	021a      	lsls	r2, r3, #8
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	431a      	orrs	r2, r3
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4313      	orrs	r3, r2
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	609a      	str	r2, [r3, #8]
}
 8005128:	bf00      	nop
 800512a:	371c      	adds	r7, #28
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005148:	2302      	movs	r3, #2
 800514a:	e04f      	b.n	80051ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a21      	ldr	r2, [pc, #132]	@ (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d108      	bne.n	8005188 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800517c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800518e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a14      	ldr	r2, [pc, #80]	@ (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d009      	beq.n	80051c0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051b4:	d004      	beq.n	80051c0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a10      	ldr	r2, [pc, #64]	@ (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d10c      	bne.n	80051da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	40012c00 	.word	0x40012c00
 80051fc:	40014000 	.word	0x40014000

08005200 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e040      	b.n	80052d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005252:	2b00      	cmp	r3, #0
 8005254:	d106      	bne.n	8005264 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7fc fcb6 	bl	8001bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2224      	movs	r2, #36	@ 0x24
 8005268:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0201 	bic.w	r2, r2, #1
 8005278:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fe50 	bl	8005f28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fc21 	bl	8005ad0 <UART_SetConfig>
 800528e:	4603      	mov	r3, r0
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e01b      	b.n	80052d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0201 	orr.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fecf 	bl	800606c <UART_CheckIdleState>
 80052ce:	4603      	mov	r3, r0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08a      	sub	sp, #40	@ 0x28
 80052dc:	af02      	add	r7, sp, #8
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	4613      	mov	r3, r2
 80052e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052ec:	2b20      	cmp	r3, #32
 80052ee:	d177      	bne.n	80053e0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <HAL_UART_Transmit+0x24>
 80052f6:	88fb      	ldrh	r3, [r7, #6]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e070      	b.n	80053e2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2221      	movs	r2, #33	@ 0x21
 800530c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800530e:	f7fc fdef 	bl	8001ef0 <HAL_GetTick>
 8005312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	88fa      	ldrh	r2, [r7, #6]
 8005318:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	88fa      	ldrh	r2, [r7, #6]
 8005320:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800532c:	d108      	bne.n	8005340 <HAL_UART_Transmit+0x68>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d104      	bne.n	8005340 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005336:	2300      	movs	r3, #0
 8005338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	61bb      	str	r3, [r7, #24]
 800533e:	e003      	b.n	8005348 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005344:	2300      	movs	r3, #0
 8005346:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005348:	e02f      	b.n	80053aa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2200      	movs	r2, #0
 8005352:	2180      	movs	r1, #128	@ 0x80
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 ff31 	bl	80061bc <UART_WaitOnFlagUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d004      	beq.n	800536a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2220      	movs	r2, #32
 8005364:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e03b      	b.n	80053e2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10b      	bne.n	8005388 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	881a      	ldrh	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800537c:	b292      	uxth	r2, r2
 800537e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	3302      	adds	r3, #2
 8005384:	61bb      	str	r3, [r7, #24]
 8005386:	e007      	b.n	8005398 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	781a      	ldrb	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	3301      	adds	r3, #1
 8005396:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1c9      	bne.n	800534a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	2200      	movs	r2, #0
 80053be:	2140      	movs	r1, #64	@ 0x40
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 fefb 	bl	80061bc <UART_WaitOnFlagUntilTimeout>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d004      	beq.n	80053d6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2220      	movs	r2, #32
 80053d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e005      	b.n	80053e2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2220      	movs	r2, #32
 80053da:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	e000      	b.n	80053e2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80053e0:	2302      	movs	r3, #2
  }
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3720      	adds	r7, #32
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08a      	sub	sp, #40	@ 0x28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	4613      	mov	r3, r2
 80053f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005400:	2b20      	cmp	r3, #32
 8005402:	d137      	bne.n	8005474 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <HAL_UART_Receive_IT+0x24>
 800540a:	88fb      	ldrh	r3, [r7, #6]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e030      	b.n	8005476 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a18      	ldr	r2, [pc, #96]	@ (8005480 <HAL_UART_Receive_IT+0x94>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d01f      	beq.n	8005464 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d018      	beq.n	8005464 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	613b      	str	r3, [r7, #16]
   return(result);
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005446:	627b      	str	r3, [r7, #36]	@ 0x24
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	623b      	str	r3, [r7, #32]
 8005452:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	69f9      	ldr	r1, [r7, #28]
 8005456:	6a3a      	ldr	r2, [r7, #32]
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	61bb      	str	r3, [r7, #24]
   return(result);
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e6      	bne.n	8005432 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005464:	88fb      	ldrh	r3, [r7, #6]
 8005466:	461a      	mov	r2, r3
 8005468:	68b9      	ldr	r1, [r7, #8]
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 ff14 	bl	8006298 <UART_Start_Receive_IT>
 8005470:	4603      	mov	r3, r0
 8005472:	e000      	b.n	8005476 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005474:	2302      	movs	r3, #2
  }
}
 8005476:	4618      	mov	r0, r3
 8005478:	3728      	adds	r7, #40	@ 0x28
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40008000 	.word	0x40008000

08005484 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b0ba      	sub	sp, #232	@ 0xe8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80054ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80054b2:	4013      	ands	r3, r2
 80054b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80054b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d115      	bne.n	80054ec <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80054c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00f      	beq.n	80054ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054d0:	f003 0320 	and.w	r3, r3, #32
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d009      	beq.n	80054ec <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 82ca 	beq.w	8005a76 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	4798      	blx	r3
      }
      return;
 80054ea:	e2c4      	b.n	8005a76 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80054ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 8117 	beq.w	8005724 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80054f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005502:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005506:	4b85      	ldr	r3, [pc, #532]	@ (800571c <HAL_UART_IRQHandler+0x298>)
 8005508:	4013      	ands	r3, r2
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 810a 	beq.w	8005724 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	d011      	beq.n	8005540 <HAL_UART_IRQHandler+0xbc>
 800551c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00b      	beq.n	8005540 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2201      	movs	r2, #1
 800552e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005536:	f043 0201 	orr.w	r2, r3, #1
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d011      	beq.n	8005570 <HAL_UART_IRQHandler+0xec>
 800554c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00b      	beq.n	8005570 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2202      	movs	r2, #2
 800555e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005566:	f043 0204 	orr.w	r2, r3, #4
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d011      	beq.n	80055a0 <HAL_UART_IRQHandler+0x11c>
 800557c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00b      	beq.n	80055a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2204      	movs	r2, #4
 800558e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005596:	f043 0202 	orr.w	r2, r3, #2
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80055a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d017      	beq.n	80055dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055b0:	f003 0320 	and.w	r3, r3, #32
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d105      	bne.n	80055c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80055b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00b      	beq.n	80055dc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2208      	movs	r2, #8
 80055ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055d2:	f043 0208 	orr.w	r2, r3, #8
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80055dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d012      	beq.n	800560e <HAL_UART_IRQHandler+0x18a>
 80055e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00c      	beq.n	800560e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005604:	f043 0220 	orr.w	r2, r3, #32
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 8230 	beq.w	8005a7a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800561a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00d      	beq.n	8005642 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b00      	cmp	r3, #0
 8005630:	d007      	beq.n	8005642 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005648:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005656:	2b40      	cmp	r3, #64	@ 0x40
 8005658:	d005      	beq.n	8005666 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800565a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800565e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005662:	2b00      	cmp	r3, #0
 8005664:	d04f      	beq.n	8005706 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fedc 	bl	8006424 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005676:	2b40      	cmp	r3, #64	@ 0x40
 8005678:	d141      	bne.n	80056fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3308      	adds	r3, #8
 8005680:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005684:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005688:	e853 3f00 	ldrex	r3, [r3]
 800568c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005690:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005694:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005698:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3308      	adds	r3, #8
 80056a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80056a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80056aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80056b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80056b6:	e841 2300 	strex	r3, r2, [r1]
 80056ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80056be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1d9      	bne.n	800567a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d013      	beq.n	80056f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056d2:	4a13      	ldr	r2, [pc, #76]	@ (8005720 <HAL_UART_IRQHandler+0x29c>)
 80056d4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fd fdf9 	bl	80032d2 <HAL_DMA_Abort_IT>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d017      	beq.n	8005716 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80056f0:	4610      	mov	r0, r2
 80056f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f4:	e00f      	b.n	8005716 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f9d4 	bl	8005aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056fc:	e00b      	b.n	8005716 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f9d0 	bl	8005aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005704:	e007      	b.n	8005716 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f9cc 	bl	8005aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005714:	e1b1      	b.n	8005a7a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005716:	bf00      	nop
    return;
 8005718:	e1af      	b.n	8005a7a <HAL_UART_IRQHandler+0x5f6>
 800571a:	bf00      	nop
 800571c:	04000120 	.word	0x04000120
 8005720:	080064ed 	.word	0x080064ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005728:	2b01      	cmp	r3, #1
 800572a:	f040 816a 	bne.w	8005a02 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800572e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005732:	f003 0310 	and.w	r3, r3, #16
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 8163 	beq.w	8005a02 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800573c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005740:	f003 0310 	and.w	r3, r3, #16
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 815c 	beq.w	8005a02 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2210      	movs	r2, #16
 8005750:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800575c:	2b40      	cmp	r3, #64	@ 0x40
 800575e:	f040 80d4 	bne.w	800590a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800576e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 80ad 	beq.w	80058d2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800577e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005782:	429a      	cmp	r2, r3
 8005784:	f080 80a5 	bcs.w	80058d2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800578e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0320 	and.w	r3, r3, #32
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f040 8086 	bne.w	80058b0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80057b0:	e853 3f00 	ldrex	r3, [r3]
 80057b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80057b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	461a      	mov	r2, r3
 80057ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80057ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80057d2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80057da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80057de:	e841 2300 	strex	r3, r2, [r1]
 80057e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80057e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1da      	bne.n	80057a4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3308      	adds	r3, #8
 80057f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80057fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005800:	f023 0301 	bic.w	r3, r3, #1
 8005804:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3308      	adds	r3, #8
 800580e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005812:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005816:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005818:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800581a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005824:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1e1      	bne.n	80057ee <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3308      	adds	r3, #8
 8005830:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005832:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005834:	e853 3f00 	ldrex	r3, [r3]
 8005838:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800583a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800583c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005840:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3308      	adds	r3, #8
 800584a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800584e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005850:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005854:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800585c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e3      	bne.n	800582a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2220      	movs	r2, #32
 8005866:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005878:	e853 3f00 	ldrex	r3, [r3]
 800587c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800587e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005880:	f023 0310 	bic.w	r3, r3, #16
 8005884:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	461a      	mov	r2, r3
 800588e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005892:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005894:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005898:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80058a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e4      	bne.n	8005870 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fd fcd3 	bl	8003256 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	4619      	mov	r1, r3
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f8f4 	bl	8005ab8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80058d0:	e0d5      	b.n	8005a7e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80058d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058dc:	429a      	cmp	r2, r3
 80058de:	f040 80ce 	bne.w	8005a7e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b20      	cmp	r3, #32
 80058f0:	f040 80c5 	bne.w	8005a7e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005900:	4619      	mov	r1, r3
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f8d8 	bl	8005ab8 <HAL_UARTEx_RxEventCallback>
      return;
 8005908:	e0b9      	b.n	8005a7e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005916:	b29b      	uxth	r3, r3
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 80ab 	beq.w	8005a82 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800592c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 80a6 	beq.w	8005a82 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800593e:	e853 3f00 	ldrex	r3, [r3]
 8005942:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005946:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800594a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005958:	647b      	str	r3, [r7, #68]	@ 0x44
 800595a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800595e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005960:	e841 2300 	strex	r3, r2, [r1]
 8005964:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e4      	bne.n	8005936 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3308      	adds	r3, #8
 8005972:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005976:	e853 3f00 	ldrex	r3, [r3]
 800597a:	623b      	str	r3, [r7, #32]
   return(result);
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	f023 0301 	bic.w	r3, r3, #1
 8005982:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3308      	adds	r3, #8
 800598c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005990:	633a      	str	r2, [r7, #48]	@ 0x30
 8005992:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005994:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005998:	e841 2300 	strex	r3, r2, [r1]
 800599c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800599e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1e3      	bne.n	800596c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f023 0310 	bic.w	r3, r3, #16
 80059cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	461a      	mov	r2, r3
 80059d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80059da:	61fb      	str	r3, [r7, #28]
 80059dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059de:	69b9      	ldr	r1, [r7, #24]
 80059e0:	69fa      	ldr	r2, [r7, #28]
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	617b      	str	r3, [r7, #20]
   return(result);
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e4      	bne.n	80059b8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2202      	movs	r2, #2
 80059f2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059f8:	4619      	mov	r1, r3
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f85c 	bl	8005ab8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a00:	e03f      	b.n	8005a82 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00e      	beq.n	8005a2c <HAL_UART_IRQHandler+0x5a8>
 8005a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d008      	beq.n	8005a2c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005a22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 ff5d 	bl	80068e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a2a:	e02d      	b.n	8005a88 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00e      	beq.n	8005a56 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d008      	beq.n	8005a56 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01c      	beq.n	8005a86 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	4798      	blx	r3
    }
    return;
 8005a54:	e017      	b.n	8005a86 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d012      	beq.n	8005a88 <HAL_UART_IRQHandler+0x604>
 8005a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00c      	beq.n	8005a88 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fd52 	bl	8006518 <UART_EndTransmit_IT>
    return;
 8005a74:	e008      	b.n	8005a88 <HAL_UART_IRQHandler+0x604>
      return;
 8005a76:	bf00      	nop
 8005a78:	e006      	b.n	8005a88 <HAL_UART_IRQHandler+0x604>
    return;
 8005a7a:	bf00      	nop
 8005a7c:	e004      	b.n	8005a88 <HAL_UART_IRQHandler+0x604>
      return;
 8005a7e:	bf00      	nop
 8005a80:	e002      	b.n	8005a88 <HAL_UART_IRQHandler+0x604>
      return;
 8005a82:	bf00      	nop
 8005a84:	e000      	b.n	8005a88 <HAL_UART_IRQHandler+0x604>
    return;
 8005a86:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005a88:	37e8      	adds	r7, #232	@ 0xe8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop

08005a90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ad4:	b08a      	sub	sp, #40	@ 0x28
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	431a      	orrs	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	4bb4      	ldr	r3, [pc, #720]	@ (8005dd0 <UART_SetConfig+0x300>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	6812      	ldr	r2, [r2, #0]
 8005b06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b08:	430b      	orrs	r3, r1
 8005b0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4aa9      	ldr	r2, [pc, #676]	@ (8005dd4 <UART_SetConfig+0x304>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d004      	beq.n	8005b3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4aa0      	ldr	r2, [pc, #640]	@ (8005dd8 <UART_SetConfig+0x308>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d126      	bne.n	8005ba8 <UART_SetConfig+0xd8>
 8005b5a:	4ba0      	ldr	r3, [pc, #640]	@ (8005ddc <UART_SetConfig+0x30c>)
 8005b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b60:	f003 0303 	and.w	r3, r3, #3
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d81b      	bhi.n	8005ba0 <UART_SetConfig+0xd0>
 8005b68:	a201      	add	r2, pc, #4	@ (adr r2, 8005b70 <UART_SetConfig+0xa0>)
 8005b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6e:	bf00      	nop
 8005b70:	08005b81 	.word	0x08005b81
 8005b74:	08005b91 	.word	0x08005b91
 8005b78:	08005b89 	.word	0x08005b89
 8005b7c:	08005b99 	.word	0x08005b99
 8005b80:	2301      	movs	r3, #1
 8005b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b86:	e080      	b.n	8005c8a <UART_SetConfig+0x1ba>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b8e:	e07c      	b.n	8005c8a <UART_SetConfig+0x1ba>
 8005b90:	2304      	movs	r3, #4
 8005b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b96:	e078      	b.n	8005c8a <UART_SetConfig+0x1ba>
 8005b98:	2308      	movs	r3, #8
 8005b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b9e:	e074      	b.n	8005c8a <UART_SetConfig+0x1ba>
 8005ba0:	2310      	movs	r3, #16
 8005ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ba6:	e070      	b.n	8005c8a <UART_SetConfig+0x1ba>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a8c      	ldr	r2, [pc, #560]	@ (8005de0 <UART_SetConfig+0x310>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d138      	bne.n	8005c24 <UART_SetConfig+0x154>
 8005bb2:	4b8a      	ldr	r3, [pc, #552]	@ (8005ddc <UART_SetConfig+0x30c>)
 8005bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb8:	f003 030c 	and.w	r3, r3, #12
 8005bbc:	2b0c      	cmp	r3, #12
 8005bbe:	d82d      	bhi.n	8005c1c <UART_SetConfig+0x14c>
 8005bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc8 <UART_SetConfig+0xf8>)
 8005bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc6:	bf00      	nop
 8005bc8:	08005bfd 	.word	0x08005bfd
 8005bcc:	08005c1d 	.word	0x08005c1d
 8005bd0:	08005c1d 	.word	0x08005c1d
 8005bd4:	08005c1d 	.word	0x08005c1d
 8005bd8:	08005c0d 	.word	0x08005c0d
 8005bdc:	08005c1d 	.word	0x08005c1d
 8005be0:	08005c1d 	.word	0x08005c1d
 8005be4:	08005c1d 	.word	0x08005c1d
 8005be8:	08005c05 	.word	0x08005c05
 8005bec:	08005c1d 	.word	0x08005c1d
 8005bf0:	08005c1d 	.word	0x08005c1d
 8005bf4:	08005c1d 	.word	0x08005c1d
 8005bf8:	08005c15 	.word	0x08005c15
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c02:	e042      	b.n	8005c8a <UART_SetConfig+0x1ba>
 8005c04:	2302      	movs	r3, #2
 8005c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c0a:	e03e      	b.n	8005c8a <UART_SetConfig+0x1ba>
 8005c0c:	2304      	movs	r3, #4
 8005c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c12:	e03a      	b.n	8005c8a <UART_SetConfig+0x1ba>
 8005c14:	2308      	movs	r3, #8
 8005c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c1a:	e036      	b.n	8005c8a <UART_SetConfig+0x1ba>
 8005c1c:	2310      	movs	r3, #16
 8005c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c22:	e032      	b.n	8005c8a <UART_SetConfig+0x1ba>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a6a      	ldr	r2, [pc, #424]	@ (8005dd4 <UART_SetConfig+0x304>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d12a      	bne.n	8005c84 <UART_SetConfig+0x1b4>
 8005c2e:	4b6b      	ldr	r3, [pc, #428]	@ (8005ddc <UART_SetConfig+0x30c>)
 8005c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c3c:	d01a      	beq.n	8005c74 <UART_SetConfig+0x1a4>
 8005c3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c42:	d81b      	bhi.n	8005c7c <UART_SetConfig+0x1ac>
 8005c44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c48:	d00c      	beq.n	8005c64 <UART_SetConfig+0x194>
 8005c4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c4e:	d815      	bhi.n	8005c7c <UART_SetConfig+0x1ac>
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <UART_SetConfig+0x18c>
 8005c54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c58:	d008      	beq.n	8005c6c <UART_SetConfig+0x19c>
 8005c5a:	e00f      	b.n	8005c7c <UART_SetConfig+0x1ac>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c62:	e012      	b.n	8005c8a <UART_SetConfig+0x1ba>
 8005c64:	2302      	movs	r3, #2
 8005c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c6a:	e00e      	b.n	8005c8a <UART_SetConfig+0x1ba>
 8005c6c:	2304      	movs	r3, #4
 8005c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c72:	e00a      	b.n	8005c8a <UART_SetConfig+0x1ba>
 8005c74:	2308      	movs	r3, #8
 8005c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c7a:	e006      	b.n	8005c8a <UART_SetConfig+0x1ba>
 8005c7c:	2310      	movs	r3, #16
 8005c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c82:	e002      	b.n	8005c8a <UART_SetConfig+0x1ba>
 8005c84:	2310      	movs	r3, #16
 8005c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a51      	ldr	r2, [pc, #324]	@ (8005dd4 <UART_SetConfig+0x304>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d17a      	bne.n	8005d8a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d824      	bhi.n	8005ce6 <UART_SetConfig+0x216>
 8005c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca4 <UART_SetConfig+0x1d4>)
 8005c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca2:	bf00      	nop
 8005ca4:	08005cc9 	.word	0x08005cc9
 8005ca8:	08005ce7 	.word	0x08005ce7
 8005cac:	08005cd1 	.word	0x08005cd1
 8005cb0:	08005ce7 	.word	0x08005ce7
 8005cb4:	08005cd7 	.word	0x08005cd7
 8005cb8:	08005ce7 	.word	0x08005ce7
 8005cbc:	08005ce7 	.word	0x08005ce7
 8005cc0:	08005ce7 	.word	0x08005ce7
 8005cc4:	08005cdf 	.word	0x08005cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc8:	f7fe fb08 	bl	80042dc <HAL_RCC_GetPCLK1Freq>
 8005ccc:	61f8      	str	r0, [r7, #28]
        break;
 8005cce:	e010      	b.n	8005cf2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cd0:	4b44      	ldr	r3, [pc, #272]	@ (8005de4 <UART_SetConfig+0x314>)
 8005cd2:	61fb      	str	r3, [r7, #28]
        break;
 8005cd4:	e00d      	b.n	8005cf2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cd6:	f7fe fa69 	bl	80041ac <HAL_RCC_GetSysClockFreq>
 8005cda:	61f8      	str	r0, [r7, #28]
        break;
 8005cdc:	e009      	b.n	8005cf2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ce2:	61fb      	str	r3, [r7, #28]
        break;
 8005ce4:	e005      	b.n	8005cf2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005cf0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 8107 	beq.w	8005f08 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	005b      	lsls	r3, r3, #1
 8005d02:	4413      	add	r3, r2
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d305      	bcc.n	8005d16 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d10:	69fa      	ldr	r2, [r7, #28]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d903      	bls.n	8005d1e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d1c:	e0f4      	b.n	8005f08 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	2200      	movs	r2, #0
 8005d22:	461c      	mov	r4, r3
 8005d24:	4615      	mov	r5, r2
 8005d26:	f04f 0200 	mov.w	r2, #0
 8005d2a:	f04f 0300 	mov.w	r3, #0
 8005d2e:	022b      	lsls	r3, r5, #8
 8005d30:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005d34:	0222      	lsls	r2, r4, #8
 8005d36:	68f9      	ldr	r1, [r7, #12]
 8005d38:	6849      	ldr	r1, [r1, #4]
 8005d3a:	0849      	lsrs	r1, r1, #1
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	4688      	mov	r8, r1
 8005d40:	4681      	mov	r9, r0
 8005d42:	eb12 0a08 	adds.w	sl, r2, r8
 8005d46:	eb43 0b09 	adc.w	fp, r3, r9
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	603b      	str	r3, [r7, #0]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d58:	4650      	mov	r0, sl
 8005d5a:	4659      	mov	r1, fp
 8005d5c:	f7fa ff94 	bl	8000c88 <__aeabi_uldivmod>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4613      	mov	r3, r2
 8005d66:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d6e:	d308      	bcc.n	8005d82 <UART_SetConfig+0x2b2>
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d76:	d204      	bcs.n	8005d82 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	60da      	str	r2, [r3, #12]
 8005d80:	e0c2      	b.n	8005f08 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d88:	e0be      	b.n	8005f08 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d92:	d16a      	bne.n	8005e6a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005d94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	d834      	bhi.n	8005e06 <UART_SetConfig+0x336>
 8005d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005da4 <UART_SetConfig+0x2d4>)
 8005d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da2:	bf00      	nop
 8005da4:	08005dc9 	.word	0x08005dc9
 8005da8:	08005de9 	.word	0x08005de9
 8005dac:	08005df1 	.word	0x08005df1
 8005db0:	08005e07 	.word	0x08005e07
 8005db4:	08005df7 	.word	0x08005df7
 8005db8:	08005e07 	.word	0x08005e07
 8005dbc:	08005e07 	.word	0x08005e07
 8005dc0:	08005e07 	.word	0x08005e07
 8005dc4:	08005dff 	.word	0x08005dff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dc8:	f7fe fa88 	bl	80042dc <HAL_RCC_GetPCLK1Freq>
 8005dcc:	61f8      	str	r0, [r7, #28]
        break;
 8005dce:	e020      	b.n	8005e12 <UART_SetConfig+0x342>
 8005dd0:	efff69f3 	.word	0xefff69f3
 8005dd4:	40008000 	.word	0x40008000
 8005dd8:	40013800 	.word	0x40013800
 8005ddc:	40021000 	.word	0x40021000
 8005de0:	40004400 	.word	0x40004400
 8005de4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005de8:	f7fe fa8e 	bl	8004308 <HAL_RCC_GetPCLK2Freq>
 8005dec:	61f8      	str	r0, [r7, #28]
        break;
 8005dee:	e010      	b.n	8005e12 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005df0:	4b4c      	ldr	r3, [pc, #304]	@ (8005f24 <UART_SetConfig+0x454>)
 8005df2:	61fb      	str	r3, [r7, #28]
        break;
 8005df4:	e00d      	b.n	8005e12 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005df6:	f7fe f9d9 	bl	80041ac <HAL_RCC_GetSysClockFreq>
 8005dfa:	61f8      	str	r0, [r7, #28]
        break;
 8005dfc:	e009      	b.n	8005e12 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e02:	61fb      	str	r3, [r7, #28]
        break;
 8005e04:	e005      	b.n	8005e12 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005e06:	2300      	movs	r3, #0
 8005e08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005e10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d077      	beq.n	8005f08 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	005a      	lsls	r2, r3, #1
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	085b      	lsrs	r3, r3, #1
 8005e22:	441a      	add	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	2b0f      	cmp	r3, #15
 8005e32:	d916      	bls.n	8005e62 <UART_SetConfig+0x392>
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e3a:	d212      	bcs.n	8005e62 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	f023 030f 	bic.w	r3, r3, #15
 8005e44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	085b      	lsrs	r3, r3, #1
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	f003 0307 	and.w	r3, r3, #7
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	8afb      	ldrh	r3, [r7, #22]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	8afa      	ldrh	r2, [r7, #22]
 8005e5e:	60da      	str	r2, [r3, #12]
 8005e60:	e052      	b.n	8005f08 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005e68:	e04e      	b.n	8005f08 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e6a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e6e:	2b08      	cmp	r3, #8
 8005e70:	d827      	bhi.n	8005ec2 <UART_SetConfig+0x3f2>
 8005e72:	a201      	add	r2, pc, #4	@ (adr r2, 8005e78 <UART_SetConfig+0x3a8>)
 8005e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e78:	08005e9d 	.word	0x08005e9d
 8005e7c:	08005ea5 	.word	0x08005ea5
 8005e80:	08005ead 	.word	0x08005ead
 8005e84:	08005ec3 	.word	0x08005ec3
 8005e88:	08005eb3 	.word	0x08005eb3
 8005e8c:	08005ec3 	.word	0x08005ec3
 8005e90:	08005ec3 	.word	0x08005ec3
 8005e94:	08005ec3 	.word	0x08005ec3
 8005e98:	08005ebb 	.word	0x08005ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e9c:	f7fe fa1e 	bl	80042dc <HAL_RCC_GetPCLK1Freq>
 8005ea0:	61f8      	str	r0, [r7, #28]
        break;
 8005ea2:	e014      	b.n	8005ece <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ea4:	f7fe fa30 	bl	8004308 <HAL_RCC_GetPCLK2Freq>
 8005ea8:	61f8      	str	r0, [r7, #28]
        break;
 8005eaa:	e010      	b.n	8005ece <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005eac:	4b1d      	ldr	r3, [pc, #116]	@ (8005f24 <UART_SetConfig+0x454>)
 8005eae:	61fb      	str	r3, [r7, #28]
        break;
 8005eb0:	e00d      	b.n	8005ece <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eb2:	f7fe f97b 	bl	80041ac <HAL_RCC_GetSysClockFreq>
 8005eb6:	61f8      	str	r0, [r7, #28]
        break;
 8005eb8:	e009      	b.n	8005ece <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ebe:	61fb      	str	r3, [r7, #28]
        break;
 8005ec0:	e005      	b.n	8005ece <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ecc:	bf00      	nop
    }

    if (pclk != 0U)
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d019      	beq.n	8005f08 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	085a      	lsrs	r2, r3, #1
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	441a      	add	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	2b0f      	cmp	r3, #15
 8005eec:	d909      	bls.n	8005f02 <UART_SetConfig+0x432>
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ef4:	d205      	bcs.n	8005f02 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60da      	str	r2, [r3, #12]
 8005f00:	e002      	b.n	8005f08 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005f14:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3728      	adds	r7, #40	@ 0x28
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f22:	bf00      	nop
 8005f24:	00f42400 	.word	0x00f42400

08005f28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f34:	f003 0308 	and.w	r3, r3, #8
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00a      	beq.n	8005f52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00a      	beq.n	8005f74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f78:	f003 0302 	and.w	r3, r3, #2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00a      	beq.n	8005f96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9a:	f003 0304 	and.w	r3, r3, #4
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00a      	beq.n	8005fb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fbc:	f003 0310 	and.w	r3, r3, #16
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00a      	beq.n	8005fda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006004:	2b00      	cmp	r3, #0
 8006006:	d01a      	beq.n	800603e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006022:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006026:	d10a      	bne.n	800603e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	430a      	orrs	r2, r1
 800605e:	605a      	str	r2, [r3, #4]
  }
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b098      	sub	sp, #96	@ 0x60
 8006070:	af02      	add	r7, sp, #8
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800607c:	f7fb ff38 	bl	8001ef0 <HAL_GetTick>
 8006080:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0308 	and.w	r3, r3, #8
 800608c:	2b08      	cmp	r3, #8
 800608e:	d12e      	bne.n	80060ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006090:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006098:	2200      	movs	r2, #0
 800609a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f88c 	bl	80061bc <UART_WaitOnFlagUntilTimeout>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d021      	beq.n	80060ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b2:	e853 3f00 	ldrex	r3, [r3]
 80060b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060be:	653b      	str	r3, [r7, #80]	@ 0x50
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	461a      	mov	r2, r3
 80060c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80060ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060d0:	e841 2300 	strex	r3, r2, [r1]
 80060d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1e6      	bne.n	80060aa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2220      	movs	r2, #32
 80060e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e062      	b.n	80061b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0304 	and.w	r3, r3, #4
 80060f8:	2b04      	cmp	r3, #4
 80060fa:	d149      	bne.n	8006190 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006104:	2200      	movs	r2, #0
 8006106:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f856 	bl	80061bc <UART_WaitOnFlagUntilTimeout>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d03c      	beq.n	8006190 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611e:	e853 3f00 	ldrex	r3, [r3]
 8006122:	623b      	str	r3, [r7, #32]
   return(result);
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800612a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006134:	633b      	str	r3, [r7, #48]	@ 0x30
 8006136:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006138:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800613a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800613c:	e841 2300 	strex	r3, r2, [r1]
 8006140:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1e6      	bne.n	8006116 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3308      	adds	r3, #8
 800614e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	e853 3f00 	ldrex	r3, [r3]
 8006156:	60fb      	str	r3, [r7, #12]
   return(result);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f023 0301 	bic.w	r3, r3, #1
 800615e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3308      	adds	r3, #8
 8006166:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006168:	61fa      	str	r2, [r7, #28]
 800616a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616c:	69b9      	ldr	r1, [r7, #24]
 800616e:	69fa      	ldr	r2, [r7, #28]
 8006170:	e841 2300 	strex	r3, r2, [r1]
 8006174:	617b      	str	r3, [r7, #20]
   return(result);
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e5      	bne.n	8006148 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2220      	movs	r2, #32
 8006180:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e011      	b.n	80061b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2220      	movs	r2, #32
 800619a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3758      	adds	r7, #88	@ 0x58
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	603b      	str	r3, [r7, #0]
 80061c8:	4613      	mov	r3, r2
 80061ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061cc:	e04f      	b.n	800626e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061d4:	d04b      	beq.n	800626e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d6:	f7fb fe8b 	bl	8001ef0 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d302      	bcc.n	80061ec <UART_WaitOnFlagUntilTimeout+0x30>
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e04e      	b.n	800628e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d037      	beq.n	800626e <UART_WaitOnFlagUntilTimeout+0xb2>
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2b80      	cmp	r3, #128	@ 0x80
 8006202:	d034      	beq.n	800626e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b40      	cmp	r3, #64	@ 0x40
 8006208:	d031      	beq.n	800626e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	f003 0308 	and.w	r3, r3, #8
 8006214:	2b08      	cmp	r3, #8
 8006216:	d110      	bne.n	800623a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2208      	movs	r2, #8
 800621e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f8ff 	bl	8006424 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2208      	movs	r2, #8
 800622a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e029      	b.n	800628e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006244:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006248:	d111      	bne.n	800626e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006252:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 f8e5 	bl	8006424 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2220      	movs	r2, #32
 800625e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e00f      	b.n	800628e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69da      	ldr	r2, [r3, #28]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	4013      	ands	r3, r2
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	429a      	cmp	r2, r3
 800627c:	bf0c      	ite	eq
 800627e:	2301      	moveq	r3, #1
 8006280:	2300      	movne	r3, #0
 8006282:	b2db      	uxtb	r3, r3
 8006284:	461a      	mov	r2, r3
 8006286:	79fb      	ldrb	r3, [r7, #7]
 8006288:	429a      	cmp	r2, r3
 800628a:	d0a0      	beq.n	80061ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
	...

08006298 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006298:	b480      	push	{r7}
 800629a:	b097      	sub	sp, #92	@ 0x5c
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	4613      	mov	r3, r2
 80062a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	88fa      	ldrh	r2, [r7, #6]
 80062b0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	88fa      	ldrh	r2, [r7, #6]
 80062b8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ca:	d10e      	bne.n	80062ea <UART_Start_Receive_IT+0x52>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d105      	bne.n	80062e0 <UART_Start_Receive_IT+0x48>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80062da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062de:	e02d      	b.n	800633c <UART_Start_Receive_IT+0xa4>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	22ff      	movs	r2, #255	@ 0xff
 80062e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062e8:	e028      	b.n	800633c <UART_Start_Receive_IT+0xa4>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10d      	bne.n	800630e <UART_Start_Receive_IT+0x76>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d104      	bne.n	8006304 <UART_Start_Receive_IT+0x6c>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	22ff      	movs	r2, #255	@ 0xff
 80062fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006302:	e01b      	b.n	800633c <UART_Start_Receive_IT+0xa4>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	227f      	movs	r2, #127	@ 0x7f
 8006308:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800630c:	e016      	b.n	800633c <UART_Start_Receive_IT+0xa4>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006316:	d10d      	bne.n	8006334 <UART_Start_Receive_IT+0x9c>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d104      	bne.n	800632a <UART_Start_Receive_IT+0x92>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	227f      	movs	r2, #127	@ 0x7f
 8006324:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006328:	e008      	b.n	800633c <UART_Start_Receive_IT+0xa4>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	223f      	movs	r2, #63	@ 0x3f
 800632e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006332:	e003      	b.n	800633c <UART_Start_Receive_IT+0xa4>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2222      	movs	r2, #34	@ 0x22
 8006348:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3308      	adds	r3, #8
 8006352:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006356:	e853 3f00 	ldrex	r3, [r3]
 800635a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800635c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800635e:	f043 0301 	orr.w	r3, r3, #1
 8006362:	657b      	str	r3, [r7, #84]	@ 0x54
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3308      	adds	r3, #8
 800636a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800636c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800636e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006370:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006372:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006374:	e841 2300 	strex	r3, r2, [r1]
 8006378:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800637a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1e5      	bne.n	800634c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006388:	d107      	bne.n	800639a <UART_Start_Receive_IT+0x102>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d103      	bne.n	800639a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	4a21      	ldr	r2, [pc, #132]	@ (800641c <UART_Start_Receive_IT+0x184>)
 8006396:	669a      	str	r2, [r3, #104]	@ 0x68
 8006398:	e002      	b.n	80063a0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4a20      	ldr	r2, [pc, #128]	@ (8006420 <UART_Start_Receive_IT+0x188>)
 800639e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d019      	beq.n	80063dc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b0:	e853 3f00 	ldrex	r3, [r3]
 80063b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80063bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80063c8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80063cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80063d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e6      	bne.n	80063a8 <UART_Start_Receive_IT+0x110>
 80063da:	e018      	b.n	800640e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	613b      	str	r3, [r7, #16]
   return(result);
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f043 0320 	orr.w	r3, r3, #32
 80063f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063fa:	623b      	str	r3, [r7, #32]
 80063fc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	69f9      	ldr	r1, [r7, #28]
 8006400:	6a3a      	ldr	r2, [r7, #32]
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	61bb      	str	r3, [r7, #24]
   return(result);
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1e6      	bne.n	80063dc <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	375c      	adds	r7, #92	@ 0x5c
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	08006729 	.word	0x08006729
 8006420:	0800656d 	.word	0x0800656d

08006424 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006424:	b480      	push	{r7}
 8006426:	b095      	sub	sp, #84	@ 0x54
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006434:	e853 3f00 	ldrex	r3, [r3]
 8006438:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800643a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006440:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800644a:	643b      	str	r3, [r7, #64]	@ 0x40
 800644c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006450:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006452:	e841 2300 	strex	r3, r2, [r1]
 8006456:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1e6      	bne.n	800642c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3308      	adds	r3, #8
 8006464:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	61fb      	str	r3, [r7, #28]
   return(result);
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	f023 0301 	bic.w	r3, r3, #1
 8006474:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3308      	adds	r3, #8
 800647c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800647e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006480:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006484:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006486:	e841 2300 	strex	r3, r2, [r1]
 800648a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800648c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1e5      	bne.n	800645e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006496:	2b01      	cmp	r3, #1
 8006498:	d118      	bne.n	80064cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	e853 3f00 	ldrex	r3, [r3]
 80064a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	f023 0310 	bic.w	r3, r3, #16
 80064ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	461a      	mov	r2, r3
 80064b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064b8:	61bb      	str	r3, [r7, #24]
 80064ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	6979      	ldr	r1, [r7, #20]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	e841 2300 	strex	r3, r2, [r1]
 80064c4:	613b      	str	r3, [r7, #16]
   return(result);
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1e6      	bne.n	800649a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80064e0:	bf00      	nop
 80064e2:	3754      	adds	r7, #84	@ 0x54
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f7ff faca 	bl	8005aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006510:	bf00      	nop
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b088      	sub	sp, #32
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	e853 3f00 	ldrex	r3, [r3]
 800652c:	60bb      	str	r3, [r7, #8]
   return(result);
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006534:	61fb      	str	r3, [r7, #28]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	61bb      	str	r3, [r7, #24]
 8006540:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006542:	6979      	ldr	r1, [r7, #20]
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	e841 2300 	strex	r3, r2, [r1]
 800654a:	613b      	str	r3, [r7, #16]
   return(result);
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1e6      	bne.n	8006520 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2220      	movs	r2, #32
 8006556:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7ff fa96 	bl	8005a90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006564:	bf00      	nop
 8006566:	3720      	adds	r7, #32
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b09c      	sub	sp, #112	@ 0x70
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800657a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006584:	2b22      	cmp	r3, #34	@ 0x22
 8006586:	f040 80be 	bne.w	8006706 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006590:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006594:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006598:	b2d9      	uxtb	r1, r3
 800659a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065a4:	400a      	ands	r2, r1
 80065a6:	b2d2      	uxtb	r2, r2
 80065a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ae:	1c5a      	adds	r2, r3, #1
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	3b01      	subs	r3, #1
 80065be:	b29a      	uxth	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f040 80a3 	bne.w	800671a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065dc:	e853 3f00 	ldrex	r3, [r3]
 80065e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065fa:	e841 2300 	strex	r3, r2, [r1]
 80065fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006600:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1e6      	bne.n	80065d4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3308      	adds	r3, #8
 800660c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006618:	f023 0301 	bic.w	r3, r3, #1
 800661c:	667b      	str	r3, [r7, #100]	@ 0x64
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3308      	adds	r3, #8
 8006624:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006626:	647a      	str	r2, [r7, #68]	@ 0x44
 8006628:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800662c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e5      	bne.n	8006606 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2220      	movs	r2, #32
 800663e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a34      	ldr	r2, [pc, #208]	@ (8006724 <UART_RxISR_8BIT+0x1b8>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d01f      	beq.n	8006698 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d018      	beq.n	8006698 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666e:	e853 3f00 	ldrex	r3, [r3]
 8006672:	623b      	str	r3, [r7, #32]
   return(result);
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800667a:	663b      	str	r3, [r7, #96]	@ 0x60
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	461a      	mov	r2, r3
 8006682:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006684:	633b      	str	r3, [r7, #48]	@ 0x30
 8006686:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006688:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800668a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800668c:	e841 2300 	strex	r3, r2, [r1]
 8006690:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1e6      	bne.n	8006666 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800669c:	2b01      	cmp	r3, #1
 800669e:	d12e      	bne.n	80066fe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	e853 3f00 	ldrex	r3, [r3]
 80066b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0310 	bic.w	r3, r3, #16
 80066ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	461a      	mov	r2, r3
 80066c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066c4:	61fb      	str	r3, [r7, #28]
 80066c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	69b9      	ldr	r1, [r7, #24]
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	e841 2300 	strex	r3, r2, [r1]
 80066d0:	617b      	str	r3, [r7, #20]
   return(result);
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e6      	bne.n	80066a6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	f003 0310 	and.w	r3, r3, #16
 80066e2:	2b10      	cmp	r3, #16
 80066e4:	d103      	bne.n	80066ee <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2210      	movs	r2, #16
 80066ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7ff f9de 	bl	8005ab8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066fc:	e00d      	b.n	800671a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7fb f836 	bl	8001770 <HAL_UART_RxCpltCallback>
}
 8006704:	e009      	b.n	800671a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	8b1b      	ldrh	r3, [r3, #24]
 800670c:	b29a      	uxth	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f042 0208 	orr.w	r2, r2, #8
 8006716:	b292      	uxth	r2, r2
 8006718:	831a      	strh	r2, [r3, #24]
}
 800671a:	bf00      	nop
 800671c:	3770      	adds	r7, #112	@ 0x70
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	40008000 	.word	0x40008000

08006728 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b09c      	sub	sp, #112	@ 0x70
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006736:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006740:	2b22      	cmp	r3, #34	@ 0x22
 8006742:	f040 80be 	bne.w	80068c2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800674c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006754:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006756:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800675a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800675e:	4013      	ands	r3, r2
 8006760:	b29a      	uxth	r2, r3
 8006762:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006764:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800676a:	1c9a      	adds	r2, r3, #2
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006776:	b29b      	uxth	r3, r3
 8006778:	3b01      	subs	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	f040 80a3 	bne.w	80068d6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800679e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80067b0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80067b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80067bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e6      	bne.n	8006790 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3308      	adds	r3, #8
 80067c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d4:	f023 0301 	bic.w	r3, r3, #1
 80067d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3308      	adds	r3, #8
 80067e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80067e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80067e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1e5      	bne.n	80067c2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a34      	ldr	r2, [pc, #208]	@ (80068e0 <UART_RxISR_16BIT+0x1b8>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d01f      	beq.n	8006854 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d018      	beq.n	8006854 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	e853 3f00 	ldrex	r3, [r3]
 800682e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006836:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	461a      	mov	r2, r3
 800683e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006840:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006842:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006844:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006846:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006848:	e841 2300 	strex	r3, r2, [r1]
 800684c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800684e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1e6      	bne.n	8006822 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006858:	2b01      	cmp	r3, #1
 800685a:	d12e      	bne.n	80068ba <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	e853 3f00 	ldrex	r3, [r3]
 800686e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f023 0310 	bic.w	r3, r3, #16
 8006876:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	461a      	mov	r2, r3
 800687e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006884:	6979      	ldr	r1, [r7, #20]
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	613b      	str	r3, [r7, #16]
   return(result);
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e6      	bne.n	8006862 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	f003 0310 	and.w	r3, r3, #16
 800689e:	2b10      	cmp	r3, #16
 80068a0:	d103      	bne.n	80068aa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2210      	movs	r2, #16
 80068a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80068b0:	4619      	mov	r1, r3
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7ff f900 	bl	8005ab8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068b8:	e00d      	b.n	80068d6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7fa ff58 	bl	8001770 <HAL_UART_RxCpltCallback>
}
 80068c0:	e009      	b.n	80068d6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	8b1b      	ldrh	r3, [r3, #24]
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0208 	orr.w	r2, r2, #8
 80068d2:	b292      	uxth	r2, r2
 80068d4:	831a      	strh	r2, [r3, #24]
}
 80068d6:	bf00      	nop
 80068d8:	3770      	adds	r7, #112	@ 0x70
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	40008000 	.word	0x40008000

080068e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <__cvt>:
 80068f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068fc:	ec57 6b10 	vmov	r6, r7, d0
 8006900:	2f00      	cmp	r7, #0
 8006902:	460c      	mov	r4, r1
 8006904:	4619      	mov	r1, r3
 8006906:	463b      	mov	r3, r7
 8006908:	bfbb      	ittet	lt
 800690a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800690e:	461f      	movlt	r7, r3
 8006910:	2300      	movge	r3, #0
 8006912:	232d      	movlt	r3, #45	@ 0x2d
 8006914:	700b      	strb	r3, [r1, #0]
 8006916:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006918:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800691c:	4691      	mov	r9, r2
 800691e:	f023 0820 	bic.w	r8, r3, #32
 8006922:	bfbc      	itt	lt
 8006924:	4632      	movlt	r2, r6
 8006926:	4616      	movlt	r6, r2
 8006928:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800692c:	d005      	beq.n	800693a <__cvt+0x42>
 800692e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006932:	d100      	bne.n	8006936 <__cvt+0x3e>
 8006934:	3401      	adds	r4, #1
 8006936:	2102      	movs	r1, #2
 8006938:	e000      	b.n	800693c <__cvt+0x44>
 800693a:	2103      	movs	r1, #3
 800693c:	ab03      	add	r3, sp, #12
 800693e:	9301      	str	r3, [sp, #4]
 8006940:	ab02      	add	r3, sp, #8
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	ec47 6b10 	vmov	d0, r6, r7
 8006948:	4653      	mov	r3, sl
 800694a:	4622      	mov	r2, r4
 800694c:	f001 febc 	bl	80086c8 <_dtoa_r>
 8006950:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006954:	4605      	mov	r5, r0
 8006956:	d119      	bne.n	800698c <__cvt+0x94>
 8006958:	f019 0f01 	tst.w	r9, #1
 800695c:	d00e      	beq.n	800697c <__cvt+0x84>
 800695e:	eb00 0904 	add.w	r9, r0, r4
 8006962:	2200      	movs	r2, #0
 8006964:	2300      	movs	r3, #0
 8006966:	4630      	mov	r0, r6
 8006968:	4639      	mov	r1, r7
 800696a:	f7fa f8ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800696e:	b108      	cbz	r0, 8006974 <__cvt+0x7c>
 8006970:	f8cd 900c 	str.w	r9, [sp, #12]
 8006974:	2230      	movs	r2, #48	@ 0x30
 8006976:	9b03      	ldr	r3, [sp, #12]
 8006978:	454b      	cmp	r3, r9
 800697a:	d31e      	bcc.n	80069ba <__cvt+0xc2>
 800697c:	9b03      	ldr	r3, [sp, #12]
 800697e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006980:	1b5b      	subs	r3, r3, r5
 8006982:	4628      	mov	r0, r5
 8006984:	6013      	str	r3, [r2, #0]
 8006986:	b004      	add	sp, #16
 8006988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800698c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006990:	eb00 0904 	add.w	r9, r0, r4
 8006994:	d1e5      	bne.n	8006962 <__cvt+0x6a>
 8006996:	7803      	ldrb	r3, [r0, #0]
 8006998:	2b30      	cmp	r3, #48	@ 0x30
 800699a:	d10a      	bne.n	80069b2 <__cvt+0xba>
 800699c:	2200      	movs	r2, #0
 800699e:	2300      	movs	r3, #0
 80069a0:	4630      	mov	r0, r6
 80069a2:	4639      	mov	r1, r7
 80069a4:	f7fa f890 	bl	8000ac8 <__aeabi_dcmpeq>
 80069a8:	b918      	cbnz	r0, 80069b2 <__cvt+0xba>
 80069aa:	f1c4 0401 	rsb	r4, r4, #1
 80069ae:	f8ca 4000 	str.w	r4, [sl]
 80069b2:	f8da 3000 	ldr.w	r3, [sl]
 80069b6:	4499      	add	r9, r3
 80069b8:	e7d3      	b.n	8006962 <__cvt+0x6a>
 80069ba:	1c59      	adds	r1, r3, #1
 80069bc:	9103      	str	r1, [sp, #12]
 80069be:	701a      	strb	r2, [r3, #0]
 80069c0:	e7d9      	b.n	8006976 <__cvt+0x7e>

080069c2 <__exponent>:
 80069c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069c4:	2900      	cmp	r1, #0
 80069c6:	bfba      	itte	lt
 80069c8:	4249      	neglt	r1, r1
 80069ca:	232d      	movlt	r3, #45	@ 0x2d
 80069cc:	232b      	movge	r3, #43	@ 0x2b
 80069ce:	2909      	cmp	r1, #9
 80069d0:	7002      	strb	r2, [r0, #0]
 80069d2:	7043      	strb	r3, [r0, #1]
 80069d4:	dd29      	ble.n	8006a2a <__exponent+0x68>
 80069d6:	f10d 0307 	add.w	r3, sp, #7
 80069da:	461d      	mov	r5, r3
 80069dc:	270a      	movs	r7, #10
 80069de:	461a      	mov	r2, r3
 80069e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80069e4:	fb07 1416 	mls	r4, r7, r6, r1
 80069e8:	3430      	adds	r4, #48	@ 0x30
 80069ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80069ee:	460c      	mov	r4, r1
 80069f0:	2c63      	cmp	r4, #99	@ 0x63
 80069f2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80069f6:	4631      	mov	r1, r6
 80069f8:	dcf1      	bgt.n	80069de <__exponent+0x1c>
 80069fa:	3130      	adds	r1, #48	@ 0x30
 80069fc:	1e94      	subs	r4, r2, #2
 80069fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006a02:	1c41      	adds	r1, r0, #1
 8006a04:	4623      	mov	r3, r4
 8006a06:	42ab      	cmp	r3, r5
 8006a08:	d30a      	bcc.n	8006a20 <__exponent+0x5e>
 8006a0a:	f10d 0309 	add.w	r3, sp, #9
 8006a0e:	1a9b      	subs	r3, r3, r2
 8006a10:	42ac      	cmp	r4, r5
 8006a12:	bf88      	it	hi
 8006a14:	2300      	movhi	r3, #0
 8006a16:	3302      	adds	r3, #2
 8006a18:	4403      	add	r3, r0
 8006a1a:	1a18      	subs	r0, r3, r0
 8006a1c:	b003      	add	sp, #12
 8006a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a20:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006a24:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006a28:	e7ed      	b.n	8006a06 <__exponent+0x44>
 8006a2a:	2330      	movs	r3, #48	@ 0x30
 8006a2c:	3130      	adds	r1, #48	@ 0x30
 8006a2e:	7083      	strb	r3, [r0, #2]
 8006a30:	70c1      	strb	r1, [r0, #3]
 8006a32:	1d03      	adds	r3, r0, #4
 8006a34:	e7f1      	b.n	8006a1a <__exponent+0x58>
	...

08006a38 <_printf_float>:
 8006a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3c:	b08d      	sub	sp, #52	@ 0x34
 8006a3e:	460c      	mov	r4, r1
 8006a40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006a44:	4616      	mov	r6, r2
 8006a46:	461f      	mov	r7, r3
 8006a48:	4605      	mov	r5, r0
 8006a4a:	f001 fd63 	bl	8008514 <_localeconv_r>
 8006a4e:	6803      	ldr	r3, [r0, #0]
 8006a50:	9304      	str	r3, [sp, #16]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7f9 fc0c 	bl	8000270 <strlen>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8006a60:	9005      	str	r0, [sp, #20]
 8006a62:	3307      	adds	r3, #7
 8006a64:	f023 0307 	bic.w	r3, r3, #7
 8006a68:	f103 0208 	add.w	r2, r3, #8
 8006a6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006a70:	f8d4 b000 	ldr.w	fp, [r4]
 8006a74:	f8c8 2000 	str.w	r2, [r8]
 8006a78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006a80:	9307      	str	r3, [sp, #28]
 8006a82:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006a8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a8e:	4b9c      	ldr	r3, [pc, #624]	@ (8006d00 <_printf_float+0x2c8>)
 8006a90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a94:	f7fa f84a 	bl	8000b2c <__aeabi_dcmpun>
 8006a98:	bb70      	cbnz	r0, 8006af8 <_printf_float+0xc0>
 8006a9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a9e:	4b98      	ldr	r3, [pc, #608]	@ (8006d00 <_printf_float+0x2c8>)
 8006aa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006aa4:	f7fa f824 	bl	8000af0 <__aeabi_dcmple>
 8006aa8:	bb30      	cbnz	r0, 8006af8 <_printf_float+0xc0>
 8006aaa:	2200      	movs	r2, #0
 8006aac:	2300      	movs	r3, #0
 8006aae:	4640      	mov	r0, r8
 8006ab0:	4649      	mov	r1, r9
 8006ab2:	f7fa f813 	bl	8000adc <__aeabi_dcmplt>
 8006ab6:	b110      	cbz	r0, 8006abe <_printf_float+0x86>
 8006ab8:	232d      	movs	r3, #45	@ 0x2d
 8006aba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006abe:	4a91      	ldr	r2, [pc, #580]	@ (8006d04 <_printf_float+0x2cc>)
 8006ac0:	4b91      	ldr	r3, [pc, #580]	@ (8006d08 <_printf_float+0x2d0>)
 8006ac2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006ac6:	bf94      	ite	ls
 8006ac8:	4690      	movls	r8, r2
 8006aca:	4698      	movhi	r8, r3
 8006acc:	2303      	movs	r3, #3
 8006ace:	6123      	str	r3, [r4, #16]
 8006ad0:	f02b 0304 	bic.w	r3, fp, #4
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	f04f 0900 	mov.w	r9, #0
 8006ada:	9700      	str	r7, [sp, #0]
 8006adc:	4633      	mov	r3, r6
 8006ade:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006ae0:	4621      	mov	r1, r4
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	f000 f9d2 	bl	8006e8c <_printf_common>
 8006ae8:	3001      	adds	r0, #1
 8006aea:	f040 808d 	bne.w	8006c08 <_printf_float+0x1d0>
 8006aee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006af2:	b00d      	add	sp, #52	@ 0x34
 8006af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af8:	4642      	mov	r2, r8
 8006afa:	464b      	mov	r3, r9
 8006afc:	4640      	mov	r0, r8
 8006afe:	4649      	mov	r1, r9
 8006b00:	f7fa f814 	bl	8000b2c <__aeabi_dcmpun>
 8006b04:	b140      	cbz	r0, 8006b18 <_printf_float+0xe0>
 8006b06:	464b      	mov	r3, r9
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	bfbc      	itt	lt
 8006b0c:	232d      	movlt	r3, #45	@ 0x2d
 8006b0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006b12:	4a7e      	ldr	r2, [pc, #504]	@ (8006d0c <_printf_float+0x2d4>)
 8006b14:	4b7e      	ldr	r3, [pc, #504]	@ (8006d10 <_printf_float+0x2d8>)
 8006b16:	e7d4      	b.n	8006ac2 <_printf_float+0x8a>
 8006b18:	6863      	ldr	r3, [r4, #4]
 8006b1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006b1e:	9206      	str	r2, [sp, #24]
 8006b20:	1c5a      	adds	r2, r3, #1
 8006b22:	d13b      	bne.n	8006b9c <_printf_float+0x164>
 8006b24:	2306      	movs	r3, #6
 8006b26:	6063      	str	r3, [r4, #4]
 8006b28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	6022      	str	r2, [r4, #0]
 8006b30:	9303      	str	r3, [sp, #12]
 8006b32:	ab0a      	add	r3, sp, #40	@ 0x28
 8006b34:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006b38:	ab09      	add	r3, sp, #36	@ 0x24
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	6861      	ldr	r1, [r4, #4]
 8006b3e:	ec49 8b10 	vmov	d0, r8, r9
 8006b42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006b46:	4628      	mov	r0, r5
 8006b48:	f7ff fed6 	bl	80068f8 <__cvt>
 8006b4c:	9b06      	ldr	r3, [sp, #24]
 8006b4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b50:	2b47      	cmp	r3, #71	@ 0x47
 8006b52:	4680      	mov	r8, r0
 8006b54:	d129      	bne.n	8006baa <_printf_float+0x172>
 8006b56:	1cc8      	adds	r0, r1, #3
 8006b58:	db02      	blt.n	8006b60 <_printf_float+0x128>
 8006b5a:	6863      	ldr	r3, [r4, #4]
 8006b5c:	4299      	cmp	r1, r3
 8006b5e:	dd41      	ble.n	8006be4 <_printf_float+0x1ac>
 8006b60:	f1aa 0a02 	sub.w	sl, sl, #2
 8006b64:	fa5f fa8a 	uxtb.w	sl, sl
 8006b68:	3901      	subs	r1, #1
 8006b6a:	4652      	mov	r2, sl
 8006b6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006b70:	9109      	str	r1, [sp, #36]	@ 0x24
 8006b72:	f7ff ff26 	bl	80069c2 <__exponent>
 8006b76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b78:	1813      	adds	r3, r2, r0
 8006b7a:	2a01      	cmp	r2, #1
 8006b7c:	4681      	mov	r9, r0
 8006b7e:	6123      	str	r3, [r4, #16]
 8006b80:	dc02      	bgt.n	8006b88 <_printf_float+0x150>
 8006b82:	6822      	ldr	r2, [r4, #0]
 8006b84:	07d2      	lsls	r2, r2, #31
 8006b86:	d501      	bpl.n	8006b8c <_printf_float+0x154>
 8006b88:	3301      	adds	r3, #1
 8006b8a:	6123      	str	r3, [r4, #16]
 8006b8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d0a2      	beq.n	8006ada <_printf_float+0xa2>
 8006b94:	232d      	movs	r3, #45	@ 0x2d
 8006b96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b9a:	e79e      	b.n	8006ada <_printf_float+0xa2>
 8006b9c:	9a06      	ldr	r2, [sp, #24]
 8006b9e:	2a47      	cmp	r2, #71	@ 0x47
 8006ba0:	d1c2      	bne.n	8006b28 <_printf_float+0xf0>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1c0      	bne.n	8006b28 <_printf_float+0xf0>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e7bd      	b.n	8006b26 <_printf_float+0xee>
 8006baa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006bae:	d9db      	bls.n	8006b68 <_printf_float+0x130>
 8006bb0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006bb4:	d118      	bne.n	8006be8 <_printf_float+0x1b0>
 8006bb6:	2900      	cmp	r1, #0
 8006bb8:	6863      	ldr	r3, [r4, #4]
 8006bba:	dd0b      	ble.n	8006bd4 <_printf_float+0x19c>
 8006bbc:	6121      	str	r1, [r4, #16]
 8006bbe:	b913      	cbnz	r3, 8006bc6 <_printf_float+0x18e>
 8006bc0:	6822      	ldr	r2, [r4, #0]
 8006bc2:	07d0      	lsls	r0, r2, #31
 8006bc4:	d502      	bpl.n	8006bcc <_printf_float+0x194>
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	440b      	add	r3, r1
 8006bca:	6123      	str	r3, [r4, #16]
 8006bcc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006bce:	f04f 0900 	mov.w	r9, #0
 8006bd2:	e7db      	b.n	8006b8c <_printf_float+0x154>
 8006bd4:	b913      	cbnz	r3, 8006bdc <_printf_float+0x1a4>
 8006bd6:	6822      	ldr	r2, [r4, #0]
 8006bd8:	07d2      	lsls	r2, r2, #31
 8006bda:	d501      	bpl.n	8006be0 <_printf_float+0x1a8>
 8006bdc:	3302      	adds	r3, #2
 8006bde:	e7f4      	b.n	8006bca <_printf_float+0x192>
 8006be0:	2301      	movs	r3, #1
 8006be2:	e7f2      	b.n	8006bca <_printf_float+0x192>
 8006be4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006be8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bea:	4299      	cmp	r1, r3
 8006bec:	db05      	blt.n	8006bfa <_printf_float+0x1c2>
 8006bee:	6823      	ldr	r3, [r4, #0]
 8006bf0:	6121      	str	r1, [r4, #16]
 8006bf2:	07d8      	lsls	r0, r3, #31
 8006bf4:	d5ea      	bpl.n	8006bcc <_printf_float+0x194>
 8006bf6:	1c4b      	adds	r3, r1, #1
 8006bf8:	e7e7      	b.n	8006bca <_printf_float+0x192>
 8006bfa:	2900      	cmp	r1, #0
 8006bfc:	bfd4      	ite	le
 8006bfe:	f1c1 0202 	rsble	r2, r1, #2
 8006c02:	2201      	movgt	r2, #1
 8006c04:	4413      	add	r3, r2
 8006c06:	e7e0      	b.n	8006bca <_printf_float+0x192>
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	055a      	lsls	r2, r3, #21
 8006c0c:	d407      	bmi.n	8006c1e <_printf_float+0x1e6>
 8006c0e:	6923      	ldr	r3, [r4, #16]
 8006c10:	4642      	mov	r2, r8
 8006c12:	4631      	mov	r1, r6
 8006c14:	4628      	mov	r0, r5
 8006c16:	47b8      	blx	r7
 8006c18:	3001      	adds	r0, #1
 8006c1a:	d12b      	bne.n	8006c74 <_printf_float+0x23c>
 8006c1c:	e767      	b.n	8006aee <_printf_float+0xb6>
 8006c1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c22:	f240 80dd 	bls.w	8006de0 <_printf_float+0x3a8>
 8006c26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	f7f9 ff4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d033      	beq.n	8006c9e <_printf_float+0x266>
 8006c36:	4a37      	ldr	r2, [pc, #220]	@ (8006d14 <_printf_float+0x2dc>)
 8006c38:	2301      	movs	r3, #1
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	47b8      	blx	r7
 8006c40:	3001      	adds	r0, #1
 8006c42:	f43f af54 	beq.w	8006aee <_printf_float+0xb6>
 8006c46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006c4a:	4543      	cmp	r3, r8
 8006c4c:	db02      	blt.n	8006c54 <_printf_float+0x21c>
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	07d8      	lsls	r0, r3, #31
 8006c52:	d50f      	bpl.n	8006c74 <_printf_float+0x23c>
 8006c54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c58:	4631      	mov	r1, r6
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	47b8      	blx	r7
 8006c5e:	3001      	adds	r0, #1
 8006c60:	f43f af45 	beq.w	8006aee <_printf_float+0xb6>
 8006c64:	f04f 0900 	mov.w	r9, #0
 8006c68:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006c6c:	f104 0a1a 	add.w	sl, r4, #26
 8006c70:	45c8      	cmp	r8, r9
 8006c72:	dc09      	bgt.n	8006c88 <_printf_float+0x250>
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	079b      	lsls	r3, r3, #30
 8006c78:	f100 8103 	bmi.w	8006e82 <_printf_float+0x44a>
 8006c7c:	68e0      	ldr	r0, [r4, #12]
 8006c7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c80:	4298      	cmp	r0, r3
 8006c82:	bfb8      	it	lt
 8006c84:	4618      	movlt	r0, r3
 8006c86:	e734      	b.n	8006af2 <_printf_float+0xba>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	4652      	mov	r2, sl
 8006c8c:	4631      	mov	r1, r6
 8006c8e:	4628      	mov	r0, r5
 8006c90:	47b8      	blx	r7
 8006c92:	3001      	adds	r0, #1
 8006c94:	f43f af2b 	beq.w	8006aee <_printf_float+0xb6>
 8006c98:	f109 0901 	add.w	r9, r9, #1
 8006c9c:	e7e8      	b.n	8006c70 <_printf_float+0x238>
 8006c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	dc39      	bgt.n	8006d18 <_printf_float+0x2e0>
 8006ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8006d14 <_printf_float+0x2dc>)
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	4631      	mov	r1, r6
 8006caa:	4628      	mov	r0, r5
 8006cac:	47b8      	blx	r7
 8006cae:	3001      	adds	r0, #1
 8006cb0:	f43f af1d 	beq.w	8006aee <_printf_float+0xb6>
 8006cb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006cb8:	ea59 0303 	orrs.w	r3, r9, r3
 8006cbc:	d102      	bne.n	8006cc4 <_printf_float+0x28c>
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	07d9      	lsls	r1, r3, #31
 8006cc2:	d5d7      	bpl.n	8006c74 <_printf_float+0x23c>
 8006cc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4628      	mov	r0, r5
 8006ccc:	47b8      	blx	r7
 8006cce:	3001      	adds	r0, #1
 8006cd0:	f43f af0d 	beq.w	8006aee <_printf_float+0xb6>
 8006cd4:	f04f 0a00 	mov.w	sl, #0
 8006cd8:	f104 0b1a 	add.w	fp, r4, #26
 8006cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cde:	425b      	negs	r3, r3
 8006ce0:	4553      	cmp	r3, sl
 8006ce2:	dc01      	bgt.n	8006ce8 <_printf_float+0x2b0>
 8006ce4:	464b      	mov	r3, r9
 8006ce6:	e793      	b.n	8006c10 <_printf_float+0x1d8>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	465a      	mov	r2, fp
 8006cec:	4631      	mov	r1, r6
 8006cee:	4628      	mov	r0, r5
 8006cf0:	47b8      	blx	r7
 8006cf2:	3001      	adds	r0, #1
 8006cf4:	f43f aefb 	beq.w	8006aee <_printf_float+0xb6>
 8006cf8:	f10a 0a01 	add.w	sl, sl, #1
 8006cfc:	e7ee      	b.n	8006cdc <_printf_float+0x2a4>
 8006cfe:	bf00      	nop
 8006d00:	7fefffff 	.word	0x7fefffff
 8006d04:	0800b37c 	.word	0x0800b37c
 8006d08:	0800b380 	.word	0x0800b380
 8006d0c:	0800b384 	.word	0x0800b384
 8006d10:	0800b388 	.word	0x0800b388
 8006d14:	0800b38c 	.word	0x0800b38c
 8006d18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006d1e:	4553      	cmp	r3, sl
 8006d20:	bfa8      	it	ge
 8006d22:	4653      	movge	r3, sl
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	4699      	mov	r9, r3
 8006d28:	dc36      	bgt.n	8006d98 <_printf_float+0x360>
 8006d2a:	f04f 0b00 	mov.w	fp, #0
 8006d2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d32:	f104 021a 	add.w	r2, r4, #26
 8006d36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d38:	9306      	str	r3, [sp, #24]
 8006d3a:	eba3 0309 	sub.w	r3, r3, r9
 8006d3e:	455b      	cmp	r3, fp
 8006d40:	dc31      	bgt.n	8006da6 <_printf_float+0x36e>
 8006d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d44:	459a      	cmp	sl, r3
 8006d46:	dc3a      	bgt.n	8006dbe <_printf_float+0x386>
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	07da      	lsls	r2, r3, #31
 8006d4c:	d437      	bmi.n	8006dbe <_printf_float+0x386>
 8006d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d50:	ebaa 0903 	sub.w	r9, sl, r3
 8006d54:	9b06      	ldr	r3, [sp, #24]
 8006d56:	ebaa 0303 	sub.w	r3, sl, r3
 8006d5a:	4599      	cmp	r9, r3
 8006d5c:	bfa8      	it	ge
 8006d5e:	4699      	movge	r9, r3
 8006d60:	f1b9 0f00 	cmp.w	r9, #0
 8006d64:	dc33      	bgt.n	8006dce <_printf_float+0x396>
 8006d66:	f04f 0800 	mov.w	r8, #0
 8006d6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d6e:	f104 0b1a 	add.w	fp, r4, #26
 8006d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d74:	ebaa 0303 	sub.w	r3, sl, r3
 8006d78:	eba3 0309 	sub.w	r3, r3, r9
 8006d7c:	4543      	cmp	r3, r8
 8006d7e:	f77f af79 	ble.w	8006c74 <_printf_float+0x23c>
 8006d82:	2301      	movs	r3, #1
 8006d84:	465a      	mov	r2, fp
 8006d86:	4631      	mov	r1, r6
 8006d88:	4628      	mov	r0, r5
 8006d8a:	47b8      	blx	r7
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	f43f aeae 	beq.w	8006aee <_printf_float+0xb6>
 8006d92:	f108 0801 	add.w	r8, r8, #1
 8006d96:	e7ec      	b.n	8006d72 <_printf_float+0x33a>
 8006d98:	4642      	mov	r2, r8
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	47b8      	blx	r7
 8006da0:	3001      	adds	r0, #1
 8006da2:	d1c2      	bne.n	8006d2a <_printf_float+0x2f2>
 8006da4:	e6a3      	b.n	8006aee <_printf_float+0xb6>
 8006da6:	2301      	movs	r3, #1
 8006da8:	4631      	mov	r1, r6
 8006daa:	4628      	mov	r0, r5
 8006dac:	9206      	str	r2, [sp, #24]
 8006dae:	47b8      	blx	r7
 8006db0:	3001      	adds	r0, #1
 8006db2:	f43f ae9c 	beq.w	8006aee <_printf_float+0xb6>
 8006db6:	9a06      	ldr	r2, [sp, #24]
 8006db8:	f10b 0b01 	add.w	fp, fp, #1
 8006dbc:	e7bb      	b.n	8006d36 <_printf_float+0x2fe>
 8006dbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dc2:	4631      	mov	r1, r6
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	47b8      	blx	r7
 8006dc8:	3001      	adds	r0, #1
 8006dca:	d1c0      	bne.n	8006d4e <_printf_float+0x316>
 8006dcc:	e68f      	b.n	8006aee <_printf_float+0xb6>
 8006dce:	9a06      	ldr	r2, [sp, #24]
 8006dd0:	464b      	mov	r3, r9
 8006dd2:	4442      	add	r2, r8
 8006dd4:	4631      	mov	r1, r6
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	47b8      	blx	r7
 8006dda:	3001      	adds	r0, #1
 8006ddc:	d1c3      	bne.n	8006d66 <_printf_float+0x32e>
 8006dde:	e686      	b.n	8006aee <_printf_float+0xb6>
 8006de0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006de4:	f1ba 0f01 	cmp.w	sl, #1
 8006de8:	dc01      	bgt.n	8006dee <_printf_float+0x3b6>
 8006dea:	07db      	lsls	r3, r3, #31
 8006dec:	d536      	bpl.n	8006e5c <_printf_float+0x424>
 8006dee:	2301      	movs	r3, #1
 8006df0:	4642      	mov	r2, r8
 8006df2:	4631      	mov	r1, r6
 8006df4:	4628      	mov	r0, r5
 8006df6:	47b8      	blx	r7
 8006df8:	3001      	adds	r0, #1
 8006dfa:	f43f ae78 	beq.w	8006aee <_printf_float+0xb6>
 8006dfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e02:	4631      	mov	r1, r6
 8006e04:	4628      	mov	r0, r5
 8006e06:	47b8      	blx	r7
 8006e08:	3001      	adds	r0, #1
 8006e0a:	f43f ae70 	beq.w	8006aee <_printf_float+0xb6>
 8006e0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e12:	2200      	movs	r2, #0
 8006e14:	2300      	movs	r3, #0
 8006e16:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006e1a:	f7f9 fe55 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e1e:	b9c0      	cbnz	r0, 8006e52 <_printf_float+0x41a>
 8006e20:	4653      	mov	r3, sl
 8006e22:	f108 0201 	add.w	r2, r8, #1
 8006e26:	4631      	mov	r1, r6
 8006e28:	4628      	mov	r0, r5
 8006e2a:	47b8      	blx	r7
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	d10c      	bne.n	8006e4a <_printf_float+0x412>
 8006e30:	e65d      	b.n	8006aee <_printf_float+0xb6>
 8006e32:	2301      	movs	r3, #1
 8006e34:	465a      	mov	r2, fp
 8006e36:	4631      	mov	r1, r6
 8006e38:	4628      	mov	r0, r5
 8006e3a:	47b8      	blx	r7
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	f43f ae56 	beq.w	8006aee <_printf_float+0xb6>
 8006e42:	f108 0801 	add.w	r8, r8, #1
 8006e46:	45d0      	cmp	r8, sl
 8006e48:	dbf3      	blt.n	8006e32 <_printf_float+0x3fa>
 8006e4a:	464b      	mov	r3, r9
 8006e4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006e50:	e6df      	b.n	8006c12 <_printf_float+0x1da>
 8006e52:	f04f 0800 	mov.w	r8, #0
 8006e56:	f104 0b1a 	add.w	fp, r4, #26
 8006e5a:	e7f4      	b.n	8006e46 <_printf_float+0x40e>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	4642      	mov	r2, r8
 8006e60:	e7e1      	b.n	8006e26 <_printf_float+0x3ee>
 8006e62:	2301      	movs	r3, #1
 8006e64:	464a      	mov	r2, r9
 8006e66:	4631      	mov	r1, r6
 8006e68:	4628      	mov	r0, r5
 8006e6a:	47b8      	blx	r7
 8006e6c:	3001      	adds	r0, #1
 8006e6e:	f43f ae3e 	beq.w	8006aee <_printf_float+0xb6>
 8006e72:	f108 0801 	add.w	r8, r8, #1
 8006e76:	68e3      	ldr	r3, [r4, #12]
 8006e78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e7a:	1a5b      	subs	r3, r3, r1
 8006e7c:	4543      	cmp	r3, r8
 8006e7e:	dcf0      	bgt.n	8006e62 <_printf_float+0x42a>
 8006e80:	e6fc      	b.n	8006c7c <_printf_float+0x244>
 8006e82:	f04f 0800 	mov.w	r8, #0
 8006e86:	f104 0919 	add.w	r9, r4, #25
 8006e8a:	e7f4      	b.n	8006e76 <_printf_float+0x43e>

08006e8c <_printf_common>:
 8006e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e90:	4616      	mov	r6, r2
 8006e92:	4698      	mov	r8, r3
 8006e94:	688a      	ldr	r2, [r1, #8]
 8006e96:	690b      	ldr	r3, [r1, #16]
 8006e98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	bfb8      	it	lt
 8006ea0:	4613      	movlt	r3, r2
 8006ea2:	6033      	str	r3, [r6, #0]
 8006ea4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ea8:	4607      	mov	r7, r0
 8006eaa:	460c      	mov	r4, r1
 8006eac:	b10a      	cbz	r2, 8006eb2 <_printf_common+0x26>
 8006eae:	3301      	adds	r3, #1
 8006eb0:	6033      	str	r3, [r6, #0]
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	0699      	lsls	r1, r3, #26
 8006eb6:	bf42      	ittt	mi
 8006eb8:	6833      	ldrmi	r3, [r6, #0]
 8006eba:	3302      	addmi	r3, #2
 8006ebc:	6033      	strmi	r3, [r6, #0]
 8006ebe:	6825      	ldr	r5, [r4, #0]
 8006ec0:	f015 0506 	ands.w	r5, r5, #6
 8006ec4:	d106      	bne.n	8006ed4 <_printf_common+0x48>
 8006ec6:	f104 0a19 	add.w	sl, r4, #25
 8006eca:	68e3      	ldr	r3, [r4, #12]
 8006ecc:	6832      	ldr	r2, [r6, #0]
 8006ece:	1a9b      	subs	r3, r3, r2
 8006ed0:	42ab      	cmp	r3, r5
 8006ed2:	dc26      	bgt.n	8006f22 <_printf_common+0x96>
 8006ed4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ed8:	6822      	ldr	r2, [r4, #0]
 8006eda:	3b00      	subs	r3, #0
 8006edc:	bf18      	it	ne
 8006ede:	2301      	movne	r3, #1
 8006ee0:	0692      	lsls	r2, r2, #26
 8006ee2:	d42b      	bmi.n	8006f3c <_printf_common+0xb0>
 8006ee4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ee8:	4641      	mov	r1, r8
 8006eea:	4638      	mov	r0, r7
 8006eec:	47c8      	blx	r9
 8006eee:	3001      	adds	r0, #1
 8006ef0:	d01e      	beq.n	8006f30 <_printf_common+0xa4>
 8006ef2:	6823      	ldr	r3, [r4, #0]
 8006ef4:	6922      	ldr	r2, [r4, #16]
 8006ef6:	f003 0306 	and.w	r3, r3, #6
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	bf02      	ittt	eq
 8006efe:	68e5      	ldreq	r5, [r4, #12]
 8006f00:	6833      	ldreq	r3, [r6, #0]
 8006f02:	1aed      	subeq	r5, r5, r3
 8006f04:	68a3      	ldr	r3, [r4, #8]
 8006f06:	bf0c      	ite	eq
 8006f08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f0c:	2500      	movne	r5, #0
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	bfc4      	itt	gt
 8006f12:	1a9b      	subgt	r3, r3, r2
 8006f14:	18ed      	addgt	r5, r5, r3
 8006f16:	2600      	movs	r6, #0
 8006f18:	341a      	adds	r4, #26
 8006f1a:	42b5      	cmp	r5, r6
 8006f1c:	d11a      	bne.n	8006f54 <_printf_common+0xc8>
 8006f1e:	2000      	movs	r0, #0
 8006f20:	e008      	b.n	8006f34 <_printf_common+0xa8>
 8006f22:	2301      	movs	r3, #1
 8006f24:	4652      	mov	r2, sl
 8006f26:	4641      	mov	r1, r8
 8006f28:	4638      	mov	r0, r7
 8006f2a:	47c8      	blx	r9
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	d103      	bne.n	8006f38 <_printf_common+0xac>
 8006f30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f38:	3501      	adds	r5, #1
 8006f3a:	e7c6      	b.n	8006eca <_printf_common+0x3e>
 8006f3c:	18e1      	adds	r1, r4, r3
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	2030      	movs	r0, #48	@ 0x30
 8006f42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f46:	4422      	add	r2, r4
 8006f48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f50:	3302      	adds	r3, #2
 8006f52:	e7c7      	b.n	8006ee4 <_printf_common+0x58>
 8006f54:	2301      	movs	r3, #1
 8006f56:	4622      	mov	r2, r4
 8006f58:	4641      	mov	r1, r8
 8006f5a:	4638      	mov	r0, r7
 8006f5c:	47c8      	blx	r9
 8006f5e:	3001      	adds	r0, #1
 8006f60:	d0e6      	beq.n	8006f30 <_printf_common+0xa4>
 8006f62:	3601      	adds	r6, #1
 8006f64:	e7d9      	b.n	8006f1a <_printf_common+0x8e>
	...

08006f68 <_printf_i>:
 8006f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f6c:	7e0f      	ldrb	r7, [r1, #24]
 8006f6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f70:	2f78      	cmp	r7, #120	@ 0x78
 8006f72:	4691      	mov	r9, r2
 8006f74:	4680      	mov	r8, r0
 8006f76:	460c      	mov	r4, r1
 8006f78:	469a      	mov	sl, r3
 8006f7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f7e:	d807      	bhi.n	8006f90 <_printf_i+0x28>
 8006f80:	2f62      	cmp	r7, #98	@ 0x62
 8006f82:	d80a      	bhi.n	8006f9a <_printf_i+0x32>
 8006f84:	2f00      	cmp	r7, #0
 8006f86:	f000 80d2 	beq.w	800712e <_printf_i+0x1c6>
 8006f8a:	2f58      	cmp	r7, #88	@ 0x58
 8006f8c:	f000 80b9 	beq.w	8007102 <_printf_i+0x19a>
 8006f90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f98:	e03a      	b.n	8007010 <_printf_i+0xa8>
 8006f9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f9e:	2b15      	cmp	r3, #21
 8006fa0:	d8f6      	bhi.n	8006f90 <_printf_i+0x28>
 8006fa2:	a101      	add	r1, pc, #4	@ (adr r1, 8006fa8 <_printf_i+0x40>)
 8006fa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fa8:	08007001 	.word	0x08007001
 8006fac:	08007015 	.word	0x08007015
 8006fb0:	08006f91 	.word	0x08006f91
 8006fb4:	08006f91 	.word	0x08006f91
 8006fb8:	08006f91 	.word	0x08006f91
 8006fbc:	08006f91 	.word	0x08006f91
 8006fc0:	08007015 	.word	0x08007015
 8006fc4:	08006f91 	.word	0x08006f91
 8006fc8:	08006f91 	.word	0x08006f91
 8006fcc:	08006f91 	.word	0x08006f91
 8006fd0:	08006f91 	.word	0x08006f91
 8006fd4:	08007115 	.word	0x08007115
 8006fd8:	0800703f 	.word	0x0800703f
 8006fdc:	080070cf 	.word	0x080070cf
 8006fe0:	08006f91 	.word	0x08006f91
 8006fe4:	08006f91 	.word	0x08006f91
 8006fe8:	08007137 	.word	0x08007137
 8006fec:	08006f91 	.word	0x08006f91
 8006ff0:	0800703f 	.word	0x0800703f
 8006ff4:	08006f91 	.word	0x08006f91
 8006ff8:	08006f91 	.word	0x08006f91
 8006ffc:	080070d7 	.word	0x080070d7
 8007000:	6833      	ldr	r3, [r6, #0]
 8007002:	1d1a      	adds	r2, r3, #4
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6032      	str	r2, [r6, #0]
 8007008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800700c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007010:	2301      	movs	r3, #1
 8007012:	e09d      	b.n	8007150 <_printf_i+0x1e8>
 8007014:	6833      	ldr	r3, [r6, #0]
 8007016:	6820      	ldr	r0, [r4, #0]
 8007018:	1d19      	adds	r1, r3, #4
 800701a:	6031      	str	r1, [r6, #0]
 800701c:	0606      	lsls	r6, r0, #24
 800701e:	d501      	bpl.n	8007024 <_printf_i+0xbc>
 8007020:	681d      	ldr	r5, [r3, #0]
 8007022:	e003      	b.n	800702c <_printf_i+0xc4>
 8007024:	0645      	lsls	r5, r0, #25
 8007026:	d5fb      	bpl.n	8007020 <_printf_i+0xb8>
 8007028:	f9b3 5000 	ldrsh.w	r5, [r3]
 800702c:	2d00      	cmp	r5, #0
 800702e:	da03      	bge.n	8007038 <_printf_i+0xd0>
 8007030:	232d      	movs	r3, #45	@ 0x2d
 8007032:	426d      	negs	r5, r5
 8007034:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007038:	4859      	ldr	r0, [pc, #356]	@ (80071a0 <_printf_i+0x238>)
 800703a:	230a      	movs	r3, #10
 800703c:	e011      	b.n	8007062 <_printf_i+0xfa>
 800703e:	6821      	ldr	r1, [r4, #0]
 8007040:	6833      	ldr	r3, [r6, #0]
 8007042:	0608      	lsls	r0, r1, #24
 8007044:	f853 5b04 	ldr.w	r5, [r3], #4
 8007048:	d402      	bmi.n	8007050 <_printf_i+0xe8>
 800704a:	0649      	lsls	r1, r1, #25
 800704c:	bf48      	it	mi
 800704e:	b2ad      	uxthmi	r5, r5
 8007050:	2f6f      	cmp	r7, #111	@ 0x6f
 8007052:	4853      	ldr	r0, [pc, #332]	@ (80071a0 <_printf_i+0x238>)
 8007054:	6033      	str	r3, [r6, #0]
 8007056:	bf14      	ite	ne
 8007058:	230a      	movne	r3, #10
 800705a:	2308      	moveq	r3, #8
 800705c:	2100      	movs	r1, #0
 800705e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007062:	6866      	ldr	r6, [r4, #4]
 8007064:	60a6      	str	r6, [r4, #8]
 8007066:	2e00      	cmp	r6, #0
 8007068:	bfa2      	ittt	ge
 800706a:	6821      	ldrge	r1, [r4, #0]
 800706c:	f021 0104 	bicge.w	r1, r1, #4
 8007070:	6021      	strge	r1, [r4, #0]
 8007072:	b90d      	cbnz	r5, 8007078 <_printf_i+0x110>
 8007074:	2e00      	cmp	r6, #0
 8007076:	d04b      	beq.n	8007110 <_printf_i+0x1a8>
 8007078:	4616      	mov	r6, r2
 800707a:	fbb5 f1f3 	udiv	r1, r5, r3
 800707e:	fb03 5711 	mls	r7, r3, r1, r5
 8007082:	5dc7      	ldrb	r7, [r0, r7]
 8007084:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007088:	462f      	mov	r7, r5
 800708a:	42bb      	cmp	r3, r7
 800708c:	460d      	mov	r5, r1
 800708e:	d9f4      	bls.n	800707a <_printf_i+0x112>
 8007090:	2b08      	cmp	r3, #8
 8007092:	d10b      	bne.n	80070ac <_printf_i+0x144>
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	07df      	lsls	r7, r3, #31
 8007098:	d508      	bpl.n	80070ac <_printf_i+0x144>
 800709a:	6923      	ldr	r3, [r4, #16]
 800709c:	6861      	ldr	r1, [r4, #4]
 800709e:	4299      	cmp	r1, r3
 80070a0:	bfde      	ittt	le
 80070a2:	2330      	movle	r3, #48	@ 0x30
 80070a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070a8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80070ac:	1b92      	subs	r2, r2, r6
 80070ae:	6122      	str	r2, [r4, #16]
 80070b0:	f8cd a000 	str.w	sl, [sp]
 80070b4:	464b      	mov	r3, r9
 80070b6:	aa03      	add	r2, sp, #12
 80070b8:	4621      	mov	r1, r4
 80070ba:	4640      	mov	r0, r8
 80070bc:	f7ff fee6 	bl	8006e8c <_printf_common>
 80070c0:	3001      	adds	r0, #1
 80070c2:	d14a      	bne.n	800715a <_printf_i+0x1f2>
 80070c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070c8:	b004      	add	sp, #16
 80070ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	f043 0320 	orr.w	r3, r3, #32
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	4833      	ldr	r0, [pc, #204]	@ (80071a4 <_printf_i+0x23c>)
 80070d8:	2778      	movs	r7, #120	@ 0x78
 80070da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	6831      	ldr	r1, [r6, #0]
 80070e2:	061f      	lsls	r7, r3, #24
 80070e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80070e8:	d402      	bmi.n	80070f0 <_printf_i+0x188>
 80070ea:	065f      	lsls	r7, r3, #25
 80070ec:	bf48      	it	mi
 80070ee:	b2ad      	uxthmi	r5, r5
 80070f0:	6031      	str	r1, [r6, #0]
 80070f2:	07d9      	lsls	r1, r3, #31
 80070f4:	bf44      	itt	mi
 80070f6:	f043 0320 	orrmi.w	r3, r3, #32
 80070fa:	6023      	strmi	r3, [r4, #0]
 80070fc:	b11d      	cbz	r5, 8007106 <_printf_i+0x19e>
 80070fe:	2310      	movs	r3, #16
 8007100:	e7ac      	b.n	800705c <_printf_i+0xf4>
 8007102:	4827      	ldr	r0, [pc, #156]	@ (80071a0 <_printf_i+0x238>)
 8007104:	e7e9      	b.n	80070da <_printf_i+0x172>
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	f023 0320 	bic.w	r3, r3, #32
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	e7f6      	b.n	80070fe <_printf_i+0x196>
 8007110:	4616      	mov	r6, r2
 8007112:	e7bd      	b.n	8007090 <_printf_i+0x128>
 8007114:	6833      	ldr	r3, [r6, #0]
 8007116:	6825      	ldr	r5, [r4, #0]
 8007118:	6961      	ldr	r1, [r4, #20]
 800711a:	1d18      	adds	r0, r3, #4
 800711c:	6030      	str	r0, [r6, #0]
 800711e:	062e      	lsls	r6, r5, #24
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	d501      	bpl.n	8007128 <_printf_i+0x1c0>
 8007124:	6019      	str	r1, [r3, #0]
 8007126:	e002      	b.n	800712e <_printf_i+0x1c6>
 8007128:	0668      	lsls	r0, r5, #25
 800712a:	d5fb      	bpl.n	8007124 <_printf_i+0x1bc>
 800712c:	8019      	strh	r1, [r3, #0]
 800712e:	2300      	movs	r3, #0
 8007130:	6123      	str	r3, [r4, #16]
 8007132:	4616      	mov	r6, r2
 8007134:	e7bc      	b.n	80070b0 <_printf_i+0x148>
 8007136:	6833      	ldr	r3, [r6, #0]
 8007138:	1d1a      	adds	r2, r3, #4
 800713a:	6032      	str	r2, [r6, #0]
 800713c:	681e      	ldr	r6, [r3, #0]
 800713e:	6862      	ldr	r2, [r4, #4]
 8007140:	2100      	movs	r1, #0
 8007142:	4630      	mov	r0, r6
 8007144:	f7f9 f844 	bl	80001d0 <memchr>
 8007148:	b108      	cbz	r0, 800714e <_printf_i+0x1e6>
 800714a:	1b80      	subs	r0, r0, r6
 800714c:	6060      	str	r0, [r4, #4]
 800714e:	6863      	ldr	r3, [r4, #4]
 8007150:	6123      	str	r3, [r4, #16]
 8007152:	2300      	movs	r3, #0
 8007154:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007158:	e7aa      	b.n	80070b0 <_printf_i+0x148>
 800715a:	6923      	ldr	r3, [r4, #16]
 800715c:	4632      	mov	r2, r6
 800715e:	4649      	mov	r1, r9
 8007160:	4640      	mov	r0, r8
 8007162:	47d0      	blx	sl
 8007164:	3001      	adds	r0, #1
 8007166:	d0ad      	beq.n	80070c4 <_printf_i+0x15c>
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	079b      	lsls	r3, r3, #30
 800716c:	d413      	bmi.n	8007196 <_printf_i+0x22e>
 800716e:	68e0      	ldr	r0, [r4, #12]
 8007170:	9b03      	ldr	r3, [sp, #12]
 8007172:	4298      	cmp	r0, r3
 8007174:	bfb8      	it	lt
 8007176:	4618      	movlt	r0, r3
 8007178:	e7a6      	b.n	80070c8 <_printf_i+0x160>
 800717a:	2301      	movs	r3, #1
 800717c:	4632      	mov	r2, r6
 800717e:	4649      	mov	r1, r9
 8007180:	4640      	mov	r0, r8
 8007182:	47d0      	blx	sl
 8007184:	3001      	adds	r0, #1
 8007186:	d09d      	beq.n	80070c4 <_printf_i+0x15c>
 8007188:	3501      	adds	r5, #1
 800718a:	68e3      	ldr	r3, [r4, #12]
 800718c:	9903      	ldr	r1, [sp, #12]
 800718e:	1a5b      	subs	r3, r3, r1
 8007190:	42ab      	cmp	r3, r5
 8007192:	dcf2      	bgt.n	800717a <_printf_i+0x212>
 8007194:	e7eb      	b.n	800716e <_printf_i+0x206>
 8007196:	2500      	movs	r5, #0
 8007198:	f104 0619 	add.w	r6, r4, #25
 800719c:	e7f5      	b.n	800718a <_printf_i+0x222>
 800719e:	bf00      	nop
 80071a0:	0800b38e 	.word	0x0800b38e
 80071a4:	0800b39f 	.word	0x0800b39f

080071a8 <_scanf_float>:
 80071a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ac:	b087      	sub	sp, #28
 80071ae:	4617      	mov	r7, r2
 80071b0:	9303      	str	r3, [sp, #12]
 80071b2:	688b      	ldr	r3, [r1, #8]
 80071b4:	1e5a      	subs	r2, r3, #1
 80071b6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80071ba:	bf81      	itttt	hi
 80071bc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80071c0:	eb03 0b05 	addhi.w	fp, r3, r5
 80071c4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80071c8:	608b      	strhi	r3, [r1, #8]
 80071ca:	680b      	ldr	r3, [r1, #0]
 80071cc:	460a      	mov	r2, r1
 80071ce:	f04f 0500 	mov.w	r5, #0
 80071d2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80071d6:	f842 3b1c 	str.w	r3, [r2], #28
 80071da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80071de:	4680      	mov	r8, r0
 80071e0:	460c      	mov	r4, r1
 80071e2:	bf98      	it	ls
 80071e4:	f04f 0b00 	movls.w	fp, #0
 80071e8:	9201      	str	r2, [sp, #4]
 80071ea:	4616      	mov	r6, r2
 80071ec:	46aa      	mov	sl, r5
 80071ee:	46a9      	mov	r9, r5
 80071f0:	9502      	str	r5, [sp, #8]
 80071f2:	68a2      	ldr	r2, [r4, #8]
 80071f4:	b152      	cbz	r2, 800720c <_scanf_float+0x64>
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	2b4e      	cmp	r3, #78	@ 0x4e
 80071fc:	d864      	bhi.n	80072c8 <_scanf_float+0x120>
 80071fe:	2b40      	cmp	r3, #64	@ 0x40
 8007200:	d83c      	bhi.n	800727c <_scanf_float+0xd4>
 8007202:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007206:	b2c8      	uxtb	r0, r1
 8007208:	280e      	cmp	r0, #14
 800720a:	d93a      	bls.n	8007282 <_scanf_float+0xda>
 800720c:	f1b9 0f00 	cmp.w	r9, #0
 8007210:	d003      	beq.n	800721a <_scanf_float+0x72>
 8007212:	6823      	ldr	r3, [r4, #0]
 8007214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800721e:	f1ba 0f01 	cmp.w	sl, #1
 8007222:	f200 8117 	bhi.w	8007454 <_scanf_float+0x2ac>
 8007226:	9b01      	ldr	r3, [sp, #4]
 8007228:	429e      	cmp	r6, r3
 800722a:	f200 8108 	bhi.w	800743e <_scanf_float+0x296>
 800722e:	2001      	movs	r0, #1
 8007230:	b007      	add	sp, #28
 8007232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007236:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800723a:	2a0d      	cmp	r2, #13
 800723c:	d8e6      	bhi.n	800720c <_scanf_float+0x64>
 800723e:	a101      	add	r1, pc, #4	@ (adr r1, 8007244 <_scanf_float+0x9c>)
 8007240:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007244:	0800738b 	.word	0x0800738b
 8007248:	0800720d 	.word	0x0800720d
 800724c:	0800720d 	.word	0x0800720d
 8007250:	0800720d 	.word	0x0800720d
 8007254:	080073eb 	.word	0x080073eb
 8007258:	080073c3 	.word	0x080073c3
 800725c:	0800720d 	.word	0x0800720d
 8007260:	0800720d 	.word	0x0800720d
 8007264:	08007399 	.word	0x08007399
 8007268:	0800720d 	.word	0x0800720d
 800726c:	0800720d 	.word	0x0800720d
 8007270:	0800720d 	.word	0x0800720d
 8007274:	0800720d 	.word	0x0800720d
 8007278:	08007351 	.word	0x08007351
 800727c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007280:	e7db      	b.n	800723a <_scanf_float+0x92>
 8007282:	290e      	cmp	r1, #14
 8007284:	d8c2      	bhi.n	800720c <_scanf_float+0x64>
 8007286:	a001      	add	r0, pc, #4	@ (adr r0, 800728c <_scanf_float+0xe4>)
 8007288:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800728c:	08007341 	.word	0x08007341
 8007290:	0800720d 	.word	0x0800720d
 8007294:	08007341 	.word	0x08007341
 8007298:	080073d7 	.word	0x080073d7
 800729c:	0800720d 	.word	0x0800720d
 80072a0:	080072e9 	.word	0x080072e9
 80072a4:	08007327 	.word	0x08007327
 80072a8:	08007327 	.word	0x08007327
 80072ac:	08007327 	.word	0x08007327
 80072b0:	08007327 	.word	0x08007327
 80072b4:	08007327 	.word	0x08007327
 80072b8:	08007327 	.word	0x08007327
 80072bc:	08007327 	.word	0x08007327
 80072c0:	08007327 	.word	0x08007327
 80072c4:	08007327 	.word	0x08007327
 80072c8:	2b6e      	cmp	r3, #110	@ 0x6e
 80072ca:	d809      	bhi.n	80072e0 <_scanf_float+0x138>
 80072cc:	2b60      	cmp	r3, #96	@ 0x60
 80072ce:	d8b2      	bhi.n	8007236 <_scanf_float+0x8e>
 80072d0:	2b54      	cmp	r3, #84	@ 0x54
 80072d2:	d07b      	beq.n	80073cc <_scanf_float+0x224>
 80072d4:	2b59      	cmp	r3, #89	@ 0x59
 80072d6:	d199      	bne.n	800720c <_scanf_float+0x64>
 80072d8:	2d07      	cmp	r5, #7
 80072da:	d197      	bne.n	800720c <_scanf_float+0x64>
 80072dc:	2508      	movs	r5, #8
 80072de:	e02c      	b.n	800733a <_scanf_float+0x192>
 80072e0:	2b74      	cmp	r3, #116	@ 0x74
 80072e2:	d073      	beq.n	80073cc <_scanf_float+0x224>
 80072e4:	2b79      	cmp	r3, #121	@ 0x79
 80072e6:	e7f6      	b.n	80072d6 <_scanf_float+0x12e>
 80072e8:	6821      	ldr	r1, [r4, #0]
 80072ea:	05c8      	lsls	r0, r1, #23
 80072ec:	d51b      	bpl.n	8007326 <_scanf_float+0x17e>
 80072ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80072f2:	6021      	str	r1, [r4, #0]
 80072f4:	f109 0901 	add.w	r9, r9, #1
 80072f8:	f1bb 0f00 	cmp.w	fp, #0
 80072fc:	d003      	beq.n	8007306 <_scanf_float+0x15e>
 80072fe:	3201      	adds	r2, #1
 8007300:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8007304:	60a2      	str	r2, [r4, #8]
 8007306:	68a3      	ldr	r3, [r4, #8]
 8007308:	3b01      	subs	r3, #1
 800730a:	60a3      	str	r3, [r4, #8]
 800730c:	6923      	ldr	r3, [r4, #16]
 800730e:	3301      	adds	r3, #1
 8007310:	6123      	str	r3, [r4, #16]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	3b01      	subs	r3, #1
 8007316:	2b00      	cmp	r3, #0
 8007318:	607b      	str	r3, [r7, #4]
 800731a:	f340 8087 	ble.w	800742c <_scanf_float+0x284>
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	3301      	adds	r3, #1
 8007322:	603b      	str	r3, [r7, #0]
 8007324:	e765      	b.n	80071f2 <_scanf_float+0x4a>
 8007326:	eb1a 0105 	adds.w	r1, sl, r5
 800732a:	f47f af6f 	bne.w	800720c <_scanf_float+0x64>
 800732e:	6822      	ldr	r2, [r4, #0]
 8007330:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007334:	6022      	str	r2, [r4, #0]
 8007336:	460d      	mov	r5, r1
 8007338:	468a      	mov	sl, r1
 800733a:	f806 3b01 	strb.w	r3, [r6], #1
 800733e:	e7e2      	b.n	8007306 <_scanf_float+0x15e>
 8007340:	6822      	ldr	r2, [r4, #0]
 8007342:	0610      	lsls	r0, r2, #24
 8007344:	f57f af62 	bpl.w	800720c <_scanf_float+0x64>
 8007348:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800734c:	6022      	str	r2, [r4, #0]
 800734e:	e7f4      	b.n	800733a <_scanf_float+0x192>
 8007350:	f1ba 0f00 	cmp.w	sl, #0
 8007354:	d10e      	bne.n	8007374 <_scanf_float+0x1cc>
 8007356:	f1b9 0f00 	cmp.w	r9, #0
 800735a:	d10e      	bne.n	800737a <_scanf_float+0x1d2>
 800735c:	6822      	ldr	r2, [r4, #0]
 800735e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007362:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007366:	d108      	bne.n	800737a <_scanf_float+0x1d2>
 8007368:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800736c:	6022      	str	r2, [r4, #0]
 800736e:	f04f 0a01 	mov.w	sl, #1
 8007372:	e7e2      	b.n	800733a <_scanf_float+0x192>
 8007374:	f1ba 0f02 	cmp.w	sl, #2
 8007378:	d055      	beq.n	8007426 <_scanf_float+0x27e>
 800737a:	2d01      	cmp	r5, #1
 800737c:	d002      	beq.n	8007384 <_scanf_float+0x1dc>
 800737e:	2d04      	cmp	r5, #4
 8007380:	f47f af44 	bne.w	800720c <_scanf_float+0x64>
 8007384:	3501      	adds	r5, #1
 8007386:	b2ed      	uxtb	r5, r5
 8007388:	e7d7      	b.n	800733a <_scanf_float+0x192>
 800738a:	f1ba 0f01 	cmp.w	sl, #1
 800738e:	f47f af3d 	bne.w	800720c <_scanf_float+0x64>
 8007392:	f04f 0a02 	mov.w	sl, #2
 8007396:	e7d0      	b.n	800733a <_scanf_float+0x192>
 8007398:	b97d      	cbnz	r5, 80073ba <_scanf_float+0x212>
 800739a:	f1b9 0f00 	cmp.w	r9, #0
 800739e:	f47f af38 	bne.w	8007212 <_scanf_float+0x6a>
 80073a2:	6822      	ldr	r2, [r4, #0]
 80073a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80073a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80073ac:	f040 8108 	bne.w	80075c0 <_scanf_float+0x418>
 80073b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80073b4:	6022      	str	r2, [r4, #0]
 80073b6:	2501      	movs	r5, #1
 80073b8:	e7bf      	b.n	800733a <_scanf_float+0x192>
 80073ba:	2d03      	cmp	r5, #3
 80073bc:	d0e2      	beq.n	8007384 <_scanf_float+0x1dc>
 80073be:	2d05      	cmp	r5, #5
 80073c0:	e7de      	b.n	8007380 <_scanf_float+0x1d8>
 80073c2:	2d02      	cmp	r5, #2
 80073c4:	f47f af22 	bne.w	800720c <_scanf_float+0x64>
 80073c8:	2503      	movs	r5, #3
 80073ca:	e7b6      	b.n	800733a <_scanf_float+0x192>
 80073cc:	2d06      	cmp	r5, #6
 80073ce:	f47f af1d 	bne.w	800720c <_scanf_float+0x64>
 80073d2:	2507      	movs	r5, #7
 80073d4:	e7b1      	b.n	800733a <_scanf_float+0x192>
 80073d6:	6822      	ldr	r2, [r4, #0]
 80073d8:	0591      	lsls	r1, r2, #22
 80073da:	f57f af17 	bpl.w	800720c <_scanf_float+0x64>
 80073de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80073e2:	6022      	str	r2, [r4, #0]
 80073e4:	f8cd 9008 	str.w	r9, [sp, #8]
 80073e8:	e7a7      	b.n	800733a <_scanf_float+0x192>
 80073ea:	6822      	ldr	r2, [r4, #0]
 80073ec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80073f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80073f4:	d006      	beq.n	8007404 <_scanf_float+0x25c>
 80073f6:	0550      	lsls	r0, r2, #21
 80073f8:	f57f af08 	bpl.w	800720c <_scanf_float+0x64>
 80073fc:	f1b9 0f00 	cmp.w	r9, #0
 8007400:	f000 80de 	beq.w	80075c0 <_scanf_float+0x418>
 8007404:	0591      	lsls	r1, r2, #22
 8007406:	bf58      	it	pl
 8007408:	9902      	ldrpl	r1, [sp, #8]
 800740a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800740e:	bf58      	it	pl
 8007410:	eba9 0101 	subpl.w	r1, r9, r1
 8007414:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007418:	bf58      	it	pl
 800741a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800741e:	6022      	str	r2, [r4, #0]
 8007420:	f04f 0900 	mov.w	r9, #0
 8007424:	e789      	b.n	800733a <_scanf_float+0x192>
 8007426:	f04f 0a03 	mov.w	sl, #3
 800742a:	e786      	b.n	800733a <_scanf_float+0x192>
 800742c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007430:	4639      	mov	r1, r7
 8007432:	4640      	mov	r0, r8
 8007434:	4798      	blx	r3
 8007436:	2800      	cmp	r0, #0
 8007438:	f43f aedb 	beq.w	80071f2 <_scanf_float+0x4a>
 800743c:	e6e6      	b.n	800720c <_scanf_float+0x64>
 800743e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007442:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007446:	463a      	mov	r2, r7
 8007448:	4640      	mov	r0, r8
 800744a:	4798      	blx	r3
 800744c:	6923      	ldr	r3, [r4, #16]
 800744e:	3b01      	subs	r3, #1
 8007450:	6123      	str	r3, [r4, #16]
 8007452:	e6e8      	b.n	8007226 <_scanf_float+0x7e>
 8007454:	1e6b      	subs	r3, r5, #1
 8007456:	2b06      	cmp	r3, #6
 8007458:	d824      	bhi.n	80074a4 <_scanf_float+0x2fc>
 800745a:	2d02      	cmp	r5, #2
 800745c:	d836      	bhi.n	80074cc <_scanf_float+0x324>
 800745e:	9b01      	ldr	r3, [sp, #4]
 8007460:	429e      	cmp	r6, r3
 8007462:	f67f aee4 	bls.w	800722e <_scanf_float+0x86>
 8007466:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800746a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800746e:	463a      	mov	r2, r7
 8007470:	4640      	mov	r0, r8
 8007472:	4798      	blx	r3
 8007474:	6923      	ldr	r3, [r4, #16]
 8007476:	3b01      	subs	r3, #1
 8007478:	6123      	str	r3, [r4, #16]
 800747a:	e7f0      	b.n	800745e <_scanf_float+0x2b6>
 800747c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007480:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007484:	463a      	mov	r2, r7
 8007486:	4640      	mov	r0, r8
 8007488:	4798      	blx	r3
 800748a:	6923      	ldr	r3, [r4, #16]
 800748c:	3b01      	subs	r3, #1
 800748e:	6123      	str	r3, [r4, #16]
 8007490:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007494:	fa5f fa8a 	uxtb.w	sl, sl
 8007498:	f1ba 0f02 	cmp.w	sl, #2
 800749c:	d1ee      	bne.n	800747c <_scanf_float+0x2d4>
 800749e:	3d03      	subs	r5, #3
 80074a0:	b2ed      	uxtb	r5, r5
 80074a2:	1b76      	subs	r6, r6, r5
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	05da      	lsls	r2, r3, #23
 80074a8:	d530      	bpl.n	800750c <_scanf_float+0x364>
 80074aa:	055b      	lsls	r3, r3, #21
 80074ac:	d511      	bpl.n	80074d2 <_scanf_float+0x32a>
 80074ae:	9b01      	ldr	r3, [sp, #4]
 80074b0:	429e      	cmp	r6, r3
 80074b2:	f67f aebc 	bls.w	800722e <_scanf_float+0x86>
 80074b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80074be:	463a      	mov	r2, r7
 80074c0:	4640      	mov	r0, r8
 80074c2:	4798      	blx	r3
 80074c4:	6923      	ldr	r3, [r4, #16]
 80074c6:	3b01      	subs	r3, #1
 80074c8:	6123      	str	r3, [r4, #16]
 80074ca:	e7f0      	b.n	80074ae <_scanf_float+0x306>
 80074cc:	46aa      	mov	sl, r5
 80074ce:	46b3      	mov	fp, r6
 80074d0:	e7de      	b.n	8007490 <_scanf_float+0x2e8>
 80074d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80074d6:	6923      	ldr	r3, [r4, #16]
 80074d8:	2965      	cmp	r1, #101	@ 0x65
 80074da:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80074de:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80074e2:	6123      	str	r3, [r4, #16]
 80074e4:	d00c      	beq.n	8007500 <_scanf_float+0x358>
 80074e6:	2945      	cmp	r1, #69	@ 0x45
 80074e8:	d00a      	beq.n	8007500 <_scanf_float+0x358>
 80074ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074ee:	463a      	mov	r2, r7
 80074f0:	4640      	mov	r0, r8
 80074f2:	4798      	blx	r3
 80074f4:	6923      	ldr	r3, [r4, #16]
 80074f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	1eb5      	subs	r5, r6, #2
 80074fe:	6123      	str	r3, [r4, #16]
 8007500:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007504:	463a      	mov	r2, r7
 8007506:	4640      	mov	r0, r8
 8007508:	4798      	blx	r3
 800750a:	462e      	mov	r6, r5
 800750c:	6822      	ldr	r2, [r4, #0]
 800750e:	f012 0210 	ands.w	r2, r2, #16
 8007512:	d001      	beq.n	8007518 <_scanf_float+0x370>
 8007514:	2000      	movs	r0, #0
 8007516:	e68b      	b.n	8007230 <_scanf_float+0x88>
 8007518:	7032      	strb	r2, [r6, #0]
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007524:	d11c      	bne.n	8007560 <_scanf_float+0x3b8>
 8007526:	9b02      	ldr	r3, [sp, #8]
 8007528:	454b      	cmp	r3, r9
 800752a:	eba3 0209 	sub.w	r2, r3, r9
 800752e:	d123      	bne.n	8007578 <_scanf_float+0x3d0>
 8007530:	9901      	ldr	r1, [sp, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	4640      	mov	r0, r8
 8007536:	f000 ff13 	bl	8008360 <_strtod_r>
 800753a:	9b03      	ldr	r3, [sp, #12]
 800753c:	6821      	ldr	r1, [r4, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f011 0f02 	tst.w	r1, #2
 8007544:	ec57 6b10 	vmov	r6, r7, d0
 8007548:	f103 0204 	add.w	r2, r3, #4
 800754c:	d01f      	beq.n	800758e <_scanf_float+0x3e6>
 800754e:	9903      	ldr	r1, [sp, #12]
 8007550:	600a      	str	r2, [r1, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	e9c3 6700 	strd	r6, r7, [r3]
 8007558:	68e3      	ldr	r3, [r4, #12]
 800755a:	3301      	adds	r3, #1
 800755c:	60e3      	str	r3, [r4, #12]
 800755e:	e7d9      	b.n	8007514 <_scanf_float+0x36c>
 8007560:	9b04      	ldr	r3, [sp, #16]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d0e4      	beq.n	8007530 <_scanf_float+0x388>
 8007566:	9905      	ldr	r1, [sp, #20]
 8007568:	230a      	movs	r3, #10
 800756a:	3101      	adds	r1, #1
 800756c:	4640      	mov	r0, r8
 800756e:	f000 ff77 	bl	8008460 <_strtol_r>
 8007572:	9b04      	ldr	r3, [sp, #16]
 8007574:	9e05      	ldr	r6, [sp, #20]
 8007576:	1ac2      	subs	r2, r0, r3
 8007578:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800757c:	429e      	cmp	r6, r3
 800757e:	bf28      	it	cs
 8007580:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007584:	4910      	ldr	r1, [pc, #64]	@ (80075c8 <_scanf_float+0x420>)
 8007586:	4630      	mov	r0, r6
 8007588:	f000 f822 	bl	80075d0 <siprintf>
 800758c:	e7d0      	b.n	8007530 <_scanf_float+0x388>
 800758e:	f011 0f04 	tst.w	r1, #4
 8007592:	9903      	ldr	r1, [sp, #12]
 8007594:	600a      	str	r2, [r1, #0]
 8007596:	d1dc      	bne.n	8007552 <_scanf_float+0x3aa>
 8007598:	681d      	ldr	r5, [r3, #0]
 800759a:	4632      	mov	r2, r6
 800759c:	463b      	mov	r3, r7
 800759e:	4630      	mov	r0, r6
 80075a0:	4639      	mov	r1, r7
 80075a2:	f7f9 fac3 	bl	8000b2c <__aeabi_dcmpun>
 80075a6:	b128      	cbz	r0, 80075b4 <_scanf_float+0x40c>
 80075a8:	4808      	ldr	r0, [pc, #32]	@ (80075cc <_scanf_float+0x424>)
 80075aa:	f000 fffd 	bl	80085a8 <nanf>
 80075ae:	ed85 0a00 	vstr	s0, [r5]
 80075b2:	e7d1      	b.n	8007558 <_scanf_float+0x3b0>
 80075b4:	4630      	mov	r0, r6
 80075b6:	4639      	mov	r1, r7
 80075b8:	f7f9 fb16 	bl	8000be8 <__aeabi_d2f>
 80075bc:	6028      	str	r0, [r5, #0]
 80075be:	e7cb      	b.n	8007558 <_scanf_float+0x3b0>
 80075c0:	f04f 0900 	mov.w	r9, #0
 80075c4:	e629      	b.n	800721a <_scanf_float+0x72>
 80075c6:	bf00      	nop
 80075c8:	0800b3b0 	.word	0x0800b3b0
 80075cc:	0800b7a3 	.word	0x0800b7a3

080075d0 <siprintf>:
 80075d0:	b40e      	push	{r1, r2, r3}
 80075d2:	b500      	push	{lr}
 80075d4:	b09c      	sub	sp, #112	@ 0x70
 80075d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80075d8:	9002      	str	r0, [sp, #8]
 80075da:	9006      	str	r0, [sp, #24]
 80075dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80075e0:	4809      	ldr	r0, [pc, #36]	@ (8007608 <siprintf+0x38>)
 80075e2:	9107      	str	r1, [sp, #28]
 80075e4:	9104      	str	r1, [sp, #16]
 80075e6:	4909      	ldr	r1, [pc, #36]	@ (800760c <siprintf+0x3c>)
 80075e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ec:	9105      	str	r1, [sp, #20]
 80075ee:	6800      	ldr	r0, [r0, #0]
 80075f0:	9301      	str	r3, [sp, #4]
 80075f2:	a902      	add	r1, sp, #8
 80075f4:	f002 f9c0 	bl	8009978 <_svfiprintf_r>
 80075f8:	9b02      	ldr	r3, [sp, #8]
 80075fa:	2200      	movs	r2, #0
 80075fc:	701a      	strb	r2, [r3, #0]
 80075fe:	b01c      	add	sp, #112	@ 0x70
 8007600:	f85d eb04 	ldr.w	lr, [sp], #4
 8007604:	b003      	add	sp, #12
 8007606:	4770      	bx	lr
 8007608:	2000019c 	.word	0x2000019c
 800760c:	ffff0208 	.word	0xffff0208

08007610 <std>:
 8007610:	2300      	movs	r3, #0
 8007612:	b510      	push	{r4, lr}
 8007614:	4604      	mov	r4, r0
 8007616:	e9c0 3300 	strd	r3, r3, [r0]
 800761a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800761e:	6083      	str	r3, [r0, #8]
 8007620:	8181      	strh	r1, [r0, #12]
 8007622:	6643      	str	r3, [r0, #100]	@ 0x64
 8007624:	81c2      	strh	r2, [r0, #14]
 8007626:	6183      	str	r3, [r0, #24]
 8007628:	4619      	mov	r1, r3
 800762a:	2208      	movs	r2, #8
 800762c:	305c      	adds	r0, #92	@ 0x5c
 800762e:	f000 ff68 	bl	8008502 <memset>
 8007632:	4b0d      	ldr	r3, [pc, #52]	@ (8007668 <std+0x58>)
 8007634:	6263      	str	r3, [r4, #36]	@ 0x24
 8007636:	4b0d      	ldr	r3, [pc, #52]	@ (800766c <std+0x5c>)
 8007638:	62a3      	str	r3, [r4, #40]	@ 0x28
 800763a:	4b0d      	ldr	r3, [pc, #52]	@ (8007670 <std+0x60>)
 800763c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800763e:	4b0d      	ldr	r3, [pc, #52]	@ (8007674 <std+0x64>)
 8007640:	6323      	str	r3, [r4, #48]	@ 0x30
 8007642:	4b0d      	ldr	r3, [pc, #52]	@ (8007678 <std+0x68>)
 8007644:	6224      	str	r4, [r4, #32]
 8007646:	429c      	cmp	r4, r3
 8007648:	d006      	beq.n	8007658 <std+0x48>
 800764a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800764e:	4294      	cmp	r4, r2
 8007650:	d002      	beq.n	8007658 <std+0x48>
 8007652:	33d0      	adds	r3, #208	@ 0xd0
 8007654:	429c      	cmp	r4, r3
 8007656:	d105      	bne.n	8007664 <std+0x54>
 8007658:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800765c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007660:	f000 bf86 	b.w	8008570 <__retarget_lock_init_recursive>
 8007664:	bd10      	pop	{r4, pc}
 8007666:	bf00      	nop
 8007668:	0800a7bd 	.word	0x0800a7bd
 800766c:	0800a7df 	.word	0x0800a7df
 8007670:	0800a817 	.word	0x0800a817
 8007674:	0800a83b 	.word	0x0800a83b
 8007678:	200007a0 	.word	0x200007a0

0800767c <stdio_exit_handler>:
 800767c:	4a02      	ldr	r2, [pc, #8]	@ (8007688 <stdio_exit_handler+0xc>)
 800767e:	4903      	ldr	r1, [pc, #12]	@ (800768c <stdio_exit_handler+0x10>)
 8007680:	4803      	ldr	r0, [pc, #12]	@ (8007690 <stdio_exit_handler+0x14>)
 8007682:	f000 beef 	b.w	8008464 <_fwalk_sglue>
 8007686:	bf00      	nop
 8007688:	20000024 	.word	0x20000024
 800768c:	08009df1 	.word	0x08009df1
 8007690:	200001a0 	.word	0x200001a0

08007694 <cleanup_stdio>:
 8007694:	6841      	ldr	r1, [r0, #4]
 8007696:	4b0c      	ldr	r3, [pc, #48]	@ (80076c8 <cleanup_stdio+0x34>)
 8007698:	4299      	cmp	r1, r3
 800769a:	b510      	push	{r4, lr}
 800769c:	4604      	mov	r4, r0
 800769e:	d001      	beq.n	80076a4 <cleanup_stdio+0x10>
 80076a0:	f002 fba6 	bl	8009df0 <_fflush_r>
 80076a4:	68a1      	ldr	r1, [r4, #8]
 80076a6:	4b09      	ldr	r3, [pc, #36]	@ (80076cc <cleanup_stdio+0x38>)
 80076a8:	4299      	cmp	r1, r3
 80076aa:	d002      	beq.n	80076b2 <cleanup_stdio+0x1e>
 80076ac:	4620      	mov	r0, r4
 80076ae:	f002 fb9f 	bl	8009df0 <_fflush_r>
 80076b2:	68e1      	ldr	r1, [r4, #12]
 80076b4:	4b06      	ldr	r3, [pc, #24]	@ (80076d0 <cleanup_stdio+0x3c>)
 80076b6:	4299      	cmp	r1, r3
 80076b8:	d004      	beq.n	80076c4 <cleanup_stdio+0x30>
 80076ba:	4620      	mov	r0, r4
 80076bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076c0:	f002 bb96 	b.w	8009df0 <_fflush_r>
 80076c4:	bd10      	pop	{r4, pc}
 80076c6:	bf00      	nop
 80076c8:	200007a0 	.word	0x200007a0
 80076cc:	20000808 	.word	0x20000808
 80076d0:	20000870 	.word	0x20000870

080076d4 <global_stdio_init.part.0>:
 80076d4:	b510      	push	{r4, lr}
 80076d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007704 <global_stdio_init.part.0+0x30>)
 80076d8:	4c0b      	ldr	r4, [pc, #44]	@ (8007708 <global_stdio_init.part.0+0x34>)
 80076da:	4a0c      	ldr	r2, [pc, #48]	@ (800770c <global_stdio_init.part.0+0x38>)
 80076dc:	601a      	str	r2, [r3, #0]
 80076de:	4620      	mov	r0, r4
 80076e0:	2200      	movs	r2, #0
 80076e2:	2104      	movs	r1, #4
 80076e4:	f7ff ff94 	bl	8007610 <std>
 80076e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80076ec:	2201      	movs	r2, #1
 80076ee:	2109      	movs	r1, #9
 80076f0:	f7ff ff8e 	bl	8007610 <std>
 80076f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80076f8:	2202      	movs	r2, #2
 80076fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076fe:	2112      	movs	r1, #18
 8007700:	f7ff bf86 	b.w	8007610 <std>
 8007704:	200008d8 	.word	0x200008d8
 8007708:	200007a0 	.word	0x200007a0
 800770c:	0800767d 	.word	0x0800767d

08007710 <__sfp_lock_acquire>:
 8007710:	4801      	ldr	r0, [pc, #4]	@ (8007718 <__sfp_lock_acquire+0x8>)
 8007712:	f000 bf2e 	b.w	8008572 <__retarget_lock_acquire_recursive>
 8007716:	bf00      	nop
 8007718:	200008dd 	.word	0x200008dd

0800771c <__sfp_lock_release>:
 800771c:	4801      	ldr	r0, [pc, #4]	@ (8007724 <__sfp_lock_release+0x8>)
 800771e:	f000 bf29 	b.w	8008574 <__retarget_lock_release_recursive>
 8007722:	bf00      	nop
 8007724:	200008dd 	.word	0x200008dd

08007728 <__sinit>:
 8007728:	b510      	push	{r4, lr}
 800772a:	4604      	mov	r4, r0
 800772c:	f7ff fff0 	bl	8007710 <__sfp_lock_acquire>
 8007730:	6a23      	ldr	r3, [r4, #32]
 8007732:	b11b      	cbz	r3, 800773c <__sinit+0x14>
 8007734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007738:	f7ff bff0 	b.w	800771c <__sfp_lock_release>
 800773c:	4b04      	ldr	r3, [pc, #16]	@ (8007750 <__sinit+0x28>)
 800773e:	6223      	str	r3, [r4, #32]
 8007740:	4b04      	ldr	r3, [pc, #16]	@ (8007754 <__sinit+0x2c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1f5      	bne.n	8007734 <__sinit+0xc>
 8007748:	f7ff ffc4 	bl	80076d4 <global_stdio_init.part.0>
 800774c:	e7f2      	b.n	8007734 <__sinit+0xc>
 800774e:	bf00      	nop
 8007750:	08007695 	.word	0x08007695
 8007754:	200008d8 	.word	0x200008d8

08007758 <sulp>:
 8007758:	b570      	push	{r4, r5, r6, lr}
 800775a:	4604      	mov	r4, r0
 800775c:	460d      	mov	r5, r1
 800775e:	ec45 4b10 	vmov	d0, r4, r5
 8007762:	4616      	mov	r6, r2
 8007764:	f002 feec 	bl	800a540 <__ulp>
 8007768:	ec51 0b10 	vmov	r0, r1, d0
 800776c:	b17e      	cbz	r6, 800778e <sulp+0x36>
 800776e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007772:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007776:	2b00      	cmp	r3, #0
 8007778:	dd09      	ble.n	800778e <sulp+0x36>
 800777a:	051b      	lsls	r3, r3, #20
 800777c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007780:	2400      	movs	r4, #0
 8007782:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007786:	4622      	mov	r2, r4
 8007788:	462b      	mov	r3, r5
 800778a:	f7f8 ff35 	bl	80005f8 <__aeabi_dmul>
 800778e:	ec41 0b10 	vmov	d0, r0, r1
 8007792:	bd70      	pop	{r4, r5, r6, pc}
 8007794:	0000      	movs	r0, r0
	...

08007798 <_strtod_l>:
 8007798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779c:	b09f      	sub	sp, #124	@ 0x7c
 800779e:	460c      	mov	r4, r1
 80077a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80077a2:	2200      	movs	r2, #0
 80077a4:	921a      	str	r2, [sp, #104]	@ 0x68
 80077a6:	9005      	str	r0, [sp, #20]
 80077a8:	f04f 0a00 	mov.w	sl, #0
 80077ac:	f04f 0b00 	mov.w	fp, #0
 80077b0:	460a      	mov	r2, r1
 80077b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80077b4:	7811      	ldrb	r1, [r2, #0]
 80077b6:	292b      	cmp	r1, #43	@ 0x2b
 80077b8:	d04a      	beq.n	8007850 <_strtod_l+0xb8>
 80077ba:	d838      	bhi.n	800782e <_strtod_l+0x96>
 80077bc:	290d      	cmp	r1, #13
 80077be:	d832      	bhi.n	8007826 <_strtod_l+0x8e>
 80077c0:	2908      	cmp	r1, #8
 80077c2:	d832      	bhi.n	800782a <_strtod_l+0x92>
 80077c4:	2900      	cmp	r1, #0
 80077c6:	d03b      	beq.n	8007840 <_strtod_l+0xa8>
 80077c8:	2200      	movs	r2, #0
 80077ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 80077cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80077ce:	782a      	ldrb	r2, [r5, #0]
 80077d0:	2a30      	cmp	r2, #48	@ 0x30
 80077d2:	f040 80b3 	bne.w	800793c <_strtod_l+0x1a4>
 80077d6:	786a      	ldrb	r2, [r5, #1]
 80077d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80077dc:	2a58      	cmp	r2, #88	@ 0x58
 80077de:	d16e      	bne.n	80078be <_strtod_l+0x126>
 80077e0:	9302      	str	r3, [sp, #8]
 80077e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077e4:	9301      	str	r3, [sp, #4]
 80077e6:	ab1a      	add	r3, sp, #104	@ 0x68
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	4a8e      	ldr	r2, [pc, #568]	@ (8007a24 <_strtod_l+0x28c>)
 80077ec:	9805      	ldr	r0, [sp, #20]
 80077ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 80077f0:	a919      	add	r1, sp, #100	@ 0x64
 80077f2:	f001 fd95 	bl	8009320 <__gethex>
 80077f6:	f010 060f 	ands.w	r6, r0, #15
 80077fa:	4604      	mov	r4, r0
 80077fc:	d005      	beq.n	800780a <_strtod_l+0x72>
 80077fe:	2e06      	cmp	r6, #6
 8007800:	d128      	bne.n	8007854 <_strtod_l+0xbc>
 8007802:	3501      	adds	r5, #1
 8007804:	2300      	movs	r3, #0
 8007806:	9519      	str	r5, [sp, #100]	@ 0x64
 8007808:	930b      	str	r3, [sp, #44]	@ 0x2c
 800780a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800780c:	2b00      	cmp	r3, #0
 800780e:	f040 858e 	bne.w	800832e <_strtod_l+0xb96>
 8007812:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007814:	b1cb      	cbz	r3, 800784a <_strtod_l+0xb2>
 8007816:	4652      	mov	r2, sl
 8007818:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800781c:	ec43 2b10 	vmov	d0, r2, r3
 8007820:	b01f      	add	sp, #124	@ 0x7c
 8007822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007826:	2920      	cmp	r1, #32
 8007828:	d1ce      	bne.n	80077c8 <_strtod_l+0x30>
 800782a:	3201      	adds	r2, #1
 800782c:	e7c1      	b.n	80077b2 <_strtod_l+0x1a>
 800782e:	292d      	cmp	r1, #45	@ 0x2d
 8007830:	d1ca      	bne.n	80077c8 <_strtod_l+0x30>
 8007832:	2101      	movs	r1, #1
 8007834:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007836:	1c51      	adds	r1, r2, #1
 8007838:	9119      	str	r1, [sp, #100]	@ 0x64
 800783a:	7852      	ldrb	r2, [r2, #1]
 800783c:	2a00      	cmp	r2, #0
 800783e:	d1c5      	bne.n	80077cc <_strtod_l+0x34>
 8007840:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007842:	9419      	str	r4, [sp, #100]	@ 0x64
 8007844:	2b00      	cmp	r3, #0
 8007846:	f040 8570 	bne.w	800832a <_strtod_l+0xb92>
 800784a:	4652      	mov	r2, sl
 800784c:	465b      	mov	r3, fp
 800784e:	e7e5      	b.n	800781c <_strtod_l+0x84>
 8007850:	2100      	movs	r1, #0
 8007852:	e7ef      	b.n	8007834 <_strtod_l+0x9c>
 8007854:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007856:	b13a      	cbz	r2, 8007868 <_strtod_l+0xd0>
 8007858:	2135      	movs	r1, #53	@ 0x35
 800785a:	a81c      	add	r0, sp, #112	@ 0x70
 800785c:	f002 ff6a 	bl	800a734 <__copybits>
 8007860:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007862:	9805      	ldr	r0, [sp, #20]
 8007864:	f002 fb38 	bl	8009ed8 <_Bfree>
 8007868:	3e01      	subs	r6, #1
 800786a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800786c:	2e04      	cmp	r6, #4
 800786e:	d806      	bhi.n	800787e <_strtod_l+0xe6>
 8007870:	e8df f006 	tbb	[pc, r6]
 8007874:	201d0314 	.word	0x201d0314
 8007878:	14          	.byte	0x14
 8007879:	00          	.byte	0x00
 800787a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800787e:	05e1      	lsls	r1, r4, #23
 8007880:	bf48      	it	mi
 8007882:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007886:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800788a:	0d1b      	lsrs	r3, r3, #20
 800788c:	051b      	lsls	r3, r3, #20
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1bb      	bne.n	800780a <_strtod_l+0x72>
 8007892:	f000 fe43 	bl	800851c <__errno>
 8007896:	2322      	movs	r3, #34	@ 0x22
 8007898:	6003      	str	r3, [r0, #0]
 800789a:	e7b6      	b.n	800780a <_strtod_l+0x72>
 800789c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80078a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80078a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80078a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80078ac:	e7e7      	b.n	800787e <_strtod_l+0xe6>
 80078ae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007a2c <_strtod_l+0x294>
 80078b2:	e7e4      	b.n	800787e <_strtod_l+0xe6>
 80078b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80078b8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80078bc:	e7df      	b.n	800787e <_strtod_l+0xe6>
 80078be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078c0:	1c5a      	adds	r2, r3, #1
 80078c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80078c4:	785b      	ldrb	r3, [r3, #1]
 80078c6:	2b30      	cmp	r3, #48	@ 0x30
 80078c8:	d0f9      	beq.n	80078be <_strtod_l+0x126>
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d09d      	beq.n	800780a <_strtod_l+0x72>
 80078ce:	2301      	movs	r3, #1
 80078d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80078d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80078d6:	2300      	movs	r3, #0
 80078d8:	9308      	str	r3, [sp, #32]
 80078da:	930a      	str	r3, [sp, #40]	@ 0x28
 80078dc:	461f      	mov	r7, r3
 80078de:	220a      	movs	r2, #10
 80078e0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80078e2:	7805      	ldrb	r5, [r0, #0]
 80078e4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80078e8:	b2d9      	uxtb	r1, r3
 80078ea:	2909      	cmp	r1, #9
 80078ec:	d928      	bls.n	8007940 <_strtod_l+0x1a8>
 80078ee:	494e      	ldr	r1, [pc, #312]	@ (8007a28 <_strtod_l+0x290>)
 80078f0:	2201      	movs	r2, #1
 80078f2:	f000 fde4 	bl	80084be <strncmp>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d032      	beq.n	8007960 <_strtod_l+0x1c8>
 80078fa:	2000      	movs	r0, #0
 80078fc:	462a      	mov	r2, r5
 80078fe:	4681      	mov	r9, r0
 8007900:	463d      	mov	r5, r7
 8007902:	4603      	mov	r3, r0
 8007904:	2a65      	cmp	r2, #101	@ 0x65
 8007906:	d001      	beq.n	800790c <_strtod_l+0x174>
 8007908:	2a45      	cmp	r2, #69	@ 0x45
 800790a:	d114      	bne.n	8007936 <_strtod_l+0x19e>
 800790c:	b91d      	cbnz	r5, 8007916 <_strtod_l+0x17e>
 800790e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007910:	4302      	orrs	r2, r0
 8007912:	d095      	beq.n	8007840 <_strtod_l+0xa8>
 8007914:	2500      	movs	r5, #0
 8007916:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007918:	1c62      	adds	r2, r4, #1
 800791a:	9219      	str	r2, [sp, #100]	@ 0x64
 800791c:	7862      	ldrb	r2, [r4, #1]
 800791e:	2a2b      	cmp	r2, #43	@ 0x2b
 8007920:	d077      	beq.n	8007a12 <_strtod_l+0x27a>
 8007922:	2a2d      	cmp	r2, #45	@ 0x2d
 8007924:	d07b      	beq.n	8007a1e <_strtod_l+0x286>
 8007926:	f04f 0c00 	mov.w	ip, #0
 800792a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800792e:	2909      	cmp	r1, #9
 8007930:	f240 8082 	bls.w	8007a38 <_strtod_l+0x2a0>
 8007934:	9419      	str	r4, [sp, #100]	@ 0x64
 8007936:	f04f 0800 	mov.w	r8, #0
 800793a:	e0a2      	b.n	8007a82 <_strtod_l+0x2ea>
 800793c:	2300      	movs	r3, #0
 800793e:	e7c7      	b.n	80078d0 <_strtod_l+0x138>
 8007940:	2f08      	cmp	r7, #8
 8007942:	bfd5      	itete	le
 8007944:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007946:	9908      	ldrgt	r1, [sp, #32]
 8007948:	fb02 3301 	mlale	r3, r2, r1, r3
 800794c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007950:	f100 0001 	add.w	r0, r0, #1
 8007954:	bfd4      	ite	le
 8007956:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007958:	9308      	strgt	r3, [sp, #32]
 800795a:	3701      	adds	r7, #1
 800795c:	9019      	str	r0, [sp, #100]	@ 0x64
 800795e:	e7bf      	b.n	80078e0 <_strtod_l+0x148>
 8007960:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007962:	1c5a      	adds	r2, r3, #1
 8007964:	9219      	str	r2, [sp, #100]	@ 0x64
 8007966:	785a      	ldrb	r2, [r3, #1]
 8007968:	b37f      	cbz	r7, 80079ca <_strtod_l+0x232>
 800796a:	4681      	mov	r9, r0
 800796c:	463d      	mov	r5, r7
 800796e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007972:	2b09      	cmp	r3, #9
 8007974:	d912      	bls.n	800799c <_strtod_l+0x204>
 8007976:	2301      	movs	r3, #1
 8007978:	e7c4      	b.n	8007904 <_strtod_l+0x16c>
 800797a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007980:	785a      	ldrb	r2, [r3, #1]
 8007982:	3001      	adds	r0, #1
 8007984:	2a30      	cmp	r2, #48	@ 0x30
 8007986:	d0f8      	beq.n	800797a <_strtod_l+0x1e2>
 8007988:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800798c:	2b08      	cmp	r3, #8
 800798e:	f200 84d3 	bhi.w	8008338 <_strtod_l+0xba0>
 8007992:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007994:	930c      	str	r3, [sp, #48]	@ 0x30
 8007996:	4681      	mov	r9, r0
 8007998:	2000      	movs	r0, #0
 800799a:	4605      	mov	r5, r0
 800799c:	3a30      	subs	r2, #48	@ 0x30
 800799e:	f100 0301 	add.w	r3, r0, #1
 80079a2:	d02a      	beq.n	80079fa <_strtod_l+0x262>
 80079a4:	4499      	add	r9, r3
 80079a6:	eb00 0c05 	add.w	ip, r0, r5
 80079aa:	462b      	mov	r3, r5
 80079ac:	210a      	movs	r1, #10
 80079ae:	4563      	cmp	r3, ip
 80079b0:	d10d      	bne.n	80079ce <_strtod_l+0x236>
 80079b2:	1c69      	adds	r1, r5, #1
 80079b4:	4401      	add	r1, r0
 80079b6:	4428      	add	r0, r5
 80079b8:	2808      	cmp	r0, #8
 80079ba:	dc16      	bgt.n	80079ea <_strtod_l+0x252>
 80079bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80079be:	230a      	movs	r3, #10
 80079c0:	fb03 2300 	mla	r3, r3, r0, r2
 80079c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80079c6:	2300      	movs	r3, #0
 80079c8:	e018      	b.n	80079fc <_strtod_l+0x264>
 80079ca:	4638      	mov	r0, r7
 80079cc:	e7da      	b.n	8007984 <_strtod_l+0x1ec>
 80079ce:	2b08      	cmp	r3, #8
 80079d0:	f103 0301 	add.w	r3, r3, #1
 80079d4:	dc03      	bgt.n	80079de <_strtod_l+0x246>
 80079d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80079d8:	434e      	muls	r6, r1
 80079da:	960a      	str	r6, [sp, #40]	@ 0x28
 80079dc:	e7e7      	b.n	80079ae <_strtod_l+0x216>
 80079de:	2b10      	cmp	r3, #16
 80079e0:	bfde      	ittt	le
 80079e2:	9e08      	ldrle	r6, [sp, #32]
 80079e4:	434e      	mulle	r6, r1
 80079e6:	9608      	strle	r6, [sp, #32]
 80079e8:	e7e1      	b.n	80079ae <_strtod_l+0x216>
 80079ea:	280f      	cmp	r0, #15
 80079ec:	dceb      	bgt.n	80079c6 <_strtod_l+0x22e>
 80079ee:	9808      	ldr	r0, [sp, #32]
 80079f0:	230a      	movs	r3, #10
 80079f2:	fb03 2300 	mla	r3, r3, r0, r2
 80079f6:	9308      	str	r3, [sp, #32]
 80079f8:	e7e5      	b.n	80079c6 <_strtod_l+0x22e>
 80079fa:	4629      	mov	r1, r5
 80079fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80079fe:	1c50      	adds	r0, r2, #1
 8007a00:	9019      	str	r0, [sp, #100]	@ 0x64
 8007a02:	7852      	ldrb	r2, [r2, #1]
 8007a04:	4618      	mov	r0, r3
 8007a06:	460d      	mov	r5, r1
 8007a08:	e7b1      	b.n	800796e <_strtod_l+0x1d6>
 8007a0a:	f04f 0900 	mov.w	r9, #0
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e77d      	b.n	800790e <_strtod_l+0x176>
 8007a12:	f04f 0c00 	mov.w	ip, #0
 8007a16:	1ca2      	adds	r2, r4, #2
 8007a18:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a1a:	78a2      	ldrb	r2, [r4, #2]
 8007a1c:	e785      	b.n	800792a <_strtod_l+0x192>
 8007a1e:	f04f 0c01 	mov.w	ip, #1
 8007a22:	e7f8      	b.n	8007a16 <_strtod_l+0x27e>
 8007a24:	0800b3cc 	.word	0x0800b3cc
 8007a28:	0800b3b5 	.word	0x0800b3b5
 8007a2c:	7ff00000 	.word	0x7ff00000
 8007a30:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a32:	1c51      	adds	r1, r2, #1
 8007a34:	9119      	str	r1, [sp, #100]	@ 0x64
 8007a36:	7852      	ldrb	r2, [r2, #1]
 8007a38:	2a30      	cmp	r2, #48	@ 0x30
 8007a3a:	d0f9      	beq.n	8007a30 <_strtod_l+0x298>
 8007a3c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007a40:	2908      	cmp	r1, #8
 8007a42:	f63f af78 	bhi.w	8007936 <_strtod_l+0x19e>
 8007a46:	3a30      	subs	r2, #48	@ 0x30
 8007a48:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a4c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007a4e:	f04f 080a 	mov.w	r8, #10
 8007a52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a54:	1c56      	adds	r6, r2, #1
 8007a56:	9619      	str	r6, [sp, #100]	@ 0x64
 8007a58:	7852      	ldrb	r2, [r2, #1]
 8007a5a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007a5e:	f1be 0f09 	cmp.w	lr, #9
 8007a62:	d939      	bls.n	8007ad8 <_strtod_l+0x340>
 8007a64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007a66:	1a76      	subs	r6, r6, r1
 8007a68:	2e08      	cmp	r6, #8
 8007a6a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007a6e:	dc03      	bgt.n	8007a78 <_strtod_l+0x2e0>
 8007a70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007a72:	4588      	cmp	r8, r1
 8007a74:	bfa8      	it	ge
 8007a76:	4688      	movge	r8, r1
 8007a78:	f1bc 0f00 	cmp.w	ip, #0
 8007a7c:	d001      	beq.n	8007a82 <_strtod_l+0x2ea>
 8007a7e:	f1c8 0800 	rsb	r8, r8, #0
 8007a82:	2d00      	cmp	r5, #0
 8007a84:	d14e      	bne.n	8007b24 <_strtod_l+0x38c>
 8007a86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a88:	4308      	orrs	r0, r1
 8007a8a:	f47f aebe 	bne.w	800780a <_strtod_l+0x72>
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f47f aed6 	bne.w	8007840 <_strtod_l+0xa8>
 8007a94:	2a69      	cmp	r2, #105	@ 0x69
 8007a96:	d028      	beq.n	8007aea <_strtod_l+0x352>
 8007a98:	dc25      	bgt.n	8007ae6 <_strtod_l+0x34e>
 8007a9a:	2a49      	cmp	r2, #73	@ 0x49
 8007a9c:	d025      	beq.n	8007aea <_strtod_l+0x352>
 8007a9e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007aa0:	f47f aece 	bne.w	8007840 <_strtod_l+0xa8>
 8007aa4:	499b      	ldr	r1, [pc, #620]	@ (8007d14 <_strtod_l+0x57c>)
 8007aa6:	a819      	add	r0, sp, #100	@ 0x64
 8007aa8:	f001 fe5c 	bl	8009764 <__match>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	f43f aec7 	beq.w	8007840 <_strtod_l+0xa8>
 8007ab2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	2b28      	cmp	r3, #40	@ 0x28
 8007ab8:	d12e      	bne.n	8007b18 <_strtod_l+0x380>
 8007aba:	4997      	ldr	r1, [pc, #604]	@ (8007d18 <_strtod_l+0x580>)
 8007abc:	aa1c      	add	r2, sp, #112	@ 0x70
 8007abe:	a819      	add	r0, sp, #100	@ 0x64
 8007ac0:	f001 fe64 	bl	800978c <__hexnan>
 8007ac4:	2805      	cmp	r0, #5
 8007ac6:	d127      	bne.n	8007b18 <_strtod_l+0x380>
 8007ac8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007aca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007ace:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007ad2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007ad6:	e698      	b.n	800780a <_strtod_l+0x72>
 8007ad8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007ada:	fb08 2101 	mla	r1, r8, r1, r2
 8007ade:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007ae2:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ae4:	e7b5      	b.n	8007a52 <_strtod_l+0x2ba>
 8007ae6:	2a6e      	cmp	r2, #110	@ 0x6e
 8007ae8:	e7da      	b.n	8007aa0 <_strtod_l+0x308>
 8007aea:	498c      	ldr	r1, [pc, #560]	@ (8007d1c <_strtod_l+0x584>)
 8007aec:	a819      	add	r0, sp, #100	@ 0x64
 8007aee:	f001 fe39 	bl	8009764 <__match>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	f43f aea4 	beq.w	8007840 <_strtod_l+0xa8>
 8007af8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007afa:	4989      	ldr	r1, [pc, #548]	@ (8007d20 <_strtod_l+0x588>)
 8007afc:	3b01      	subs	r3, #1
 8007afe:	a819      	add	r0, sp, #100	@ 0x64
 8007b00:	9319      	str	r3, [sp, #100]	@ 0x64
 8007b02:	f001 fe2f 	bl	8009764 <__match>
 8007b06:	b910      	cbnz	r0, 8007b0e <_strtod_l+0x376>
 8007b08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	9319      	str	r3, [sp, #100]	@ 0x64
 8007b0e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007d30 <_strtod_l+0x598>
 8007b12:	f04f 0a00 	mov.w	sl, #0
 8007b16:	e678      	b.n	800780a <_strtod_l+0x72>
 8007b18:	4882      	ldr	r0, [pc, #520]	@ (8007d24 <_strtod_l+0x58c>)
 8007b1a:	f000 fd3d 	bl	8008598 <nan>
 8007b1e:	ec5b ab10 	vmov	sl, fp, d0
 8007b22:	e672      	b.n	800780a <_strtod_l+0x72>
 8007b24:	eba8 0309 	sub.w	r3, r8, r9
 8007b28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b2c:	2f00      	cmp	r7, #0
 8007b2e:	bf08      	it	eq
 8007b30:	462f      	moveq	r7, r5
 8007b32:	2d10      	cmp	r5, #16
 8007b34:	462c      	mov	r4, r5
 8007b36:	bfa8      	it	ge
 8007b38:	2410      	movge	r4, #16
 8007b3a:	f7f8 fce3 	bl	8000504 <__aeabi_ui2d>
 8007b3e:	2d09      	cmp	r5, #9
 8007b40:	4682      	mov	sl, r0
 8007b42:	468b      	mov	fp, r1
 8007b44:	dc13      	bgt.n	8007b6e <_strtod_l+0x3d6>
 8007b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f43f ae5e 	beq.w	800780a <_strtod_l+0x72>
 8007b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b50:	dd78      	ble.n	8007c44 <_strtod_l+0x4ac>
 8007b52:	2b16      	cmp	r3, #22
 8007b54:	dc5f      	bgt.n	8007c16 <_strtod_l+0x47e>
 8007b56:	4974      	ldr	r1, [pc, #464]	@ (8007d28 <_strtod_l+0x590>)
 8007b58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b60:	4652      	mov	r2, sl
 8007b62:	465b      	mov	r3, fp
 8007b64:	f7f8 fd48 	bl	80005f8 <__aeabi_dmul>
 8007b68:	4682      	mov	sl, r0
 8007b6a:	468b      	mov	fp, r1
 8007b6c:	e64d      	b.n	800780a <_strtod_l+0x72>
 8007b6e:	4b6e      	ldr	r3, [pc, #440]	@ (8007d28 <_strtod_l+0x590>)
 8007b70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007b78:	f7f8 fd3e 	bl	80005f8 <__aeabi_dmul>
 8007b7c:	4682      	mov	sl, r0
 8007b7e:	9808      	ldr	r0, [sp, #32]
 8007b80:	468b      	mov	fp, r1
 8007b82:	f7f8 fcbf 	bl	8000504 <__aeabi_ui2d>
 8007b86:	4602      	mov	r2, r0
 8007b88:	460b      	mov	r3, r1
 8007b8a:	4650      	mov	r0, sl
 8007b8c:	4659      	mov	r1, fp
 8007b8e:	f7f8 fb7d 	bl	800028c <__adddf3>
 8007b92:	2d0f      	cmp	r5, #15
 8007b94:	4682      	mov	sl, r0
 8007b96:	468b      	mov	fp, r1
 8007b98:	ddd5      	ble.n	8007b46 <_strtod_l+0x3ae>
 8007b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b9c:	1b2c      	subs	r4, r5, r4
 8007b9e:	441c      	add	r4, r3
 8007ba0:	2c00      	cmp	r4, #0
 8007ba2:	f340 8096 	ble.w	8007cd2 <_strtod_l+0x53a>
 8007ba6:	f014 030f 	ands.w	r3, r4, #15
 8007baa:	d00a      	beq.n	8007bc2 <_strtod_l+0x42a>
 8007bac:	495e      	ldr	r1, [pc, #376]	@ (8007d28 <_strtod_l+0x590>)
 8007bae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007bb2:	4652      	mov	r2, sl
 8007bb4:	465b      	mov	r3, fp
 8007bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bba:	f7f8 fd1d 	bl	80005f8 <__aeabi_dmul>
 8007bbe:	4682      	mov	sl, r0
 8007bc0:	468b      	mov	fp, r1
 8007bc2:	f034 040f 	bics.w	r4, r4, #15
 8007bc6:	d073      	beq.n	8007cb0 <_strtod_l+0x518>
 8007bc8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007bcc:	dd48      	ble.n	8007c60 <_strtod_l+0x4c8>
 8007bce:	2400      	movs	r4, #0
 8007bd0:	46a0      	mov	r8, r4
 8007bd2:	940a      	str	r4, [sp, #40]	@ 0x28
 8007bd4:	46a1      	mov	r9, r4
 8007bd6:	9a05      	ldr	r2, [sp, #20]
 8007bd8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007d30 <_strtod_l+0x598>
 8007bdc:	2322      	movs	r3, #34	@ 0x22
 8007bde:	6013      	str	r3, [r2, #0]
 8007be0:	f04f 0a00 	mov.w	sl, #0
 8007be4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f43f ae0f 	beq.w	800780a <_strtod_l+0x72>
 8007bec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007bee:	9805      	ldr	r0, [sp, #20]
 8007bf0:	f002 f972 	bl	8009ed8 <_Bfree>
 8007bf4:	9805      	ldr	r0, [sp, #20]
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	f002 f96e 	bl	8009ed8 <_Bfree>
 8007bfc:	9805      	ldr	r0, [sp, #20]
 8007bfe:	4641      	mov	r1, r8
 8007c00:	f002 f96a 	bl	8009ed8 <_Bfree>
 8007c04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c06:	9805      	ldr	r0, [sp, #20]
 8007c08:	f002 f966 	bl	8009ed8 <_Bfree>
 8007c0c:	9805      	ldr	r0, [sp, #20]
 8007c0e:	4621      	mov	r1, r4
 8007c10:	f002 f962 	bl	8009ed8 <_Bfree>
 8007c14:	e5f9      	b.n	800780a <_strtod_l+0x72>
 8007c16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	dbbc      	blt.n	8007b9a <_strtod_l+0x402>
 8007c20:	4c41      	ldr	r4, [pc, #260]	@ (8007d28 <_strtod_l+0x590>)
 8007c22:	f1c5 050f 	rsb	r5, r5, #15
 8007c26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007c2a:	4652      	mov	r2, sl
 8007c2c:	465b      	mov	r3, fp
 8007c2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c32:	f7f8 fce1 	bl	80005f8 <__aeabi_dmul>
 8007c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c38:	1b5d      	subs	r5, r3, r5
 8007c3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007c3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007c42:	e78f      	b.n	8007b64 <_strtod_l+0x3cc>
 8007c44:	3316      	adds	r3, #22
 8007c46:	dba8      	blt.n	8007b9a <_strtod_l+0x402>
 8007c48:	4b37      	ldr	r3, [pc, #220]	@ (8007d28 <_strtod_l+0x590>)
 8007c4a:	eba9 0808 	sub.w	r8, r9, r8
 8007c4e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007c52:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007c56:	4650      	mov	r0, sl
 8007c58:	4659      	mov	r1, fp
 8007c5a:	f7f8 fdf7 	bl	800084c <__aeabi_ddiv>
 8007c5e:	e783      	b.n	8007b68 <_strtod_l+0x3d0>
 8007c60:	4b32      	ldr	r3, [pc, #200]	@ (8007d2c <_strtod_l+0x594>)
 8007c62:	9308      	str	r3, [sp, #32]
 8007c64:	2300      	movs	r3, #0
 8007c66:	1124      	asrs	r4, r4, #4
 8007c68:	4650      	mov	r0, sl
 8007c6a:	4659      	mov	r1, fp
 8007c6c:	461e      	mov	r6, r3
 8007c6e:	2c01      	cmp	r4, #1
 8007c70:	dc21      	bgt.n	8007cb6 <_strtod_l+0x51e>
 8007c72:	b10b      	cbz	r3, 8007c78 <_strtod_l+0x4e0>
 8007c74:	4682      	mov	sl, r0
 8007c76:	468b      	mov	fp, r1
 8007c78:	492c      	ldr	r1, [pc, #176]	@ (8007d2c <_strtod_l+0x594>)
 8007c7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007c7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007c82:	4652      	mov	r2, sl
 8007c84:	465b      	mov	r3, fp
 8007c86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c8a:	f7f8 fcb5 	bl	80005f8 <__aeabi_dmul>
 8007c8e:	4b28      	ldr	r3, [pc, #160]	@ (8007d30 <_strtod_l+0x598>)
 8007c90:	460a      	mov	r2, r1
 8007c92:	400b      	ands	r3, r1
 8007c94:	4927      	ldr	r1, [pc, #156]	@ (8007d34 <_strtod_l+0x59c>)
 8007c96:	428b      	cmp	r3, r1
 8007c98:	4682      	mov	sl, r0
 8007c9a:	d898      	bhi.n	8007bce <_strtod_l+0x436>
 8007c9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007ca0:	428b      	cmp	r3, r1
 8007ca2:	bf86      	itte	hi
 8007ca4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007d38 <_strtod_l+0x5a0>
 8007ca8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8007cac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	9308      	str	r3, [sp, #32]
 8007cb4:	e07a      	b.n	8007dac <_strtod_l+0x614>
 8007cb6:	07e2      	lsls	r2, r4, #31
 8007cb8:	d505      	bpl.n	8007cc6 <_strtod_l+0x52e>
 8007cba:	9b08      	ldr	r3, [sp, #32]
 8007cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc0:	f7f8 fc9a 	bl	80005f8 <__aeabi_dmul>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	9a08      	ldr	r2, [sp, #32]
 8007cc8:	3208      	adds	r2, #8
 8007cca:	3601      	adds	r6, #1
 8007ccc:	1064      	asrs	r4, r4, #1
 8007cce:	9208      	str	r2, [sp, #32]
 8007cd0:	e7cd      	b.n	8007c6e <_strtod_l+0x4d6>
 8007cd2:	d0ed      	beq.n	8007cb0 <_strtod_l+0x518>
 8007cd4:	4264      	negs	r4, r4
 8007cd6:	f014 020f 	ands.w	r2, r4, #15
 8007cda:	d00a      	beq.n	8007cf2 <_strtod_l+0x55a>
 8007cdc:	4b12      	ldr	r3, [pc, #72]	@ (8007d28 <_strtod_l+0x590>)
 8007cde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ce2:	4650      	mov	r0, sl
 8007ce4:	4659      	mov	r1, fp
 8007ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cea:	f7f8 fdaf 	bl	800084c <__aeabi_ddiv>
 8007cee:	4682      	mov	sl, r0
 8007cf0:	468b      	mov	fp, r1
 8007cf2:	1124      	asrs	r4, r4, #4
 8007cf4:	d0dc      	beq.n	8007cb0 <_strtod_l+0x518>
 8007cf6:	2c1f      	cmp	r4, #31
 8007cf8:	dd20      	ble.n	8007d3c <_strtod_l+0x5a4>
 8007cfa:	2400      	movs	r4, #0
 8007cfc:	46a0      	mov	r8, r4
 8007cfe:	940a      	str	r4, [sp, #40]	@ 0x28
 8007d00:	46a1      	mov	r9, r4
 8007d02:	9a05      	ldr	r2, [sp, #20]
 8007d04:	2322      	movs	r3, #34	@ 0x22
 8007d06:	f04f 0a00 	mov.w	sl, #0
 8007d0a:	f04f 0b00 	mov.w	fp, #0
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	e768      	b.n	8007be4 <_strtod_l+0x44c>
 8007d12:	bf00      	nop
 8007d14:	0800b389 	.word	0x0800b389
 8007d18:	0800b3b8 	.word	0x0800b3b8
 8007d1c:	0800b381 	.word	0x0800b381
 8007d20:	0800b514 	.word	0x0800b514
 8007d24:	0800b7a3 	.word	0x0800b7a3
 8007d28:	0800b6a0 	.word	0x0800b6a0
 8007d2c:	0800b678 	.word	0x0800b678
 8007d30:	7ff00000 	.word	0x7ff00000
 8007d34:	7ca00000 	.word	0x7ca00000
 8007d38:	7fefffff 	.word	0x7fefffff
 8007d3c:	f014 0310 	ands.w	r3, r4, #16
 8007d40:	bf18      	it	ne
 8007d42:	236a      	movne	r3, #106	@ 0x6a
 8007d44:	4ea9      	ldr	r6, [pc, #676]	@ (8007fec <_strtod_l+0x854>)
 8007d46:	9308      	str	r3, [sp, #32]
 8007d48:	4650      	mov	r0, sl
 8007d4a:	4659      	mov	r1, fp
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	07e2      	lsls	r2, r4, #31
 8007d50:	d504      	bpl.n	8007d5c <_strtod_l+0x5c4>
 8007d52:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d56:	f7f8 fc4f 	bl	80005f8 <__aeabi_dmul>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	1064      	asrs	r4, r4, #1
 8007d5e:	f106 0608 	add.w	r6, r6, #8
 8007d62:	d1f4      	bne.n	8007d4e <_strtod_l+0x5b6>
 8007d64:	b10b      	cbz	r3, 8007d6a <_strtod_l+0x5d2>
 8007d66:	4682      	mov	sl, r0
 8007d68:	468b      	mov	fp, r1
 8007d6a:	9b08      	ldr	r3, [sp, #32]
 8007d6c:	b1b3      	cbz	r3, 8007d9c <_strtod_l+0x604>
 8007d6e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007d72:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	4659      	mov	r1, fp
 8007d7a:	dd0f      	ble.n	8007d9c <_strtod_l+0x604>
 8007d7c:	2b1f      	cmp	r3, #31
 8007d7e:	dd55      	ble.n	8007e2c <_strtod_l+0x694>
 8007d80:	2b34      	cmp	r3, #52	@ 0x34
 8007d82:	bfde      	ittt	le
 8007d84:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007d88:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007d8c:	4093      	lslle	r3, r2
 8007d8e:	f04f 0a00 	mov.w	sl, #0
 8007d92:	bfcc      	ite	gt
 8007d94:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007d98:	ea03 0b01 	andle.w	fp, r3, r1
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	2300      	movs	r3, #0
 8007da0:	4650      	mov	r0, sl
 8007da2:	4659      	mov	r1, fp
 8007da4:	f7f8 fe90 	bl	8000ac8 <__aeabi_dcmpeq>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	d1a6      	bne.n	8007cfa <_strtod_l+0x562>
 8007dac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007db2:	9805      	ldr	r0, [sp, #20]
 8007db4:	462b      	mov	r3, r5
 8007db6:	463a      	mov	r2, r7
 8007db8:	f002 f8f6 	bl	8009fa8 <__s2b>
 8007dbc:	900a      	str	r0, [sp, #40]	@ 0x28
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	f43f af05 	beq.w	8007bce <_strtod_l+0x436>
 8007dc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dc6:	2a00      	cmp	r2, #0
 8007dc8:	eba9 0308 	sub.w	r3, r9, r8
 8007dcc:	bfa8      	it	ge
 8007dce:	2300      	movge	r3, #0
 8007dd0:	9312      	str	r3, [sp, #72]	@ 0x48
 8007dd2:	2400      	movs	r4, #0
 8007dd4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007dd8:	9316      	str	r3, [sp, #88]	@ 0x58
 8007dda:	46a0      	mov	r8, r4
 8007ddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dde:	9805      	ldr	r0, [sp, #20]
 8007de0:	6859      	ldr	r1, [r3, #4]
 8007de2:	f002 f839 	bl	8009e58 <_Balloc>
 8007de6:	4681      	mov	r9, r0
 8007de8:	2800      	cmp	r0, #0
 8007dea:	f43f aef4 	beq.w	8007bd6 <_strtod_l+0x43e>
 8007dee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007df0:	691a      	ldr	r2, [r3, #16]
 8007df2:	3202      	adds	r2, #2
 8007df4:	f103 010c 	add.w	r1, r3, #12
 8007df8:	0092      	lsls	r2, r2, #2
 8007dfa:	300c      	adds	r0, #12
 8007dfc:	f000 fbbb 	bl	8008576 <memcpy>
 8007e00:	ec4b ab10 	vmov	d0, sl, fp
 8007e04:	9805      	ldr	r0, [sp, #20]
 8007e06:	aa1c      	add	r2, sp, #112	@ 0x70
 8007e08:	a91b      	add	r1, sp, #108	@ 0x6c
 8007e0a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007e0e:	f002 fc07 	bl	800a620 <__d2b>
 8007e12:	901a      	str	r0, [sp, #104]	@ 0x68
 8007e14:	2800      	cmp	r0, #0
 8007e16:	f43f aede 	beq.w	8007bd6 <_strtod_l+0x43e>
 8007e1a:	9805      	ldr	r0, [sp, #20]
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	f002 f959 	bl	800a0d4 <__i2b>
 8007e22:	4680      	mov	r8, r0
 8007e24:	b948      	cbnz	r0, 8007e3a <_strtod_l+0x6a2>
 8007e26:	f04f 0800 	mov.w	r8, #0
 8007e2a:	e6d4      	b.n	8007bd6 <_strtod_l+0x43e>
 8007e2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e30:	fa02 f303 	lsl.w	r3, r2, r3
 8007e34:	ea03 0a0a 	and.w	sl, r3, sl
 8007e38:	e7b0      	b.n	8007d9c <_strtod_l+0x604>
 8007e3a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007e3c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007e3e:	2d00      	cmp	r5, #0
 8007e40:	bfab      	itete	ge
 8007e42:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007e44:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007e46:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007e48:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007e4a:	bfac      	ite	ge
 8007e4c:	18ef      	addge	r7, r5, r3
 8007e4e:	1b5e      	sublt	r6, r3, r5
 8007e50:	9b08      	ldr	r3, [sp, #32]
 8007e52:	1aed      	subs	r5, r5, r3
 8007e54:	4415      	add	r5, r2
 8007e56:	4b66      	ldr	r3, [pc, #408]	@ (8007ff0 <_strtod_l+0x858>)
 8007e58:	3d01      	subs	r5, #1
 8007e5a:	429d      	cmp	r5, r3
 8007e5c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007e60:	da50      	bge.n	8007f04 <_strtod_l+0x76c>
 8007e62:	1b5b      	subs	r3, r3, r5
 8007e64:	2b1f      	cmp	r3, #31
 8007e66:	eba2 0203 	sub.w	r2, r2, r3
 8007e6a:	f04f 0101 	mov.w	r1, #1
 8007e6e:	dc3d      	bgt.n	8007eec <_strtod_l+0x754>
 8007e70:	fa01 f303 	lsl.w	r3, r1, r3
 8007e74:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e76:	2300      	movs	r3, #0
 8007e78:	9310      	str	r3, [sp, #64]	@ 0x40
 8007e7a:	18bd      	adds	r5, r7, r2
 8007e7c:	9b08      	ldr	r3, [sp, #32]
 8007e7e:	42af      	cmp	r7, r5
 8007e80:	4416      	add	r6, r2
 8007e82:	441e      	add	r6, r3
 8007e84:	463b      	mov	r3, r7
 8007e86:	bfa8      	it	ge
 8007e88:	462b      	movge	r3, r5
 8007e8a:	42b3      	cmp	r3, r6
 8007e8c:	bfa8      	it	ge
 8007e8e:	4633      	movge	r3, r6
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	bfc2      	ittt	gt
 8007e94:	1aed      	subgt	r5, r5, r3
 8007e96:	1af6      	subgt	r6, r6, r3
 8007e98:	1aff      	subgt	r7, r7, r3
 8007e9a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	dd16      	ble.n	8007ece <_strtod_l+0x736>
 8007ea0:	4641      	mov	r1, r8
 8007ea2:	9805      	ldr	r0, [sp, #20]
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	f002 f9d5 	bl	800a254 <__pow5mult>
 8007eaa:	4680      	mov	r8, r0
 8007eac:	2800      	cmp	r0, #0
 8007eae:	d0ba      	beq.n	8007e26 <_strtod_l+0x68e>
 8007eb0:	4601      	mov	r1, r0
 8007eb2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007eb4:	9805      	ldr	r0, [sp, #20]
 8007eb6:	f002 f923 	bl	800a100 <__multiply>
 8007eba:	900e      	str	r0, [sp, #56]	@ 0x38
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	f43f ae8a 	beq.w	8007bd6 <_strtod_l+0x43e>
 8007ec2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ec4:	9805      	ldr	r0, [sp, #20]
 8007ec6:	f002 f807 	bl	8009ed8 <_Bfree>
 8007eca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ecc:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ece:	2d00      	cmp	r5, #0
 8007ed0:	dc1d      	bgt.n	8007f0e <_strtod_l+0x776>
 8007ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	dd23      	ble.n	8007f20 <_strtod_l+0x788>
 8007ed8:	4649      	mov	r1, r9
 8007eda:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007edc:	9805      	ldr	r0, [sp, #20]
 8007ede:	f002 f9b9 	bl	800a254 <__pow5mult>
 8007ee2:	4681      	mov	r9, r0
 8007ee4:	b9e0      	cbnz	r0, 8007f20 <_strtod_l+0x788>
 8007ee6:	f04f 0900 	mov.w	r9, #0
 8007eea:	e674      	b.n	8007bd6 <_strtod_l+0x43e>
 8007eec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007ef0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007ef4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007ef8:	35e2      	adds	r5, #226	@ 0xe2
 8007efa:	fa01 f305 	lsl.w	r3, r1, r5
 8007efe:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f00:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007f02:	e7ba      	b.n	8007e7a <_strtod_l+0x6e2>
 8007f04:	2300      	movs	r3, #0
 8007f06:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f08:	2301      	movs	r3, #1
 8007f0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f0c:	e7b5      	b.n	8007e7a <_strtod_l+0x6e2>
 8007f0e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f10:	9805      	ldr	r0, [sp, #20]
 8007f12:	462a      	mov	r2, r5
 8007f14:	f002 f9f8 	bl	800a308 <__lshift>
 8007f18:	901a      	str	r0, [sp, #104]	@ 0x68
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d1d9      	bne.n	8007ed2 <_strtod_l+0x73a>
 8007f1e:	e65a      	b.n	8007bd6 <_strtod_l+0x43e>
 8007f20:	2e00      	cmp	r6, #0
 8007f22:	dd07      	ble.n	8007f34 <_strtod_l+0x79c>
 8007f24:	4649      	mov	r1, r9
 8007f26:	9805      	ldr	r0, [sp, #20]
 8007f28:	4632      	mov	r2, r6
 8007f2a:	f002 f9ed 	bl	800a308 <__lshift>
 8007f2e:	4681      	mov	r9, r0
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d0d8      	beq.n	8007ee6 <_strtod_l+0x74e>
 8007f34:	2f00      	cmp	r7, #0
 8007f36:	dd08      	ble.n	8007f4a <_strtod_l+0x7b2>
 8007f38:	4641      	mov	r1, r8
 8007f3a:	9805      	ldr	r0, [sp, #20]
 8007f3c:	463a      	mov	r2, r7
 8007f3e:	f002 f9e3 	bl	800a308 <__lshift>
 8007f42:	4680      	mov	r8, r0
 8007f44:	2800      	cmp	r0, #0
 8007f46:	f43f ae46 	beq.w	8007bd6 <_strtod_l+0x43e>
 8007f4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f4c:	9805      	ldr	r0, [sp, #20]
 8007f4e:	464a      	mov	r2, r9
 8007f50:	f002 fa62 	bl	800a418 <__mdiff>
 8007f54:	4604      	mov	r4, r0
 8007f56:	2800      	cmp	r0, #0
 8007f58:	f43f ae3d 	beq.w	8007bd6 <_strtod_l+0x43e>
 8007f5c:	68c3      	ldr	r3, [r0, #12]
 8007f5e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f60:	2300      	movs	r3, #0
 8007f62:	60c3      	str	r3, [r0, #12]
 8007f64:	4641      	mov	r1, r8
 8007f66:	f002 fa3b 	bl	800a3e0 <__mcmp>
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	da46      	bge.n	8007ffc <_strtod_l+0x864>
 8007f6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f70:	ea53 030a 	orrs.w	r3, r3, sl
 8007f74:	d16c      	bne.n	8008050 <_strtod_l+0x8b8>
 8007f76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d168      	bne.n	8008050 <_strtod_l+0x8b8>
 8007f7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007f82:	0d1b      	lsrs	r3, r3, #20
 8007f84:	051b      	lsls	r3, r3, #20
 8007f86:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007f8a:	d961      	bls.n	8008050 <_strtod_l+0x8b8>
 8007f8c:	6963      	ldr	r3, [r4, #20]
 8007f8e:	b913      	cbnz	r3, 8007f96 <_strtod_l+0x7fe>
 8007f90:	6923      	ldr	r3, [r4, #16]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	dd5c      	ble.n	8008050 <_strtod_l+0x8b8>
 8007f96:	4621      	mov	r1, r4
 8007f98:	2201      	movs	r2, #1
 8007f9a:	9805      	ldr	r0, [sp, #20]
 8007f9c:	f002 f9b4 	bl	800a308 <__lshift>
 8007fa0:	4641      	mov	r1, r8
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	f002 fa1c 	bl	800a3e0 <__mcmp>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	dd51      	ble.n	8008050 <_strtod_l+0x8b8>
 8007fac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007fb0:	9a08      	ldr	r2, [sp, #32]
 8007fb2:	0d1b      	lsrs	r3, r3, #20
 8007fb4:	051b      	lsls	r3, r3, #20
 8007fb6:	2a00      	cmp	r2, #0
 8007fb8:	d06b      	beq.n	8008092 <_strtod_l+0x8fa>
 8007fba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007fbe:	d868      	bhi.n	8008092 <_strtod_l+0x8fa>
 8007fc0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007fc4:	f67f ae9d 	bls.w	8007d02 <_strtod_l+0x56a>
 8007fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ff4 <_strtod_l+0x85c>)
 8007fca:	4650      	mov	r0, sl
 8007fcc:	4659      	mov	r1, fp
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f7f8 fb12 	bl	80005f8 <__aeabi_dmul>
 8007fd4:	4b08      	ldr	r3, [pc, #32]	@ (8007ff8 <_strtod_l+0x860>)
 8007fd6:	400b      	ands	r3, r1
 8007fd8:	4682      	mov	sl, r0
 8007fda:	468b      	mov	fp, r1
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f47f ae05 	bne.w	8007bec <_strtod_l+0x454>
 8007fe2:	9a05      	ldr	r2, [sp, #20]
 8007fe4:	2322      	movs	r3, #34	@ 0x22
 8007fe6:	6013      	str	r3, [r2, #0]
 8007fe8:	e600      	b.n	8007bec <_strtod_l+0x454>
 8007fea:	bf00      	nop
 8007fec:	0800b3e0 	.word	0x0800b3e0
 8007ff0:	fffffc02 	.word	0xfffffc02
 8007ff4:	39500000 	.word	0x39500000
 8007ff8:	7ff00000 	.word	0x7ff00000
 8007ffc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008000:	d165      	bne.n	80080ce <_strtod_l+0x936>
 8008002:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008004:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008008:	b35a      	cbz	r2, 8008062 <_strtod_l+0x8ca>
 800800a:	4a9f      	ldr	r2, [pc, #636]	@ (8008288 <_strtod_l+0xaf0>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d12b      	bne.n	8008068 <_strtod_l+0x8d0>
 8008010:	9b08      	ldr	r3, [sp, #32]
 8008012:	4651      	mov	r1, sl
 8008014:	b303      	cbz	r3, 8008058 <_strtod_l+0x8c0>
 8008016:	4b9d      	ldr	r3, [pc, #628]	@ (800828c <_strtod_l+0xaf4>)
 8008018:	465a      	mov	r2, fp
 800801a:	4013      	ands	r3, r2
 800801c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008020:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008024:	d81b      	bhi.n	800805e <_strtod_l+0x8c6>
 8008026:	0d1b      	lsrs	r3, r3, #20
 8008028:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800802c:	fa02 f303 	lsl.w	r3, r2, r3
 8008030:	4299      	cmp	r1, r3
 8008032:	d119      	bne.n	8008068 <_strtod_l+0x8d0>
 8008034:	4b96      	ldr	r3, [pc, #600]	@ (8008290 <_strtod_l+0xaf8>)
 8008036:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008038:	429a      	cmp	r2, r3
 800803a:	d102      	bne.n	8008042 <_strtod_l+0x8aa>
 800803c:	3101      	adds	r1, #1
 800803e:	f43f adca 	beq.w	8007bd6 <_strtod_l+0x43e>
 8008042:	4b92      	ldr	r3, [pc, #584]	@ (800828c <_strtod_l+0xaf4>)
 8008044:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008046:	401a      	ands	r2, r3
 8008048:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800804c:	f04f 0a00 	mov.w	sl, #0
 8008050:	9b08      	ldr	r3, [sp, #32]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1b8      	bne.n	8007fc8 <_strtod_l+0x830>
 8008056:	e5c9      	b.n	8007bec <_strtod_l+0x454>
 8008058:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800805c:	e7e8      	b.n	8008030 <_strtod_l+0x898>
 800805e:	4613      	mov	r3, r2
 8008060:	e7e6      	b.n	8008030 <_strtod_l+0x898>
 8008062:	ea53 030a 	orrs.w	r3, r3, sl
 8008066:	d0a1      	beq.n	8007fac <_strtod_l+0x814>
 8008068:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800806a:	b1db      	cbz	r3, 80080a4 <_strtod_l+0x90c>
 800806c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800806e:	4213      	tst	r3, r2
 8008070:	d0ee      	beq.n	8008050 <_strtod_l+0x8b8>
 8008072:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008074:	9a08      	ldr	r2, [sp, #32]
 8008076:	4650      	mov	r0, sl
 8008078:	4659      	mov	r1, fp
 800807a:	b1bb      	cbz	r3, 80080ac <_strtod_l+0x914>
 800807c:	f7ff fb6c 	bl	8007758 <sulp>
 8008080:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008084:	ec53 2b10 	vmov	r2, r3, d0
 8008088:	f7f8 f900 	bl	800028c <__adddf3>
 800808c:	4682      	mov	sl, r0
 800808e:	468b      	mov	fp, r1
 8008090:	e7de      	b.n	8008050 <_strtod_l+0x8b8>
 8008092:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008096:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800809a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800809e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80080a2:	e7d5      	b.n	8008050 <_strtod_l+0x8b8>
 80080a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80080a6:	ea13 0f0a 	tst.w	r3, sl
 80080aa:	e7e1      	b.n	8008070 <_strtod_l+0x8d8>
 80080ac:	f7ff fb54 	bl	8007758 <sulp>
 80080b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080b4:	ec53 2b10 	vmov	r2, r3, d0
 80080b8:	f7f8 f8e6 	bl	8000288 <__aeabi_dsub>
 80080bc:	2200      	movs	r2, #0
 80080be:	2300      	movs	r3, #0
 80080c0:	4682      	mov	sl, r0
 80080c2:	468b      	mov	fp, r1
 80080c4:	f7f8 fd00 	bl	8000ac8 <__aeabi_dcmpeq>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d0c1      	beq.n	8008050 <_strtod_l+0x8b8>
 80080cc:	e619      	b.n	8007d02 <_strtod_l+0x56a>
 80080ce:	4641      	mov	r1, r8
 80080d0:	4620      	mov	r0, r4
 80080d2:	f002 fafd 	bl	800a6d0 <__ratio>
 80080d6:	ec57 6b10 	vmov	r6, r7, d0
 80080da:	2200      	movs	r2, #0
 80080dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80080e0:	4630      	mov	r0, r6
 80080e2:	4639      	mov	r1, r7
 80080e4:	f7f8 fd04 	bl	8000af0 <__aeabi_dcmple>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d06f      	beq.n	80081cc <_strtod_l+0xa34>
 80080ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d17a      	bne.n	80081e8 <_strtod_l+0xa50>
 80080f2:	f1ba 0f00 	cmp.w	sl, #0
 80080f6:	d158      	bne.n	80081aa <_strtod_l+0xa12>
 80080f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d15a      	bne.n	80081b8 <_strtod_l+0xa20>
 8008102:	4b64      	ldr	r3, [pc, #400]	@ (8008294 <_strtod_l+0xafc>)
 8008104:	2200      	movs	r2, #0
 8008106:	4630      	mov	r0, r6
 8008108:	4639      	mov	r1, r7
 800810a:	f7f8 fce7 	bl	8000adc <__aeabi_dcmplt>
 800810e:	2800      	cmp	r0, #0
 8008110:	d159      	bne.n	80081c6 <_strtod_l+0xa2e>
 8008112:	4630      	mov	r0, r6
 8008114:	4639      	mov	r1, r7
 8008116:	4b60      	ldr	r3, [pc, #384]	@ (8008298 <_strtod_l+0xb00>)
 8008118:	2200      	movs	r2, #0
 800811a:	f7f8 fa6d 	bl	80005f8 <__aeabi_dmul>
 800811e:	4606      	mov	r6, r0
 8008120:	460f      	mov	r7, r1
 8008122:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008126:	9606      	str	r6, [sp, #24]
 8008128:	9307      	str	r3, [sp, #28]
 800812a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800812e:	4d57      	ldr	r5, [pc, #348]	@ (800828c <_strtod_l+0xaf4>)
 8008130:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008134:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008136:	401d      	ands	r5, r3
 8008138:	4b58      	ldr	r3, [pc, #352]	@ (800829c <_strtod_l+0xb04>)
 800813a:	429d      	cmp	r5, r3
 800813c:	f040 80b2 	bne.w	80082a4 <_strtod_l+0xb0c>
 8008140:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008142:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008146:	ec4b ab10 	vmov	d0, sl, fp
 800814a:	f002 f9f9 	bl	800a540 <__ulp>
 800814e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008152:	ec51 0b10 	vmov	r0, r1, d0
 8008156:	f7f8 fa4f 	bl	80005f8 <__aeabi_dmul>
 800815a:	4652      	mov	r2, sl
 800815c:	465b      	mov	r3, fp
 800815e:	f7f8 f895 	bl	800028c <__adddf3>
 8008162:	460b      	mov	r3, r1
 8008164:	4949      	ldr	r1, [pc, #292]	@ (800828c <_strtod_l+0xaf4>)
 8008166:	4a4e      	ldr	r2, [pc, #312]	@ (80082a0 <_strtod_l+0xb08>)
 8008168:	4019      	ands	r1, r3
 800816a:	4291      	cmp	r1, r2
 800816c:	4682      	mov	sl, r0
 800816e:	d942      	bls.n	80081f6 <_strtod_l+0xa5e>
 8008170:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008172:	4b47      	ldr	r3, [pc, #284]	@ (8008290 <_strtod_l+0xaf8>)
 8008174:	429a      	cmp	r2, r3
 8008176:	d103      	bne.n	8008180 <_strtod_l+0x9e8>
 8008178:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800817a:	3301      	adds	r3, #1
 800817c:	f43f ad2b 	beq.w	8007bd6 <_strtod_l+0x43e>
 8008180:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008290 <_strtod_l+0xaf8>
 8008184:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008188:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800818a:	9805      	ldr	r0, [sp, #20]
 800818c:	f001 fea4 	bl	8009ed8 <_Bfree>
 8008190:	9805      	ldr	r0, [sp, #20]
 8008192:	4649      	mov	r1, r9
 8008194:	f001 fea0 	bl	8009ed8 <_Bfree>
 8008198:	9805      	ldr	r0, [sp, #20]
 800819a:	4641      	mov	r1, r8
 800819c:	f001 fe9c 	bl	8009ed8 <_Bfree>
 80081a0:	9805      	ldr	r0, [sp, #20]
 80081a2:	4621      	mov	r1, r4
 80081a4:	f001 fe98 	bl	8009ed8 <_Bfree>
 80081a8:	e618      	b.n	8007ddc <_strtod_l+0x644>
 80081aa:	f1ba 0f01 	cmp.w	sl, #1
 80081ae:	d103      	bne.n	80081b8 <_strtod_l+0xa20>
 80081b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f43f ada5 	beq.w	8007d02 <_strtod_l+0x56a>
 80081b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008268 <_strtod_l+0xad0>
 80081bc:	4f35      	ldr	r7, [pc, #212]	@ (8008294 <_strtod_l+0xafc>)
 80081be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80081c2:	2600      	movs	r6, #0
 80081c4:	e7b1      	b.n	800812a <_strtod_l+0x992>
 80081c6:	4f34      	ldr	r7, [pc, #208]	@ (8008298 <_strtod_l+0xb00>)
 80081c8:	2600      	movs	r6, #0
 80081ca:	e7aa      	b.n	8008122 <_strtod_l+0x98a>
 80081cc:	4b32      	ldr	r3, [pc, #200]	@ (8008298 <_strtod_l+0xb00>)
 80081ce:	4630      	mov	r0, r6
 80081d0:	4639      	mov	r1, r7
 80081d2:	2200      	movs	r2, #0
 80081d4:	f7f8 fa10 	bl	80005f8 <__aeabi_dmul>
 80081d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081da:	4606      	mov	r6, r0
 80081dc:	460f      	mov	r7, r1
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d09f      	beq.n	8008122 <_strtod_l+0x98a>
 80081e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80081e6:	e7a0      	b.n	800812a <_strtod_l+0x992>
 80081e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008270 <_strtod_l+0xad8>
 80081ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80081f0:	ec57 6b17 	vmov	r6, r7, d7
 80081f4:	e799      	b.n	800812a <_strtod_l+0x992>
 80081f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80081fa:	9b08      	ldr	r3, [sp, #32]
 80081fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1c1      	bne.n	8008188 <_strtod_l+0x9f0>
 8008204:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008208:	0d1b      	lsrs	r3, r3, #20
 800820a:	051b      	lsls	r3, r3, #20
 800820c:	429d      	cmp	r5, r3
 800820e:	d1bb      	bne.n	8008188 <_strtod_l+0x9f0>
 8008210:	4630      	mov	r0, r6
 8008212:	4639      	mov	r1, r7
 8008214:	f7f8 fd50 	bl	8000cb8 <__aeabi_d2lz>
 8008218:	f7f8 f9c0 	bl	800059c <__aeabi_l2d>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	4630      	mov	r0, r6
 8008222:	4639      	mov	r1, r7
 8008224:	f7f8 f830 	bl	8000288 <__aeabi_dsub>
 8008228:	460b      	mov	r3, r1
 800822a:	4602      	mov	r2, r0
 800822c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008230:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008236:	ea46 060a 	orr.w	r6, r6, sl
 800823a:	431e      	orrs	r6, r3
 800823c:	d06f      	beq.n	800831e <_strtod_l+0xb86>
 800823e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008278 <_strtod_l+0xae0>)
 8008240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008244:	f7f8 fc4a 	bl	8000adc <__aeabi_dcmplt>
 8008248:	2800      	cmp	r0, #0
 800824a:	f47f accf 	bne.w	8007bec <_strtod_l+0x454>
 800824e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008280 <_strtod_l+0xae8>)
 8008250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008254:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008258:	f7f8 fc5e 	bl	8000b18 <__aeabi_dcmpgt>
 800825c:	2800      	cmp	r0, #0
 800825e:	d093      	beq.n	8008188 <_strtod_l+0x9f0>
 8008260:	e4c4      	b.n	8007bec <_strtod_l+0x454>
 8008262:	bf00      	nop
 8008264:	f3af 8000 	nop.w
 8008268:	00000000 	.word	0x00000000
 800826c:	bff00000 	.word	0xbff00000
 8008270:	00000000 	.word	0x00000000
 8008274:	3ff00000 	.word	0x3ff00000
 8008278:	94a03595 	.word	0x94a03595
 800827c:	3fdfffff 	.word	0x3fdfffff
 8008280:	35afe535 	.word	0x35afe535
 8008284:	3fe00000 	.word	0x3fe00000
 8008288:	000fffff 	.word	0x000fffff
 800828c:	7ff00000 	.word	0x7ff00000
 8008290:	7fefffff 	.word	0x7fefffff
 8008294:	3ff00000 	.word	0x3ff00000
 8008298:	3fe00000 	.word	0x3fe00000
 800829c:	7fe00000 	.word	0x7fe00000
 80082a0:	7c9fffff 	.word	0x7c9fffff
 80082a4:	9b08      	ldr	r3, [sp, #32]
 80082a6:	b323      	cbz	r3, 80082f2 <_strtod_l+0xb5a>
 80082a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80082ac:	d821      	bhi.n	80082f2 <_strtod_l+0xb5a>
 80082ae:	a328      	add	r3, pc, #160	@ (adr r3, 8008350 <_strtod_l+0xbb8>)
 80082b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b4:	4630      	mov	r0, r6
 80082b6:	4639      	mov	r1, r7
 80082b8:	f7f8 fc1a 	bl	8000af0 <__aeabi_dcmple>
 80082bc:	b1a0      	cbz	r0, 80082e8 <_strtod_l+0xb50>
 80082be:	4639      	mov	r1, r7
 80082c0:	4630      	mov	r0, r6
 80082c2:	f7f8 fc71 	bl	8000ba8 <__aeabi_d2uiz>
 80082c6:	2801      	cmp	r0, #1
 80082c8:	bf38      	it	cc
 80082ca:	2001      	movcc	r0, #1
 80082cc:	f7f8 f91a 	bl	8000504 <__aeabi_ui2d>
 80082d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082d2:	4606      	mov	r6, r0
 80082d4:	460f      	mov	r7, r1
 80082d6:	b9fb      	cbnz	r3, 8008318 <_strtod_l+0xb80>
 80082d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80082dc:	9014      	str	r0, [sp, #80]	@ 0x50
 80082de:	9315      	str	r3, [sp, #84]	@ 0x54
 80082e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80082e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80082e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80082ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80082ee:	1b5b      	subs	r3, r3, r5
 80082f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80082f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80082f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80082fa:	f002 f921 	bl	800a540 <__ulp>
 80082fe:	4650      	mov	r0, sl
 8008300:	ec53 2b10 	vmov	r2, r3, d0
 8008304:	4659      	mov	r1, fp
 8008306:	f7f8 f977 	bl	80005f8 <__aeabi_dmul>
 800830a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800830e:	f7f7 ffbd 	bl	800028c <__adddf3>
 8008312:	4682      	mov	sl, r0
 8008314:	468b      	mov	fp, r1
 8008316:	e770      	b.n	80081fa <_strtod_l+0xa62>
 8008318:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800831c:	e7e0      	b.n	80082e0 <_strtod_l+0xb48>
 800831e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008358 <_strtod_l+0xbc0>)
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	f7f8 fbda 	bl	8000adc <__aeabi_dcmplt>
 8008328:	e798      	b.n	800825c <_strtod_l+0xac4>
 800832a:	2300      	movs	r3, #0
 800832c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800832e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008330:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008332:	6013      	str	r3, [r2, #0]
 8008334:	f7ff ba6d 	b.w	8007812 <_strtod_l+0x7a>
 8008338:	2a65      	cmp	r2, #101	@ 0x65
 800833a:	f43f ab66 	beq.w	8007a0a <_strtod_l+0x272>
 800833e:	2a45      	cmp	r2, #69	@ 0x45
 8008340:	f43f ab63 	beq.w	8007a0a <_strtod_l+0x272>
 8008344:	2301      	movs	r3, #1
 8008346:	f7ff bb9e 	b.w	8007a86 <_strtod_l+0x2ee>
 800834a:	bf00      	nop
 800834c:	f3af 8000 	nop.w
 8008350:	ffc00000 	.word	0xffc00000
 8008354:	41dfffff 	.word	0x41dfffff
 8008358:	94a03595 	.word	0x94a03595
 800835c:	3fcfffff 	.word	0x3fcfffff

08008360 <_strtod_r>:
 8008360:	4b01      	ldr	r3, [pc, #4]	@ (8008368 <_strtod_r+0x8>)
 8008362:	f7ff ba19 	b.w	8007798 <_strtod_l>
 8008366:	bf00      	nop
 8008368:	20000030 	.word	0x20000030

0800836c <_strtol_l.constprop.0>:
 800836c:	2b24      	cmp	r3, #36	@ 0x24
 800836e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008372:	4686      	mov	lr, r0
 8008374:	4690      	mov	r8, r2
 8008376:	d801      	bhi.n	800837c <_strtol_l.constprop.0+0x10>
 8008378:	2b01      	cmp	r3, #1
 800837a:	d106      	bne.n	800838a <_strtol_l.constprop.0+0x1e>
 800837c:	f000 f8ce 	bl	800851c <__errno>
 8008380:	2316      	movs	r3, #22
 8008382:	6003      	str	r3, [r0, #0]
 8008384:	2000      	movs	r0, #0
 8008386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800838a:	4834      	ldr	r0, [pc, #208]	@ (800845c <_strtol_l.constprop.0+0xf0>)
 800838c:	460d      	mov	r5, r1
 800838e:	462a      	mov	r2, r5
 8008390:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008394:	5d06      	ldrb	r6, [r0, r4]
 8008396:	f016 0608 	ands.w	r6, r6, #8
 800839a:	d1f8      	bne.n	800838e <_strtol_l.constprop.0+0x22>
 800839c:	2c2d      	cmp	r4, #45	@ 0x2d
 800839e:	d12d      	bne.n	80083fc <_strtol_l.constprop.0+0x90>
 80083a0:	782c      	ldrb	r4, [r5, #0]
 80083a2:	2601      	movs	r6, #1
 80083a4:	1c95      	adds	r5, r2, #2
 80083a6:	f033 0210 	bics.w	r2, r3, #16
 80083aa:	d109      	bne.n	80083c0 <_strtol_l.constprop.0+0x54>
 80083ac:	2c30      	cmp	r4, #48	@ 0x30
 80083ae:	d12a      	bne.n	8008406 <_strtol_l.constprop.0+0x9a>
 80083b0:	782a      	ldrb	r2, [r5, #0]
 80083b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80083b6:	2a58      	cmp	r2, #88	@ 0x58
 80083b8:	d125      	bne.n	8008406 <_strtol_l.constprop.0+0x9a>
 80083ba:	786c      	ldrb	r4, [r5, #1]
 80083bc:	2310      	movs	r3, #16
 80083be:	3502      	adds	r5, #2
 80083c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80083c4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80083c8:	2200      	movs	r2, #0
 80083ca:	fbbc f9f3 	udiv	r9, ip, r3
 80083ce:	4610      	mov	r0, r2
 80083d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80083d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80083d8:	2f09      	cmp	r7, #9
 80083da:	d81b      	bhi.n	8008414 <_strtol_l.constprop.0+0xa8>
 80083dc:	463c      	mov	r4, r7
 80083de:	42a3      	cmp	r3, r4
 80083e0:	dd27      	ble.n	8008432 <_strtol_l.constprop.0+0xc6>
 80083e2:	1c57      	adds	r7, r2, #1
 80083e4:	d007      	beq.n	80083f6 <_strtol_l.constprop.0+0x8a>
 80083e6:	4581      	cmp	r9, r0
 80083e8:	d320      	bcc.n	800842c <_strtol_l.constprop.0+0xc0>
 80083ea:	d101      	bne.n	80083f0 <_strtol_l.constprop.0+0x84>
 80083ec:	45a2      	cmp	sl, r4
 80083ee:	db1d      	blt.n	800842c <_strtol_l.constprop.0+0xc0>
 80083f0:	fb00 4003 	mla	r0, r0, r3, r4
 80083f4:	2201      	movs	r2, #1
 80083f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083fa:	e7eb      	b.n	80083d4 <_strtol_l.constprop.0+0x68>
 80083fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80083fe:	bf04      	itt	eq
 8008400:	782c      	ldrbeq	r4, [r5, #0]
 8008402:	1c95      	addeq	r5, r2, #2
 8008404:	e7cf      	b.n	80083a6 <_strtol_l.constprop.0+0x3a>
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1da      	bne.n	80083c0 <_strtol_l.constprop.0+0x54>
 800840a:	2c30      	cmp	r4, #48	@ 0x30
 800840c:	bf0c      	ite	eq
 800840e:	2308      	moveq	r3, #8
 8008410:	230a      	movne	r3, #10
 8008412:	e7d5      	b.n	80083c0 <_strtol_l.constprop.0+0x54>
 8008414:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008418:	2f19      	cmp	r7, #25
 800841a:	d801      	bhi.n	8008420 <_strtol_l.constprop.0+0xb4>
 800841c:	3c37      	subs	r4, #55	@ 0x37
 800841e:	e7de      	b.n	80083de <_strtol_l.constprop.0+0x72>
 8008420:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008424:	2f19      	cmp	r7, #25
 8008426:	d804      	bhi.n	8008432 <_strtol_l.constprop.0+0xc6>
 8008428:	3c57      	subs	r4, #87	@ 0x57
 800842a:	e7d8      	b.n	80083de <_strtol_l.constprop.0+0x72>
 800842c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008430:	e7e1      	b.n	80083f6 <_strtol_l.constprop.0+0x8a>
 8008432:	1c53      	adds	r3, r2, #1
 8008434:	d108      	bne.n	8008448 <_strtol_l.constprop.0+0xdc>
 8008436:	2322      	movs	r3, #34	@ 0x22
 8008438:	f8ce 3000 	str.w	r3, [lr]
 800843c:	4660      	mov	r0, ip
 800843e:	f1b8 0f00 	cmp.w	r8, #0
 8008442:	d0a0      	beq.n	8008386 <_strtol_l.constprop.0+0x1a>
 8008444:	1e69      	subs	r1, r5, #1
 8008446:	e006      	b.n	8008456 <_strtol_l.constprop.0+0xea>
 8008448:	b106      	cbz	r6, 800844c <_strtol_l.constprop.0+0xe0>
 800844a:	4240      	negs	r0, r0
 800844c:	f1b8 0f00 	cmp.w	r8, #0
 8008450:	d099      	beq.n	8008386 <_strtol_l.constprop.0+0x1a>
 8008452:	2a00      	cmp	r2, #0
 8008454:	d1f6      	bne.n	8008444 <_strtol_l.constprop.0+0xd8>
 8008456:	f8c8 1000 	str.w	r1, [r8]
 800845a:	e794      	b.n	8008386 <_strtol_l.constprop.0+0x1a>
 800845c:	0800b411 	.word	0x0800b411

08008460 <_strtol_r>:
 8008460:	f7ff bf84 	b.w	800836c <_strtol_l.constprop.0>

08008464 <_fwalk_sglue>:
 8008464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008468:	4607      	mov	r7, r0
 800846a:	4688      	mov	r8, r1
 800846c:	4614      	mov	r4, r2
 800846e:	2600      	movs	r6, #0
 8008470:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008474:	f1b9 0901 	subs.w	r9, r9, #1
 8008478:	d505      	bpl.n	8008486 <_fwalk_sglue+0x22>
 800847a:	6824      	ldr	r4, [r4, #0]
 800847c:	2c00      	cmp	r4, #0
 800847e:	d1f7      	bne.n	8008470 <_fwalk_sglue+0xc>
 8008480:	4630      	mov	r0, r6
 8008482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008486:	89ab      	ldrh	r3, [r5, #12]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d907      	bls.n	800849c <_fwalk_sglue+0x38>
 800848c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008490:	3301      	adds	r3, #1
 8008492:	d003      	beq.n	800849c <_fwalk_sglue+0x38>
 8008494:	4629      	mov	r1, r5
 8008496:	4638      	mov	r0, r7
 8008498:	47c0      	blx	r8
 800849a:	4306      	orrs	r6, r0
 800849c:	3568      	adds	r5, #104	@ 0x68
 800849e:	e7e9      	b.n	8008474 <_fwalk_sglue+0x10>

080084a0 <strcat>:
 80084a0:	b510      	push	{r4, lr}
 80084a2:	4602      	mov	r2, r0
 80084a4:	7814      	ldrb	r4, [r2, #0]
 80084a6:	4613      	mov	r3, r2
 80084a8:	3201      	adds	r2, #1
 80084aa:	2c00      	cmp	r4, #0
 80084ac:	d1fa      	bne.n	80084a4 <strcat+0x4>
 80084ae:	3b01      	subs	r3, #1
 80084b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084b4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084b8:	2a00      	cmp	r2, #0
 80084ba:	d1f9      	bne.n	80084b0 <strcat+0x10>
 80084bc:	bd10      	pop	{r4, pc}

080084be <strncmp>:
 80084be:	b510      	push	{r4, lr}
 80084c0:	b16a      	cbz	r2, 80084de <strncmp+0x20>
 80084c2:	3901      	subs	r1, #1
 80084c4:	1884      	adds	r4, r0, r2
 80084c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084ca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d103      	bne.n	80084da <strncmp+0x1c>
 80084d2:	42a0      	cmp	r0, r4
 80084d4:	d001      	beq.n	80084da <strncmp+0x1c>
 80084d6:	2a00      	cmp	r2, #0
 80084d8:	d1f5      	bne.n	80084c6 <strncmp+0x8>
 80084da:	1ad0      	subs	r0, r2, r3
 80084dc:	bd10      	pop	{r4, pc}
 80084de:	4610      	mov	r0, r2
 80084e0:	e7fc      	b.n	80084dc <strncmp+0x1e>

080084e2 <memcmp>:
 80084e2:	b510      	push	{r4, lr}
 80084e4:	3901      	subs	r1, #1
 80084e6:	4402      	add	r2, r0
 80084e8:	4290      	cmp	r0, r2
 80084ea:	d101      	bne.n	80084f0 <memcmp+0xe>
 80084ec:	2000      	movs	r0, #0
 80084ee:	e005      	b.n	80084fc <memcmp+0x1a>
 80084f0:	7803      	ldrb	r3, [r0, #0]
 80084f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80084f6:	42a3      	cmp	r3, r4
 80084f8:	d001      	beq.n	80084fe <memcmp+0x1c>
 80084fa:	1b18      	subs	r0, r3, r4
 80084fc:	bd10      	pop	{r4, pc}
 80084fe:	3001      	adds	r0, #1
 8008500:	e7f2      	b.n	80084e8 <memcmp+0x6>

08008502 <memset>:
 8008502:	4402      	add	r2, r0
 8008504:	4603      	mov	r3, r0
 8008506:	4293      	cmp	r3, r2
 8008508:	d100      	bne.n	800850c <memset+0xa>
 800850a:	4770      	bx	lr
 800850c:	f803 1b01 	strb.w	r1, [r3], #1
 8008510:	e7f9      	b.n	8008506 <memset+0x4>
	...

08008514 <_localeconv_r>:
 8008514:	4800      	ldr	r0, [pc, #0]	@ (8008518 <_localeconv_r+0x4>)
 8008516:	4770      	bx	lr
 8008518:	20000120 	.word	0x20000120

0800851c <__errno>:
 800851c:	4b01      	ldr	r3, [pc, #4]	@ (8008524 <__errno+0x8>)
 800851e:	6818      	ldr	r0, [r3, #0]
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	2000019c 	.word	0x2000019c

08008528 <__libc_init_array>:
 8008528:	b570      	push	{r4, r5, r6, lr}
 800852a:	4d0d      	ldr	r5, [pc, #52]	@ (8008560 <__libc_init_array+0x38>)
 800852c:	4c0d      	ldr	r4, [pc, #52]	@ (8008564 <__libc_init_array+0x3c>)
 800852e:	1b64      	subs	r4, r4, r5
 8008530:	10a4      	asrs	r4, r4, #2
 8008532:	2600      	movs	r6, #0
 8008534:	42a6      	cmp	r6, r4
 8008536:	d109      	bne.n	800854c <__libc_init_array+0x24>
 8008538:	4d0b      	ldr	r5, [pc, #44]	@ (8008568 <__libc_init_array+0x40>)
 800853a:	4c0c      	ldr	r4, [pc, #48]	@ (800856c <__libc_init_array+0x44>)
 800853c:	f002 fe6e 	bl	800b21c <_init>
 8008540:	1b64      	subs	r4, r4, r5
 8008542:	10a4      	asrs	r4, r4, #2
 8008544:	2600      	movs	r6, #0
 8008546:	42a6      	cmp	r6, r4
 8008548:	d105      	bne.n	8008556 <__libc_init_array+0x2e>
 800854a:	bd70      	pop	{r4, r5, r6, pc}
 800854c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008550:	4798      	blx	r3
 8008552:	3601      	adds	r6, #1
 8008554:	e7ee      	b.n	8008534 <__libc_init_array+0xc>
 8008556:	f855 3b04 	ldr.w	r3, [r5], #4
 800855a:	4798      	blx	r3
 800855c:	3601      	adds	r6, #1
 800855e:	e7f2      	b.n	8008546 <__libc_init_array+0x1e>
 8008560:	0800b7ac 	.word	0x0800b7ac
 8008564:	0800b7ac 	.word	0x0800b7ac
 8008568:	0800b7ac 	.word	0x0800b7ac
 800856c:	0800b7b0 	.word	0x0800b7b0

08008570 <__retarget_lock_init_recursive>:
 8008570:	4770      	bx	lr

08008572 <__retarget_lock_acquire_recursive>:
 8008572:	4770      	bx	lr

08008574 <__retarget_lock_release_recursive>:
 8008574:	4770      	bx	lr

08008576 <memcpy>:
 8008576:	440a      	add	r2, r1
 8008578:	4291      	cmp	r1, r2
 800857a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800857e:	d100      	bne.n	8008582 <memcpy+0xc>
 8008580:	4770      	bx	lr
 8008582:	b510      	push	{r4, lr}
 8008584:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008588:	f803 4f01 	strb.w	r4, [r3, #1]!
 800858c:	4291      	cmp	r1, r2
 800858e:	d1f9      	bne.n	8008584 <memcpy+0xe>
 8008590:	bd10      	pop	{r4, pc}
 8008592:	0000      	movs	r0, r0
 8008594:	0000      	movs	r0, r0
	...

08008598 <nan>:
 8008598:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80085a0 <nan+0x8>
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	00000000 	.word	0x00000000
 80085a4:	7ff80000 	.word	0x7ff80000

080085a8 <nanf>:
 80085a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80085b0 <nanf+0x8>
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	7fc00000 	.word	0x7fc00000

080085b4 <quorem>:
 80085b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b8:	6903      	ldr	r3, [r0, #16]
 80085ba:	690c      	ldr	r4, [r1, #16]
 80085bc:	42a3      	cmp	r3, r4
 80085be:	4607      	mov	r7, r0
 80085c0:	db7e      	blt.n	80086c0 <quorem+0x10c>
 80085c2:	3c01      	subs	r4, #1
 80085c4:	f101 0814 	add.w	r8, r1, #20
 80085c8:	00a3      	lsls	r3, r4, #2
 80085ca:	f100 0514 	add.w	r5, r0, #20
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80085da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085de:	3301      	adds	r3, #1
 80085e0:	429a      	cmp	r2, r3
 80085e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80085e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80085ea:	d32e      	bcc.n	800864a <quorem+0x96>
 80085ec:	f04f 0a00 	mov.w	sl, #0
 80085f0:	46c4      	mov	ip, r8
 80085f2:	46ae      	mov	lr, r5
 80085f4:	46d3      	mov	fp, sl
 80085f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80085fa:	b298      	uxth	r0, r3
 80085fc:	fb06 a000 	mla	r0, r6, r0, sl
 8008600:	0c02      	lsrs	r2, r0, #16
 8008602:	0c1b      	lsrs	r3, r3, #16
 8008604:	fb06 2303 	mla	r3, r6, r3, r2
 8008608:	f8de 2000 	ldr.w	r2, [lr]
 800860c:	b280      	uxth	r0, r0
 800860e:	b292      	uxth	r2, r2
 8008610:	1a12      	subs	r2, r2, r0
 8008612:	445a      	add	r2, fp
 8008614:	f8de 0000 	ldr.w	r0, [lr]
 8008618:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800861c:	b29b      	uxth	r3, r3
 800861e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008622:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008626:	b292      	uxth	r2, r2
 8008628:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800862c:	45e1      	cmp	r9, ip
 800862e:	f84e 2b04 	str.w	r2, [lr], #4
 8008632:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008636:	d2de      	bcs.n	80085f6 <quorem+0x42>
 8008638:	9b00      	ldr	r3, [sp, #0]
 800863a:	58eb      	ldr	r3, [r5, r3]
 800863c:	b92b      	cbnz	r3, 800864a <quorem+0x96>
 800863e:	9b01      	ldr	r3, [sp, #4]
 8008640:	3b04      	subs	r3, #4
 8008642:	429d      	cmp	r5, r3
 8008644:	461a      	mov	r2, r3
 8008646:	d32f      	bcc.n	80086a8 <quorem+0xf4>
 8008648:	613c      	str	r4, [r7, #16]
 800864a:	4638      	mov	r0, r7
 800864c:	f001 fec8 	bl	800a3e0 <__mcmp>
 8008650:	2800      	cmp	r0, #0
 8008652:	db25      	blt.n	80086a0 <quorem+0xec>
 8008654:	4629      	mov	r1, r5
 8008656:	2000      	movs	r0, #0
 8008658:	f858 2b04 	ldr.w	r2, [r8], #4
 800865c:	f8d1 c000 	ldr.w	ip, [r1]
 8008660:	fa1f fe82 	uxth.w	lr, r2
 8008664:	fa1f f38c 	uxth.w	r3, ip
 8008668:	eba3 030e 	sub.w	r3, r3, lr
 800866c:	4403      	add	r3, r0
 800866e:	0c12      	lsrs	r2, r2, #16
 8008670:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008674:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008678:	b29b      	uxth	r3, r3
 800867a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800867e:	45c1      	cmp	r9, r8
 8008680:	f841 3b04 	str.w	r3, [r1], #4
 8008684:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008688:	d2e6      	bcs.n	8008658 <quorem+0xa4>
 800868a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800868e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008692:	b922      	cbnz	r2, 800869e <quorem+0xea>
 8008694:	3b04      	subs	r3, #4
 8008696:	429d      	cmp	r5, r3
 8008698:	461a      	mov	r2, r3
 800869a:	d30b      	bcc.n	80086b4 <quorem+0x100>
 800869c:	613c      	str	r4, [r7, #16]
 800869e:	3601      	adds	r6, #1
 80086a0:	4630      	mov	r0, r6
 80086a2:	b003      	add	sp, #12
 80086a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a8:	6812      	ldr	r2, [r2, #0]
 80086aa:	3b04      	subs	r3, #4
 80086ac:	2a00      	cmp	r2, #0
 80086ae:	d1cb      	bne.n	8008648 <quorem+0x94>
 80086b0:	3c01      	subs	r4, #1
 80086b2:	e7c6      	b.n	8008642 <quorem+0x8e>
 80086b4:	6812      	ldr	r2, [r2, #0]
 80086b6:	3b04      	subs	r3, #4
 80086b8:	2a00      	cmp	r2, #0
 80086ba:	d1ef      	bne.n	800869c <quorem+0xe8>
 80086bc:	3c01      	subs	r4, #1
 80086be:	e7ea      	b.n	8008696 <quorem+0xe2>
 80086c0:	2000      	movs	r0, #0
 80086c2:	e7ee      	b.n	80086a2 <quorem+0xee>
 80086c4:	0000      	movs	r0, r0
	...

080086c8 <_dtoa_r>:
 80086c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086cc:	69c7      	ldr	r7, [r0, #28]
 80086ce:	b099      	sub	sp, #100	@ 0x64
 80086d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80086d4:	ec55 4b10 	vmov	r4, r5, d0
 80086d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80086da:	9109      	str	r1, [sp, #36]	@ 0x24
 80086dc:	4683      	mov	fp, r0
 80086de:	920e      	str	r2, [sp, #56]	@ 0x38
 80086e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80086e2:	b97f      	cbnz	r7, 8008704 <_dtoa_r+0x3c>
 80086e4:	2010      	movs	r0, #16
 80086e6:	f001 fa43 	bl	8009b70 <malloc>
 80086ea:	4602      	mov	r2, r0
 80086ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80086f0:	b920      	cbnz	r0, 80086fc <_dtoa_r+0x34>
 80086f2:	4ba7      	ldr	r3, [pc, #668]	@ (8008990 <_dtoa_r+0x2c8>)
 80086f4:	21ef      	movs	r1, #239	@ 0xef
 80086f6:	48a7      	ldr	r0, [pc, #668]	@ (8008994 <_dtoa_r+0x2cc>)
 80086f8:	f002 fa68 	bl	800abcc <__assert_func>
 80086fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008700:	6007      	str	r7, [r0, #0]
 8008702:	60c7      	str	r7, [r0, #12]
 8008704:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008708:	6819      	ldr	r1, [r3, #0]
 800870a:	b159      	cbz	r1, 8008724 <_dtoa_r+0x5c>
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	604a      	str	r2, [r1, #4]
 8008710:	2301      	movs	r3, #1
 8008712:	4093      	lsls	r3, r2
 8008714:	608b      	str	r3, [r1, #8]
 8008716:	4658      	mov	r0, fp
 8008718:	f001 fbde 	bl	8009ed8 <_Bfree>
 800871c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008720:	2200      	movs	r2, #0
 8008722:	601a      	str	r2, [r3, #0]
 8008724:	1e2b      	subs	r3, r5, #0
 8008726:	bfb9      	ittee	lt
 8008728:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800872c:	9303      	strlt	r3, [sp, #12]
 800872e:	2300      	movge	r3, #0
 8008730:	6033      	strge	r3, [r6, #0]
 8008732:	9f03      	ldr	r7, [sp, #12]
 8008734:	4b98      	ldr	r3, [pc, #608]	@ (8008998 <_dtoa_r+0x2d0>)
 8008736:	bfbc      	itt	lt
 8008738:	2201      	movlt	r2, #1
 800873a:	6032      	strlt	r2, [r6, #0]
 800873c:	43bb      	bics	r3, r7
 800873e:	d112      	bne.n	8008766 <_dtoa_r+0x9e>
 8008740:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008742:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008746:	6013      	str	r3, [r2, #0]
 8008748:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800874c:	4323      	orrs	r3, r4
 800874e:	f000 854d 	beq.w	80091ec <_dtoa_r+0xb24>
 8008752:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008754:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80089ac <_dtoa_r+0x2e4>
 8008758:	2b00      	cmp	r3, #0
 800875a:	f000 854f 	beq.w	80091fc <_dtoa_r+0xb34>
 800875e:	f10a 0303 	add.w	r3, sl, #3
 8008762:	f000 bd49 	b.w	80091f8 <_dtoa_r+0xb30>
 8008766:	ed9d 7b02 	vldr	d7, [sp, #8]
 800876a:	2200      	movs	r2, #0
 800876c:	ec51 0b17 	vmov	r0, r1, d7
 8008770:	2300      	movs	r3, #0
 8008772:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008776:	f7f8 f9a7 	bl	8000ac8 <__aeabi_dcmpeq>
 800877a:	4680      	mov	r8, r0
 800877c:	b158      	cbz	r0, 8008796 <_dtoa_r+0xce>
 800877e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008780:	2301      	movs	r3, #1
 8008782:	6013      	str	r3, [r2, #0]
 8008784:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008786:	b113      	cbz	r3, 800878e <_dtoa_r+0xc6>
 8008788:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800878a:	4b84      	ldr	r3, [pc, #528]	@ (800899c <_dtoa_r+0x2d4>)
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80089b0 <_dtoa_r+0x2e8>
 8008792:	f000 bd33 	b.w	80091fc <_dtoa_r+0xb34>
 8008796:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800879a:	aa16      	add	r2, sp, #88	@ 0x58
 800879c:	a917      	add	r1, sp, #92	@ 0x5c
 800879e:	4658      	mov	r0, fp
 80087a0:	f001 ff3e 	bl	800a620 <__d2b>
 80087a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80087a8:	4681      	mov	r9, r0
 80087aa:	2e00      	cmp	r6, #0
 80087ac:	d077      	beq.n	800889e <_dtoa_r+0x1d6>
 80087ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80087b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80087c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80087c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80087c8:	4619      	mov	r1, r3
 80087ca:	2200      	movs	r2, #0
 80087cc:	4b74      	ldr	r3, [pc, #464]	@ (80089a0 <_dtoa_r+0x2d8>)
 80087ce:	f7f7 fd5b 	bl	8000288 <__aeabi_dsub>
 80087d2:	a369      	add	r3, pc, #420	@ (adr r3, 8008978 <_dtoa_r+0x2b0>)
 80087d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d8:	f7f7 ff0e 	bl	80005f8 <__aeabi_dmul>
 80087dc:	a368      	add	r3, pc, #416	@ (adr r3, 8008980 <_dtoa_r+0x2b8>)
 80087de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e2:	f7f7 fd53 	bl	800028c <__adddf3>
 80087e6:	4604      	mov	r4, r0
 80087e8:	4630      	mov	r0, r6
 80087ea:	460d      	mov	r5, r1
 80087ec:	f7f7 fe9a 	bl	8000524 <__aeabi_i2d>
 80087f0:	a365      	add	r3, pc, #404	@ (adr r3, 8008988 <_dtoa_r+0x2c0>)
 80087f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f6:	f7f7 feff 	bl	80005f8 <__aeabi_dmul>
 80087fa:	4602      	mov	r2, r0
 80087fc:	460b      	mov	r3, r1
 80087fe:	4620      	mov	r0, r4
 8008800:	4629      	mov	r1, r5
 8008802:	f7f7 fd43 	bl	800028c <__adddf3>
 8008806:	4604      	mov	r4, r0
 8008808:	460d      	mov	r5, r1
 800880a:	f7f8 f9a5 	bl	8000b58 <__aeabi_d2iz>
 800880e:	2200      	movs	r2, #0
 8008810:	4607      	mov	r7, r0
 8008812:	2300      	movs	r3, #0
 8008814:	4620      	mov	r0, r4
 8008816:	4629      	mov	r1, r5
 8008818:	f7f8 f960 	bl	8000adc <__aeabi_dcmplt>
 800881c:	b140      	cbz	r0, 8008830 <_dtoa_r+0x168>
 800881e:	4638      	mov	r0, r7
 8008820:	f7f7 fe80 	bl	8000524 <__aeabi_i2d>
 8008824:	4622      	mov	r2, r4
 8008826:	462b      	mov	r3, r5
 8008828:	f7f8 f94e 	bl	8000ac8 <__aeabi_dcmpeq>
 800882c:	b900      	cbnz	r0, 8008830 <_dtoa_r+0x168>
 800882e:	3f01      	subs	r7, #1
 8008830:	2f16      	cmp	r7, #22
 8008832:	d851      	bhi.n	80088d8 <_dtoa_r+0x210>
 8008834:	4b5b      	ldr	r3, [pc, #364]	@ (80089a4 <_dtoa_r+0x2dc>)
 8008836:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800883a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008842:	f7f8 f94b 	bl	8000adc <__aeabi_dcmplt>
 8008846:	2800      	cmp	r0, #0
 8008848:	d048      	beq.n	80088dc <_dtoa_r+0x214>
 800884a:	3f01      	subs	r7, #1
 800884c:	2300      	movs	r3, #0
 800884e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008850:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008852:	1b9b      	subs	r3, r3, r6
 8008854:	1e5a      	subs	r2, r3, #1
 8008856:	bf44      	itt	mi
 8008858:	f1c3 0801 	rsbmi	r8, r3, #1
 800885c:	2300      	movmi	r3, #0
 800885e:	9208      	str	r2, [sp, #32]
 8008860:	bf54      	ite	pl
 8008862:	f04f 0800 	movpl.w	r8, #0
 8008866:	9308      	strmi	r3, [sp, #32]
 8008868:	2f00      	cmp	r7, #0
 800886a:	db39      	blt.n	80088e0 <_dtoa_r+0x218>
 800886c:	9b08      	ldr	r3, [sp, #32]
 800886e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008870:	443b      	add	r3, r7
 8008872:	9308      	str	r3, [sp, #32]
 8008874:	2300      	movs	r3, #0
 8008876:	930a      	str	r3, [sp, #40]	@ 0x28
 8008878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800887a:	2b09      	cmp	r3, #9
 800887c:	d864      	bhi.n	8008948 <_dtoa_r+0x280>
 800887e:	2b05      	cmp	r3, #5
 8008880:	bfc4      	itt	gt
 8008882:	3b04      	subgt	r3, #4
 8008884:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008888:	f1a3 0302 	sub.w	r3, r3, #2
 800888c:	bfcc      	ite	gt
 800888e:	2400      	movgt	r4, #0
 8008890:	2401      	movle	r4, #1
 8008892:	2b03      	cmp	r3, #3
 8008894:	d863      	bhi.n	800895e <_dtoa_r+0x296>
 8008896:	e8df f003 	tbb	[pc, r3]
 800889a:	372a      	.short	0x372a
 800889c:	5535      	.short	0x5535
 800889e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80088a2:	441e      	add	r6, r3
 80088a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80088a8:	2b20      	cmp	r3, #32
 80088aa:	bfc1      	itttt	gt
 80088ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80088b0:	409f      	lslgt	r7, r3
 80088b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80088b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80088ba:	bfd6      	itet	le
 80088bc:	f1c3 0320 	rsble	r3, r3, #32
 80088c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80088c4:	fa04 f003 	lslle.w	r0, r4, r3
 80088c8:	f7f7 fe1c 	bl	8000504 <__aeabi_ui2d>
 80088cc:	2201      	movs	r2, #1
 80088ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80088d2:	3e01      	subs	r6, #1
 80088d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80088d6:	e777      	b.n	80087c8 <_dtoa_r+0x100>
 80088d8:	2301      	movs	r3, #1
 80088da:	e7b8      	b.n	800884e <_dtoa_r+0x186>
 80088dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80088de:	e7b7      	b.n	8008850 <_dtoa_r+0x188>
 80088e0:	427b      	negs	r3, r7
 80088e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80088e4:	2300      	movs	r3, #0
 80088e6:	eba8 0807 	sub.w	r8, r8, r7
 80088ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088ec:	e7c4      	b.n	8008878 <_dtoa_r+0x1b0>
 80088ee:	2300      	movs	r3, #0
 80088f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	dc35      	bgt.n	8008964 <_dtoa_r+0x29c>
 80088f8:	2301      	movs	r3, #1
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	9307      	str	r3, [sp, #28]
 80088fe:	461a      	mov	r2, r3
 8008900:	920e      	str	r2, [sp, #56]	@ 0x38
 8008902:	e00b      	b.n	800891c <_dtoa_r+0x254>
 8008904:	2301      	movs	r3, #1
 8008906:	e7f3      	b.n	80088f0 <_dtoa_r+0x228>
 8008908:	2300      	movs	r3, #0
 800890a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800890c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800890e:	18fb      	adds	r3, r7, r3
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	3301      	adds	r3, #1
 8008914:	2b01      	cmp	r3, #1
 8008916:	9307      	str	r3, [sp, #28]
 8008918:	bfb8      	it	lt
 800891a:	2301      	movlt	r3, #1
 800891c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008920:	2100      	movs	r1, #0
 8008922:	2204      	movs	r2, #4
 8008924:	f102 0514 	add.w	r5, r2, #20
 8008928:	429d      	cmp	r5, r3
 800892a:	d91f      	bls.n	800896c <_dtoa_r+0x2a4>
 800892c:	6041      	str	r1, [r0, #4]
 800892e:	4658      	mov	r0, fp
 8008930:	f001 fa92 	bl	8009e58 <_Balloc>
 8008934:	4682      	mov	sl, r0
 8008936:	2800      	cmp	r0, #0
 8008938:	d13c      	bne.n	80089b4 <_dtoa_r+0x2ec>
 800893a:	4b1b      	ldr	r3, [pc, #108]	@ (80089a8 <_dtoa_r+0x2e0>)
 800893c:	4602      	mov	r2, r0
 800893e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008942:	e6d8      	b.n	80086f6 <_dtoa_r+0x2e>
 8008944:	2301      	movs	r3, #1
 8008946:	e7e0      	b.n	800890a <_dtoa_r+0x242>
 8008948:	2401      	movs	r4, #1
 800894a:	2300      	movs	r3, #0
 800894c:	9309      	str	r3, [sp, #36]	@ 0x24
 800894e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008950:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008954:	9300      	str	r3, [sp, #0]
 8008956:	9307      	str	r3, [sp, #28]
 8008958:	2200      	movs	r2, #0
 800895a:	2312      	movs	r3, #18
 800895c:	e7d0      	b.n	8008900 <_dtoa_r+0x238>
 800895e:	2301      	movs	r3, #1
 8008960:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008962:	e7f5      	b.n	8008950 <_dtoa_r+0x288>
 8008964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	9307      	str	r3, [sp, #28]
 800896a:	e7d7      	b.n	800891c <_dtoa_r+0x254>
 800896c:	3101      	adds	r1, #1
 800896e:	0052      	lsls	r2, r2, #1
 8008970:	e7d8      	b.n	8008924 <_dtoa_r+0x25c>
 8008972:	bf00      	nop
 8008974:	f3af 8000 	nop.w
 8008978:	636f4361 	.word	0x636f4361
 800897c:	3fd287a7 	.word	0x3fd287a7
 8008980:	8b60c8b3 	.word	0x8b60c8b3
 8008984:	3fc68a28 	.word	0x3fc68a28
 8008988:	509f79fb 	.word	0x509f79fb
 800898c:	3fd34413 	.word	0x3fd34413
 8008990:	0800b51e 	.word	0x0800b51e
 8008994:	0800b535 	.word	0x0800b535
 8008998:	7ff00000 	.word	0x7ff00000
 800899c:	0800b38d 	.word	0x0800b38d
 80089a0:	3ff80000 	.word	0x3ff80000
 80089a4:	0800b6a0 	.word	0x0800b6a0
 80089a8:	0800b58d 	.word	0x0800b58d
 80089ac:	0800b51a 	.word	0x0800b51a
 80089b0:	0800b38c 	.word	0x0800b38c
 80089b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80089b8:	6018      	str	r0, [r3, #0]
 80089ba:	9b07      	ldr	r3, [sp, #28]
 80089bc:	2b0e      	cmp	r3, #14
 80089be:	f200 80a4 	bhi.w	8008b0a <_dtoa_r+0x442>
 80089c2:	2c00      	cmp	r4, #0
 80089c4:	f000 80a1 	beq.w	8008b0a <_dtoa_r+0x442>
 80089c8:	2f00      	cmp	r7, #0
 80089ca:	dd33      	ble.n	8008a34 <_dtoa_r+0x36c>
 80089cc:	4bad      	ldr	r3, [pc, #692]	@ (8008c84 <_dtoa_r+0x5bc>)
 80089ce:	f007 020f 	and.w	r2, r7, #15
 80089d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089d6:	ed93 7b00 	vldr	d7, [r3]
 80089da:	05f8      	lsls	r0, r7, #23
 80089dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80089e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80089e4:	d516      	bpl.n	8008a14 <_dtoa_r+0x34c>
 80089e6:	4ba8      	ldr	r3, [pc, #672]	@ (8008c88 <_dtoa_r+0x5c0>)
 80089e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80089f0:	f7f7 ff2c 	bl	800084c <__aeabi_ddiv>
 80089f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089f8:	f004 040f 	and.w	r4, r4, #15
 80089fc:	2603      	movs	r6, #3
 80089fe:	4da2      	ldr	r5, [pc, #648]	@ (8008c88 <_dtoa_r+0x5c0>)
 8008a00:	b954      	cbnz	r4, 8008a18 <_dtoa_r+0x350>
 8008a02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a0a:	f7f7 ff1f 	bl	800084c <__aeabi_ddiv>
 8008a0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a12:	e028      	b.n	8008a66 <_dtoa_r+0x39e>
 8008a14:	2602      	movs	r6, #2
 8008a16:	e7f2      	b.n	80089fe <_dtoa_r+0x336>
 8008a18:	07e1      	lsls	r1, r4, #31
 8008a1a:	d508      	bpl.n	8008a2e <_dtoa_r+0x366>
 8008a1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a24:	f7f7 fde8 	bl	80005f8 <__aeabi_dmul>
 8008a28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a2c:	3601      	adds	r6, #1
 8008a2e:	1064      	asrs	r4, r4, #1
 8008a30:	3508      	adds	r5, #8
 8008a32:	e7e5      	b.n	8008a00 <_dtoa_r+0x338>
 8008a34:	f000 80d2 	beq.w	8008bdc <_dtoa_r+0x514>
 8008a38:	427c      	negs	r4, r7
 8008a3a:	4b92      	ldr	r3, [pc, #584]	@ (8008c84 <_dtoa_r+0x5bc>)
 8008a3c:	4d92      	ldr	r5, [pc, #584]	@ (8008c88 <_dtoa_r+0x5c0>)
 8008a3e:	f004 020f 	and.w	r2, r4, #15
 8008a42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a4e:	f7f7 fdd3 	bl	80005f8 <__aeabi_dmul>
 8008a52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a56:	1124      	asrs	r4, r4, #4
 8008a58:	2300      	movs	r3, #0
 8008a5a:	2602      	movs	r6, #2
 8008a5c:	2c00      	cmp	r4, #0
 8008a5e:	f040 80b2 	bne.w	8008bc6 <_dtoa_r+0x4fe>
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1d3      	bne.n	8008a0e <_dtoa_r+0x346>
 8008a66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f000 80b7 	beq.w	8008be0 <_dtoa_r+0x518>
 8008a72:	4b86      	ldr	r3, [pc, #536]	@ (8008c8c <_dtoa_r+0x5c4>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	4620      	mov	r0, r4
 8008a78:	4629      	mov	r1, r5
 8008a7a:	f7f8 f82f 	bl	8000adc <__aeabi_dcmplt>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	f000 80ae 	beq.w	8008be0 <_dtoa_r+0x518>
 8008a84:	9b07      	ldr	r3, [sp, #28]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f000 80aa 	beq.w	8008be0 <_dtoa_r+0x518>
 8008a8c:	9b00      	ldr	r3, [sp, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	dd37      	ble.n	8008b02 <_dtoa_r+0x43a>
 8008a92:	1e7b      	subs	r3, r7, #1
 8008a94:	9304      	str	r3, [sp, #16]
 8008a96:	4620      	mov	r0, r4
 8008a98:	4b7d      	ldr	r3, [pc, #500]	@ (8008c90 <_dtoa_r+0x5c8>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	f7f7 fdab 	bl	80005f8 <__aeabi_dmul>
 8008aa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008aa6:	9c00      	ldr	r4, [sp, #0]
 8008aa8:	3601      	adds	r6, #1
 8008aaa:	4630      	mov	r0, r6
 8008aac:	f7f7 fd3a 	bl	8000524 <__aeabi_i2d>
 8008ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ab4:	f7f7 fda0 	bl	80005f8 <__aeabi_dmul>
 8008ab8:	4b76      	ldr	r3, [pc, #472]	@ (8008c94 <_dtoa_r+0x5cc>)
 8008aba:	2200      	movs	r2, #0
 8008abc:	f7f7 fbe6 	bl	800028c <__adddf3>
 8008ac0:	4605      	mov	r5, r0
 8008ac2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008ac6:	2c00      	cmp	r4, #0
 8008ac8:	f040 808d 	bne.w	8008be6 <_dtoa_r+0x51e>
 8008acc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ad0:	4b71      	ldr	r3, [pc, #452]	@ (8008c98 <_dtoa_r+0x5d0>)
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f7f7 fbd8 	bl	8000288 <__aeabi_dsub>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	460b      	mov	r3, r1
 8008adc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ae0:	462a      	mov	r2, r5
 8008ae2:	4633      	mov	r3, r6
 8008ae4:	f7f8 f818 	bl	8000b18 <__aeabi_dcmpgt>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	f040 828b 	bne.w	8009004 <_dtoa_r+0x93c>
 8008aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008af2:	462a      	mov	r2, r5
 8008af4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008af8:	f7f7 fff0 	bl	8000adc <__aeabi_dcmplt>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	f040 8128 	bne.w	8008d52 <_dtoa_r+0x68a>
 8008b02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008b06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008b0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f2c0 815a 	blt.w	8008dc6 <_dtoa_r+0x6fe>
 8008b12:	2f0e      	cmp	r7, #14
 8008b14:	f300 8157 	bgt.w	8008dc6 <_dtoa_r+0x6fe>
 8008b18:	4b5a      	ldr	r3, [pc, #360]	@ (8008c84 <_dtoa_r+0x5bc>)
 8008b1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b1e:	ed93 7b00 	vldr	d7, [r3]
 8008b22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	ed8d 7b00 	vstr	d7, [sp]
 8008b2a:	da03      	bge.n	8008b34 <_dtoa_r+0x46c>
 8008b2c:	9b07      	ldr	r3, [sp, #28]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f340 8101 	ble.w	8008d36 <_dtoa_r+0x66e>
 8008b34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008b38:	4656      	mov	r6, sl
 8008b3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b3e:	4620      	mov	r0, r4
 8008b40:	4629      	mov	r1, r5
 8008b42:	f7f7 fe83 	bl	800084c <__aeabi_ddiv>
 8008b46:	f7f8 f807 	bl	8000b58 <__aeabi_d2iz>
 8008b4a:	4680      	mov	r8, r0
 8008b4c:	f7f7 fcea 	bl	8000524 <__aeabi_i2d>
 8008b50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b54:	f7f7 fd50 	bl	80005f8 <__aeabi_dmul>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	4629      	mov	r1, r5
 8008b60:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008b64:	f7f7 fb90 	bl	8000288 <__aeabi_dsub>
 8008b68:	f806 4b01 	strb.w	r4, [r6], #1
 8008b6c:	9d07      	ldr	r5, [sp, #28]
 8008b6e:	eba6 040a 	sub.w	r4, r6, sl
 8008b72:	42a5      	cmp	r5, r4
 8008b74:	4602      	mov	r2, r0
 8008b76:	460b      	mov	r3, r1
 8008b78:	f040 8117 	bne.w	8008daa <_dtoa_r+0x6e2>
 8008b7c:	f7f7 fb86 	bl	800028c <__adddf3>
 8008b80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b84:	4604      	mov	r4, r0
 8008b86:	460d      	mov	r5, r1
 8008b88:	f7f7 ffc6 	bl	8000b18 <__aeabi_dcmpgt>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	f040 80f9 	bne.w	8008d84 <_dtoa_r+0x6bc>
 8008b92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b96:	4620      	mov	r0, r4
 8008b98:	4629      	mov	r1, r5
 8008b9a:	f7f7 ff95 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b9e:	b118      	cbz	r0, 8008ba8 <_dtoa_r+0x4e0>
 8008ba0:	f018 0f01 	tst.w	r8, #1
 8008ba4:	f040 80ee 	bne.w	8008d84 <_dtoa_r+0x6bc>
 8008ba8:	4649      	mov	r1, r9
 8008baa:	4658      	mov	r0, fp
 8008bac:	f001 f994 	bl	8009ed8 <_Bfree>
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	7033      	strb	r3, [r6, #0]
 8008bb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008bb6:	3701      	adds	r7, #1
 8008bb8:	601f      	str	r7, [r3, #0]
 8008bba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 831d 	beq.w	80091fc <_dtoa_r+0xb34>
 8008bc2:	601e      	str	r6, [r3, #0]
 8008bc4:	e31a      	b.n	80091fc <_dtoa_r+0xb34>
 8008bc6:	07e2      	lsls	r2, r4, #31
 8008bc8:	d505      	bpl.n	8008bd6 <_dtoa_r+0x50e>
 8008bca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008bce:	f7f7 fd13 	bl	80005f8 <__aeabi_dmul>
 8008bd2:	3601      	adds	r6, #1
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	1064      	asrs	r4, r4, #1
 8008bd8:	3508      	adds	r5, #8
 8008bda:	e73f      	b.n	8008a5c <_dtoa_r+0x394>
 8008bdc:	2602      	movs	r6, #2
 8008bde:	e742      	b.n	8008a66 <_dtoa_r+0x39e>
 8008be0:	9c07      	ldr	r4, [sp, #28]
 8008be2:	9704      	str	r7, [sp, #16]
 8008be4:	e761      	b.n	8008aaa <_dtoa_r+0x3e2>
 8008be6:	4b27      	ldr	r3, [pc, #156]	@ (8008c84 <_dtoa_r+0x5bc>)
 8008be8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008bea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008bee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008bf2:	4454      	add	r4, sl
 8008bf4:	2900      	cmp	r1, #0
 8008bf6:	d053      	beq.n	8008ca0 <_dtoa_r+0x5d8>
 8008bf8:	4928      	ldr	r1, [pc, #160]	@ (8008c9c <_dtoa_r+0x5d4>)
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	f7f7 fe26 	bl	800084c <__aeabi_ddiv>
 8008c00:	4633      	mov	r3, r6
 8008c02:	462a      	mov	r2, r5
 8008c04:	f7f7 fb40 	bl	8000288 <__aeabi_dsub>
 8008c08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c0c:	4656      	mov	r6, sl
 8008c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c12:	f7f7 ffa1 	bl	8000b58 <__aeabi_d2iz>
 8008c16:	4605      	mov	r5, r0
 8008c18:	f7f7 fc84 	bl	8000524 <__aeabi_i2d>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c24:	f7f7 fb30 	bl	8000288 <__aeabi_dsub>
 8008c28:	3530      	adds	r5, #48	@ 0x30
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c32:	f806 5b01 	strb.w	r5, [r6], #1
 8008c36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c3a:	f7f7 ff4f 	bl	8000adc <__aeabi_dcmplt>
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d171      	bne.n	8008d26 <_dtoa_r+0x65e>
 8008c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c46:	4911      	ldr	r1, [pc, #68]	@ (8008c8c <_dtoa_r+0x5c4>)
 8008c48:	2000      	movs	r0, #0
 8008c4a:	f7f7 fb1d 	bl	8000288 <__aeabi_dsub>
 8008c4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c52:	f7f7 ff43 	bl	8000adc <__aeabi_dcmplt>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	f040 8095 	bne.w	8008d86 <_dtoa_r+0x6be>
 8008c5c:	42a6      	cmp	r6, r4
 8008c5e:	f43f af50 	beq.w	8008b02 <_dtoa_r+0x43a>
 8008c62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008c66:	4b0a      	ldr	r3, [pc, #40]	@ (8008c90 <_dtoa_r+0x5c8>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f7f7 fcc5 	bl	80005f8 <__aeabi_dmul>
 8008c6e:	4b08      	ldr	r3, [pc, #32]	@ (8008c90 <_dtoa_r+0x5c8>)
 8008c70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c74:	2200      	movs	r2, #0
 8008c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c7a:	f7f7 fcbd 	bl	80005f8 <__aeabi_dmul>
 8008c7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c82:	e7c4      	b.n	8008c0e <_dtoa_r+0x546>
 8008c84:	0800b6a0 	.word	0x0800b6a0
 8008c88:	0800b678 	.word	0x0800b678
 8008c8c:	3ff00000 	.word	0x3ff00000
 8008c90:	40240000 	.word	0x40240000
 8008c94:	401c0000 	.word	0x401c0000
 8008c98:	40140000 	.word	0x40140000
 8008c9c:	3fe00000 	.word	0x3fe00000
 8008ca0:	4631      	mov	r1, r6
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	f7f7 fca8 	bl	80005f8 <__aeabi_dmul>
 8008ca8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008cac:	9415      	str	r4, [sp, #84]	@ 0x54
 8008cae:	4656      	mov	r6, sl
 8008cb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cb4:	f7f7 ff50 	bl	8000b58 <__aeabi_d2iz>
 8008cb8:	4605      	mov	r5, r0
 8008cba:	f7f7 fc33 	bl	8000524 <__aeabi_i2d>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cc6:	f7f7 fadf 	bl	8000288 <__aeabi_dsub>
 8008cca:	3530      	adds	r5, #48	@ 0x30
 8008ccc:	f806 5b01 	strb.w	r5, [r6], #1
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	42a6      	cmp	r6, r4
 8008cd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008cda:	f04f 0200 	mov.w	r2, #0
 8008cde:	d124      	bne.n	8008d2a <_dtoa_r+0x662>
 8008ce0:	4bac      	ldr	r3, [pc, #688]	@ (8008f94 <_dtoa_r+0x8cc>)
 8008ce2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008ce6:	f7f7 fad1 	bl	800028c <__adddf3>
 8008cea:	4602      	mov	r2, r0
 8008cec:	460b      	mov	r3, r1
 8008cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cf2:	f7f7 ff11 	bl	8000b18 <__aeabi_dcmpgt>
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	d145      	bne.n	8008d86 <_dtoa_r+0x6be>
 8008cfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008cfe:	49a5      	ldr	r1, [pc, #660]	@ (8008f94 <_dtoa_r+0x8cc>)
 8008d00:	2000      	movs	r0, #0
 8008d02:	f7f7 fac1 	bl	8000288 <__aeabi_dsub>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d0e:	f7f7 fee5 	bl	8000adc <__aeabi_dcmplt>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	f43f aef5 	beq.w	8008b02 <_dtoa_r+0x43a>
 8008d18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008d1a:	1e73      	subs	r3, r6, #1
 8008d1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8008d1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008d22:	2b30      	cmp	r3, #48	@ 0x30
 8008d24:	d0f8      	beq.n	8008d18 <_dtoa_r+0x650>
 8008d26:	9f04      	ldr	r7, [sp, #16]
 8008d28:	e73e      	b.n	8008ba8 <_dtoa_r+0x4e0>
 8008d2a:	4b9b      	ldr	r3, [pc, #620]	@ (8008f98 <_dtoa_r+0x8d0>)
 8008d2c:	f7f7 fc64 	bl	80005f8 <__aeabi_dmul>
 8008d30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d34:	e7bc      	b.n	8008cb0 <_dtoa_r+0x5e8>
 8008d36:	d10c      	bne.n	8008d52 <_dtoa_r+0x68a>
 8008d38:	4b98      	ldr	r3, [pc, #608]	@ (8008f9c <_dtoa_r+0x8d4>)
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d40:	f7f7 fc5a 	bl	80005f8 <__aeabi_dmul>
 8008d44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d48:	f7f7 fedc 	bl	8000b04 <__aeabi_dcmpge>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	f000 8157 	beq.w	8009000 <_dtoa_r+0x938>
 8008d52:	2400      	movs	r4, #0
 8008d54:	4625      	mov	r5, r4
 8008d56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d58:	43db      	mvns	r3, r3
 8008d5a:	9304      	str	r3, [sp, #16]
 8008d5c:	4656      	mov	r6, sl
 8008d5e:	2700      	movs	r7, #0
 8008d60:	4621      	mov	r1, r4
 8008d62:	4658      	mov	r0, fp
 8008d64:	f001 f8b8 	bl	8009ed8 <_Bfree>
 8008d68:	2d00      	cmp	r5, #0
 8008d6a:	d0dc      	beq.n	8008d26 <_dtoa_r+0x65e>
 8008d6c:	b12f      	cbz	r7, 8008d7a <_dtoa_r+0x6b2>
 8008d6e:	42af      	cmp	r7, r5
 8008d70:	d003      	beq.n	8008d7a <_dtoa_r+0x6b2>
 8008d72:	4639      	mov	r1, r7
 8008d74:	4658      	mov	r0, fp
 8008d76:	f001 f8af 	bl	8009ed8 <_Bfree>
 8008d7a:	4629      	mov	r1, r5
 8008d7c:	4658      	mov	r0, fp
 8008d7e:	f001 f8ab 	bl	8009ed8 <_Bfree>
 8008d82:	e7d0      	b.n	8008d26 <_dtoa_r+0x65e>
 8008d84:	9704      	str	r7, [sp, #16]
 8008d86:	4633      	mov	r3, r6
 8008d88:	461e      	mov	r6, r3
 8008d8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d8e:	2a39      	cmp	r2, #57	@ 0x39
 8008d90:	d107      	bne.n	8008da2 <_dtoa_r+0x6da>
 8008d92:	459a      	cmp	sl, r3
 8008d94:	d1f8      	bne.n	8008d88 <_dtoa_r+0x6c0>
 8008d96:	9a04      	ldr	r2, [sp, #16]
 8008d98:	3201      	adds	r2, #1
 8008d9a:	9204      	str	r2, [sp, #16]
 8008d9c:	2230      	movs	r2, #48	@ 0x30
 8008d9e:	f88a 2000 	strb.w	r2, [sl]
 8008da2:	781a      	ldrb	r2, [r3, #0]
 8008da4:	3201      	adds	r2, #1
 8008da6:	701a      	strb	r2, [r3, #0]
 8008da8:	e7bd      	b.n	8008d26 <_dtoa_r+0x65e>
 8008daa:	4b7b      	ldr	r3, [pc, #492]	@ (8008f98 <_dtoa_r+0x8d0>)
 8008dac:	2200      	movs	r2, #0
 8008dae:	f7f7 fc23 	bl	80005f8 <__aeabi_dmul>
 8008db2:	2200      	movs	r2, #0
 8008db4:	2300      	movs	r3, #0
 8008db6:	4604      	mov	r4, r0
 8008db8:	460d      	mov	r5, r1
 8008dba:	f7f7 fe85 	bl	8000ac8 <__aeabi_dcmpeq>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	f43f aebb 	beq.w	8008b3a <_dtoa_r+0x472>
 8008dc4:	e6f0      	b.n	8008ba8 <_dtoa_r+0x4e0>
 8008dc6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008dc8:	2a00      	cmp	r2, #0
 8008dca:	f000 80db 	beq.w	8008f84 <_dtoa_r+0x8bc>
 8008dce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dd0:	2a01      	cmp	r2, #1
 8008dd2:	f300 80bf 	bgt.w	8008f54 <_dtoa_r+0x88c>
 8008dd6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008dd8:	2a00      	cmp	r2, #0
 8008dda:	f000 80b7 	beq.w	8008f4c <_dtoa_r+0x884>
 8008dde:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008de2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008de4:	4646      	mov	r6, r8
 8008de6:	9a08      	ldr	r2, [sp, #32]
 8008de8:	2101      	movs	r1, #1
 8008dea:	441a      	add	r2, r3
 8008dec:	4658      	mov	r0, fp
 8008dee:	4498      	add	r8, r3
 8008df0:	9208      	str	r2, [sp, #32]
 8008df2:	f001 f96f 	bl	800a0d4 <__i2b>
 8008df6:	4605      	mov	r5, r0
 8008df8:	b15e      	cbz	r6, 8008e12 <_dtoa_r+0x74a>
 8008dfa:	9b08      	ldr	r3, [sp, #32]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	dd08      	ble.n	8008e12 <_dtoa_r+0x74a>
 8008e00:	42b3      	cmp	r3, r6
 8008e02:	9a08      	ldr	r2, [sp, #32]
 8008e04:	bfa8      	it	ge
 8008e06:	4633      	movge	r3, r6
 8008e08:	eba8 0803 	sub.w	r8, r8, r3
 8008e0c:	1af6      	subs	r6, r6, r3
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	9308      	str	r3, [sp, #32]
 8008e12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e14:	b1f3      	cbz	r3, 8008e54 <_dtoa_r+0x78c>
 8008e16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f000 80b7 	beq.w	8008f8c <_dtoa_r+0x8c4>
 8008e1e:	b18c      	cbz	r4, 8008e44 <_dtoa_r+0x77c>
 8008e20:	4629      	mov	r1, r5
 8008e22:	4622      	mov	r2, r4
 8008e24:	4658      	mov	r0, fp
 8008e26:	f001 fa15 	bl	800a254 <__pow5mult>
 8008e2a:	464a      	mov	r2, r9
 8008e2c:	4601      	mov	r1, r0
 8008e2e:	4605      	mov	r5, r0
 8008e30:	4658      	mov	r0, fp
 8008e32:	f001 f965 	bl	800a100 <__multiply>
 8008e36:	4649      	mov	r1, r9
 8008e38:	9004      	str	r0, [sp, #16]
 8008e3a:	4658      	mov	r0, fp
 8008e3c:	f001 f84c 	bl	8009ed8 <_Bfree>
 8008e40:	9b04      	ldr	r3, [sp, #16]
 8008e42:	4699      	mov	r9, r3
 8008e44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e46:	1b1a      	subs	r2, r3, r4
 8008e48:	d004      	beq.n	8008e54 <_dtoa_r+0x78c>
 8008e4a:	4649      	mov	r1, r9
 8008e4c:	4658      	mov	r0, fp
 8008e4e:	f001 fa01 	bl	800a254 <__pow5mult>
 8008e52:	4681      	mov	r9, r0
 8008e54:	2101      	movs	r1, #1
 8008e56:	4658      	mov	r0, fp
 8008e58:	f001 f93c 	bl	800a0d4 <__i2b>
 8008e5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e5e:	4604      	mov	r4, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 81cf 	beq.w	8009204 <_dtoa_r+0xb3c>
 8008e66:	461a      	mov	r2, r3
 8008e68:	4601      	mov	r1, r0
 8008e6a:	4658      	mov	r0, fp
 8008e6c:	f001 f9f2 	bl	800a254 <__pow5mult>
 8008e70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	4604      	mov	r4, r0
 8008e76:	f300 8095 	bgt.w	8008fa4 <_dtoa_r+0x8dc>
 8008e7a:	9b02      	ldr	r3, [sp, #8]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f040 8087 	bne.w	8008f90 <_dtoa_r+0x8c8>
 8008e82:	9b03      	ldr	r3, [sp, #12]
 8008e84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f040 8089 	bne.w	8008fa0 <_dtoa_r+0x8d8>
 8008e8e:	9b03      	ldr	r3, [sp, #12]
 8008e90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e94:	0d1b      	lsrs	r3, r3, #20
 8008e96:	051b      	lsls	r3, r3, #20
 8008e98:	b12b      	cbz	r3, 8008ea6 <_dtoa_r+0x7de>
 8008e9a:	9b08      	ldr	r3, [sp, #32]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	9308      	str	r3, [sp, #32]
 8008ea0:	f108 0801 	add.w	r8, r8, #1
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f000 81b0 	beq.w	8009210 <_dtoa_r+0xb48>
 8008eb0:	6923      	ldr	r3, [r4, #16]
 8008eb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008eb6:	6918      	ldr	r0, [r3, #16]
 8008eb8:	f001 f8c0 	bl	800a03c <__hi0bits>
 8008ebc:	f1c0 0020 	rsb	r0, r0, #32
 8008ec0:	9b08      	ldr	r3, [sp, #32]
 8008ec2:	4418      	add	r0, r3
 8008ec4:	f010 001f 	ands.w	r0, r0, #31
 8008ec8:	d077      	beq.n	8008fba <_dtoa_r+0x8f2>
 8008eca:	f1c0 0320 	rsb	r3, r0, #32
 8008ece:	2b04      	cmp	r3, #4
 8008ed0:	dd6b      	ble.n	8008faa <_dtoa_r+0x8e2>
 8008ed2:	9b08      	ldr	r3, [sp, #32]
 8008ed4:	f1c0 001c 	rsb	r0, r0, #28
 8008ed8:	4403      	add	r3, r0
 8008eda:	4480      	add	r8, r0
 8008edc:	4406      	add	r6, r0
 8008ede:	9308      	str	r3, [sp, #32]
 8008ee0:	f1b8 0f00 	cmp.w	r8, #0
 8008ee4:	dd05      	ble.n	8008ef2 <_dtoa_r+0x82a>
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	4642      	mov	r2, r8
 8008eea:	4658      	mov	r0, fp
 8008eec:	f001 fa0c 	bl	800a308 <__lshift>
 8008ef0:	4681      	mov	r9, r0
 8008ef2:	9b08      	ldr	r3, [sp, #32]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	dd05      	ble.n	8008f04 <_dtoa_r+0x83c>
 8008ef8:	4621      	mov	r1, r4
 8008efa:	461a      	mov	r2, r3
 8008efc:	4658      	mov	r0, fp
 8008efe:	f001 fa03 	bl	800a308 <__lshift>
 8008f02:	4604      	mov	r4, r0
 8008f04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d059      	beq.n	8008fbe <_dtoa_r+0x8f6>
 8008f0a:	4621      	mov	r1, r4
 8008f0c:	4648      	mov	r0, r9
 8008f0e:	f001 fa67 	bl	800a3e0 <__mcmp>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	da53      	bge.n	8008fbe <_dtoa_r+0x8f6>
 8008f16:	1e7b      	subs	r3, r7, #1
 8008f18:	9304      	str	r3, [sp, #16]
 8008f1a:	4649      	mov	r1, r9
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	220a      	movs	r2, #10
 8008f20:	4658      	mov	r0, fp
 8008f22:	f000 fffb 	bl	8009f1c <__multadd>
 8008f26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f28:	4681      	mov	r9, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f000 8172 	beq.w	8009214 <_dtoa_r+0xb4c>
 8008f30:	2300      	movs	r3, #0
 8008f32:	4629      	mov	r1, r5
 8008f34:	220a      	movs	r2, #10
 8008f36:	4658      	mov	r0, fp
 8008f38:	f000 fff0 	bl	8009f1c <__multadd>
 8008f3c:	9b00      	ldr	r3, [sp, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	4605      	mov	r5, r0
 8008f42:	dc67      	bgt.n	8009014 <_dtoa_r+0x94c>
 8008f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	dc41      	bgt.n	8008fce <_dtoa_r+0x906>
 8008f4a:	e063      	b.n	8009014 <_dtoa_r+0x94c>
 8008f4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008f4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008f52:	e746      	b.n	8008de2 <_dtoa_r+0x71a>
 8008f54:	9b07      	ldr	r3, [sp, #28]
 8008f56:	1e5c      	subs	r4, r3, #1
 8008f58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f5a:	42a3      	cmp	r3, r4
 8008f5c:	bfbf      	itttt	lt
 8008f5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008f60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008f62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008f64:	1ae3      	sublt	r3, r4, r3
 8008f66:	bfb4      	ite	lt
 8008f68:	18d2      	addlt	r2, r2, r3
 8008f6a:	1b1c      	subge	r4, r3, r4
 8008f6c:	9b07      	ldr	r3, [sp, #28]
 8008f6e:	bfbc      	itt	lt
 8008f70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008f72:	2400      	movlt	r4, #0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	bfb5      	itete	lt
 8008f78:	eba8 0603 	sublt.w	r6, r8, r3
 8008f7c:	9b07      	ldrge	r3, [sp, #28]
 8008f7e:	2300      	movlt	r3, #0
 8008f80:	4646      	movge	r6, r8
 8008f82:	e730      	b.n	8008de6 <_dtoa_r+0x71e>
 8008f84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008f88:	4646      	mov	r6, r8
 8008f8a:	e735      	b.n	8008df8 <_dtoa_r+0x730>
 8008f8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f8e:	e75c      	b.n	8008e4a <_dtoa_r+0x782>
 8008f90:	2300      	movs	r3, #0
 8008f92:	e788      	b.n	8008ea6 <_dtoa_r+0x7de>
 8008f94:	3fe00000 	.word	0x3fe00000
 8008f98:	40240000 	.word	0x40240000
 8008f9c:	40140000 	.word	0x40140000
 8008fa0:	9b02      	ldr	r3, [sp, #8]
 8008fa2:	e780      	b.n	8008ea6 <_dtoa_r+0x7de>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fa8:	e782      	b.n	8008eb0 <_dtoa_r+0x7e8>
 8008faa:	d099      	beq.n	8008ee0 <_dtoa_r+0x818>
 8008fac:	9a08      	ldr	r2, [sp, #32]
 8008fae:	331c      	adds	r3, #28
 8008fb0:	441a      	add	r2, r3
 8008fb2:	4498      	add	r8, r3
 8008fb4:	441e      	add	r6, r3
 8008fb6:	9208      	str	r2, [sp, #32]
 8008fb8:	e792      	b.n	8008ee0 <_dtoa_r+0x818>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	e7f6      	b.n	8008fac <_dtoa_r+0x8e4>
 8008fbe:	9b07      	ldr	r3, [sp, #28]
 8008fc0:	9704      	str	r7, [sp, #16]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	dc20      	bgt.n	8009008 <_dtoa_r+0x940>
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	dd1e      	ble.n	800900c <_dtoa_r+0x944>
 8008fce:	9b00      	ldr	r3, [sp, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f47f aec0 	bne.w	8008d56 <_dtoa_r+0x68e>
 8008fd6:	4621      	mov	r1, r4
 8008fd8:	2205      	movs	r2, #5
 8008fda:	4658      	mov	r0, fp
 8008fdc:	f000 ff9e 	bl	8009f1c <__multadd>
 8008fe0:	4601      	mov	r1, r0
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	4648      	mov	r0, r9
 8008fe6:	f001 f9fb 	bl	800a3e0 <__mcmp>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	f77f aeb3 	ble.w	8008d56 <_dtoa_r+0x68e>
 8008ff0:	4656      	mov	r6, sl
 8008ff2:	2331      	movs	r3, #49	@ 0x31
 8008ff4:	f806 3b01 	strb.w	r3, [r6], #1
 8008ff8:	9b04      	ldr	r3, [sp, #16]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	9304      	str	r3, [sp, #16]
 8008ffe:	e6ae      	b.n	8008d5e <_dtoa_r+0x696>
 8009000:	9c07      	ldr	r4, [sp, #28]
 8009002:	9704      	str	r7, [sp, #16]
 8009004:	4625      	mov	r5, r4
 8009006:	e7f3      	b.n	8008ff0 <_dtoa_r+0x928>
 8009008:	9b07      	ldr	r3, [sp, #28]
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800900e:	2b00      	cmp	r3, #0
 8009010:	f000 8104 	beq.w	800921c <_dtoa_r+0xb54>
 8009014:	2e00      	cmp	r6, #0
 8009016:	dd05      	ble.n	8009024 <_dtoa_r+0x95c>
 8009018:	4629      	mov	r1, r5
 800901a:	4632      	mov	r2, r6
 800901c:	4658      	mov	r0, fp
 800901e:	f001 f973 	bl	800a308 <__lshift>
 8009022:	4605      	mov	r5, r0
 8009024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009026:	2b00      	cmp	r3, #0
 8009028:	d05a      	beq.n	80090e0 <_dtoa_r+0xa18>
 800902a:	6869      	ldr	r1, [r5, #4]
 800902c:	4658      	mov	r0, fp
 800902e:	f000 ff13 	bl	8009e58 <_Balloc>
 8009032:	4606      	mov	r6, r0
 8009034:	b928      	cbnz	r0, 8009042 <_dtoa_r+0x97a>
 8009036:	4b84      	ldr	r3, [pc, #528]	@ (8009248 <_dtoa_r+0xb80>)
 8009038:	4602      	mov	r2, r0
 800903a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800903e:	f7ff bb5a 	b.w	80086f6 <_dtoa_r+0x2e>
 8009042:	692a      	ldr	r2, [r5, #16]
 8009044:	3202      	adds	r2, #2
 8009046:	0092      	lsls	r2, r2, #2
 8009048:	f105 010c 	add.w	r1, r5, #12
 800904c:	300c      	adds	r0, #12
 800904e:	f7ff fa92 	bl	8008576 <memcpy>
 8009052:	2201      	movs	r2, #1
 8009054:	4631      	mov	r1, r6
 8009056:	4658      	mov	r0, fp
 8009058:	f001 f956 	bl	800a308 <__lshift>
 800905c:	f10a 0301 	add.w	r3, sl, #1
 8009060:	9307      	str	r3, [sp, #28]
 8009062:	9b00      	ldr	r3, [sp, #0]
 8009064:	4453      	add	r3, sl
 8009066:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009068:	9b02      	ldr	r3, [sp, #8]
 800906a:	f003 0301 	and.w	r3, r3, #1
 800906e:	462f      	mov	r7, r5
 8009070:	930a      	str	r3, [sp, #40]	@ 0x28
 8009072:	4605      	mov	r5, r0
 8009074:	9b07      	ldr	r3, [sp, #28]
 8009076:	4621      	mov	r1, r4
 8009078:	3b01      	subs	r3, #1
 800907a:	4648      	mov	r0, r9
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	f7ff fa99 	bl	80085b4 <quorem>
 8009082:	4639      	mov	r1, r7
 8009084:	9002      	str	r0, [sp, #8]
 8009086:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800908a:	4648      	mov	r0, r9
 800908c:	f001 f9a8 	bl	800a3e0 <__mcmp>
 8009090:	462a      	mov	r2, r5
 8009092:	9008      	str	r0, [sp, #32]
 8009094:	4621      	mov	r1, r4
 8009096:	4658      	mov	r0, fp
 8009098:	f001 f9be 	bl	800a418 <__mdiff>
 800909c:	68c2      	ldr	r2, [r0, #12]
 800909e:	4606      	mov	r6, r0
 80090a0:	bb02      	cbnz	r2, 80090e4 <_dtoa_r+0xa1c>
 80090a2:	4601      	mov	r1, r0
 80090a4:	4648      	mov	r0, r9
 80090a6:	f001 f99b 	bl	800a3e0 <__mcmp>
 80090aa:	4602      	mov	r2, r0
 80090ac:	4631      	mov	r1, r6
 80090ae:	4658      	mov	r0, fp
 80090b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80090b2:	f000 ff11 	bl	8009ed8 <_Bfree>
 80090b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090ba:	9e07      	ldr	r6, [sp, #28]
 80090bc:	ea43 0102 	orr.w	r1, r3, r2
 80090c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090c2:	4319      	orrs	r1, r3
 80090c4:	d110      	bne.n	80090e8 <_dtoa_r+0xa20>
 80090c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80090ca:	d029      	beq.n	8009120 <_dtoa_r+0xa58>
 80090cc:	9b08      	ldr	r3, [sp, #32]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	dd02      	ble.n	80090d8 <_dtoa_r+0xa10>
 80090d2:	9b02      	ldr	r3, [sp, #8]
 80090d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80090d8:	9b00      	ldr	r3, [sp, #0]
 80090da:	f883 8000 	strb.w	r8, [r3]
 80090de:	e63f      	b.n	8008d60 <_dtoa_r+0x698>
 80090e0:	4628      	mov	r0, r5
 80090e2:	e7bb      	b.n	800905c <_dtoa_r+0x994>
 80090e4:	2201      	movs	r2, #1
 80090e6:	e7e1      	b.n	80090ac <_dtoa_r+0x9e4>
 80090e8:	9b08      	ldr	r3, [sp, #32]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	db04      	blt.n	80090f8 <_dtoa_r+0xa30>
 80090ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80090f0:	430b      	orrs	r3, r1
 80090f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80090f4:	430b      	orrs	r3, r1
 80090f6:	d120      	bne.n	800913a <_dtoa_r+0xa72>
 80090f8:	2a00      	cmp	r2, #0
 80090fa:	dded      	ble.n	80090d8 <_dtoa_r+0xa10>
 80090fc:	4649      	mov	r1, r9
 80090fe:	2201      	movs	r2, #1
 8009100:	4658      	mov	r0, fp
 8009102:	f001 f901 	bl	800a308 <__lshift>
 8009106:	4621      	mov	r1, r4
 8009108:	4681      	mov	r9, r0
 800910a:	f001 f969 	bl	800a3e0 <__mcmp>
 800910e:	2800      	cmp	r0, #0
 8009110:	dc03      	bgt.n	800911a <_dtoa_r+0xa52>
 8009112:	d1e1      	bne.n	80090d8 <_dtoa_r+0xa10>
 8009114:	f018 0f01 	tst.w	r8, #1
 8009118:	d0de      	beq.n	80090d8 <_dtoa_r+0xa10>
 800911a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800911e:	d1d8      	bne.n	80090d2 <_dtoa_r+0xa0a>
 8009120:	9a00      	ldr	r2, [sp, #0]
 8009122:	2339      	movs	r3, #57	@ 0x39
 8009124:	7013      	strb	r3, [r2, #0]
 8009126:	4633      	mov	r3, r6
 8009128:	461e      	mov	r6, r3
 800912a:	3b01      	subs	r3, #1
 800912c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009130:	2a39      	cmp	r2, #57	@ 0x39
 8009132:	d052      	beq.n	80091da <_dtoa_r+0xb12>
 8009134:	3201      	adds	r2, #1
 8009136:	701a      	strb	r2, [r3, #0]
 8009138:	e612      	b.n	8008d60 <_dtoa_r+0x698>
 800913a:	2a00      	cmp	r2, #0
 800913c:	dd07      	ble.n	800914e <_dtoa_r+0xa86>
 800913e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009142:	d0ed      	beq.n	8009120 <_dtoa_r+0xa58>
 8009144:	9a00      	ldr	r2, [sp, #0]
 8009146:	f108 0301 	add.w	r3, r8, #1
 800914a:	7013      	strb	r3, [r2, #0]
 800914c:	e608      	b.n	8008d60 <_dtoa_r+0x698>
 800914e:	9b07      	ldr	r3, [sp, #28]
 8009150:	9a07      	ldr	r2, [sp, #28]
 8009152:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009158:	4293      	cmp	r3, r2
 800915a:	d028      	beq.n	80091ae <_dtoa_r+0xae6>
 800915c:	4649      	mov	r1, r9
 800915e:	2300      	movs	r3, #0
 8009160:	220a      	movs	r2, #10
 8009162:	4658      	mov	r0, fp
 8009164:	f000 feda 	bl	8009f1c <__multadd>
 8009168:	42af      	cmp	r7, r5
 800916a:	4681      	mov	r9, r0
 800916c:	f04f 0300 	mov.w	r3, #0
 8009170:	f04f 020a 	mov.w	r2, #10
 8009174:	4639      	mov	r1, r7
 8009176:	4658      	mov	r0, fp
 8009178:	d107      	bne.n	800918a <_dtoa_r+0xac2>
 800917a:	f000 fecf 	bl	8009f1c <__multadd>
 800917e:	4607      	mov	r7, r0
 8009180:	4605      	mov	r5, r0
 8009182:	9b07      	ldr	r3, [sp, #28]
 8009184:	3301      	adds	r3, #1
 8009186:	9307      	str	r3, [sp, #28]
 8009188:	e774      	b.n	8009074 <_dtoa_r+0x9ac>
 800918a:	f000 fec7 	bl	8009f1c <__multadd>
 800918e:	4629      	mov	r1, r5
 8009190:	4607      	mov	r7, r0
 8009192:	2300      	movs	r3, #0
 8009194:	220a      	movs	r2, #10
 8009196:	4658      	mov	r0, fp
 8009198:	f000 fec0 	bl	8009f1c <__multadd>
 800919c:	4605      	mov	r5, r0
 800919e:	e7f0      	b.n	8009182 <_dtoa_r+0xaba>
 80091a0:	9b00      	ldr	r3, [sp, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	bfcc      	ite	gt
 80091a6:	461e      	movgt	r6, r3
 80091a8:	2601      	movle	r6, #1
 80091aa:	4456      	add	r6, sl
 80091ac:	2700      	movs	r7, #0
 80091ae:	4649      	mov	r1, r9
 80091b0:	2201      	movs	r2, #1
 80091b2:	4658      	mov	r0, fp
 80091b4:	f001 f8a8 	bl	800a308 <__lshift>
 80091b8:	4621      	mov	r1, r4
 80091ba:	4681      	mov	r9, r0
 80091bc:	f001 f910 	bl	800a3e0 <__mcmp>
 80091c0:	2800      	cmp	r0, #0
 80091c2:	dcb0      	bgt.n	8009126 <_dtoa_r+0xa5e>
 80091c4:	d102      	bne.n	80091cc <_dtoa_r+0xb04>
 80091c6:	f018 0f01 	tst.w	r8, #1
 80091ca:	d1ac      	bne.n	8009126 <_dtoa_r+0xa5e>
 80091cc:	4633      	mov	r3, r6
 80091ce:	461e      	mov	r6, r3
 80091d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091d4:	2a30      	cmp	r2, #48	@ 0x30
 80091d6:	d0fa      	beq.n	80091ce <_dtoa_r+0xb06>
 80091d8:	e5c2      	b.n	8008d60 <_dtoa_r+0x698>
 80091da:	459a      	cmp	sl, r3
 80091dc:	d1a4      	bne.n	8009128 <_dtoa_r+0xa60>
 80091de:	9b04      	ldr	r3, [sp, #16]
 80091e0:	3301      	adds	r3, #1
 80091e2:	9304      	str	r3, [sp, #16]
 80091e4:	2331      	movs	r3, #49	@ 0x31
 80091e6:	f88a 3000 	strb.w	r3, [sl]
 80091ea:	e5b9      	b.n	8008d60 <_dtoa_r+0x698>
 80091ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80091ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800924c <_dtoa_r+0xb84>
 80091f2:	b11b      	cbz	r3, 80091fc <_dtoa_r+0xb34>
 80091f4:	f10a 0308 	add.w	r3, sl, #8
 80091f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80091fa:	6013      	str	r3, [r2, #0]
 80091fc:	4650      	mov	r0, sl
 80091fe:	b019      	add	sp, #100	@ 0x64
 8009200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009206:	2b01      	cmp	r3, #1
 8009208:	f77f ae37 	ble.w	8008e7a <_dtoa_r+0x7b2>
 800920c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800920e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009210:	2001      	movs	r0, #1
 8009212:	e655      	b.n	8008ec0 <_dtoa_r+0x7f8>
 8009214:	9b00      	ldr	r3, [sp, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	f77f aed6 	ble.w	8008fc8 <_dtoa_r+0x900>
 800921c:	4656      	mov	r6, sl
 800921e:	4621      	mov	r1, r4
 8009220:	4648      	mov	r0, r9
 8009222:	f7ff f9c7 	bl	80085b4 <quorem>
 8009226:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800922a:	f806 8b01 	strb.w	r8, [r6], #1
 800922e:	9b00      	ldr	r3, [sp, #0]
 8009230:	eba6 020a 	sub.w	r2, r6, sl
 8009234:	4293      	cmp	r3, r2
 8009236:	ddb3      	ble.n	80091a0 <_dtoa_r+0xad8>
 8009238:	4649      	mov	r1, r9
 800923a:	2300      	movs	r3, #0
 800923c:	220a      	movs	r2, #10
 800923e:	4658      	mov	r0, fp
 8009240:	f000 fe6c 	bl	8009f1c <__multadd>
 8009244:	4681      	mov	r9, r0
 8009246:	e7ea      	b.n	800921e <_dtoa_r+0xb56>
 8009248:	0800b58d 	.word	0x0800b58d
 800924c:	0800b511 	.word	0x0800b511

08009250 <rshift>:
 8009250:	6903      	ldr	r3, [r0, #16]
 8009252:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009256:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800925a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800925e:	f100 0414 	add.w	r4, r0, #20
 8009262:	dd45      	ble.n	80092f0 <rshift+0xa0>
 8009264:	f011 011f 	ands.w	r1, r1, #31
 8009268:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800926c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009270:	d10c      	bne.n	800928c <rshift+0x3c>
 8009272:	f100 0710 	add.w	r7, r0, #16
 8009276:	4629      	mov	r1, r5
 8009278:	42b1      	cmp	r1, r6
 800927a:	d334      	bcc.n	80092e6 <rshift+0x96>
 800927c:	1a9b      	subs	r3, r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	1eea      	subs	r2, r5, #3
 8009282:	4296      	cmp	r6, r2
 8009284:	bf38      	it	cc
 8009286:	2300      	movcc	r3, #0
 8009288:	4423      	add	r3, r4
 800928a:	e015      	b.n	80092b8 <rshift+0x68>
 800928c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009290:	f1c1 0820 	rsb	r8, r1, #32
 8009294:	40cf      	lsrs	r7, r1
 8009296:	f105 0e04 	add.w	lr, r5, #4
 800929a:	46a1      	mov	r9, r4
 800929c:	4576      	cmp	r6, lr
 800929e:	46f4      	mov	ip, lr
 80092a0:	d815      	bhi.n	80092ce <rshift+0x7e>
 80092a2:	1a9a      	subs	r2, r3, r2
 80092a4:	0092      	lsls	r2, r2, #2
 80092a6:	3a04      	subs	r2, #4
 80092a8:	3501      	adds	r5, #1
 80092aa:	42ae      	cmp	r6, r5
 80092ac:	bf38      	it	cc
 80092ae:	2200      	movcc	r2, #0
 80092b0:	18a3      	adds	r3, r4, r2
 80092b2:	50a7      	str	r7, [r4, r2]
 80092b4:	b107      	cbz	r7, 80092b8 <rshift+0x68>
 80092b6:	3304      	adds	r3, #4
 80092b8:	1b1a      	subs	r2, r3, r4
 80092ba:	42a3      	cmp	r3, r4
 80092bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80092c0:	bf08      	it	eq
 80092c2:	2300      	moveq	r3, #0
 80092c4:	6102      	str	r2, [r0, #16]
 80092c6:	bf08      	it	eq
 80092c8:	6143      	streq	r3, [r0, #20]
 80092ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092ce:	f8dc c000 	ldr.w	ip, [ip]
 80092d2:	fa0c fc08 	lsl.w	ip, ip, r8
 80092d6:	ea4c 0707 	orr.w	r7, ip, r7
 80092da:	f849 7b04 	str.w	r7, [r9], #4
 80092de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092e2:	40cf      	lsrs	r7, r1
 80092e4:	e7da      	b.n	800929c <rshift+0x4c>
 80092e6:	f851 cb04 	ldr.w	ip, [r1], #4
 80092ea:	f847 cf04 	str.w	ip, [r7, #4]!
 80092ee:	e7c3      	b.n	8009278 <rshift+0x28>
 80092f0:	4623      	mov	r3, r4
 80092f2:	e7e1      	b.n	80092b8 <rshift+0x68>

080092f4 <__hexdig_fun>:
 80092f4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80092f8:	2b09      	cmp	r3, #9
 80092fa:	d802      	bhi.n	8009302 <__hexdig_fun+0xe>
 80092fc:	3820      	subs	r0, #32
 80092fe:	b2c0      	uxtb	r0, r0
 8009300:	4770      	bx	lr
 8009302:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009306:	2b05      	cmp	r3, #5
 8009308:	d801      	bhi.n	800930e <__hexdig_fun+0x1a>
 800930a:	3847      	subs	r0, #71	@ 0x47
 800930c:	e7f7      	b.n	80092fe <__hexdig_fun+0xa>
 800930e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009312:	2b05      	cmp	r3, #5
 8009314:	d801      	bhi.n	800931a <__hexdig_fun+0x26>
 8009316:	3827      	subs	r0, #39	@ 0x27
 8009318:	e7f1      	b.n	80092fe <__hexdig_fun+0xa>
 800931a:	2000      	movs	r0, #0
 800931c:	4770      	bx	lr
	...

08009320 <__gethex>:
 8009320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009324:	b085      	sub	sp, #20
 8009326:	468a      	mov	sl, r1
 8009328:	9302      	str	r3, [sp, #8]
 800932a:	680b      	ldr	r3, [r1, #0]
 800932c:	9001      	str	r0, [sp, #4]
 800932e:	4690      	mov	r8, r2
 8009330:	1c9c      	adds	r4, r3, #2
 8009332:	46a1      	mov	r9, r4
 8009334:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009338:	2830      	cmp	r0, #48	@ 0x30
 800933a:	d0fa      	beq.n	8009332 <__gethex+0x12>
 800933c:	eba9 0303 	sub.w	r3, r9, r3
 8009340:	f1a3 0b02 	sub.w	fp, r3, #2
 8009344:	f7ff ffd6 	bl	80092f4 <__hexdig_fun>
 8009348:	4605      	mov	r5, r0
 800934a:	2800      	cmp	r0, #0
 800934c:	d168      	bne.n	8009420 <__gethex+0x100>
 800934e:	49a0      	ldr	r1, [pc, #640]	@ (80095d0 <__gethex+0x2b0>)
 8009350:	2201      	movs	r2, #1
 8009352:	4648      	mov	r0, r9
 8009354:	f7ff f8b3 	bl	80084be <strncmp>
 8009358:	4607      	mov	r7, r0
 800935a:	2800      	cmp	r0, #0
 800935c:	d167      	bne.n	800942e <__gethex+0x10e>
 800935e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009362:	4626      	mov	r6, r4
 8009364:	f7ff ffc6 	bl	80092f4 <__hexdig_fun>
 8009368:	2800      	cmp	r0, #0
 800936a:	d062      	beq.n	8009432 <__gethex+0x112>
 800936c:	4623      	mov	r3, r4
 800936e:	7818      	ldrb	r0, [r3, #0]
 8009370:	2830      	cmp	r0, #48	@ 0x30
 8009372:	4699      	mov	r9, r3
 8009374:	f103 0301 	add.w	r3, r3, #1
 8009378:	d0f9      	beq.n	800936e <__gethex+0x4e>
 800937a:	f7ff ffbb 	bl	80092f4 <__hexdig_fun>
 800937e:	fab0 f580 	clz	r5, r0
 8009382:	096d      	lsrs	r5, r5, #5
 8009384:	f04f 0b01 	mov.w	fp, #1
 8009388:	464a      	mov	r2, r9
 800938a:	4616      	mov	r6, r2
 800938c:	3201      	adds	r2, #1
 800938e:	7830      	ldrb	r0, [r6, #0]
 8009390:	f7ff ffb0 	bl	80092f4 <__hexdig_fun>
 8009394:	2800      	cmp	r0, #0
 8009396:	d1f8      	bne.n	800938a <__gethex+0x6a>
 8009398:	498d      	ldr	r1, [pc, #564]	@ (80095d0 <__gethex+0x2b0>)
 800939a:	2201      	movs	r2, #1
 800939c:	4630      	mov	r0, r6
 800939e:	f7ff f88e 	bl	80084be <strncmp>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	d13f      	bne.n	8009426 <__gethex+0x106>
 80093a6:	b944      	cbnz	r4, 80093ba <__gethex+0x9a>
 80093a8:	1c74      	adds	r4, r6, #1
 80093aa:	4622      	mov	r2, r4
 80093ac:	4616      	mov	r6, r2
 80093ae:	3201      	adds	r2, #1
 80093b0:	7830      	ldrb	r0, [r6, #0]
 80093b2:	f7ff ff9f 	bl	80092f4 <__hexdig_fun>
 80093b6:	2800      	cmp	r0, #0
 80093b8:	d1f8      	bne.n	80093ac <__gethex+0x8c>
 80093ba:	1ba4      	subs	r4, r4, r6
 80093bc:	00a7      	lsls	r7, r4, #2
 80093be:	7833      	ldrb	r3, [r6, #0]
 80093c0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80093c4:	2b50      	cmp	r3, #80	@ 0x50
 80093c6:	d13e      	bne.n	8009446 <__gethex+0x126>
 80093c8:	7873      	ldrb	r3, [r6, #1]
 80093ca:	2b2b      	cmp	r3, #43	@ 0x2b
 80093cc:	d033      	beq.n	8009436 <__gethex+0x116>
 80093ce:	2b2d      	cmp	r3, #45	@ 0x2d
 80093d0:	d034      	beq.n	800943c <__gethex+0x11c>
 80093d2:	1c71      	adds	r1, r6, #1
 80093d4:	2400      	movs	r4, #0
 80093d6:	7808      	ldrb	r0, [r1, #0]
 80093d8:	f7ff ff8c 	bl	80092f4 <__hexdig_fun>
 80093dc:	1e43      	subs	r3, r0, #1
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	2b18      	cmp	r3, #24
 80093e2:	d830      	bhi.n	8009446 <__gethex+0x126>
 80093e4:	f1a0 0210 	sub.w	r2, r0, #16
 80093e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80093ec:	f7ff ff82 	bl	80092f4 <__hexdig_fun>
 80093f0:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80093f4:	fa5f fc8c 	uxtb.w	ip, ip
 80093f8:	f1bc 0f18 	cmp.w	ip, #24
 80093fc:	f04f 030a 	mov.w	r3, #10
 8009400:	d91e      	bls.n	8009440 <__gethex+0x120>
 8009402:	b104      	cbz	r4, 8009406 <__gethex+0xe6>
 8009404:	4252      	negs	r2, r2
 8009406:	4417      	add	r7, r2
 8009408:	f8ca 1000 	str.w	r1, [sl]
 800940c:	b1ed      	cbz	r5, 800944a <__gethex+0x12a>
 800940e:	f1bb 0f00 	cmp.w	fp, #0
 8009412:	bf0c      	ite	eq
 8009414:	2506      	moveq	r5, #6
 8009416:	2500      	movne	r5, #0
 8009418:	4628      	mov	r0, r5
 800941a:	b005      	add	sp, #20
 800941c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009420:	2500      	movs	r5, #0
 8009422:	462c      	mov	r4, r5
 8009424:	e7b0      	b.n	8009388 <__gethex+0x68>
 8009426:	2c00      	cmp	r4, #0
 8009428:	d1c7      	bne.n	80093ba <__gethex+0x9a>
 800942a:	4627      	mov	r7, r4
 800942c:	e7c7      	b.n	80093be <__gethex+0x9e>
 800942e:	464e      	mov	r6, r9
 8009430:	462f      	mov	r7, r5
 8009432:	2501      	movs	r5, #1
 8009434:	e7c3      	b.n	80093be <__gethex+0x9e>
 8009436:	2400      	movs	r4, #0
 8009438:	1cb1      	adds	r1, r6, #2
 800943a:	e7cc      	b.n	80093d6 <__gethex+0xb6>
 800943c:	2401      	movs	r4, #1
 800943e:	e7fb      	b.n	8009438 <__gethex+0x118>
 8009440:	fb03 0002 	mla	r0, r3, r2, r0
 8009444:	e7ce      	b.n	80093e4 <__gethex+0xc4>
 8009446:	4631      	mov	r1, r6
 8009448:	e7de      	b.n	8009408 <__gethex+0xe8>
 800944a:	eba6 0309 	sub.w	r3, r6, r9
 800944e:	3b01      	subs	r3, #1
 8009450:	4629      	mov	r1, r5
 8009452:	2b07      	cmp	r3, #7
 8009454:	dc0a      	bgt.n	800946c <__gethex+0x14c>
 8009456:	9801      	ldr	r0, [sp, #4]
 8009458:	f000 fcfe 	bl	8009e58 <_Balloc>
 800945c:	4604      	mov	r4, r0
 800945e:	b940      	cbnz	r0, 8009472 <__gethex+0x152>
 8009460:	4b5c      	ldr	r3, [pc, #368]	@ (80095d4 <__gethex+0x2b4>)
 8009462:	4602      	mov	r2, r0
 8009464:	21e4      	movs	r1, #228	@ 0xe4
 8009466:	485c      	ldr	r0, [pc, #368]	@ (80095d8 <__gethex+0x2b8>)
 8009468:	f001 fbb0 	bl	800abcc <__assert_func>
 800946c:	3101      	adds	r1, #1
 800946e:	105b      	asrs	r3, r3, #1
 8009470:	e7ef      	b.n	8009452 <__gethex+0x132>
 8009472:	f100 0a14 	add.w	sl, r0, #20
 8009476:	2300      	movs	r3, #0
 8009478:	4655      	mov	r5, sl
 800947a:	469b      	mov	fp, r3
 800947c:	45b1      	cmp	r9, r6
 800947e:	d337      	bcc.n	80094f0 <__gethex+0x1d0>
 8009480:	f845 bb04 	str.w	fp, [r5], #4
 8009484:	eba5 050a 	sub.w	r5, r5, sl
 8009488:	10ad      	asrs	r5, r5, #2
 800948a:	6125      	str	r5, [r4, #16]
 800948c:	4658      	mov	r0, fp
 800948e:	f000 fdd5 	bl	800a03c <__hi0bits>
 8009492:	016d      	lsls	r5, r5, #5
 8009494:	f8d8 6000 	ldr.w	r6, [r8]
 8009498:	1a2d      	subs	r5, r5, r0
 800949a:	42b5      	cmp	r5, r6
 800949c:	dd54      	ble.n	8009548 <__gethex+0x228>
 800949e:	1bad      	subs	r5, r5, r6
 80094a0:	4629      	mov	r1, r5
 80094a2:	4620      	mov	r0, r4
 80094a4:	f001 f969 	bl	800a77a <__any_on>
 80094a8:	4681      	mov	r9, r0
 80094aa:	b178      	cbz	r0, 80094cc <__gethex+0x1ac>
 80094ac:	1e6b      	subs	r3, r5, #1
 80094ae:	1159      	asrs	r1, r3, #5
 80094b0:	f003 021f 	and.w	r2, r3, #31
 80094b4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80094b8:	f04f 0901 	mov.w	r9, #1
 80094bc:	fa09 f202 	lsl.w	r2, r9, r2
 80094c0:	420a      	tst	r2, r1
 80094c2:	d003      	beq.n	80094cc <__gethex+0x1ac>
 80094c4:	454b      	cmp	r3, r9
 80094c6:	dc36      	bgt.n	8009536 <__gethex+0x216>
 80094c8:	f04f 0902 	mov.w	r9, #2
 80094cc:	4629      	mov	r1, r5
 80094ce:	4620      	mov	r0, r4
 80094d0:	f7ff febe 	bl	8009250 <rshift>
 80094d4:	442f      	add	r7, r5
 80094d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80094da:	42bb      	cmp	r3, r7
 80094dc:	da42      	bge.n	8009564 <__gethex+0x244>
 80094de:	9801      	ldr	r0, [sp, #4]
 80094e0:	4621      	mov	r1, r4
 80094e2:	f000 fcf9 	bl	8009ed8 <_Bfree>
 80094e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094e8:	2300      	movs	r3, #0
 80094ea:	6013      	str	r3, [r2, #0]
 80094ec:	25a3      	movs	r5, #163	@ 0xa3
 80094ee:	e793      	b.n	8009418 <__gethex+0xf8>
 80094f0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80094f4:	2a2e      	cmp	r2, #46	@ 0x2e
 80094f6:	d012      	beq.n	800951e <__gethex+0x1fe>
 80094f8:	2b20      	cmp	r3, #32
 80094fa:	d104      	bne.n	8009506 <__gethex+0x1e6>
 80094fc:	f845 bb04 	str.w	fp, [r5], #4
 8009500:	f04f 0b00 	mov.w	fp, #0
 8009504:	465b      	mov	r3, fp
 8009506:	7830      	ldrb	r0, [r6, #0]
 8009508:	9303      	str	r3, [sp, #12]
 800950a:	f7ff fef3 	bl	80092f4 <__hexdig_fun>
 800950e:	9b03      	ldr	r3, [sp, #12]
 8009510:	f000 000f 	and.w	r0, r0, #15
 8009514:	4098      	lsls	r0, r3
 8009516:	ea4b 0b00 	orr.w	fp, fp, r0
 800951a:	3304      	adds	r3, #4
 800951c:	e7ae      	b.n	800947c <__gethex+0x15c>
 800951e:	45b1      	cmp	r9, r6
 8009520:	d8ea      	bhi.n	80094f8 <__gethex+0x1d8>
 8009522:	492b      	ldr	r1, [pc, #172]	@ (80095d0 <__gethex+0x2b0>)
 8009524:	9303      	str	r3, [sp, #12]
 8009526:	2201      	movs	r2, #1
 8009528:	4630      	mov	r0, r6
 800952a:	f7fe ffc8 	bl	80084be <strncmp>
 800952e:	9b03      	ldr	r3, [sp, #12]
 8009530:	2800      	cmp	r0, #0
 8009532:	d1e1      	bne.n	80094f8 <__gethex+0x1d8>
 8009534:	e7a2      	b.n	800947c <__gethex+0x15c>
 8009536:	1ea9      	subs	r1, r5, #2
 8009538:	4620      	mov	r0, r4
 800953a:	f001 f91e 	bl	800a77a <__any_on>
 800953e:	2800      	cmp	r0, #0
 8009540:	d0c2      	beq.n	80094c8 <__gethex+0x1a8>
 8009542:	f04f 0903 	mov.w	r9, #3
 8009546:	e7c1      	b.n	80094cc <__gethex+0x1ac>
 8009548:	da09      	bge.n	800955e <__gethex+0x23e>
 800954a:	1b75      	subs	r5, r6, r5
 800954c:	4621      	mov	r1, r4
 800954e:	9801      	ldr	r0, [sp, #4]
 8009550:	462a      	mov	r2, r5
 8009552:	f000 fed9 	bl	800a308 <__lshift>
 8009556:	1b7f      	subs	r7, r7, r5
 8009558:	4604      	mov	r4, r0
 800955a:	f100 0a14 	add.w	sl, r0, #20
 800955e:	f04f 0900 	mov.w	r9, #0
 8009562:	e7b8      	b.n	80094d6 <__gethex+0x1b6>
 8009564:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009568:	42bd      	cmp	r5, r7
 800956a:	dd6f      	ble.n	800964c <__gethex+0x32c>
 800956c:	1bed      	subs	r5, r5, r7
 800956e:	42ae      	cmp	r6, r5
 8009570:	dc34      	bgt.n	80095dc <__gethex+0x2bc>
 8009572:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009576:	2b02      	cmp	r3, #2
 8009578:	d022      	beq.n	80095c0 <__gethex+0x2a0>
 800957a:	2b03      	cmp	r3, #3
 800957c:	d024      	beq.n	80095c8 <__gethex+0x2a8>
 800957e:	2b01      	cmp	r3, #1
 8009580:	d115      	bne.n	80095ae <__gethex+0x28e>
 8009582:	42ae      	cmp	r6, r5
 8009584:	d113      	bne.n	80095ae <__gethex+0x28e>
 8009586:	2e01      	cmp	r6, #1
 8009588:	d10b      	bne.n	80095a2 <__gethex+0x282>
 800958a:	9a02      	ldr	r2, [sp, #8]
 800958c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009590:	6013      	str	r3, [r2, #0]
 8009592:	2301      	movs	r3, #1
 8009594:	6123      	str	r3, [r4, #16]
 8009596:	f8ca 3000 	str.w	r3, [sl]
 800959a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800959c:	2562      	movs	r5, #98	@ 0x62
 800959e:	601c      	str	r4, [r3, #0]
 80095a0:	e73a      	b.n	8009418 <__gethex+0xf8>
 80095a2:	1e71      	subs	r1, r6, #1
 80095a4:	4620      	mov	r0, r4
 80095a6:	f001 f8e8 	bl	800a77a <__any_on>
 80095aa:	2800      	cmp	r0, #0
 80095ac:	d1ed      	bne.n	800958a <__gethex+0x26a>
 80095ae:	9801      	ldr	r0, [sp, #4]
 80095b0:	4621      	mov	r1, r4
 80095b2:	f000 fc91 	bl	8009ed8 <_Bfree>
 80095b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095b8:	2300      	movs	r3, #0
 80095ba:	6013      	str	r3, [r2, #0]
 80095bc:	2550      	movs	r5, #80	@ 0x50
 80095be:	e72b      	b.n	8009418 <__gethex+0xf8>
 80095c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1f3      	bne.n	80095ae <__gethex+0x28e>
 80095c6:	e7e0      	b.n	800958a <__gethex+0x26a>
 80095c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1dd      	bne.n	800958a <__gethex+0x26a>
 80095ce:	e7ee      	b.n	80095ae <__gethex+0x28e>
 80095d0:	0800b3b5 	.word	0x0800b3b5
 80095d4:	0800b58d 	.word	0x0800b58d
 80095d8:	0800b59e 	.word	0x0800b59e
 80095dc:	1e6f      	subs	r7, r5, #1
 80095de:	f1b9 0f00 	cmp.w	r9, #0
 80095e2:	d130      	bne.n	8009646 <__gethex+0x326>
 80095e4:	b127      	cbz	r7, 80095f0 <__gethex+0x2d0>
 80095e6:	4639      	mov	r1, r7
 80095e8:	4620      	mov	r0, r4
 80095ea:	f001 f8c6 	bl	800a77a <__any_on>
 80095ee:	4681      	mov	r9, r0
 80095f0:	117a      	asrs	r2, r7, #5
 80095f2:	2301      	movs	r3, #1
 80095f4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80095f8:	f007 071f 	and.w	r7, r7, #31
 80095fc:	40bb      	lsls	r3, r7
 80095fe:	4213      	tst	r3, r2
 8009600:	4629      	mov	r1, r5
 8009602:	4620      	mov	r0, r4
 8009604:	bf18      	it	ne
 8009606:	f049 0902 	orrne.w	r9, r9, #2
 800960a:	f7ff fe21 	bl	8009250 <rshift>
 800960e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009612:	1b76      	subs	r6, r6, r5
 8009614:	2502      	movs	r5, #2
 8009616:	f1b9 0f00 	cmp.w	r9, #0
 800961a:	d047      	beq.n	80096ac <__gethex+0x38c>
 800961c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009620:	2b02      	cmp	r3, #2
 8009622:	d015      	beq.n	8009650 <__gethex+0x330>
 8009624:	2b03      	cmp	r3, #3
 8009626:	d017      	beq.n	8009658 <__gethex+0x338>
 8009628:	2b01      	cmp	r3, #1
 800962a:	d109      	bne.n	8009640 <__gethex+0x320>
 800962c:	f019 0f02 	tst.w	r9, #2
 8009630:	d006      	beq.n	8009640 <__gethex+0x320>
 8009632:	f8da 3000 	ldr.w	r3, [sl]
 8009636:	ea49 0903 	orr.w	r9, r9, r3
 800963a:	f019 0f01 	tst.w	r9, #1
 800963e:	d10e      	bne.n	800965e <__gethex+0x33e>
 8009640:	f045 0510 	orr.w	r5, r5, #16
 8009644:	e032      	b.n	80096ac <__gethex+0x38c>
 8009646:	f04f 0901 	mov.w	r9, #1
 800964a:	e7d1      	b.n	80095f0 <__gethex+0x2d0>
 800964c:	2501      	movs	r5, #1
 800964e:	e7e2      	b.n	8009616 <__gethex+0x2f6>
 8009650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009652:	f1c3 0301 	rsb	r3, r3, #1
 8009656:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800965a:	2b00      	cmp	r3, #0
 800965c:	d0f0      	beq.n	8009640 <__gethex+0x320>
 800965e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009662:	f104 0314 	add.w	r3, r4, #20
 8009666:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800966a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800966e:	f04f 0c00 	mov.w	ip, #0
 8009672:	4618      	mov	r0, r3
 8009674:	f853 2b04 	ldr.w	r2, [r3], #4
 8009678:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800967c:	d01b      	beq.n	80096b6 <__gethex+0x396>
 800967e:	3201      	adds	r2, #1
 8009680:	6002      	str	r2, [r0, #0]
 8009682:	2d02      	cmp	r5, #2
 8009684:	f104 0314 	add.w	r3, r4, #20
 8009688:	d13c      	bne.n	8009704 <__gethex+0x3e4>
 800968a:	f8d8 2000 	ldr.w	r2, [r8]
 800968e:	3a01      	subs	r2, #1
 8009690:	42b2      	cmp	r2, r6
 8009692:	d109      	bne.n	80096a8 <__gethex+0x388>
 8009694:	1171      	asrs	r1, r6, #5
 8009696:	2201      	movs	r2, #1
 8009698:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800969c:	f006 061f 	and.w	r6, r6, #31
 80096a0:	fa02 f606 	lsl.w	r6, r2, r6
 80096a4:	421e      	tst	r6, r3
 80096a6:	d13a      	bne.n	800971e <__gethex+0x3fe>
 80096a8:	f045 0520 	orr.w	r5, r5, #32
 80096ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096ae:	601c      	str	r4, [r3, #0]
 80096b0:	9b02      	ldr	r3, [sp, #8]
 80096b2:	601f      	str	r7, [r3, #0]
 80096b4:	e6b0      	b.n	8009418 <__gethex+0xf8>
 80096b6:	4299      	cmp	r1, r3
 80096b8:	f843 cc04 	str.w	ip, [r3, #-4]
 80096bc:	d8d9      	bhi.n	8009672 <__gethex+0x352>
 80096be:	68a3      	ldr	r3, [r4, #8]
 80096c0:	459b      	cmp	fp, r3
 80096c2:	db17      	blt.n	80096f4 <__gethex+0x3d4>
 80096c4:	6861      	ldr	r1, [r4, #4]
 80096c6:	9801      	ldr	r0, [sp, #4]
 80096c8:	3101      	adds	r1, #1
 80096ca:	f000 fbc5 	bl	8009e58 <_Balloc>
 80096ce:	4681      	mov	r9, r0
 80096d0:	b918      	cbnz	r0, 80096da <__gethex+0x3ba>
 80096d2:	4b1a      	ldr	r3, [pc, #104]	@ (800973c <__gethex+0x41c>)
 80096d4:	4602      	mov	r2, r0
 80096d6:	2184      	movs	r1, #132	@ 0x84
 80096d8:	e6c5      	b.n	8009466 <__gethex+0x146>
 80096da:	6922      	ldr	r2, [r4, #16]
 80096dc:	3202      	adds	r2, #2
 80096de:	f104 010c 	add.w	r1, r4, #12
 80096e2:	0092      	lsls	r2, r2, #2
 80096e4:	300c      	adds	r0, #12
 80096e6:	f7fe ff46 	bl	8008576 <memcpy>
 80096ea:	4621      	mov	r1, r4
 80096ec:	9801      	ldr	r0, [sp, #4]
 80096ee:	f000 fbf3 	bl	8009ed8 <_Bfree>
 80096f2:	464c      	mov	r4, r9
 80096f4:	6923      	ldr	r3, [r4, #16]
 80096f6:	1c5a      	adds	r2, r3, #1
 80096f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80096fc:	6122      	str	r2, [r4, #16]
 80096fe:	2201      	movs	r2, #1
 8009700:	615a      	str	r2, [r3, #20]
 8009702:	e7be      	b.n	8009682 <__gethex+0x362>
 8009704:	6922      	ldr	r2, [r4, #16]
 8009706:	455a      	cmp	r2, fp
 8009708:	dd0b      	ble.n	8009722 <__gethex+0x402>
 800970a:	2101      	movs	r1, #1
 800970c:	4620      	mov	r0, r4
 800970e:	f7ff fd9f 	bl	8009250 <rshift>
 8009712:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009716:	3701      	adds	r7, #1
 8009718:	42bb      	cmp	r3, r7
 800971a:	f6ff aee0 	blt.w	80094de <__gethex+0x1be>
 800971e:	2501      	movs	r5, #1
 8009720:	e7c2      	b.n	80096a8 <__gethex+0x388>
 8009722:	f016 061f 	ands.w	r6, r6, #31
 8009726:	d0fa      	beq.n	800971e <__gethex+0x3fe>
 8009728:	4453      	add	r3, sl
 800972a:	f1c6 0620 	rsb	r6, r6, #32
 800972e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009732:	f000 fc83 	bl	800a03c <__hi0bits>
 8009736:	42b0      	cmp	r0, r6
 8009738:	dbe7      	blt.n	800970a <__gethex+0x3ea>
 800973a:	e7f0      	b.n	800971e <__gethex+0x3fe>
 800973c:	0800b58d 	.word	0x0800b58d

08009740 <L_shift>:
 8009740:	f1c2 0208 	rsb	r2, r2, #8
 8009744:	0092      	lsls	r2, r2, #2
 8009746:	b570      	push	{r4, r5, r6, lr}
 8009748:	f1c2 0620 	rsb	r6, r2, #32
 800974c:	6843      	ldr	r3, [r0, #4]
 800974e:	6804      	ldr	r4, [r0, #0]
 8009750:	fa03 f506 	lsl.w	r5, r3, r6
 8009754:	432c      	orrs	r4, r5
 8009756:	40d3      	lsrs	r3, r2
 8009758:	6004      	str	r4, [r0, #0]
 800975a:	f840 3f04 	str.w	r3, [r0, #4]!
 800975e:	4288      	cmp	r0, r1
 8009760:	d3f4      	bcc.n	800974c <L_shift+0xc>
 8009762:	bd70      	pop	{r4, r5, r6, pc}

08009764 <__match>:
 8009764:	b530      	push	{r4, r5, lr}
 8009766:	6803      	ldr	r3, [r0, #0]
 8009768:	3301      	adds	r3, #1
 800976a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800976e:	b914      	cbnz	r4, 8009776 <__match+0x12>
 8009770:	6003      	str	r3, [r0, #0]
 8009772:	2001      	movs	r0, #1
 8009774:	bd30      	pop	{r4, r5, pc}
 8009776:	f813 2b01 	ldrb.w	r2, [r3], #1
 800977a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800977e:	2d19      	cmp	r5, #25
 8009780:	bf98      	it	ls
 8009782:	3220      	addls	r2, #32
 8009784:	42a2      	cmp	r2, r4
 8009786:	d0f0      	beq.n	800976a <__match+0x6>
 8009788:	2000      	movs	r0, #0
 800978a:	e7f3      	b.n	8009774 <__match+0x10>

0800978c <__hexnan>:
 800978c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009790:	680b      	ldr	r3, [r1, #0]
 8009792:	6801      	ldr	r1, [r0, #0]
 8009794:	115e      	asrs	r6, r3, #5
 8009796:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800979a:	f013 031f 	ands.w	r3, r3, #31
 800979e:	b087      	sub	sp, #28
 80097a0:	bf18      	it	ne
 80097a2:	3604      	addne	r6, #4
 80097a4:	2500      	movs	r5, #0
 80097a6:	1f37      	subs	r7, r6, #4
 80097a8:	4682      	mov	sl, r0
 80097aa:	4690      	mov	r8, r2
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	f846 5c04 	str.w	r5, [r6, #-4]
 80097b2:	46b9      	mov	r9, r7
 80097b4:	463c      	mov	r4, r7
 80097b6:	9502      	str	r5, [sp, #8]
 80097b8:	46ab      	mov	fp, r5
 80097ba:	784a      	ldrb	r2, [r1, #1]
 80097bc:	1c4b      	adds	r3, r1, #1
 80097be:	9303      	str	r3, [sp, #12]
 80097c0:	b342      	cbz	r2, 8009814 <__hexnan+0x88>
 80097c2:	4610      	mov	r0, r2
 80097c4:	9105      	str	r1, [sp, #20]
 80097c6:	9204      	str	r2, [sp, #16]
 80097c8:	f7ff fd94 	bl	80092f4 <__hexdig_fun>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	d151      	bne.n	8009874 <__hexnan+0xe8>
 80097d0:	9a04      	ldr	r2, [sp, #16]
 80097d2:	9905      	ldr	r1, [sp, #20]
 80097d4:	2a20      	cmp	r2, #32
 80097d6:	d818      	bhi.n	800980a <__hexnan+0x7e>
 80097d8:	9b02      	ldr	r3, [sp, #8]
 80097da:	459b      	cmp	fp, r3
 80097dc:	dd13      	ble.n	8009806 <__hexnan+0x7a>
 80097de:	454c      	cmp	r4, r9
 80097e0:	d206      	bcs.n	80097f0 <__hexnan+0x64>
 80097e2:	2d07      	cmp	r5, #7
 80097e4:	dc04      	bgt.n	80097f0 <__hexnan+0x64>
 80097e6:	462a      	mov	r2, r5
 80097e8:	4649      	mov	r1, r9
 80097ea:	4620      	mov	r0, r4
 80097ec:	f7ff ffa8 	bl	8009740 <L_shift>
 80097f0:	4544      	cmp	r4, r8
 80097f2:	d952      	bls.n	800989a <__hexnan+0x10e>
 80097f4:	2300      	movs	r3, #0
 80097f6:	f1a4 0904 	sub.w	r9, r4, #4
 80097fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80097fe:	f8cd b008 	str.w	fp, [sp, #8]
 8009802:	464c      	mov	r4, r9
 8009804:	461d      	mov	r5, r3
 8009806:	9903      	ldr	r1, [sp, #12]
 8009808:	e7d7      	b.n	80097ba <__hexnan+0x2e>
 800980a:	2a29      	cmp	r2, #41	@ 0x29
 800980c:	d157      	bne.n	80098be <__hexnan+0x132>
 800980e:	3102      	adds	r1, #2
 8009810:	f8ca 1000 	str.w	r1, [sl]
 8009814:	f1bb 0f00 	cmp.w	fp, #0
 8009818:	d051      	beq.n	80098be <__hexnan+0x132>
 800981a:	454c      	cmp	r4, r9
 800981c:	d206      	bcs.n	800982c <__hexnan+0xa0>
 800981e:	2d07      	cmp	r5, #7
 8009820:	dc04      	bgt.n	800982c <__hexnan+0xa0>
 8009822:	462a      	mov	r2, r5
 8009824:	4649      	mov	r1, r9
 8009826:	4620      	mov	r0, r4
 8009828:	f7ff ff8a 	bl	8009740 <L_shift>
 800982c:	4544      	cmp	r4, r8
 800982e:	d936      	bls.n	800989e <__hexnan+0x112>
 8009830:	f1a8 0204 	sub.w	r2, r8, #4
 8009834:	4623      	mov	r3, r4
 8009836:	f853 1b04 	ldr.w	r1, [r3], #4
 800983a:	f842 1f04 	str.w	r1, [r2, #4]!
 800983e:	429f      	cmp	r7, r3
 8009840:	d2f9      	bcs.n	8009836 <__hexnan+0xaa>
 8009842:	1b3b      	subs	r3, r7, r4
 8009844:	f023 0303 	bic.w	r3, r3, #3
 8009848:	3304      	adds	r3, #4
 800984a:	3401      	adds	r4, #1
 800984c:	3e03      	subs	r6, #3
 800984e:	42b4      	cmp	r4, r6
 8009850:	bf88      	it	hi
 8009852:	2304      	movhi	r3, #4
 8009854:	4443      	add	r3, r8
 8009856:	2200      	movs	r2, #0
 8009858:	f843 2b04 	str.w	r2, [r3], #4
 800985c:	429f      	cmp	r7, r3
 800985e:	d2fb      	bcs.n	8009858 <__hexnan+0xcc>
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	b91b      	cbnz	r3, 800986c <__hexnan+0xe0>
 8009864:	4547      	cmp	r7, r8
 8009866:	d128      	bne.n	80098ba <__hexnan+0x12e>
 8009868:	2301      	movs	r3, #1
 800986a:	603b      	str	r3, [r7, #0]
 800986c:	2005      	movs	r0, #5
 800986e:	b007      	add	sp, #28
 8009870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009874:	3501      	adds	r5, #1
 8009876:	2d08      	cmp	r5, #8
 8009878:	f10b 0b01 	add.w	fp, fp, #1
 800987c:	dd06      	ble.n	800988c <__hexnan+0x100>
 800987e:	4544      	cmp	r4, r8
 8009880:	d9c1      	bls.n	8009806 <__hexnan+0x7a>
 8009882:	2300      	movs	r3, #0
 8009884:	f844 3c04 	str.w	r3, [r4, #-4]
 8009888:	2501      	movs	r5, #1
 800988a:	3c04      	subs	r4, #4
 800988c:	6822      	ldr	r2, [r4, #0]
 800988e:	f000 000f 	and.w	r0, r0, #15
 8009892:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009896:	6020      	str	r0, [r4, #0]
 8009898:	e7b5      	b.n	8009806 <__hexnan+0x7a>
 800989a:	2508      	movs	r5, #8
 800989c:	e7b3      	b.n	8009806 <__hexnan+0x7a>
 800989e:	9b01      	ldr	r3, [sp, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d0dd      	beq.n	8009860 <__hexnan+0xd4>
 80098a4:	f1c3 0320 	rsb	r3, r3, #32
 80098a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80098ac:	40da      	lsrs	r2, r3
 80098ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80098b2:	4013      	ands	r3, r2
 80098b4:	f846 3c04 	str.w	r3, [r6, #-4]
 80098b8:	e7d2      	b.n	8009860 <__hexnan+0xd4>
 80098ba:	3f04      	subs	r7, #4
 80098bc:	e7d0      	b.n	8009860 <__hexnan+0xd4>
 80098be:	2004      	movs	r0, #4
 80098c0:	e7d5      	b.n	800986e <__hexnan+0xe2>

080098c2 <__ssputs_r>:
 80098c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098c6:	688e      	ldr	r6, [r1, #8]
 80098c8:	461f      	mov	r7, r3
 80098ca:	42be      	cmp	r6, r7
 80098cc:	680b      	ldr	r3, [r1, #0]
 80098ce:	4682      	mov	sl, r0
 80098d0:	460c      	mov	r4, r1
 80098d2:	4690      	mov	r8, r2
 80098d4:	d82d      	bhi.n	8009932 <__ssputs_r+0x70>
 80098d6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098da:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80098de:	d026      	beq.n	800992e <__ssputs_r+0x6c>
 80098e0:	6965      	ldr	r5, [r4, #20]
 80098e2:	6909      	ldr	r1, [r1, #16]
 80098e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098e8:	eba3 0901 	sub.w	r9, r3, r1
 80098ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098f0:	1c7b      	adds	r3, r7, #1
 80098f2:	444b      	add	r3, r9
 80098f4:	106d      	asrs	r5, r5, #1
 80098f6:	429d      	cmp	r5, r3
 80098f8:	bf38      	it	cc
 80098fa:	461d      	movcc	r5, r3
 80098fc:	0553      	lsls	r3, r2, #21
 80098fe:	d527      	bpl.n	8009950 <__ssputs_r+0x8e>
 8009900:	4629      	mov	r1, r5
 8009902:	f000 f95f 	bl	8009bc4 <_malloc_r>
 8009906:	4606      	mov	r6, r0
 8009908:	b360      	cbz	r0, 8009964 <__ssputs_r+0xa2>
 800990a:	6921      	ldr	r1, [r4, #16]
 800990c:	464a      	mov	r2, r9
 800990e:	f7fe fe32 	bl	8008576 <memcpy>
 8009912:	89a3      	ldrh	r3, [r4, #12]
 8009914:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800991c:	81a3      	strh	r3, [r4, #12]
 800991e:	6126      	str	r6, [r4, #16]
 8009920:	6165      	str	r5, [r4, #20]
 8009922:	444e      	add	r6, r9
 8009924:	eba5 0509 	sub.w	r5, r5, r9
 8009928:	6026      	str	r6, [r4, #0]
 800992a:	60a5      	str	r5, [r4, #8]
 800992c:	463e      	mov	r6, r7
 800992e:	42be      	cmp	r6, r7
 8009930:	d900      	bls.n	8009934 <__ssputs_r+0x72>
 8009932:	463e      	mov	r6, r7
 8009934:	6820      	ldr	r0, [r4, #0]
 8009936:	4632      	mov	r2, r6
 8009938:	4641      	mov	r1, r8
 800993a:	f001 f8b4 	bl	800aaa6 <memmove>
 800993e:	68a3      	ldr	r3, [r4, #8]
 8009940:	1b9b      	subs	r3, r3, r6
 8009942:	60a3      	str	r3, [r4, #8]
 8009944:	6823      	ldr	r3, [r4, #0]
 8009946:	4433      	add	r3, r6
 8009948:	6023      	str	r3, [r4, #0]
 800994a:	2000      	movs	r0, #0
 800994c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009950:	462a      	mov	r2, r5
 8009952:	f000 ff76 	bl	800a842 <_realloc_r>
 8009956:	4606      	mov	r6, r0
 8009958:	2800      	cmp	r0, #0
 800995a:	d1e0      	bne.n	800991e <__ssputs_r+0x5c>
 800995c:	6921      	ldr	r1, [r4, #16]
 800995e:	4650      	mov	r0, sl
 8009960:	f001 f966 	bl	800ac30 <_free_r>
 8009964:	230c      	movs	r3, #12
 8009966:	f8ca 3000 	str.w	r3, [sl]
 800996a:	89a3      	ldrh	r3, [r4, #12]
 800996c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009970:	81a3      	strh	r3, [r4, #12]
 8009972:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009976:	e7e9      	b.n	800994c <__ssputs_r+0x8a>

08009978 <_svfiprintf_r>:
 8009978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800997c:	4698      	mov	r8, r3
 800997e:	898b      	ldrh	r3, [r1, #12]
 8009980:	061b      	lsls	r3, r3, #24
 8009982:	b09d      	sub	sp, #116	@ 0x74
 8009984:	4607      	mov	r7, r0
 8009986:	460d      	mov	r5, r1
 8009988:	4614      	mov	r4, r2
 800998a:	d510      	bpl.n	80099ae <_svfiprintf_r+0x36>
 800998c:	690b      	ldr	r3, [r1, #16]
 800998e:	b973      	cbnz	r3, 80099ae <_svfiprintf_r+0x36>
 8009990:	2140      	movs	r1, #64	@ 0x40
 8009992:	f000 f917 	bl	8009bc4 <_malloc_r>
 8009996:	6028      	str	r0, [r5, #0]
 8009998:	6128      	str	r0, [r5, #16]
 800999a:	b930      	cbnz	r0, 80099aa <_svfiprintf_r+0x32>
 800999c:	230c      	movs	r3, #12
 800999e:	603b      	str	r3, [r7, #0]
 80099a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099a4:	b01d      	add	sp, #116	@ 0x74
 80099a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099aa:	2340      	movs	r3, #64	@ 0x40
 80099ac:	616b      	str	r3, [r5, #20]
 80099ae:	2300      	movs	r3, #0
 80099b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80099b2:	2320      	movs	r3, #32
 80099b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80099bc:	2330      	movs	r3, #48	@ 0x30
 80099be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009b5c <_svfiprintf_r+0x1e4>
 80099c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099c6:	f04f 0901 	mov.w	r9, #1
 80099ca:	4623      	mov	r3, r4
 80099cc:	469a      	mov	sl, r3
 80099ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099d2:	b10a      	cbz	r2, 80099d8 <_svfiprintf_r+0x60>
 80099d4:	2a25      	cmp	r2, #37	@ 0x25
 80099d6:	d1f9      	bne.n	80099cc <_svfiprintf_r+0x54>
 80099d8:	ebba 0b04 	subs.w	fp, sl, r4
 80099dc:	d00b      	beq.n	80099f6 <_svfiprintf_r+0x7e>
 80099de:	465b      	mov	r3, fp
 80099e0:	4622      	mov	r2, r4
 80099e2:	4629      	mov	r1, r5
 80099e4:	4638      	mov	r0, r7
 80099e6:	f7ff ff6c 	bl	80098c2 <__ssputs_r>
 80099ea:	3001      	adds	r0, #1
 80099ec:	f000 80a7 	beq.w	8009b3e <_svfiprintf_r+0x1c6>
 80099f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099f2:	445a      	add	r2, fp
 80099f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80099f6:	f89a 3000 	ldrb.w	r3, [sl]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f000 809f 	beq.w	8009b3e <_svfiprintf_r+0x1c6>
 8009a00:	2300      	movs	r3, #0
 8009a02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a0a:	f10a 0a01 	add.w	sl, sl, #1
 8009a0e:	9304      	str	r3, [sp, #16]
 8009a10:	9307      	str	r3, [sp, #28]
 8009a12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a16:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a18:	4654      	mov	r4, sl
 8009a1a:	2205      	movs	r2, #5
 8009a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a20:	484e      	ldr	r0, [pc, #312]	@ (8009b5c <_svfiprintf_r+0x1e4>)
 8009a22:	f7f6 fbd5 	bl	80001d0 <memchr>
 8009a26:	9a04      	ldr	r2, [sp, #16]
 8009a28:	b9d8      	cbnz	r0, 8009a62 <_svfiprintf_r+0xea>
 8009a2a:	06d0      	lsls	r0, r2, #27
 8009a2c:	bf44      	itt	mi
 8009a2e:	2320      	movmi	r3, #32
 8009a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a34:	0711      	lsls	r1, r2, #28
 8009a36:	bf44      	itt	mi
 8009a38:	232b      	movmi	r3, #43	@ 0x2b
 8009a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a42:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a44:	d015      	beq.n	8009a72 <_svfiprintf_r+0xfa>
 8009a46:	9a07      	ldr	r2, [sp, #28]
 8009a48:	4654      	mov	r4, sl
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	f04f 0c0a 	mov.w	ip, #10
 8009a50:	4621      	mov	r1, r4
 8009a52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a56:	3b30      	subs	r3, #48	@ 0x30
 8009a58:	2b09      	cmp	r3, #9
 8009a5a:	d94b      	bls.n	8009af4 <_svfiprintf_r+0x17c>
 8009a5c:	b1b0      	cbz	r0, 8009a8c <_svfiprintf_r+0x114>
 8009a5e:	9207      	str	r2, [sp, #28]
 8009a60:	e014      	b.n	8009a8c <_svfiprintf_r+0x114>
 8009a62:	eba0 0308 	sub.w	r3, r0, r8
 8009a66:	fa09 f303 	lsl.w	r3, r9, r3
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	9304      	str	r3, [sp, #16]
 8009a6e:	46a2      	mov	sl, r4
 8009a70:	e7d2      	b.n	8009a18 <_svfiprintf_r+0xa0>
 8009a72:	9b03      	ldr	r3, [sp, #12]
 8009a74:	1d19      	adds	r1, r3, #4
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	9103      	str	r1, [sp, #12]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	bfbb      	ittet	lt
 8009a7e:	425b      	neglt	r3, r3
 8009a80:	f042 0202 	orrlt.w	r2, r2, #2
 8009a84:	9307      	strge	r3, [sp, #28]
 8009a86:	9307      	strlt	r3, [sp, #28]
 8009a88:	bfb8      	it	lt
 8009a8a:	9204      	strlt	r2, [sp, #16]
 8009a8c:	7823      	ldrb	r3, [r4, #0]
 8009a8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a90:	d10a      	bne.n	8009aa8 <_svfiprintf_r+0x130>
 8009a92:	7863      	ldrb	r3, [r4, #1]
 8009a94:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a96:	d132      	bne.n	8009afe <_svfiprintf_r+0x186>
 8009a98:	9b03      	ldr	r3, [sp, #12]
 8009a9a:	1d1a      	adds	r2, r3, #4
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	9203      	str	r2, [sp, #12]
 8009aa0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009aa4:	3402      	adds	r4, #2
 8009aa6:	9305      	str	r3, [sp, #20]
 8009aa8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009b6c <_svfiprintf_r+0x1f4>
 8009aac:	7821      	ldrb	r1, [r4, #0]
 8009aae:	2203      	movs	r2, #3
 8009ab0:	4650      	mov	r0, sl
 8009ab2:	f7f6 fb8d 	bl	80001d0 <memchr>
 8009ab6:	b138      	cbz	r0, 8009ac8 <_svfiprintf_r+0x150>
 8009ab8:	9b04      	ldr	r3, [sp, #16]
 8009aba:	eba0 000a 	sub.w	r0, r0, sl
 8009abe:	2240      	movs	r2, #64	@ 0x40
 8009ac0:	4082      	lsls	r2, r0
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	3401      	adds	r4, #1
 8009ac6:	9304      	str	r3, [sp, #16]
 8009ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009acc:	4824      	ldr	r0, [pc, #144]	@ (8009b60 <_svfiprintf_r+0x1e8>)
 8009ace:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ad2:	2206      	movs	r2, #6
 8009ad4:	f7f6 fb7c 	bl	80001d0 <memchr>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d036      	beq.n	8009b4a <_svfiprintf_r+0x1d2>
 8009adc:	4b21      	ldr	r3, [pc, #132]	@ (8009b64 <_svfiprintf_r+0x1ec>)
 8009ade:	bb1b      	cbnz	r3, 8009b28 <_svfiprintf_r+0x1b0>
 8009ae0:	9b03      	ldr	r3, [sp, #12]
 8009ae2:	3307      	adds	r3, #7
 8009ae4:	f023 0307 	bic.w	r3, r3, #7
 8009ae8:	3308      	adds	r3, #8
 8009aea:	9303      	str	r3, [sp, #12]
 8009aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aee:	4433      	add	r3, r6
 8009af0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009af2:	e76a      	b.n	80099ca <_svfiprintf_r+0x52>
 8009af4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009af8:	460c      	mov	r4, r1
 8009afa:	2001      	movs	r0, #1
 8009afc:	e7a8      	b.n	8009a50 <_svfiprintf_r+0xd8>
 8009afe:	2300      	movs	r3, #0
 8009b00:	3401      	adds	r4, #1
 8009b02:	9305      	str	r3, [sp, #20]
 8009b04:	4619      	mov	r1, r3
 8009b06:	f04f 0c0a 	mov.w	ip, #10
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b10:	3a30      	subs	r2, #48	@ 0x30
 8009b12:	2a09      	cmp	r2, #9
 8009b14:	d903      	bls.n	8009b1e <_svfiprintf_r+0x1a6>
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d0c6      	beq.n	8009aa8 <_svfiprintf_r+0x130>
 8009b1a:	9105      	str	r1, [sp, #20]
 8009b1c:	e7c4      	b.n	8009aa8 <_svfiprintf_r+0x130>
 8009b1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b22:	4604      	mov	r4, r0
 8009b24:	2301      	movs	r3, #1
 8009b26:	e7f0      	b.n	8009b0a <_svfiprintf_r+0x192>
 8009b28:	ab03      	add	r3, sp, #12
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	462a      	mov	r2, r5
 8009b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8009b68 <_svfiprintf_r+0x1f0>)
 8009b30:	a904      	add	r1, sp, #16
 8009b32:	4638      	mov	r0, r7
 8009b34:	f7fc ff80 	bl	8006a38 <_printf_float>
 8009b38:	1c42      	adds	r2, r0, #1
 8009b3a:	4606      	mov	r6, r0
 8009b3c:	d1d6      	bne.n	8009aec <_svfiprintf_r+0x174>
 8009b3e:	89ab      	ldrh	r3, [r5, #12]
 8009b40:	065b      	lsls	r3, r3, #25
 8009b42:	f53f af2d 	bmi.w	80099a0 <_svfiprintf_r+0x28>
 8009b46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b48:	e72c      	b.n	80099a4 <_svfiprintf_r+0x2c>
 8009b4a:	ab03      	add	r3, sp, #12
 8009b4c:	9300      	str	r3, [sp, #0]
 8009b4e:	462a      	mov	r2, r5
 8009b50:	4b05      	ldr	r3, [pc, #20]	@ (8009b68 <_svfiprintf_r+0x1f0>)
 8009b52:	a904      	add	r1, sp, #16
 8009b54:	4638      	mov	r0, r7
 8009b56:	f7fd fa07 	bl	8006f68 <_printf_i>
 8009b5a:	e7ed      	b.n	8009b38 <_svfiprintf_r+0x1c0>
 8009b5c:	0800b5fe 	.word	0x0800b5fe
 8009b60:	0800b608 	.word	0x0800b608
 8009b64:	08006a39 	.word	0x08006a39
 8009b68:	080098c3 	.word	0x080098c3
 8009b6c:	0800b604 	.word	0x0800b604

08009b70 <malloc>:
 8009b70:	4b02      	ldr	r3, [pc, #8]	@ (8009b7c <malloc+0xc>)
 8009b72:	4601      	mov	r1, r0
 8009b74:	6818      	ldr	r0, [r3, #0]
 8009b76:	f000 b825 	b.w	8009bc4 <_malloc_r>
 8009b7a:	bf00      	nop
 8009b7c:	2000019c 	.word	0x2000019c

08009b80 <sbrk_aligned>:
 8009b80:	b570      	push	{r4, r5, r6, lr}
 8009b82:	4e0f      	ldr	r6, [pc, #60]	@ (8009bc0 <sbrk_aligned+0x40>)
 8009b84:	460c      	mov	r4, r1
 8009b86:	6831      	ldr	r1, [r6, #0]
 8009b88:	4605      	mov	r5, r0
 8009b8a:	b911      	cbnz	r1, 8009b92 <sbrk_aligned+0x12>
 8009b8c:	f000 fffc 	bl	800ab88 <_sbrk_r>
 8009b90:	6030      	str	r0, [r6, #0]
 8009b92:	4621      	mov	r1, r4
 8009b94:	4628      	mov	r0, r5
 8009b96:	f000 fff7 	bl	800ab88 <_sbrk_r>
 8009b9a:	1c43      	adds	r3, r0, #1
 8009b9c:	d103      	bne.n	8009ba6 <sbrk_aligned+0x26>
 8009b9e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	bd70      	pop	{r4, r5, r6, pc}
 8009ba6:	1cc4      	adds	r4, r0, #3
 8009ba8:	f024 0403 	bic.w	r4, r4, #3
 8009bac:	42a0      	cmp	r0, r4
 8009bae:	d0f8      	beq.n	8009ba2 <sbrk_aligned+0x22>
 8009bb0:	1a21      	subs	r1, r4, r0
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	f000 ffe8 	bl	800ab88 <_sbrk_r>
 8009bb8:	3001      	adds	r0, #1
 8009bba:	d1f2      	bne.n	8009ba2 <sbrk_aligned+0x22>
 8009bbc:	e7ef      	b.n	8009b9e <sbrk_aligned+0x1e>
 8009bbe:	bf00      	nop
 8009bc0:	200008e0 	.word	0x200008e0

08009bc4 <_malloc_r>:
 8009bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bc8:	1ccd      	adds	r5, r1, #3
 8009bca:	f025 0503 	bic.w	r5, r5, #3
 8009bce:	3508      	adds	r5, #8
 8009bd0:	2d0c      	cmp	r5, #12
 8009bd2:	bf38      	it	cc
 8009bd4:	250c      	movcc	r5, #12
 8009bd6:	2d00      	cmp	r5, #0
 8009bd8:	4606      	mov	r6, r0
 8009bda:	db01      	blt.n	8009be0 <_malloc_r+0x1c>
 8009bdc:	42a9      	cmp	r1, r5
 8009bde:	d904      	bls.n	8009bea <_malloc_r+0x26>
 8009be0:	230c      	movs	r3, #12
 8009be2:	6033      	str	r3, [r6, #0]
 8009be4:	2000      	movs	r0, #0
 8009be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009cc0 <_malloc_r+0xfc>
 8009bee:	f000 f927 	bl	8009e40 <__malloc_lock>
 8009bf2:	f8d8 3000 	ldr.w	r3, [r8]
 8009bf6:	461c      	mov	r4, r3
 8009bf8:	bb44      	cbnz	r4, 8009c4c <_malloc_r+0x88>
 8009bfa:	4629      	mov	r1, r5
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	f7ff ffbf 	bl	8009b80 <sbrk_aligned>
 8009c02:	1c43      	adds	r3, r0, #1
 8009c04:	4604      	mov	r4, r0
 8009c06:	d158      	bne.n	8009cba <_malloc_r+0xf6>
 8009c08:	f8d8 4000 	ldr.w	r4, [r8]
 8009c0c:	4627      	mov	r7, r4
 8009c0e:	2f00      	cmp	r7, #0
 8009c10:	d143      	bne.n	8009c9a <_malloc_r+0xd6>
 8009c12:	2c00      	cmp	r4, #0
 8009c14:	d04b      	beq.n	8009cae <_malloc_r+0xea>
 8009c16:	6823      	ldr	r3, [r4, #0]
 8009c18:	4639      	mov	r1, r7
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	eb04 0903 	add.w	r9, r4, r3
 8009c20:	f000 ffb2 	bl	800ab88 <_sbrk_r>
 8009c24:	4581      	cmp	r9, r0
 8009c26:	d142      	bne.n	8009cae <_malloc_r+0xea>
 8009c28:	6821      	ldr	r1, [r4, #0]
 8009c2a:	1a6d      	subs	r5, r5, r1
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	4630      	mov	r0, r6
 8009c30:	f7ff ffa6 	bl	8009b80 <sbrk_aligned>
 8009c34:	3001      	adds	r0, #1
 8009c36:	d03a      	beq.n	8009cae <_malloc_r+0xea>
 8009c38:	6823      	ldr	r3, [r4, #0]
 8009c3a:	442b      	add	r3, r5
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8009c42:	685a      	ldr	r2, [r3, #4]
 8009c44:	bb62      	cbnz	r2, 8009ca0 <_malloc_r+0xdc>
 8009c46:	f8c8 7000 	str.w	r7, [r8]
 8009c4a:	e00f      	b.n	8009c6c <_malloc_r+0xa8>
 8009c4c:	6822      	ldr	r2, [r4, #0]
 8009c4e:	1b52      	subs	r2, r2, r5
 8009c50:	d420      	bmi.n	8009c94 <_malloc_r+0xd0>
 8009c52:	2a0b      	cmp	r2, #11
 8009c54:	d917      	bls.n	8009c86 <_malloc_r+0xc2>
 8009c56:	1961      	adds	r1, r4, r5
 8009c58:	42a3      	cmp	r3, r4
 8009c5a:	6025      	str	r5, [r4, #0]
 8009c5c:	bf18      	it	ne
 8009c5e:	6059      	strne	r1, [r3, #4]
 8009c60:	6863      	ldr	r3, [r4, #4]
 8009c62:	bf08      	it	eq
 8009c64:	f8c8 1000 	streq.w	r1, [r8]
 8009c68:	5162      	str	r2, [r4, r5]
 8009c6a:	604b      	str	r3, [r1, #4]
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	f000 f8ed 	bl	8009e4c <__malloc_unlock>
 8009c72:	f104 000b 	add.w	r0, r4, #11
 8009c76:	1d23      	adds	r3, r4, #4
 8009c78:	f020 0007 	bic.w	r0, r0, #7
 8009c7c:	1ac2      	subs	r2, r0, r3
 8009c7e:	bf1c      	itt	ne
 8009c80:	1a1b      	subne	r3, r3, r0
 8009c82:	50a3      	strne	r3, [r4, r2]
 8009c84:	e7af      	b.n	8009be6 <_malloc_r+0x22>
 8009c86:	6862      	ldr	r2, [r4, #4]
 8009c88:	42a3      	cmp	r3, r4
 8009c8a:	bf0c      	ite	eq
 8009c8c:	f8c8 2000 	streq.w	r2, [r8]
 8009c90:	605a      	strne	r2, [r3, #4]
 8009c92:	e7eb      	b.n	8009c6c <_malloc_r+0xa8>
 8009c94:	4623      	mov	r3, r4
 8009c96:	6864      	ldr	r4, [r4, #4]
 8009c98:	e7ae      	b.n	8009bf8 <_malloc_r+0x34>
 8009c9a:	463c      	mov	r4, r7
 8009c9c:	687f      	ldr	r7, [r7, #4]
 8009c9e:	e7b6      	b.n	8009c0e <_malloc_r+0x4a>
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	42a3      	cmp	r3, r4
 8009ca6:	d1fb      	bne.n	8009ca0 <_malloc_r+0xdc>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	6053      	str	r3, [r2, #4]
 8009cac:	e7de      	b.n	8009c6c <_malloc_r+0xa8>
 8009cae:	230c      	movs	r3, #12
 8009cb0:	6033      	str	r3, [r6, #0]
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	f000 f8ca 	bl	8009e4c <__malloc_unlock>
 8009cb8:	e794      	b.n	8009be4 <_malloc_r+0x20>
 8009cba:	6005      	str	r5, [r0, #0]
 8009cbc:	e7d6      	b.n	8009c6c <_malloc_r+0xa8>
 8009cbe:	bf00      	nop
 8009cc0:	200008e4 	.word	0x200008e4

08009cc4 <__ascii_mbtowc>:
 8009cc4:	b082      	sub	sp, #8
 8009cc6:	b901      	cbnz	r1, 8009cca <__ascii_mbtowc+0x6>
 8009cc8:	a901      	add	r1, sp, #4
 8009cca:	b142      	cbz	r2, 8009cde <__ascii_mbtowc+0x1a>
 8009ccc:	b14b      	cbz	r3, 8009ce2 <__ascii_mbtowc+0x1e>
 8009cce:	7813      	ldrb	r3, [r2, #0]
 8009cd0:	600b      	str	r3, [r1, #0]
 8009cd2:	7812      	ldrb	r2, [r2, #0]
 8009cd4:	1e10      	subs	r0, r2, #0
 8009cd6:	bf18      	it	ne
 8009cd8:	2001      	movne	r0, #1
 8009cda:	b002      	add	sp, #8
 8009cdc:	4770      	bx	lr
 8009cde:	4610      	mov	r0, r2
 8009ce0:	e7fb      	b.n	8009cda <__ascii_mbtowc+0x16>
 8009ce2:	f06f 0001 	mvn.w	r0, #1
 8009ce6:	e7f8      	b.n	8009cda <__ascii_mbtowc+0x16>

08009ce8 <__sflush_r>:
 8009ce8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf0:	0716      	lsls	r6, r2, #28
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	460c      	mov	r4, r1
 8009cf6:	d454      	bmi.n	8009da2 <__sflush_r+0xba>
 8009cf8:	684b      	ldr	r3, [r1, #4]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	dc02      	bgt.n	8009d04 <__sflush_r+0x1c>
 8009cfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	dd48      	ble.n	8009d96 <__sflush_r+0xae>
 8009d04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d06:	2e00      	cmp	r6, #0
 8009d08:	d045      	beq.n	8009d96 <__sflush_r+0xae>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d10:	682f      	ldr	r7, [r5, #0]
 8009d12:	6a21      	ldr	r1, [r4, #32]
 8009d14:	602b      	str	r3, [r5, #0]
 8009d16:	d030      	beq.n	8009d7a <__sflush_r+0x92>
 8009d18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d1a:	89a3      	ldrh	r3, [r4, #12]
 8009d1c:	0759      	lsls	r1, r3, #29
 8009d1e:	d505      	bpl.n	8009d2c <__sflush_r+0x44>
 8009d20:	6863      	ldr	r3, [r4, #4]
 8009d22:	1ad2      	subs	r2, r2, r3
 8009d24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d26:	b10b      	cbz	r3, 8009d2c <__sflush_r+0x44>
 8009d28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d2a:	1ad2      	subs	r2, r2, r3
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d30:	6a21      	ldr	r1, [r4, #32]
 8009d32:	4628      	mov	r0, r5
 8009d34:	47b0      	blx	r6
 8009d36:	1c43      	adds	r3, r0, #1
 8009d38:	89a3      	ldrh	r3, [r4, #12]
 8009d3a:	d106      	bne.n	8009d4a <__sflush_r+0x62>
 8009d3c:	6829      	ldr	r1, [r5, #0]
 8009d3e:	291d      	cmp	r1, #29
 8009d40:	d82b      	bhi.n	8009d9a <__sflush_r+0xb2>
 8009d42:	4a2a      	ldr	r2, [pc, #168]	@ (8009dec <__sflush_r+0x104>)
 8009d44:	410a      	asrs	r2, r1
 8009d46:	07d6      	lsls	r6, r2, #31
 8009d48:	d427      	bmi.n	8009d9a <__sflush_r+0xb2>
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	6062      	str	r2, [r4, #4]
 8009d4e:	04d9      	lsls	r1, r3, #19
 8009d50:	6922      	ldr	r2, [r4, #16]
 8009d52:	6022      	str	r2, [r4, #0]
 8009d54:	d504      	bpl.n	8009d60 <__sflush_r+0x78>
 8009d56:	1c42      	adds	r2, r0, #1
 8009d58:	d101      	bne.n	8009d5e <__sflush_r+0x76>
 8009d5a:	682b      	ldr	r3, [r5, #0]
 8009d5c:	b903      	cbnz	r3, 8009d60 <__sflush_r+0x78>
 8009d5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d62:	602f      	str	r7, [r5, #0]
 8009d64:	b1b9      	cbz	r1, 8009d96 <__sflush_r+0xae>
 8009d66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d6a:	4299      	cmp	r1, r3
 8009d6c:	d002      	beq.n	8009d74 <__sflush_r+0x8c>
 8009d6e:	4628      	mov	r0, r5
 8009d70:	f000 ff5e 	bl	800ac30 <_free_r>
 8009d74:	2300      	movs	r3, #0
 8009d76:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d78:	e00d      	b.n	8009d96 <__sflush_r+0xae>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	47b0      	blx	r6
 8009d80:	4602      	mov	r2, r0
 8009d82:	1c50      	adds	r0, r2, #1
 8009d84:	d1c9      	bne.n	8009d1a <__sflush_r+0x32>
 8009d86:	682b      	ldr	r3, [r5, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d0c6      	beq.n	8009d1a <__sflush_r+0x32>
 8009d8c:	2b1d      	cmp	r3, #29
 8009d8e:	d001      	beq.n	8009d94 <__sflush_r+0xac>
 8009d90:	2b16      	cmp	r3, #22
 8009d92:	d11e      	bne.n	8009dd2 <__sflush_r+0xea>
 8009d94:	602f      	str	r7, [r5, #0]
 8009d96:	2000      	movs	r0, #0
 8009d98:	e022      	b.n	8009de0 <__sflush_r+0xf8>
 8009d9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d9e:	b21b      	sxth	r3, r3
 8009da0:	e01b      	b.n	8009dda <__sflush_r+0xf2>
 8009da2:	690f      	ldr	r7, [r1, #16]
 8009da4:	2f00      	cmp	r7, #0
 8009da6:	d0f6      	beq.n	8009d96 <__sflush_r+0xae>
 8009da8:	0793      	lsls	r3, r2, #30
 8009daa:	680e      	ldr	r6, [r1, #0]
 8009dac:	bf08      	it	eq
 8009dae:	694b      	ldreq	r3, [r1, #20]
 8009db0:	600f      	str	r7, [r1, #0]
 8009db2:	bf18      	it	ne
 8009db4:	2300      	movne	r3, #0
 8009db6:	eba6 0807 	sub.w	r8, r6, r7
 8009dba:	608b      	str	r3, [r1, #8]
 8009dbc:	f1b8 0f00 	cmp.w	r8, #0
 8009dc0:	dde9      	ble.n	8009d96 <__sflush_r+0xae>
 8009dc2:	6a21      	ldr	r1, [r4, #32]
 8009dc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009dc6:	4643      	mov	r3, r8
 8009dc8:	463a      	mov	r2, r7
 8009dca:	4628      	mov	r0, r5
 8009dcc:	47b0      	blx	r6
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	dc08      	bgt.n	8009de4 <__sflush_r+0xfc>
 8009dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dda:	81a3      	strh	r3, [r4, #12]
 8009ddc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009de4:	4407      	add	r7, r0
 8009de6:	eba8 0800 	sub.w	r8, r8, r0
 8009dea:	e7e7      	b.n	8009dbc <__sflush_r+0xd4>
 8009dec:	dfbffffe 	.word	0xdfbffffe

08009df0 <_fflush_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	690b      	ldr	r3, [r1, #16]
 8009df4:	4605      	mov	r5, r0
 8009df6:	460c      	mov	r4, r1
 8009df8:	b913      	cbnz	r3, 8009e00 <_fflush_r+0x10>
 8009dfa:	2500      	movs	r5, #0
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	bd38      	pop	{r3, r4, r5, pc}
 8009e00:	b118      	cbz	r0, 8009e0a <_fflush_r+0x1a>
 8009e02:	6a03      	ldr	r3, [r0, #32]
 8009e04:	b90b      	cbnz	r3, 8009e0a <_fflush_r+0x1a>
 8009e06:	f7fd fc8f 	bl	8007728 <__sinit>
 8009e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d0f3      	beq.n	8009dfa <_fflush_r+0xa>
 8009e12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e14:	07d0      	lsls	r0, r2, #31
 8009e16:	d404      	bmi.n	8009e22 <_fflush_r+0x32>
 8009e18:	0599      	lsls	r1, r3, #22
 8009e1a:	d402      	bmi.n	8009e22 <_fflush_r+0x32>
 8009e1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e1e:	f7fe fba8 	bl	8008572 <__retarget_lock_acquire_recursive>
 8009e22:	4628      	mov	r0, r5
 8009e24:	4621      	mov	r1, r4
 8009e26:	f7ff ff5f 	bl	8009ce8 <__sflush_r>
 8009e2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e2c:	07da      	lsls	r2, r3, #31
 8009e2e:	4605      	mov	r5, r0
 8009e30:	d4e4      	bmi.n	8009dfc <_fflush_r+0xc>
 8009e32:	89a3      	ldrh	r3, [r4, #12]
 8009e34:	059b      	lsls	r3, r3, #22
 8009e36:	d4e1      	bmi.n	8009dfc <_fflush_r+0xc>
 8009e38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e3a:	f7fe fb9b 	bl	8008574 <__retarget_lock_release_recursive>
 8009e3e:	e7dd      	b.n	8009dfc <_fflush_r+0xc>

08009e40 <__malloc_lock>:
 8009e40:	4801      	ldr	r0, [pc, #4]	@ (8009e48 <__malloc_lock+0x8>)
 8009e42:	f7fe bb96 	b.w	8008572 <__retarget_lock_acquire_recursive>
 8009e46:	bf00      	nop
 8009e48:	200008dc 	.word	0x200008dc

08009e4c <__malloc_unlock>:
 8009e4c:	4801      	ldr	r0, [pc, #4]	@ (8009e54 <__malloc_unlock+0x8>)
 8009e4e:	f7fe bb91 	b.w	8008574 <__retarget_lock_release_recursive>
 8009e52:	bf00      	nop
 8009e54:	200008dc 	.word	0x200008dc

08009e58 <_Balloc>:
 8009e58:	b570      	push	{r4, r5, r6, lr}
 8009e5a:	69c6      	ldr	r6, [r0, #28]
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	460d      	mov	r5, r1
 8009e60:	b976      	cbnz	r6, 8009e80 <_Balloc+0x28>
 8009e62:	2010      	movs	r0, #16
 8009e64:	f7ff fe84 	bl	8009b70 <malloc>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	61e0      	str	r0, [r4, #28]
 8009e6c:	b920      	cbnz	r0, 8009e78 <_Balloc+0x20>
 8009e6e:	4b18      	ldr	r3, [pc, #96]	@ (8009ed0 <_Balloc+0x78>)
 8009e70:	4818      	ldr	r0, [pc, #96]	@ (8009ed4 <_Balloc+0x7c>)
 8009e72:	216b      	movs	r1, #107	@ 0x6b
 8009e74:	f000 feaa 	bl	800abcc <__assert_func>
 8009e78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e7c:	6006      	str	r6, [r0, #0]
 8009e7e:	60c6      	str	r6, [r0, #12]
 8009e80:	69e6      	ldr	r6, [r4, #28]
 8009e82:	68f3      	ldr	r3, [r6, #12]
 8009e84:	b183      	cbz	r3, 8009ea8 <_Balloc+0x50>
 8009e86:	69e3      	ldr	r3, [r4, #28]
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e8e:	b9b8      	cbnz	r0, 8009ec0 <_Balloc+0x68>
 8009e90:	2101      	movs	r1, #1
 8009e92:	fa01 f605 	lsl.w	r6, r1, r5
 8009e96:	1d72      	adds	r2, r6, #5
 8009e98:	0092      	lsls	r2, r2, #2
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	f000 feb4 	bl	800ac08 <_calloc_r>
 8009ea0:	b160      	cbz	r0, 8009ebc <_Balloc+0x64>
 8009ea2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ea6:	e00e      	b.n	8009ec6 <_Balloc+0x6e>
 8009ea8:	2221      	movs	r2, #33	@ 0x21
 8009eaa:	2104      	movs	r1, #4
 8009eac:	4620      	mov	r0, r4
 8009eae:	f000 feab 	bl	800ac08 <_calloc_r>
 8009eb2:	69e3      	ldr	r3, [r4, #28]
 8009eb4:	60f0      	str	r0, [r6, #12]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d1e4      	bne.n	8009e86 <_Balloc+0x2e>
 8009ebc:	2000      	movs	r0, #0
 8009ebe:	bd70      	pop	{r4, r5, r6, pc}
 8009ec0:	6802      	ldr	r2, [r0, #0]
 8009ec2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ecc:	e7f7      	b.n	8009ebe <_Balloc+0x66>
 8009ece:	bf00      	nop
 8009ed0:	0800b51e 	.word	0x0800b51e
 8009ed4:	0800b60f 	.word	0x0800b60f

08009ed8 <_Bfree>:
 8009ed8:	b570      	push	{r4, r5, r6, lr}
 8009eda:	69c6      	ldr	r6, [r0, #28]
 8009edc:	4605      	mov	r5, r0
 8009ede:	460c      	mov	r4, r1
 8009ee0:	b976      	cbnz	r6, 8009f00 <_Bfree+0x28>
 8009ee2:	2010      	movs	r0, #16
 8009ee4:	f7ff fe44 	bl	8009b70 <malloc>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	61e8      	str	r0, [r5, #28]
 8009eec:	b920      	cbnz	r0, 8009ef8 <_Bfree+0x20>
 8009eee:	4b09      	ldr	r3, [pc, #36]	@ (8009f14 <_Bfree+0x3c>)
 8009ef0:	4809      	ldr	r0, [pc, #36]	@ (8009f18 <_Bfree+0x40>)
 8009ef2:	218f      	movs	r1, #143	@ 0x8f
 8009ef4:	f000 fe6a 	bl	800abcc <__assert_func>
 8009ef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009efc:	6006      	str	r6, [r0, #0]
 8009efe:	60c6      	str	r6, [r0, #12]
 8009f00:	b13c      	cbz	r4, 8009f12 <_Bfree+0x3a>
 8009f02:	69eb      	ldr	r3, [r5, #28]
 8009f04:	6862      	ldr	r2, [r4, #4]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f0c:	6021      	str	r1, [r4, #0]
 8009f0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f12:	bd70      	pop	{r4, r5, r6, pc}
 8009f14:	0800b51e 	.word	0x0800b51e
 8009f18:	0800b60f 	.word	0x0800b60f

08009f1c <__multadd>:
 8009f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f20:	690d      	ldr	r5, [r1, #16]
 8009f22:	4607      	mov	r7, r0
 8009f24:	460c      	mov	r4, r1
 8009f26:	461e      	mov	r6, r3
 8009f28:	f101 0c14 	add.w	ip, r1, #20
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	f8dc 3000 	ldr.w	r3, [ip]
 8009f32:	b299      	uxth	r1, r3
 8009f34:	fb02 6101 	mla	r1, r2, r1, r6
 8009f38:	0c1e      	lsrs	r6, r3, #16
 8009f3a:	0c0b      	lsrs	r3, r1, #16
 8009f3c:	fb02 3306 	mla	r3, r2, r6, r3
 8009f40:	b289      	uxth	r1, r1
 8009f42:	3001      	adds	r0, #1
 8009f44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f48:	4285      	cmp	r5, r0
 8009f4a:	f84c 1b04 	str.w	r1, [ip], #4
 8009f4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f52:	dcec      	bgt.n	8009f2e <__multadd+0x12>
 8009f54:	b30e      	cbz	r6, 8009f9a <__multadd+0x7e>
 8009f56:	68a3      	ldr	r3, [r4, #8]
 8009f58:	42ab      	cmp	r3, r5
 8009f5a:	dc19      	bgt.n	8009f90 <__multadd+0x74>
 8009f5c:	6861      	ldr	r1, [r4, #4]
 8009f5e:	4638      	mov	r0, r7
 8009f60:	3101      	adds	r1, #1
 8009f62:	f7ff ff79 	bl	8009e58 <_Balloc>
 8009f66:	4680      	mov	r8, r0
 8009f68:	b928      	cbnz	r0, 8009f76 <__multadd+0x5a>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8009fa0 <__multadd+0x84>)
 8009f6e:	480d      	ldr	r0, [pc, #52]	@ (8009fa4 <__multadd+0x88>)
 8009f70:	21ba      	movs	r1, #186	@ 0xba
 8009f72:	f000 fe2b 	bl	800abcc <__assert_func>
 8009f76:	6922      	ldr	r2, [r4, #16]
 8009f78:	3202      	adds	r2, #2
 8009f7a:	f104 010c 	add.w	r1, r4, #12
 8009f7e:	0092      	lsls	r2, r2, #2
 8009f80:	300c      	adds	r0, #12
 8009f82:	f7fe faf8 	bl	8008576 <memcpy>
 8009f86:	4621      	mov	r1, r4
 8009f88:	4638      	mov	r0, r7
 8009f8a:	f7ff ffa5 	bl	8009ed8 <_Bfree>
 8009f8e:	4644      	mov	r4, r8
 8009f90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f94:	3501      	adds	r5, #1
 8009f96:	615e      	str	r6, [r3, #20]
 8009f98:	6125      	str	r5, [r4, #16]
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa0:	0800b58d 	.word	0x0800b58d
 8009fa4:	0800b60f 	.word	0x0800b60f

08009fa8 <__s2b>:
 8009fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fac:	460c      	mov	r4, r1
 8009fae:	4615      	mov	r5, r2
 8009fb0:	461f      	mov	r7, r3
 8009fb2:	2209      	movs	r2, #9
 8009fb4:	3308      	adds	r3, #8
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	db09      	blt.n	8009fd8 <__s2b+0x30>
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	f7ff ff47 	bl	8009e58 <_Balloc>
 8009fca:	b940      	cbnz	r0, 8009fde <__s2b+0x36>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	4b19      	ldr	r3, [pc, #100]	@ (800a034 <__s2b+0x8c>)
 8009fd0:	4819      	ldr	r0, [pc, #100]	@ (800a038 <__s2b+0x90>)
 8009fd2:	21d3      	movs	r1, #211	@ 0xd3
 8009fd4:	f000 fdfa 	bl	800abcc <__assert_func>
 8009fd8:	0052      	lsls	r2, r2, #1
 8009fda:	3101      	adds	r1, #1
 8009fdc:	e7f0      	b.n	8009fc0 <__s2b+0x18>
 8009fde:	9b08      	ldr	r3, [sp, #32]
 8009fe0:	6143      	str	r3, [r0, #20]
 8009fe2:	2d09      	cmp	r5, #9
 8009fe4:	f04f 0301 	mov.w	r3, #1
 8009fe8:	6103      	str	r3, [r0, #16]
 8009fea:	dd16      	ble.n	800a01a <__s2b+0x72>
 8009fec:	f104 0909 	add.w	r9, r4, #9
 8009ff0:	46c8      	mov	r8, r9
 8009ff2:	442c      	add	r4, r5
 8009ff4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009ff8:	4601      	mov	r1, r0
 8009ffa:	3b30      	subs	r3, #48	@ 0x30
 8009ffc:	220a      	movs	r2, #10
 8009ffe:	4630      	mov	r0, r6
 800a000:	f7ff ff8c 	bl	8009f1c <__multadd>
 800a004:	45a0      	cmp	r8, r4
 800a006:	d1f5      	bne.n	8009ff4 <__s2b+0x4c>
 800a008:	f1a5 0408 	sub.w	r4, r5, #8
 800a00c:	444c      	add	r4, r9
 800a00e:	1b2d      	subs	r5, r5, r4
 800a010:	1963      	adds	r3, r4, r5
 800a012:	42bb      	cmp	r3, r7
 800a014:	db04      	blt.n	800a020 <__s2b+0x78>
 800a016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a01a:	340a      	adds	r4, #10
 800a01c:	2509      	movs	r5, #9
 800a01e:	e7f6      	b.n	800a00e <__s2b+0x66>
 800a020:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a024:	4601      	mov	r1, r0
 800a026:	3b30      	subs	r3, #48	@ 0x30
 800a028:	220a      	movs	r2, #10
 800a02a:	4630      	mov	r0, r6
 800a02c:	f7ff ff76 	bl	8009f1c <__multadd>
 800a030:	e7ee      	b.n	800a010 <__s2b+0x68>
 800a032:	bf00      	nop
 800a034:	0800b58d 	.word	0x0800b58d
 800a038:	0800b60f 	.word	0x0800b60f

0800a03c <__hi0bits>:
 800a03c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a040:	4603      	mov	r3, r0
 800a042:	bf36      	itet	cc
 800a044:	0403      	lslcc	r3, r0, #16
 800a046:	2000      	movcs	r0, #0
 800a048:	2010      	movcc	r0, #16
 800a04a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a04e:	bf3c      	itt	cc
 800a050:	021b      	lslcc	r3, r3, #8
 800a052:	3008      	addcc	r0, #8
 800a054:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a058:	bf3c      	itt	cc
 800a05a:	011b      	lslcc	r3, r3, #4
 800a05c:	3004      	addcc	r0, #4
 800a05e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a062:	bf3c      	itt	cc
 800a064:	009b      	lslcc	r3, r3, #2
 800a066:	3002      	addcc	r0, #2
 800a068:	2b00      	cmp	r3, #0
 800a06a:	db05      	blt.n	800a078 <__hi0bits+0x3c>
 800a06c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a070:	f100 0001 	add.w	r0, r0, #1
 800a074:	bf08      	it	eq
 800a076:	2020      	moveq	r0, #32
 800a078:	4770      	bx	lr

0800a07a <__lo0bits>:
 800a07a:	6803      	ldr	r3, [r0, #0]
 800a07c:	4602      	mov	r2, r0
 800a07e:	f013 0007 	ands.w	r0, r3, #7
 800a082:	d00b      	beq.n	800a09c <__lo0bits+0x22>
 800a084:	07d9      	lsls	r1, r3, #31
 800a086:	d421      	bmi.n	800a0cc <__lo0bits+0x52>
 800a088:	0798      	lsls	r0, r3, #30
 800a08a:	bf49      	itett	mi
 800a08c:	085b      	lsrmi	r3, r3, #1
 800a08e:	089b      	lsrpl	r3, r3, #2
 800a090:	2001      	movmi	r0, #1
 800a092:	6013      	strmi	r3, [r2, #0]
 800a094:	bf5c      	itt	pl
 800a096:	6013      	strpl	r3, [r2, #0]
 800a098:	2002      	movpl	r0, #2
 800a09a:	4770      	bx	lr
 800a09c:	b299      	uxth	r1, r3
 800a09e:	b909      	cbnz	r1, 800a0a4 <__lo0bits+0x2a>
 800a0a0:	0c1b      	lsrs	r3, r3, #16
 800a0a2:	2010      	movs	r0, #16
 800a0a4:	b2d9      	uxtb	r1, r3
 800a0a6:	b909      	cbnz	r1, 800a0ac <__lo0bits+0x32>
 800a0a8:	3008      	adds	r0, #8
 800a0aa:	0a1b      	lsrs	r3, r3, #8
 800a0ac:	0719      	lsls	r1, r3, #28
 800a0ae:	bf04      	itt	eq
 800a0b0:	091b      	lsreq	r3, r3, #4
 800a0b2:	3004      	addeq	r0, #4
 800a0b4:	0799      	lsls	r1, r3, #30
 800a0b6:	bf04      	itt	eq
 800a0b8:	089b      	lsreq	r3, r3, #2
 800a0ba:	3002      	addeq	r0, #2
 800a0bc:	07d9      	lsls	r1, r3, #31
 800a0be:	d403      	bmi.n	800a0c8 <__lo0bits+0x4e>
 800a0c0:	085b      	lsrs	r3, r3, #1
 800a0c2:	f100 0001 	add.w	r0, r0, #1
 800a0c6:	d003      	beq.n	800a0d0 <__lo0bits+0x56>
 800a0c8:	6013      	str	r3, [r2, #0]
 800a0ca:	4770      	bx	lr
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	4770      	bx	lr
 800a0d0:	2020      	movs	r0, #32
 800a0d2:	4770      	bx	lr

0800a0d4 <__i2b>:
 800a0d4:	b510      	push	{r4, lr}
 800a0d6:	460c      	mov	r4, r1
 800a0d8:	2101      	movs	r1, #1
 800a0da:	f7ff febd 	bl	8009e58 <_Balloc>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	b928      	cbnz	r0, 800a0ee <__i2b+0x1a>
 800a0e2:	4b05      	ldr	r3, [pc, #20]	@ (800a0f8 <__i2b+0x24>)
 800a0e4:	4805      	ldr	r0, [pc, #20]	@ (800a0fc <__i2b+0x28>)
 800a0e6:	f240 1145 	movw	r1, #325	@ 0x145
 800a0ea:	f000 fd6f 	bl	800abcc <__assert_func>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	6144      	str	r4, [r0, #20]
 800a0f2:	6103      	str	r3, [r0, #16]
 800a0f4:	bd10      	pop	{r4, pc}
 800a0f6:	bf00      	nop
 800a0f8:	0800b58d 	.word	0x0800b58d
 800a0fc:	0800b60f 	.word	0x0800b60f

0800a100 <__multiply>:
 800a100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a104:	4614      	mov	r4, r2
 800a106:	690a      	ldr	r2, [r1, #16]
 800a108:	6923      	ldr	r3, [r4, #16]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	bfa8      	it	ge
 800a10e:	4623      	movge	r3, r4
 800a110:	460f      	mov	r7, r1
 800a112:	bfa4      	itt	ge
 800a114:	460c      	movge	r4, r1
 800a116:	461f      	movge	r7, r3
 800a118:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a11c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a120:	68a3      	ldr	r3, [r4, #8]
 800a122:	6861      	ldr	r1, [r4, #4]
 800a124:	eb0a 0609 	add.w	r6, sl, r9
 800a128:	42b3      	cmp	r3, r6
 800a12a:	b085      	sub	sp, #20
 800a12c:	bfb8      	it	lt
 800a12e:	3101      	addlt	r1, #1
 800a130:	f7ff fe92 	bl	8009e58 <_Balloc>
 800a134:	b930      	cbnz	r0, 800a144 <__multiply+0x44>
 800a136:	4602      	mov	r2, r0
 800a138:	4b44      	ldr	r3, [pc, #272]	@ (800a24c <__multiply+0x14c>)
 800a13a:	4845      	ldr	r0, [pc, #276]	@ (800a250 <__multiply+0x150>)
 800a13c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a140:	f000 fd44 	bl	800abcc <__assert_func>
 800a144:	f100 0514 	add.w	r5, r0, #20
 800a148:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a14c:	462b      	mov	r3, r5
 800a14e:	2200      	movs	r2, #0
 800a150:	4543      	cmp	r3, r8
 800a152:	d321      	bcc.n	800a198 <__multiply+0x98>
 800a154:	f107 0114 	add.w	r1, r7, #20
 800a158:	f104 0214 	add.w	r2, r4, #20
 800a15c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a160:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a164:	9302      	str	r3, [sp, #8]
 800a166:	1b13      	subs	r3, r2, r4
 800a168:	3b15      	subs	r3, #21
 800a16a:	f023 0303 	bic.w	r3, r3, #3
 800a16e:	3304      	adds	r3, #4
 800a170:	f104 0715 	add.w	r7, r4, #21
 800a174:	42ba      	cmp	r2, r7
 800a176:	bf38      	it	cc
 800a178:	2304      	movcc	r3, #4
 800a17a:	9301      	str	r3, [sp, #4]
 800a17c:	9b02      	ldr	r3, [sp, #8]
 800a17e:	9103      	str	r1, [sp, #12]
 800a180:	428b      	cmp	r3, r1
 800a182:	d80c      	bhi.n	800a19e <__multiply+0x9e>
 800a184:	2e00      	cmp	r6, #0
 800a186:	dd03      	ble.n	800a190 <__multiply+0x90>
 800a188:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d05b      	beq.n	800a248 <__multiply+0x148>
 800a190:	6106      	str	r6, [r0, #16]
 800a192:	b005      	add	sp, #20
 800a194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a198:	f843 2b04 	str.w	r2, [r3], #4
 800a19c:	e7d8      	b.n	800a150 <__multiply+0x50>
 800a19e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a1a2:	f1ba 0f00 	cmp.w	sl, #0
 800a1a6:	d024      	beq.n	800a1f2 <__multiply+0xf2>
 800a1a8:	f104 0e14 	add.w	lr, r4, #20
 800a1ac:	46a9      	mov	r9, r5
 800a1ae:	f04f 0c00 	mov.w	ip, #0
 800a1b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a1b6:	f8d9 3000 	ldr.w	r3, [r9]
 800a1ba:	fa1f fb87 	uxth.w	fp, r7
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	fb0a 330b 	mla	r3, sl, fp, r3
 800a1c4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a1c8:	f8d9 7000 	ldr.w	r7, [r9]
 800a1cc:	4463      	add	r3, ip
 800a1ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a1d2:	fb0a c70b 	mla	r7, sl, fp, ip
 800a1d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a1e0:	4572      	cmp	r2, lr
 800a1e2:	f849 3b04 	str.w	r3, [r9], #4
 800a1e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a1ea:	d8e2      	bhi.n	800a1b2 <__multiply+0xb2>
 800a1ec:	9b01      	ldr	r3, [sp, #4]
 800a1ee:	f845 c003 	str.w	ip, [r5, r3]
 800a1f2:	9b03      	ldr	r3, [sp, #12]
 800a1f4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a1f8:	3104      	adds	r1, #4
 800a1fa:	f1b9 0f00 	cmp.w	r9, #0
 800a1fe:	d021      	beq.n	800a244 <__multiply+0x144>
 800a200:	682b      	ldr	r3, [r5, #0]
 800a202:	f104 0c14 	add.w	ip, r4, #20
 800a206:	46ae      	mov	lr, r5
 800a208:	f04f 0a00 	mov.w	sl, #0
 800a20c:	f8bc b000 	ldrh.w	fp, [ip]
 800a210:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a214:	fb09 770b 	mla	r7, r9, fp, r7
 800a218:	4457      	add	r7, sl
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a220:	f84e 3b04 	str.w	r3, [lr], #4
 800a224:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a228:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a22c:	f8be 3000 	ldrh.w	r3, [lr]
 800a230:	fb09 330a 	mla	r3, r9, sl, r3
 800a234:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a238:	4562      	cmp	r2, ip
 800a23a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a23e:	d8e5      	bhi.n	800a20c <__multiply+0x10c>
 800a240:	9f01      	ldr	r7, [sp, #4]
 800a242:	51eb      	str	r3, [r5, r7]
 800a244:	3504      	adds	r5, #4
 800a246:	e799      	b.n	800a17c <__multiply+0x7c>
 800a248:	3e01      	subs	r6, #1
 800a24a:	e79b      	b.n	800a184 <__multiply+0x84>
 800a24c:	0800b58d 	.word	0x0800b58d
 800a250:	0800b60f 	.word	0x0800b60f

0800a254 <__pow5mult>:
 800a254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a258:	4615      	mov	r5, r2
 800a25a:	f012 0203 	ands.w	r2, r2, #3
 800a25e:	4607      	mov	r7, r0
 800a260:	460e      	mov	r6, r1
 800a262:	d007      	beq.n	800a274 <__pow5mult+0x20>
 800a264:	4c25      	ldr	r4, [pc, #148]	@ (800a2fc <__pow5mult+0xa8>)
 800a266:	3a01      	subs	r2, #1
 800a268:	2300      	movs	r3, #0
 800a26a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a26e:	f7ff fe55 	bl	8009f1c <__multadd>
 800a272:	4606      	mov	r6, r0
 800a274:	10ad      	asrs	r5, r5, #2
 800a276:	d03d      	beq.n	800a2f4 <__pow5mult+0xa0>
 800a278:	69fc      	ldr	r4, [r7, #28]
 800a27a:	b97c      	cbnz	r4, 800a29c <__pow5mult+0x48>
 800a27c:	2010      	movs	r0, #16
 800a27e:	f7ff fc77 	bl	8009b70 <malloc>
 800a282:	4602      	mov	r2, r0
 800a284:	61f8      	str	r0, [r7, #28]
 800a286:	b928      	cbnz	r0, 800a294 <__pow5mult+0x40>
 800a288:	4b1d      	ldr	r3, [pc, #116]	@ (800a300 <__pow5mult+0xac>)
 800a28a:	481e      	ldr	r0, [pc, #120]	@ (800a304 <__pow5mult+0xb0>)
 800a28c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a290:	f000 fc9c 	bl	800abcc <__assert_func>
 800a294:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a298:	6004      	str	r4, [r0, #0]
 800a29a:	60c4      	str	r4, [r0, #12]
 800a29c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a2a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2a4:	b94c      	cbnz	r4, 800a2ba <__pow5mult+0x66>
 800a2a6:	f240 2171 	movw	r1, #625	@ 0x271
 800a2aa:	4638      	mov	r0, r7
 800a2ac:	f7ff ff12 	bl	800a0d4 <__i2b>
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	6003      	str	r3, [r0, #0]
 800a2ba:	f04f 0900 	mov.w	r9, #0
 800a2be:	07eb      	lsls	r3, r5, #31
 800a2c0:	d50a      	bpl.n	800a2d8 <__pow5mult+0x84>
 800a2c2:	4631      	mov	r1, r6
 800a2c4:	4622      	mov	r2, r4
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	f7ff ff1a 	bl	800a100 <__multiply>
 800a2cc:	4631      	mov	r1, r6
 800a2ce:	4680      	mov	r8, r0
 800a2d0:	4638      	mov	r0, r7
 800a2d2:	f7ff fe01 	bl	8009ed8 <_Bfree>
 800a2d6:	4646      	mov	r6, r8
 800a2d8:	106d      	asrs	r5, r5, #1
 800a2da:	d00b      	beq.n	800a2f4 <__pow5mult+0xa0>
 800a2dc:	6820      	ldr	r0, [r4, #0]
 800a2de:	b938      	cbnz	r0, 800a2f0 <__pow5mult+0x9c>
 800a2e0:	4622      	mov	r2, r4
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	4638      	mov	r0, r7
 800a2e6:	f7ff ff0b 	bl	800a100 <__multiply>
 800a2ea:	6020      	str	r0, [r4, #0]
 800a2ec:	f8c0 9000 	str.w	r9, [r0]
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	e7e4      	b.n	800a2be <__pow5mult+0x6a>
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2fa:	bf00      	nop
 800a2fc:	0800b668 	.word	0x0800b668
 800a300:	0800b51e 	.word	0x0800b51e
 800a304:	0800b60f 	.word	0x0800b60f

0800a308 <__lshift>:
 800a308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a30c:	460c      	mov	r4, r1
 800a30e:	6849      	ldr	r1, [r1, #4]
 800a310:	6923      	ldr	r3, [r4, #16]
 800a312:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a316:	68a3      	ldr	r3, [r4, #8]
 800a318:	4607      	mov	r7, r0
 800a31a:	4691      	mov	r9, r2
 800a31c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a320:	f108 0601 	add.w	r6, r8, #1
 800a324:	42b3      	cmp	r3, r6
 800a326:	db0b      	blt.n	800a340 <__lshift+0x38>
 800a328:	4638      	mov	r0, r7
 800a32a:	f7ff fd95 	bl	8009e58 <_Balloc>
 800a32e:	4605      	mov	r5, r0
 800a330:	b948      	cbnz	r0, 800a346 <__lshift+0x3e>
 800a332:	4602      	mov	r2, r0
 800a334:	4b28      	ldr	r3, [pc, #160]	@ (800a3d8 <__lshift+0xd0>)
 800a336:	4829      	ldr	r0, [pc, #164]	@ (800a3dc <__lshift+0xd4>)
 800a338:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a33c:	f000 fc46 	bl	800abcc <__assert_func>
 800a340:	3101      	adds	r1, #1
 800a342:	005b      	lsls	r3, r3, #1
 800a344:	e7ee      	b.n	800a324 <__lshift+0x1c>
 800a346:	2300      	movs	r3, #0
 800a348:	f100 0114 	add.w	r1, r0, #20
 800a34c:	f100 0210 	add.w	r2, r0, #16
 800a350:	4618      	mov	r0, r3
 800a352:	4553      	cmp	r3, sl
 800a354:	db33      	blt.n	800a3be <__lshift+0xb6>
 800a356:	6920      	ldr	r0, [r4, #16]
 800a358:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a35c:	f104 0314 	add.w	r3, r4, #20
 800a360:	f019 091f 	ands.w	r9, r9, #31
 800a364:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a368:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a36c:	d02b      	beq.n	800a3c6 <__lshift+0xbe>
 800a36e:	f1c9 0e20 	rsb	lr, r9, #32
 800a372:	468a      	mov	sl, r1
 800a374:	2200      	movs	r2, #0
 800a376:	6818      	ldr	r0, [r3, #0]
 800a378:	fa00 f009 	lsl.w	r0, r0, r9
 800a37c:	4310      	orrs	r0, r2
 800a37e:	f84a 0b04 	str.w	r0, [sl], #4
 800a382:	f853 2b04 	ldr.w	r2, [r3], #4
 800a386:	459c      	cmp	ip, r3
 800a388:	fa22 f20e 	lsr.w	r2, r2, lr
 800a38c:	d8f3      	bhi.n	800a376 <__lshift+0x6e>
 800a38e:	ebac 0304 	sub.w	r3, ip, r4
 800a392:	3b15      	subs	r3, #21
 800a394:	f023 0303 	bic.w	r3, r3, #3
 800a398:	3304      	adds	r3, #4
 800a39a:	f104 0015 	add.w	r0, r4, #21
 800a39e:	4584      	cmp	ip, r0
 800a3a0:	bf38      	it	cc
 800a3a2:	2304      	movcc	r3, #4
 800a3a4:	50ca      	str	r2, [r1, r3]
 800a3a6:	b10a      	cbz	r2, 800a3ac <__lshift+0xa4>
 800a3a8:	f108 0602 	add.w	r6, r8, #2
 800a3ac:	3e01      	subs	r6, #1
 800a3ae:	4638      	mov	r0, r7
 800a3b0:	612e      	str	r6, [r5, #16]
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	f7ff fd90 	bl	8009ed8 <_Bfree>
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3be:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	e7c5      	b.n	800a352 <__lshift+0x4a>
 800a3c6:	3904      	subs	r1, #4
 800a3c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3d0:	459c      	cmp	ip, r3
 800a3d2:	d8f9      	bhi.n	800a3c8 <__lshift+0xc0>
 800a3d4:	e7ea      	b.n	800a3ac <__lshift+0xa4>
 800a3d6:	bf00      	nop
 800a3d8:	0800b58d 	.word	0x0800b58d
 800a3dc:	0800b60f 	.word	0x0800b60f

0800a3e0 <__mcmp>:
 800a3e0:	690a      	ldr	r2, [r1, #16]
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	6900      	ldr	r0, [r0, #16]
 800a3e6:	1a80      	subs	r0, r0, r2
 800a3e8:	b530      	push	{r4, r5, lr}
 800a3ea:	d10e      	bne.n	800a40a <__mcmp+0x2a>
 800a3ec:	3314      	adds	r3, #20
 800a3ee:	3114      	adds	r1, #20
 800a3f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a3f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a3f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a3fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a400:	4295      	cmp	r5, r2
 800a402:	d003      	beq.n	800a40c <__mcmp+0x2c>
 800a404:	d205      	bcs.n	800a412 <__mcmp+0x32>
 800a406:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a40a:	bd30      	pop	{r4, r5, pc}
 800a40c:	42a3      	cmp	r3, r4
 800a40e:	d3f3      	bcc.n	800a3f8 <__mcmp+0x18>
 800a410:	e7fb      	b.n	800a40a <__mcmp+0x2a>
 800a412:	2001      	movs	r0, #1
 800a414:	e7f9      	b.n	800a40a <__mcmp+0x2a>
	...

0800a418 <__mdiff>:
 800a418:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a41c:	4689      	mov	r9, r1
 800a41e:	4606      	mov	r6, r0
 800a420:	4611      	mov	r1, r2
 800a422:	4648      	mov	r0, r9
 800a424:	4614      	mov	r4, r2
 800a426:	f7ff ffdb 	bl	800a3e0 <__mcmp>
 800a42a:	1e05      	subs	r5, r0, #0
 800a42c:	d112      	bne.n	800a454 <__mdiff+0x3c>
 800a42e:	4629      	mov	r1, r5
 800a430:	4630      	mov	r0, r6
 800a432:	f7ff fd11 	bl	8009e58 <_Balloc>
 800a436:	4602      	mov	r2, r0
 800a438:	b928      	cbnz	r0, 800a446 <__mdiff+0x2e>
 800a43a:	4b3f      	ldr	r3, [pc, #252]	@ (800a538 <__mdiff+0x120>)
 800a43c:	f240 2137 	movw	r1, #567	@ 0x237
 800a440:	483e      	ldr	r0, [pc, #248]	@ (800a53c <__mdiff+0x124>)
 800a442:	f000 fbc3 	bl	800abcc <__assert_func>
 800a446:	2301      	movs	r3, #1
 800a448:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a44c:	4610      	mov	r0, r2
 800a44e:	b003      	add	sp, #12
 800a450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a454:	bfbc      	itt	lt
 800a456:	464b      	movlt	r3, r9
 800a458:	46a1      	movlt	r9, r4
 800a45a:	4630      	mov	r0, r6
 800a45c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a460:	bfba      	itte	lt
 800a462:	461c      	movlt	r4, r3
 800a464:	2501      	movlt	r5, #1
 800a466:	2500      	movge	r5, #0
 800a468:	f7ff fcf6 	bl	8009e58 <_Balloc>
 800a46c:	4602      	mov	r2, r0
 800a46e:	b918      	cbnz	r0, 800a478 <__mdiff+0x60>
 800a470:	4b31      	ldr	r3, [pc, #196]	@ (800a538 <__mdiff+0x120>)
 800a472:	f240 2145 	movw	r1, #581	@ 0x245
 800a476:	e7e3      	b.n	800a440 <__mdiff+0x28>
 800a478:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a47c:	6926      	ldr	r6, [r4, #16]
 800a47e:	60c5      	str	r5, [r0, #12]
 800a480:	f109 0310 	add.w	r3, r9, #16
 800a484:	f109 0514 	add.w	r5, r9, #20
 800a488:	f104 0e14 	add.w	lr, r4, #20
 800a48c:	f100 0b14 	add.w	fp, r0, #20
 800a490:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a494:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a498:	9301      	str	r3, [sp, #4]
 800a49a:	46d9      	mov	r9, fp
 800a49c:	f04f 0c00 	mov.w	ip, #0
 800a4a0:	9b01      	ldr	r3, [sp, #4]
 800a4a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a4a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a4aa:	9301      	str	r3, [sp, #4]
 800a4ac:	fa1f f38a 	uxth.w	r3, sl
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	b283      	uxth	r3, r0
 800a4b4:	1acb      	subs	r3, r1, r3
 800a4b6:	0c00      	lsrs	r0, r0, #16
 800a4b8:	4463      	add	r3, ip
 800a4ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a4be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a4c8:	4576      	cmp	r6, lr
 800a4ca:	f849 3b04 	str.w	r3, [r9], #4
 800a4ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a4d2:	d8e5      	bhi.n	800a4a0 <__mdiff+0x88>
 800a4d4:	1b33      	subs	r3, r6, r4
 800a4d6:	3b15      	subs	r3, #21
 800a4d8:	f023 0303 	bic.w	r3, r3, #3
 800a4dc:	3415      	adds	r4, #21
 800a4de:	3304      	adds	r3, #4
 800a4e0:	42a6      	cmp	r6, r4
 800a4e2:	bf38      	it	cc
 800a4e4:	2304      	movcc	r3, #4
 800a4e6:	441d      	add	r5, r3
 800a4e8:	445b      	add	r3, fp
 800a4ea:	461e      	mov	r6, r3
 800a4ec:	462c      	mov	r4, r5
 800a4ee:	4544      	cmp	r4, r8
 800a4f0:	d30e      	bcc.n	800a510 <__mdiff+0xf8>
 800a4f2:	f108 0103 	add.w	r1, r8, #3
 800a4f6:	1b49      	subs	r1, r1, r5
 800a4f8:	f021 0103 	bic.w	r1, r1, #3
 800a4fc:	3d03      	subs	r5, #3
 800a4fe:	45a8      	cmp	r8, r5
 800a500:	bf38      	it	cc
 800a502:	2100      	movcc	r1, #0
 800a504:	440b      	add	r3, r1
 800a506:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a50a:	b191      	cbz	r1, 800a532 <__mdiff+0x11a>
 800a50c:	6117      	str	r7, [r2, #16]
 800a50e:	e79d      	b.n	800a44c <__mdiff+0x34>
 800a510:	f854 1b04 	ldr.w	r1, [r4], #4
 800a514:	46e6      	mov	lr, ip
 800a516:	0c08      	lsrs	r0, r1, #16
 800a518:	fa1c fc81 	uxtah	ip, ip, r1
 800a51c:	4471      	add	r1, lr
 800a51e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a522:	b289      	uxth	r1, r1
 800a524:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a528:	f846 1b04 	str.w	r1, [r6], #4
 800a52c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a530:	e7dd      	b.n	800a4ee <__mdiff+0xd6>
 800a532:	3f01      	subs	r7, #1
 800a534:	e7e7      	b.n	800a506 <__mdiff+0xee>
 800a536:	bf00      	nop
 800a538:	0800b58d 	.word	0x0800b58d
 800a53c:	0800b60f 	.word	0x0800b60f

0800a540 <__ulp>:
 800a540:	b082      	sub	sp, #8
 800a542:	ed8d 0b00 	vstr	d0, [sp]
 800a546:	9a01      	ldr	r2, [sp, #4]
 800a548:	4b0f      	ldr	r3, [pc, #60]	@ (800a588 <__ulp+0x48>)
 800a54a:	4013      	ands	r3, r2
 800a54c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a550:	2b00      	cmp	r3, #0
 800a552:	dc08      	bgt.n	800a566 <__ulp+0x26>
 800a554:	425b      	negs	r3, r3
 800a556:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a55a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a55e:	da04      	bge.n	800a56a <__ulp+0x2a>
 800a560:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a564:	4113      	asrs	r3, r2
 800a566:	2200      	movs	r2, #0
 800a568:	e008      	b.n	800a57c <__ulp+0x3c>
 800a56a:	f1a2 0314 	sub.w	r3, r2, #20
 800a56e:	2b1e      	cmp	r3, #30
 800a570:	bfda      	itte	le
 800a572:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a576:	40da      	lsrle	r2, r3
 800a578:	2201      	movgt	r2, #1
 800a57a:	2300      	movs	r3, #0
 800a57c:	4619      	mov	r1, r3
 800a57e:	4610      	mov	r0, r2
 800a580:	ec41 0b10 	vmov	d0, r0, r1
 800a584:	b002      	add	sp, #8
 800a586:	4770      	bx	lr
 800a588:	7ff00000 	.word	0x7ff00000

0800a58c <__b2d>:
 800a58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a590:	6906      	ldr	r6, [r0, #16]
 800a592:	f100 0814 	add.w	r8, r0, #20
 800a596:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a59a:	1f37      	subs	r7, r6, #4
 800a59c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a5a0:	4610      	mov	r0, r2
 800a5a2:	f7ff fd4b 	bl	800a03c <__hi0bits>
 800a5a6:	f1c0 0320 	rsb	r3, r0, #32
 800a5aa:	280a      	cmp	r0, #10
 800a5ac:	600b      	str	r3, [r1, #0]
 800a5ae:	491b      	ldr	r1, [pc, #108]	@ (800a61c <__b2d+0x90>)
 800a5b0:	dc15      	bgt.n	800a5de <__b2d+0x52>
 800a5b2:	f1c0 0c0b 	rsb	ip, r0, #11
 800a5b6:	fa22 f30c 	lsr.w	r3, r2, ip
 800a5ba:	45b8      	cmp	r8, r7
 800a5bc:	ea43 0501 	orr.w	r5, r3, r1
 800a5c0:	bf34      	ite	cc
 800a5c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a5c6:	2300      	movcs	r3, #0
 800a5c8:	3015      	adds	r0, #21
 800a5ca:	fa02 f000 	lsl.w	r0, r2, r0
 800a5ce:	fa23 f30c 	lsr.w	r3, r3, ip
 800a5d2:	4303      	orrs	r3, r0
 800a5d4:	461c      	mov	r4, r3
 800a5d6:	ec45 4b10 	vmov	d0, r4, r5
 800a5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5de:	45b8      	cmp	r8, r7
 800a5e0:	bf3a      	itte	cc
 800a5e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a5e6:	f1a6 0708 	subcc.w	r7, r6, #8
 800a5ea:	2300      	movcs	r3, #0
 800a5ec:	380b      	subs	r0, #11
 800a5ee:	d012      	beq.n	800a616 <__b2d+0x8a>
 800a5f0:	f1c0 0120 	rsb	r1, r0, #32
 800a5f4:	fa23 f401 	lsr.w	r4, r3, r1
 800a5f8:	4082      	lsls	r2, r0
 800a5fa:	4322      	orrs	r2, r4
 800a5fc:	4547      	cmp	r7, r8
 800a5fe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a602:	bf8c      	ite	hi
 800a604:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a608:	2200      	movls	r2, #0
 800a60a:	4083      	lsls	r3, r0
 800a60c:	40ca      	lsrs	r2, r1
 800a60e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a612:	4313      	orrs	r3, r2
 800a614:	e7de      	b.n	800a5d4 <__b2d+0x48>
 800a616:	ea42 0501 	orr.w	r5, r2, r1
 800a61a:	e7db      	b.n	800a5d4 <__b2d+0x48>
 800a61c:	3ff00000 	.word	0x3ff00000

0800a620 <__d2b>:
 800a620:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a624:	460f      	mov	r7, r1
 800a626:	2101      	movs	r1, #1
 800a628:	ec59 8b10 	vmov	r8, r9, d0
 800a62c:	4616      	mov	r6, r2
 800a62e:	f7ff fc13 	bl	8009e58 <_Balloc>
 800a632:	4604      	mov	r4, r0
 800a634:	b930      	cbnz	r0, 800a644 <__d2b+0x24>
 800a636:	4602      	mov	r2, r0
 800a638:	4b23      	ldr	r3, [pc, #140]	@ (800a6c8 <__d2b+0xa8>)
 800a63a:	4824      	ldr	r0, [pc, #144]	@ (800a6cc <__d2b+0xac>)
 800a63c:	f240 310f 	movw	r1, #783	@ 0x30f
 800a640:	f000 fac4 	bl	800abcc <__assert_func>
 800a644:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a648:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a64c:	b10d      	cbz	r5, 800a652 <__d2b+0x32>
 800a64e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a652:	9301      	str	r3, [sp, #4]
 800a654:	f1b8 0300 	subs.w	r3, r8, #0
 800a658:	d023      	beq.n	800a6a2 <__d2b+0x82>
 800a65a:	4668      	mov	r0, sp
 800a65c:	9300      	str	r3, [sp, #0]
 800a65e:	f7ff fd0c 	bl	800a07a <__lo0bits>
 800a662:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a666:	b1d0      	cbz	r0, 800a69e <__d2b+0x7e>
 800a668:	f1c0 0320 	rsb	r3, r0, #32
 800a66c:	fa02 f303 	lsl.w	r3, r2, r3
 800a670:	430b      	orrs	r3, r1
 800a672:	40c2      	lsrs	r2, r0
 800a674:	6163      	str	r3, [r4, #20]
 800a676:	9201      	str	r2, [sp, #4]
 800a678:	9b01      	ldr	r3, [sp, #4]
 800a67a:	61a3      	str	r3, [r4, #24]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	bf0c      	ite	eq
 800a680:	2201      	moveq	r2, #1
 800a682:	2202      	movne	r2, #2
 800a684:	6122      	str	r2, [r4, #16]
 800a686:	b1a5      	cbz	r5, 800a6b2 <__d2b+0x92>
 800a688:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a68c:	4405      	add	r5, r0
 800a68e:	603d      	str	r5, [r7, #0]
 800a690:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a694:	6030      	str	r0, [r6, #0]
 800a696:	4620      	mov	r0, r4
 800a698:	b003      	add	sp, #12
 800a69a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a69e:	6161      	str	r1, [r4, #20]
 800a6a0:	e7ea      	b.n	800a678 <__d2b+0x58>
 800a6a2:	a801      	add	r0, sp, #4
 800a6a4:	f7ff fce9 	bl	800a07a <__lo0bits>
 800a6a8:	9b01      	ldr	r3, [sp, #4]
 800a6aa:	6163      	str	r3, [r4, #20]
 800a6ac:	3020      	adds	r0, #32
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	e7e8      	b.n	800a684 <__d2b+0x64>
 800a6b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a6ba:	6038      	str	r0, [r7, #0]
 800a6bc:	6918      	ldr	r0, [r3, #16]
 800a6be:	f7ff fcbd 	bl	800a03c <__hi0bits>
 800a6c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6c6:	e7e5      	b.n	800a694 <__d2b+0x74>
 800a6c8:	0800b58d 	.word	0x0800b58d
 800a6cc:	0800b60f 	.word	0x0800b60f

0800a6d0 <__ratio>:
 800a6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d4:	b085      	sub	sp, #20
 800a6d6:	e9cd 1000 	strd	r1, r0, [sp]
 800a6da:	a902      	add	r1, sp, #8
 800a6dc:	f7ff ff56 	bl	800a58c <__b2d>
 800a6e0:	9800      	ldr	r0, [sp, #0]
 800a6e2:	a903      	add	r1, sp, #12
 800a6e4:	ec55 4b10 	vmov	r4, r5, d0
 800a6e8:	f7ff ff50 	bl	800a58c <__b2d>
 800a6ec:	9b01      	ldr	r3, [sp, #4]
 800a6ee:	6919      	ldr	r1, [r3, #16]
 800a6f0:	9b00      	ldr	r3, [sp, #0]
 800a6f2:	691b      	ldr	r3, [r3, #16]
 800a6f4:	1ac9      	subs	r1, r1, r3
 800a6f6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a6fa:	1a9b      	subs	r3, r3, r2
 800a6fc:	ec5b ab10 	vmov	sl, fp, d0
 800a700:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a704:	2b00      	cmp	r3, #0
 800a706:	bfce      	itee	gt
 800a708:	462a      	movgt	r2, r5
 800a70a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a70e:	465a      	movle	r2, fp
 800a710:	462f      	mov	r7, r5
 800a712:	46d9      	mov	r9, fp
 800a714:	bfcc      	ite	gt
 800a716:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a71a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a71e:	464b      	mov	r3, r9
 800a720:	4652      	mov	r2, sl
 800a722:	4620      	mov	r0, r4
 800a724:	4639      	mov	r1, r7
 800a726:	f7f6 f891 	bl	800084c <__aeabi_ddiv>
 800a72a:	ec41 0b10 	vmov	d0, r0, r1
 800a72e:	b005      	add	sp, #20
 800a730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a734 <__copybits>:
 800a734:	3901      	subs	r1, #1
 800a736:	b570      	push	{r4, r5, r6, lr}
 800a738:	1149      	asrs	r1, r1, #5
 800a73a:	6914      	ldr	r4, [r2, #16]
 800a73c:	3101      	adds	r1, #1
 800a73e:	f102 0314 	add.w	r3, r2, #20
 800a742:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a746:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a74a:	1f05      	subs	r5, r0, #4
 800a74c:	42a3      	cmp	r3, r4
 800a74e:	d30c      	bcc.n	800a76a <__copybits+0x36>
 800a750:	1aa3      	subs	r3, r4, r2
 800a752:	3b11      	subs	r3, #17
 800a754:	f023 0303 	bic.w	r3, r3, #3
 800a758:	3211      	adds	r2, #17
 800a75a:	42a2      	cmp	r2, r4
 800a75c:	bf88      	it	hi
 800a75e:	2300      	movhi	r3, #0
 800a760:	4418      	add	r0, r3
 800a762:	2300      	movs	r3, #0
 800a764:	4288      	cmp	r0, r1
 800a766:	d305      	bcc.n	800a774 <__copybits+0x40>
 800a768:	bd70      	pop	{r4, r5, r6, pc}
 800a76a:	f853 6b04 	ldr.w	r6, [r3], #4
 800a76e:	f845 6f04 	str.w	r6, [r5, #4]!
 800a772:	e7eb      	b.n	800a74c <__copybits+0x18>
 800a774:	f840 3b04 	str.w	r3, [r0], #4
 800a778:	e7f4      	b.n	800a764 <__copybits+0x30>

0800a77a <__any_on>:
 800a77a:	f100 0214 	add.w	r2, r0, #20
 800a77e:	6900      	ldr	r0, [r0, #16]
 800a780:	114b      	asrs	r3, r1, #5
 800a782:	4298      	cmp	r0, r3
 800a784:	b510      	push	{r4, lr}
 800a786:	db11      	blt.n	800a7ac <__any_on+0x32>
 800a788:	dd0a      	ble.n	800a7a0 <__any_on+0x26>
 800a78a:	f011 011f 	ands.w	r1, r1, #31
 800a78e:	d007      	beq.n	800a7a0 <__any_on+0x26>
 800a790:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a794:	fa24 f001 	lsr.w	r0, r4, r1
 800a798:	fa00 f101 	lsl.w	r1, r0, r1
 800a79c:	428c      	cmp	r4, r1
 800a79e:	d10b      	bne.n	800a7b8 <__any_on+0x3e>
 800a7a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d803      	bhi.n	800a7b0 <__any_on+0x36>
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	bd10      	pop	{r4, pc}
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	e7f7      	b.n	800a7a0 <__any_on+0x26>
 800a7b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7b4:	2900      	cmp	r1, #0
 800a7b6:	d0f5      	beq.n	800a7a4 <__any_on+0x2a>
 800a7b8:	2001      	movs	r0, #1
 800a7ba:	e7f6      	b.n	800a7aa <__any_on+0x30>

0800a7bc <__sread>:
 800a7bc:	b510      	push	{r4, lr}
 800a7be:	460c      	mov	r4, r1
 800a7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7c4:	f000 f9ce 	bl	800ab64 <_read_r>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	bfab      	itete	ge
 800a7cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a7ce:	89a3      	ldrhlt	r3, [r4, #12]
 800a7d0:	181b      	addge	r3, r3, r0
 800a7d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a7d6:	bfac      	ite	ge
 800a7d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a7da:	81a3      	strhlt	r3, [r4, #12]
 800a7dc:	bd10      	pop	{r4, pc}

0800a7de <__swrite>:
 800a7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7e2:	461f      	mov	r7, r3
 800a7e4:	898b      	ldrh	r3, [r1, #12]
 800a7e6:	05db      	lsls	r3, r3, #23
 800a7e8:	4605      	mov	r5, r0
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	4616      	mov	r6, r2
 800a7ee:	d505      	bpl.n	800a7fc <__swrite+0x1e>
 800a7f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7f4:	2302      	movs	r3, #2
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f000 f9a2 	bl	800ab40 <_lseek_r>
 800a7fc:	89a3      	ldrh	r3, [r4, #12]
 800a7fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a802:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a806:	81a3      	strh	r3, [r4, #12]
 800a808:	4632      	mov	r2, r6
 800a80a:	463b      	mov	r3, r7
 800a80c:	4628      	mov	r0, r5
 800a80e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a812:	f000 b9c9 	b.w	800aba8 <_write_r>

0800a816 <__sseek>:
 800a816:	b510      	push	{r4, lr}
 800a818:	460c      	mov	r4, r1
 800a81a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a81e:	f000 f98f 	bl	800ab40 <_lseek_r>
 800a822:	1c43      	adds	r3, r0, #1
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	bf15      	itete	ne
 800a828:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a82a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a82e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a832:	81a3      	strheq	r3, [r4, #12]
 800a834:	bf18      	it	ne
 800a836:	81a3      	strhne	r3, [r4, #12]
 800a838:	bd10      	pop	{r4, pc}

0800a83a <__sclose>:
 800a83a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a83e:	f000 b94d 	b.w	800aadc <_close_r>

0800a842 <_realloc_r>:
 800a842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a846:	4680      	mov	r8, r0
 800a848:	4615      	mov	r5, r2
 800a84a:	460c      	mov	r4, r1
 800a84c:	b921      	cbnz	r1, 800a858 <_realloc_r+0x16>
 800a84e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a852:	4611      	mov	r1, r2
 800a854:	f7ff b9b6 	b.w	8009bc4 <_malloc_r>
 800a858:	b92a      	cbnz	r2, 800a866 <_realloc_r+0x24>
 800a85a:	f000 f9e9 	bl	800ac30 <_free_r>
 800a85e:	2400      	movs	r4, #0
 800a860:	4620      	mov	r0, r4
 800a862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a866:	f000 fa2d 	bl	800acc4 <_malloc_usable_size_r>
 800a86a:	4285      	cmp	r5, r0
 800a86c:	4606      	mov	r6, r0
 800a86e:	d802      	bhi.n	800a876 <_realloc_r+0x34>
 800a870:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a874:	d8f4      	bhi.n	800a860 <_realloc_r+0x1e>
 800a876:	4629      	mov	r1, r5
 800a878:	4640      	mov	r0, r8
 800a87a:	f7ff f9a3 	bl	8009bc4 <_malloc_r>
 800a87e:	4607      	mov	r7, r0
 800a880:	2800      	cmp	r0, #0
 800a882:	d0ec      	beq.n	800a85e <_realloc_r+0x1c>
 800a884:	42b5      	cmp	r5, r6
 800a886:	462a      	mov	r2, r5
 800a888:	4621      	mov	r1, r4
 800a88a:	bf28      	it	cs
 800a88c:	4632      	movcs	r2, r6
 800a88e:	f7fd fe72 	bl	8008576 <memcpy>
 800a892:	4621      	mov	r1, r4
 800a894:	4640      	mov	r0, r8
 800a896:	f000 f9cb 	bl	800ac30 <_free_r>
 800a89a:	463c      	mov	r4, r7
 800a89c:	e7e0      	b.n	800a860 <_realloc_r+0x1e>

0800a89e <__swbuf_r>:
 800a89e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a0:	460e      	mov	r6, r1
 800a8a2:	4614      	mov	r4, r2
 800a8a4:	4605      	mov	r5, r0
 800a8a6:	b118      	cbz	r0, 800a8b0 <__swbuf_r+0x12>
 800a8a8:	6a03      	ldr	r3, [r0, #32]
 800a8aa:	b90b      	cbnz	r3, 800a8b0 <__swbuf_r+0x12>
 800a8ac:	f7fc ff3c 	bl	8007728 <__sinit>
 800a8b0:	69a3      	ldr	r3, [r4, #24]
 800a8b2:	60a3      	str	r3, [r4, #8]
 800a8b4:	89a3      	ldrh	r3, [r4, #12]
 800a8b6:	071a      	lsls	r2, r3, #28
 800a8b8:	d501      	bpl.n	800a8be <__swbuf_r+0x20>
 800a8ba:	6923      	ldr	r3, [r4, #16]
 800a8bc:	b943      	cbnz	r3, 800a8d0 <__swbuf_r+0x32>
 800a8be:	4621      	mov	r1, r4
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	f000 f82b 	bl	800a91c <__swsetup_r>
 800a8c6:	b118      	cbz	r0, 800a8d0 <__swbuf_r+0x32>
 800a8c8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a8cc:	4638      	mov	r0, r7
 800a8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8d0:	6823      	ldr	r3, [r4, #0]
 800a8d2:	6922      	ldr	r2, [r4, #16]
 800a8d4:	1a98      	subs	r0, r3, r2
 800a8d6:	6963      	ldr	r3, [r4, #20]
 800a8d8:	b2f6      	uxtb	r6, r6
 800a8da:	4283      	cmp	r3, r0
 800a8dc:	4637      	mov	r7, r6
 800a8de:	dc05      	bgt.n	800a8ec <__swbuf_r+0x4e>
 800a8e0:	4621      	mov	r1, r4
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	f7ff fa84 	bl	8009df0 <_fflush_r>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	d1ed      	bne.n	800a8c8 <__swbuf_r+0x2a>
 800a8ec:	68a3      	ldr	r3, [r4, #8]
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	60a3      	str	r3, [r4, #8]
 800a8f2:	6823      	ldr	r3, [r4, #0]
 800a8f4:	1c5a      	adds	r2, r3, #1
 800a8f6:	6022      	str	r2, [r4, #0]
 800a8f8:	701e      	strb	r6, [r3, #0]
 800a8fa:	6962      	ldr	r2, [r4, #20]
 800a8fc:	1c43      	adds	r3, r0, #1
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d004      	beq.n	800a90c <__swbuf_r+0x6e>
 800a902:	89a3      	ldrh	r3, [r4, #12]
 800a904:	07db      	lsls	r3, r3, #31
 800a906:	d5e1      	bpl.n	800a8cc <__swbuf_r+0x2e>
 800a908:	2e0a      	cmp	r6, #10
 800a90a:	d1df      	bne.n	800a8cc <__swbuf_r+0x2e>
 800a90c:	4621      	mov	r1, r4
 800a90e:	4628      	mov	r0, r5
 800a910:	f7ff fa6e 	bl	8009df0 <_fflush_r>
 800a914:	2800      	cmp	r0, #0
 800a916:	d0d9      	beq.n	800a8cc <__swbuf_r+0x2e>
 800a918:	e7d6      	b.n	800a8c8 <__swbuf_r+0x2a>
	...

0800a91c <__swsetup_r>:
 800a91c:	b538      	push	{r3, r4, r5, lr}
 800a91e:	4b29      	ldr	r3, [pc, #164]	@ (800a9c4 <__swsetup_r+0xa8>)
 800a920:	4605      	mov	r5, r0
 800a922:	6818      	ldr	r0, [r3, #0]
 800a924:	460c      	mov	r4, r1
 800a926:	b118      	cbz	r0, 800a930 <__swsetup_r+0x14>
 800a928:	6a03      	ldr	r3, [r0, #32]
 800a92a:	b90b      	cbnz	r3, 800a930 <__swsetup_r+0x14>
 800a92c:	f7fc fefc 	bl	8007728 <__sinit>
 800a930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a934:	0719      	lsls	r1, r3, #28
 800a936:	d422      	bmi.n	800a97e <__swsetup_r+0x62>
 800a938:	06da      	lsls	r2, r3, #27
 800a93a:	d407      	bmi.n	800a94c <__swsetup_r+0x30>
 800a93c:	2209      	movs	r2, #9
 800a93e:	602a      	str	r2, [r5, #0]
 800a940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a944:	81a3      	strh	r3, [r4, #12]
 800a946:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a94a:	e033      	b.n	800a9b4 <__swsetup_r+0x98>
 800a94c:	0758      	lsls	r0, r3, #29
 800a94e:	d512      	bpl.n	800a976 <__swsetup_r+0x5a>
 800a950:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a952:	b141      	cbz	r1, 800a966 <__swsetup_r+0x4a>
 800a954:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a958:	4299      	cmp	r1, r3
 800a95a:	d002      	beq.n	800a962 <__swsetup_r+0x46>
 800a95c:	4628      	mov	r0, r5
 800a95e:	f000 f967 	bl	800ac30 <_free_r>
 800a962:	2300      	movs	r3, #0
 800a964:	6363      	str	r3, [r4, #52]	@ 0x34
 800a966:	89a3      	ldrh	r3, [r4, #12]
 800a968:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a96c:	81a3      	strh	r3, [r4, #12]
 800a96e:	2300      	movs	r3, #0
 800a970:	6063      	str	r3, [r4, #4]
 800a972:	6923      	ldr	r3, [r4, #16]
 800a974:	6023      	str	r3, [r4, #0]
 800a976:	89a3      	ldrh	r3, [r4, #12]
 800a978:	f043 0308 	orr.w	r3, r3, #8
 800a97c:	81a3      	strh	r3, [r4, #12]
 800a97e:	6923      	ldr	r3, [r4, #16]
 800a980:	b94b      	cbnz	r3, 800a996 <__swsetup_r+0x7a>
 800a982:	89a3      	ldrh	r3, [r4, #12]
 800a984:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a98c:	d003      	beq.n	800a996 <__swsetup_r+0x7a>
 800a98e:	4621      	mov	r1, r4
 800a990:	4628      	mov	r0, r5
 800a992:	f000 f84c 	bl	800aa2e <__smakebuf_r>
 800a996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a99a:	f013 0201 	ands.w	r2, r3, #1
 800a99e:	d00a      	beq.n	800a9b6 <__swsetup_r+0x9a>
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	60a2      	str	r2, [r4, #8]
 800a9a4:	6962      	ldr	r2, [r4, #20]
 800a9a6:	4252      	negs	r2, r2
 800a9a8:	61a2      	str	r2, [r4, #24]
 800a9aa:	6922      	ldr	r2, [r4, #16]
 800a9ac:	b942      	cbnz	r2, 800a9c0 <__swsetup_r+0xa4>
 800a9ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a9b2:	d1c5      	bne.n	800a940 <__swsetup_r+0x24>
 800a9b4:	bd38      	pop	{r3, r4, r5, pc}
 800a9b6:	0799      	lsls	r1, r3, #30
 800a9b8:	bf58      	it	pl
 800a9ba:	6962      	ldrpl	r2, [r4, #20]
 800a9bc:	60a2      	str	r2, [r4, #8]
 800a9be:	e7f4      	b.n	800a9aa <__swsetup_r+0x8e>
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	e7f7      	b.n	800a9b4 <__swsetup_r+0x98>
 800a9c4:	2000019c 	.word	0x2000019c

0800a9c8 <__ascii_wctomb>:
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	4608      	mov	r0, r1
 800a9cc:	b141      	cbz	r1, 800a9e0 <__ascii_wctomb+0x18>
 800a9ce:	2aff      	cmp	r2, #255	@ 0xff
 800a9d0:	d904      	bls.n	800a9dc <__ascii_wctomb+0x14>
 800a9d2:	228a      	movs	r2, #138	@ 0x8a
 800a9d4:	601a      	str	r2, [r3, #0]
 800a9d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9da:	4770      	bx	lr
 800a9dc:	700a      	strb	r2, [r1, #0]
 800a9de:	2001      	movs	r0, #1
 800a9e0:	4770      	bx	lr

0800a9e2 <__swhatbuf_r>:
 800a9e2:	b570      	push	{r4, r5, r6, lr}
 800a9e4:	460c      	mov	r4, r1
 800a9e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ea:	2900      	cmp	r1, #0
 800a9ec:	b096      	sub	sp, #88	@ 0x58
 800a9ee:	4615      	mov	r5, r2
 800a9f0:	461e      	mov	r6, r3
 800a9f2:	da0d      	bge.n	800aa10 <__swhatbuf_r+0x2e>
 800a9f4:	89a3      	ldrh	r3, [r4, #12]
 800a9f6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a9fa:	f04f 0100 	mov.w	r1, #0
 800a9fe:	bf14      	ite	ne
 800aa00:	2340      	movne	r3, #64	@ 0x40
 800aa02:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aa06:	2000      	movs	r0, #0
 800aa08:	6031      	str	r1, [r6, #0]
 800aa0a:	602b      	str	r3, [r5, #0]
 800aa0c:	b016      	add	sp, #88	@ 0x58
 800aa0e:	bd70      	pop	{r4, r5, r6, pc}
 800aa10:	466a      	mov	r2, sp
 800aa12:	f000 f873 	bl	800aafc <_fstat_r>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	dbec      	blt.n	800a9f4 <__swhatbuf_r+0x12>
 800aa1a:	9901      	ldr	r1, [sp, #4]
 800aa1c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aa20:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aa24:	4259      	negs	r1, r3
 800aa26:	4159      	adcs	r1, r3
 800aa28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa2c:	e7eb      	b.n	800aa06 <__swhatbuf_r+0x24>

0800aa2e <__smakebuf_r>:
 800aa2e:	898b      	ldrh	r3, [r1, #12]
 800aa30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa32:	079d      	lsls	r5, r3, #30
 800aa34:	4606      	mov	r6, r0
 800aa36:	460c      	mov	r4, r1
 800aa38:	d507      	bpl.n	800aa4a <__smakebuf_r+0x1c>
 800aa3a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa3e:	6023      	str	r3, [r4, #0]
 800aa40:	6123      	str	r3, [r4, #16]
 800aa42:	2301      	movs	r3, #1
 800aa44:	6163      	str	r3, [r4, #20]
 800aa46:	b003      	add	sp, #12
 800aa48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa4a:	ab01      	add	r3, sp, #4
 800aa4c:	466a      	mov	r2, sp
 800aa4e:	f7ff ffc8 	bl	800a9e2 <__swhatbuf_r>
 800aa52:	9f00      	ldr	r7, [sp, #0]
 800aa54:	4605      	mov	r5, r0
 800aa56:	4639      	mov	r1, r7
 800aa58:	4630      	mov	r0, r6
 800aa5a:	f7ff f8b3 	bl	8009bc4 <_malloc_r>
 800aa5e:	b948      	cbnz	r0, 800aa74 <__smakebuf_r+0x46>
 800aa60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa64:	059a      	lsls	r2, r3, #22
 800aa66:	d4ee      	bmi.n	800aa46 <__smakebuf_r+0x18>
 800aa68:	f023 0303 	bic.w	r3, r3, #3
 800aa6c:	f043 0302 	orr.w	r3, r3, #2
 800aa70:	81a3      	strh	r3, [r4, #12]
 800aa72:	e7e2      	b.n	800aa3a <__smakebuf_r+0xc>
 800aa74:	89a3      	ldrh	r3, [r4, #12]
 800aa76:	6020      	str	r0, [r4, #0]
 800aa78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa7c:	81a3      	strh	r3, [r4, #12]
 800aa7e:	9b01      	ldr	r3, [sp, #4]
 800aa80:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa84:	b15b      	cbz	r3, 800aa9e <__smakebuf_r+0x70>
 800aa86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa8a:	4630      	mov	r0, r6
 800aa8c:	f000 f848 	bl	800ab20 <_isatty_r>
 800aa90:	b128      	cbz	r0, 800aa9e <__smakebuf_r+0x70>
 800aa92:	89a3      	ldrh	r3, [r4, #12]
 800aa94:	f023 0303 	bic.w	r3, r3, #3
 800aa98:	f043 0301 	orr.w	r3, r3, #1
 800aa9c:	81a3      	strh	r3, [r4, #12]
 800aa9e:	89a3      	ldrh	r3, [r4, #12]
 800aaa0:	431d      	orrs	r5, r3
 800aaa2:	81a5      	strh	r5, [r4, #12]
 800aaa4:	e7cf      	b.n	800aa46 <__smakebuf_r+0x18>

0800aaa6 <memmove>:
 800aaa6:	4288      	cmp	r0, r1
 800aaa8:	b510      	push	{r4, lr}
 800aaaa:	eb01 0402 	add.w	r4, r1, r2
 800aaae:	d902      	bls.n	800aab6 <memmove+0x10>
 800aab0:	4284      	cmp	r4, r0
 800aab2:	4623      	mov	r3, r4
 800aab4:	d807      	bhi.n	800aac6 <memmove+0x20>
 800aab6:	1e43      	subs	r3, r0, #1
 800aab8:	42a1      	cmp	r1, r4
 800aaba:	d008      	beq.n	800aace <memmove+0x28>
 800aabc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aac0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aac4:	e7f8      	b.n	800aab8 <memmove+0x12>
 800aac6:	4402      	add	r2, r0
 800aac8:	4601      	mov	r1, r0
 800aaca:	428a      	cmp	r2, r1
 800aacc:	d100      	bne.n	800aad0 <memmove+0x2a>
 800aace:	bd10      	pop	{r4, pc}
 800aad0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aad4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aad8:	e7f7      	b.n	800aaca <memmove+0x24>
	...

0800aadc <_close_r>:
 800aadc:	b538      	push	{r3, r4, r5, lr}
 800aade:	4d06      	ldr	r5, [pc, #24]	@ (800aaf8 <_close_r+0x1c>)
 800aae0:	2300      	movs	r3, #0
 800aae2:	4604      	mov	r4, r0
 800aae4:	4608      	mov	r0, r1
 800aae6:	602b      	str	r3, [r5, #0]
 800aae8:	f7f6 ff54 	bl	8001994 <_close>
 800aaec:	1c43      	adds	r3, r0, #1
 800aaee:	d102      	bne.n	800aaf6 <_close_r+0x1a>
 800aaf0:	682b      	ldr	r3, [r5, #0]
 800aaf2:	b103      	cbz	r3, 800aaf6 <_close_r+0x1a>
 800aaf4:	6023      	str	r3, [r4, #0]
 800aaf6:	bd38      	pop	{r3, r4, r5, pc}
 800aaf8:	200008e8 	.word	0x200008e8

0800aafc <_fstat_r>:
 800aafc:	b538      	push	{r3, r4, r5, lr}
 800aafe:	4d07      	ldr	r5, [pc, #28]	@ (800ab1c <_fstat_r+0x20>)
 800ab00:	2300      	movs	r3, #0
 800ab02:	4604      	mov	r4, r0
 800ab04:	4608      	mov	r0, r1
 800ab06:	4611      	mov	r1, r2
 800ab08:	602b      	str	r3, [r5, #0]
 800ab0a:	f7f6 ff4f 	bl	80019ac <_fstat>
 800ab0e:	1c43      	adds	r3, r0, #1
 800ab10:	d102      	bne.n	800ab18 <_fstat_r+0x1c>
 800ab12:	682b      	ldr	r3, [r5, #0]
 800ab14:	b103      	cbz	r3, 800ab18 <_fstat_r+0x1c>
 800ab16:	6023      	str	r3, [r4, #0]
 800ab18:	bd38      	pop	{r3, r4, r5, pc}
 800ab1a:	bf00      	nop
 800ab1c:	200008e8 	.word	0x200008e8

0800ab20 <_isatty_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	4d06      	ldr	r5, [pc, #24]	@ (800ab3c <_isatty_r+0x1c>)
 800ab24:	2300      	movs	r3, #0
 800ab26:	4604      	mov	r4, r0
 800ab28:	4608      	mov	r0, r1
 800ab2a:	602b      	str	r3, [r5, #0]
 800ab2c:	f7f6 ff4e 	bl	80019cc <_isatty>
 800ab30:	1c43      	adds	r3, r0, #1
 800ab32:	d102      	bne.n	800ab3a <_isatty_r+0x1a>
 800ab34:	682b      	ldr	r3, [r5, #0]
 800ab36:	b103      	cbz	r3, 800ab3a <_isatty_r+0x1a>
 800ab38:	6023      	str	r3, [r4, #0]
 800ab3a:	bd38      	pop	{r3, r4, r5, pc}
 800ab3c:	200008e8 	.word	0x200008e8

0800ab40 <_lseek_r>:
 800ab40:	b538      	push	{r3, r4, r5, lr}
 800ab42:	4d07      	ldr	r5, [pc, #28]	@ (800ab60 <_lseek_r+0x20>)
 800ab44:	4604      	mov	r4, r0
 800ab46:	4608      	mov	r0, r1
 800ab48:	4611      	mov	r1, r2
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	602a      	str	r2, [r5, #0]
 800ab4e:	461a      	mov	r2, r3
 800ab50:	f7f6 ff47 	bl	80019e2 <_lseek>
 800ab54:	1c43      	adds	r3, r0, #1
 800ab56:	d102      	bne.n	800ab5e <_lseek_r+0x1e>
 800ab58:	682b      	ldr	r3, [r5, #0]
 800ab5a:	b103      	cbz	r3, 800ab5e <_lseek_r+0x1e>
 800ab5c:	6023      	str	r3, [r4, #0]
 800ab5e:	bd38      	pop	{r3, r4, r5, pc}
 800ab60:	200008e8 	.word	0x200008e8

0800ab64 <_read_r>:
 800ab64:	b538      	push	{r3, r4, r5, lr}
 800ab66:	4d07      	ldr	r5, [pc, #28]	@ (800ab84 <_read_r+0x20>)
 800ab68:	4604      	mov	r4, r0
 800ab6a:	4608      	mov	r0, r1
 800ab6c:	4611      	mov	r1, r2
 800ab6e:	2200      	movs	r2, #0
 800ab70:	602a      	str	r2, [r5, #0]
 800ab72:	461a      	mov	r2, r3
 800ab74:	f7f6 fed5 	bl	8001922 <_read>
 800ab78:	1c43      	adds	r3, r0, #1
 800ab7a:	d102      	bne.n	800ab82 <_read_r+0x1e>
 800ab7c:	682b      	ldr	r3, [r5, #0]
 800ab7e:	b103      	cbz	r3, 800ab82 <_read_r+0x1e>
 800ab80:	6023      	str	r3, [r4, #0]
 800ab82:	bd38      	pop	{r3, r4, r5, pc}
 800ab84:	200008e8 	.word	0x200008e8

0800ab88 <_sbrk_r>:
 800ab88:	b538      	push	{r3, r4, r5, lr}
 800ab8a:	4d06      	ldr	r5, [pc, #24]	@ (800aba4 <_sbrk_r+0x1c>)
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	4604      	mov	r4, r0
 800ab90:	4608      	mov	r0, r1
 800ab92:	602b      	str	r3, [r5, #0]
 800ab94:	f7f6 ff32 	bl	80019fc <_sbrk>
 800ab98:	1c43      	adds	r3, r0, #1
 800ab9a:	d102      	bne.n	800aba2 <_sbrk_r+0x1a>
 800ab9c:	682b      	ldr	r3, [r5, #0]
 800ab9e:	b103      	cbz	r3, 800aba2 <_sbrk_r+0x1a>
 800aba0:	6023      	str	r3, [r4, #0]
 800aba2:	bd38      	pop	{r3, r4, r5, pc}
 800aba4:	200008e8 	.word	0x200008e8

0800aba8 <_write_r>:
 800aba8:	b538      	push	{r3, r4, r5, lr}
 800abaa:	4d07      	ldr	r5, [pc, #28]	@ (800abc8 <_write_r+0x20>)
 800abac:	4604      	mov	r4, r0
 800abae:	4608      	mov	r0, r1
 800abb0:	4611      	mov	r1, r2
 800abb2:	2200      	movs	r2, #0
 800abb4:	602a      	str	r2, [r5, #0]
 800abb6:	461a      	mov	r2, r3
 800abb8:	f7f6 fed0 	bl	800195c <_write>
 800abbc:	1c43      	adds	r3, r0, #1
 800abbe:	d102      	bne.n	800abc6 <_write_r+0x1e>
 800abc0:	682b      	ldr	r3, [r5, #0]
 800abc2:	b103      	cbz	r3, 800abc6 <_write_r+0x1e>
 800abc4:	6023      	str	r3, [r4, #0]
 800abc6:	bd38      	pop	{r3, r4, r5, pc}
 800abc8:	200008e8 	.word	0x200008e8

0800abcc <__assert_func>:
 800abcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abce:	4614      	mov	r4, r2
 800abd0:	461a      	mov	r2, r3
 800abd2:	4b09      	ldr	r3, [pc, #36]	@ (800abf8 <__assert_func+0x2c>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4605      	mov	r5, r0
 800abd8:	68d8      	ldr	r0, [r3, #12]
 800abda:	b954      	cbnz	r4, 800abf2 <__assert_func+0x26>
 800abdc:	4b07      	ldr	r3, [pc, #28]	@ (800abfc <__assert_func+0x30>)
 800abde:	461c      	mov	r4, r3
 800abe0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abe4:	9100      	str	r1, [sp, #0]
 800abe6:	462b      	mov	r3, r5
 800abe8:	4905      	ldr	r1, [pc, #20]	@ (800ac00 <__assert_func+0x34>)
 800abea:	f000 f873 	bl	800acd4 <fiprintf>
 800abee:	f000 f883 	bl	800acf8 <abort>
 800abf2:	4b04      	ldr	r3, [pc, #16]	@ (800ac04 <__assert_func+0x38>)
 800abf4:	e7f4      	b.n	800abe0 <__assert_func+0x14>
 800abf6:	bf00      	nop
 800abf8:	2000019c 	.word	0x2000019c
 800abfc:	0800b7a3 	.word	0x0800b7a3
 800ac00:	0800b775 	.word	0x0800b775
 800ac04:	0800b768 	.word	0x0800b768

0800ac08 <_calloc_r>:
 800ac08:	b570      	push	{r4, r5, r6, lr}
 800ac0a:	fba1 5402 	umull	r5, r4, r1, r2
 800ac0e:	b93c      	cbnz	r4, 800ac20 <_calloc_r+0x18>
 800ac10:	4629      	mov	r1, r5
 800ac12:	f7fe ffd7 	bl	8009bc4 <_malloc_r>
 800ac16:	4606      	mov	r6, r0
 800ac18:	b928      	cbnz	r0, 800ac26 <_calloc_r+0x1e>
 800ac1a:	2600      	movs	r6, #0
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	bd70      	pop	{r4, r5, r6, pc}
 800ac20:	220c      	movs	r2, #12
 800ac22:	6002      	str	r2, [r0, #0]
 800ac24:	e7f9      	b.n	800ac1a <_calloc_r+0x12>
 800ac26:	462a      	mov	r2, r5
 800ac28:	4621      	mov	r1, r4
 800ac2a:	f7fd fc6a 	bl	8008502 <memset>
 800ac2e:	e7f5      	b.n	800ac1c <_calloc_r+0x14>

0800ac30 <_free_r>:
 800ac30:	b538      	push	{r3, r4, r5, lr}
 800ac32:	4605      	mov	r5, r0
 800ac34:	2900      	cmp	r1, #0
 800ac36:	d041      	beq.n	800acbc <_free_r+0x8c>
 800ac38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac3c:	1f0c      	subs	r4, r1, #4
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	bfb8      	it	lt
 800ac42:	18e4      	addlt	r4, r4, r3
 800ac44:	f7ff f8fc 	bl	8009e40 <__malloc_lock>
 800ac48:	4a1d      	ldr	r2, [pc, #116]	@ (800acc0 <_free_r+0x90>)
 800ac4a:	6813      	ldr	r3, [r2, #0]
 800ac4c:	b933      	cbnz	r3, 800ac5c <_free_r+0x2c>
 800ac4e:	6063      	str	r3, [r4, #4]
 800ac50:	6014      	str	r4, [r2, #0]
 800ac52:	4628      	mov	r0, r5
 800ac54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac58:	f7ff b8f8 	b.w	8009e4c <__malloc_unlock>
 800ac5c:	42a3      	cmp	r3, r4
 800ac5e:	d908      	bls.n	800ac72 <_free_r+0x42>
 800ac60:	6820      	ldr	r0, [r4, #0]
 800ac62:	1821      	adds	r1, r4, r0
 800ac64:	428b      	cmp	r3, r1
 800ac66:	bf01      	itttt	eq
 800ac68:	6819      	ldreq	r1, [r3, #0]
 800ac6a:	685b      	ldreq	r3, [r3, #4]
 800ac6c:	1809      	addeq	r1, r1, r0
 800ac6e:	6021      	streq	r1, [r4, #0]
 800ac70:	e7ed      	b.n	800ac4e <_free_r+0x1e>
 800ac72:	461a      	mov	r2, r3
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	b10b      	cbz	r3, 800ac7c <_free_r+0x4c>
 800ac78:	42a3      	cmp	r3, r4
 800ac7a:	d9fa      	bls.n	800ac72 <_free_r+0x42>
 800ac7c:	6811      	ldr	r1, [r2, #0]
 800ac7e:	1850      	adds	r0, r2, r1
 800ac80:	42a0      	cmp	r0, r4
 800ac82:	d10b      	bne.n	800ac9c <_free_r+0x6c>
 800ac84:	6820      	ldr	r0, [r4, #0]
 800ac86:	4401      	add	r1, r0
 800ac88:	1850      	adds	r0, r2, r1
 800ac8a:	4283      	cmp	r3, r0
 800ac8c:	6011      	str	r1, [r2, #0]
 800ac8e:	d1e0      	bne.n	800ac52 <_free_r+0x22>
 800ac90:	6818      	ldr	r0, [r3, #0]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	6053      	str	r3, [r2, #4]
 800ac96:	4408      	add	r0, r1
 800ac98:	6010      	str	r0, [r2, #0]
 800ac9a:	e7da      	b.n	800ac52 <_free_r+0x22>
 800ac9c:	d902      	bls.n	800aca4 <_free_r+0x74>
 800ac9e:	230c      	movs	r3, #12
 800aca0:	602b      	str	r3, [r5, #0]
 800aca2:	e7d6      	b.n	800ac52 <_free_r+0x22>
 800aca4:	6820      	ldr	r0, [r4, #0]
 800aca6:	1821      	adds	r1, r4, r0
 800aca8:	428b      	cmp	r3, r1
 800acaa:	bf04      	itt	eq
 800acac:	6819      	ldreq	r1, [r3, #0]
 800acae:	685b      	ldreq	r3, [r3, #4]
 800acb0:	6063      	str	r3, [r4, #4]
 800acb2:	bf04      	itt	eq
 800acb4:	1809      	addeq	r1, r1, r0
 800acb6:	6021      	streq	r1, [r4, #0]
 800acb8:	6054      	str	r4, [r2, #4]
 800acba:	e7ca      	b.n	800ac52 <_free_r+0x22>
 800acbc:	bd38      	pop	{r3, r4, r5, pc}
 800acbe:	bf00      	nop
 800acc0:	200008e4 	.word	0x200008e4

0800acc4 <_malloc_usable_size_r>:
 800acc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acc8:	1f18      	subs	r0, r3, #4
 800acca:	2b00      	cmp	r3, #0
 800accc:	bfbc      	itt	lt
 800acce:	580b      	ldrlt	r3, [r1, r0]
 800acd0:	18c0      	addlt	r0, r0, r3
 800acd2:	4770      	bx	lr

0800acd4 <fiprintf>:
 800acd4:	b40e      	push	{r1, r2, r3}
 800acd6:	b503      	push	{r0, r1, lr}
 800acd8:	4601      	mov	r1, r0
 800acda:	ab03      	add	r3, sp, #12
 800acdc:	4805      	ldr	r0, [pc, #20]	@ (800acf4 <fiprintf+0x20>)
 800acde:	f853 2b04 	ldr.w	r2, [r3], #4
 800ace2:	6800      	ldr	r0, [r0, #0]
 800ace4:	9301      	str	r3, [sp, #4]
 800ace6:	f000 f837 	bl	800ad58 <_vfiprintf_r>
 800acea:	b002      	add	sp, #8
 800acec:	f85d eb04 	ldr.w	lr, [sp], #4
 800acf0:	b003      	add	sp, #12
 800acf2:	4770      	bx	lr
 800acf4:	2000019c 	.word	0x2000019c

0800acf8 <abort>:
 800acf8:	b508      	push	{r3, lr}
 800acfa:	2006      	movs	r0, #6
 800acfc:	f000 f96c 	bl	800afd8 <raise>
 800ad00:	2001      	movs	r0, #1
 800ad02:	f7f6 fe03 	bl	800190c <_exit>

0800ad06 <__sfputc_r>:
 800ad06:	6893      	ldr	r3, [r2, #8]
 800ad08:	3b01      	subs	r3, #1
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	b410      	push	{r4}
 800ad0e:	6093      	str	r3, [r2, #8]
 800ad10:	da08      	bge.n	800ad24 <__sfputc_r+0x1e>
 800ad12:	6994      	ldr	r4, [r2, #24]
 800ad14:	42a3      	cmp	r3, r4
 800ad16:	db01      	blt.n	800ad1c <__sfputc_r+0x16>
 800ad18:	290a      	cmp	r1, #10
 800ad1a:	d103      	bne.n	800ad24 <__sfputc_r+0x1e>
 800ad1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad20:	f7ff bdbd 	b.w	800a89e <__swbuf_r>
 800ad24:	6813      	ldr	r3, [r2, #0]
 800ad26:	1c58      	adds	r0, r3, #1
 800ad28:	6010      	str	r0, [r2, #0]
 800ad2a:	7019      	strb	r1, [r3, #0]
 800ad2c:	4608      	mov	r0, r1
 800ad2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <__sfputs_r>:
 800ad34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad36:	4606      	mov	r6, r0
 800ad38:	460f      	mov	r7, r1
 800ad3a:	4614      	mov	r4, r2
 800ad3c:	18d5      	adds	r5, r2, r3
 800ad3e:	42ac      	cmp	r4, r5
 800ad40:	d101      	bne.n	800ad46 <__sfputs_r+0x12>
 800ad42:	2000      	movs	r0, #0
 800ad44:	e007      	b.n	800ad56 <__sfputs_r+0x22>
 800ad46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad4a:	463a      	mov	r2, r7
 800ad4c:	4630      	mov	r0, r6
 800ad4e:	f7ff ffda 	bl	800ad06 <__sfputc_r>
 800ad52:	1c43      	adds	r3, r0, #1
 800ad54:	d1f3      	bne.n	800ad3e <__sfputs_r+0xa>
 800ad56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad58 <_vfiprintf_r>:
 800ad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	460d      	mov	r5, r1
 800ad5e:	b09d      	sub	sp, #116	@ 0x74
 800ad60:	4614      	mov	r4, r2
 800ad62:	4698      	mov	r8, r3
 800ad64:	4606      	mov	r6, r0
 800ad66:	b118      	cbz	r0, 800ad70 <_vfiprintf_r+0x18>
 800ad68:	6a03      	ldr	r3, [r0, #32]
 800ad6a:	b90b      	cbnz	r3, 800ad70 <_vfiprintf_r+0x18>
 800ad6c:	f7fc fcdc 	bl	8007728 <__sinit>
 800ad70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad72:	07d9      	lsls	r1, r3, #31
 800ad74:	d405      	bmi.n	800ad82 <_vfiprintf_r+0x2a>
 800ad76:	89ab      	ldrh	r3, [r5, #12]
 800ad78:	059a      	lsls	r2, r3, #22
 800ad7a:	d402      	bmi.n	800ad82 <_vfiprintf_r+0x2a>
 800ad7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad7e:	f7fd fbf8 	bl	8008572 <__retarget_lock_acquire_recursive>
 800ad82:	89ab      	ldrh	r3, [r5, #12]
 800ad84:	071b      	lsls	r3, r3, #28
 800ad86:	d501      	bpl.n	800ad8c <_vfiprintf_r+0x34>
 800ad88:	692b      	ldr	r3, [r5, #16]
 800ad8a:	b99b      	cbnz	r3, 800adb4 <_vfiprintf_r+0x5c>
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	4630      	mov	r0, r6
 800ad90:	f7ff fdc4 	bl	800a91c <__swsetup_r>
 800ad94:	b170      	cbz	r0, 800adb4 <_vfiprintf_r+0x5c>
 800ad96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad98:	07dc      	lsls	r4, r3, #31
 800ad9a:	d504      	bpl.n	800ada6 <_vfiprintf_r+0x4e>
 800ad9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ada0:	b01d      	add	sp, #116	@ 0x74
 800ada2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada6:	89ab      	ldrh	r3, [r5, #12]
 800ada8:	0598      	lsls	r0, r3, #22
 800adaa:	d4f7      	bmi.n	800ad9c <_vfiprintf_r+0x44>
 800adac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adae:	f7fd fbe1 	bl	8008574 <__retarget_lock_release_recursive>
 800adb2:	e7f3      	b.n	800ad9c <_vfiprintf_r+0x44>
 800adb4:	2300      	movs	r3, #0
 800adb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800adb8:	2320      	movs	r3, #32
 800adba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800adbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800adc2:	2330      	movs	r3, #48	@ 0x30
 800adc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800af74 <_vfiprintf_r+0x21c>
 800adc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800adcc:	f04f 0901 	mov.w	r9, #1
 800add0:	4623      	mov	r3, r4
 800add2:	469a      	mov	sl, r3
 800add4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800add8:	b10a      	cbz	r2, 800adde <_vfiprintf_r+0x86>
 800adda:	2a25      	cmp	r2, #37	@ 0x25
 800addc:	d1f9      	bne.n	800add2 <_vfiprintf_r+0x7a>
 800adde:	ebba 0b04 	subs.w	fp, sl, r4
 800ade2:	d00b      	beq.n	800adfc <_vfiprintf_r+0xa4>
 800ade4:	465b      	mov	r3, fp
 800ade6:	4622      	mov	r2, r4
 800ade8:	4629      	mov	r1, r5
 800adea:	4630      	mov	r0, r6
 800adec:	f7ff ffa2 	bl	800ad34 <__sfputs_r>
 800adf0:	3001      	adds	r0, #1
 800adf2:	f000 80a7 	beq.w	800af44 <_vfiprintf_r+0x1ec>
 800adf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adf8:	445a      	add	r2, fp
 800adfa:	9209      	str	r2, [sp, #36]	@ 0x24
 800adfc:	f89a 3000 	ldrb.w	r3, [sl]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f000 809f 	beq.w	800af44 <_vfiprintf_r+0x1ec>
 800ae06:	2300      	movs	r3, #0
 800ae08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae10:	f10a 0a01 	add.w	sl, sl, #1
 800ae14:	9304      	str	r3, [sp, #16]
 800ae16:	9307      	str	r3, [sp, #28]
 800ae18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae1c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae1e:	4654      	mov	r4, sl
 800ae20:	2205      	movs	r2, #5
 800ae22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae26:	4853      	ldr	r0, [pc, #332]	@ (800af74 <_vfiprintf_r+0x21c>)
 800ae28:	f7f5 f9d2 	bl	80001d0 <memchr>
 800ae2c:	9a04      	ldr	r2, [sp, #16]
 800ae2e:	b9d8      	cbnz	r0, 800ae68 <_vfiprintf_r+0x110>
 800ae30:	06d1      	lsls	r1, r2, #27
 800ae32:	bf44      	itt	mi
 800ae34:	2320      	movmi	r3, #32
 800ae36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae3a:	0713      	lsls	r3, r2, #28
 800ae3c:	bf44      	itt	mi
 800ae3e:	232b      	movmi	r3, #43	@ 0x2b
 800ae40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae44:	f89a 3000 	ldrb.w	r3, [sl]
 800ae48:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae4a:	d015      	beq.n	800ae78 <_vfiprintf_r+0x120>
 800ae4c:	9a07      	ldr	r2, [sp, #28]
 800ae4e:	4654      	mov	r4, sl
 800ae50:	2000      	movs	r0, #0
 800ae52:	f04f 0c0a 	mov.w	ip, #10
 800ae56:	4621      	mov	r1, r4
 800ae58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae5c:	3b30      	subs	r3, #48	@ 0x30
 800ae5e:	2b09      	cmp	r3, #9
 800ae60:	d94b      	bls.n	800aefa <_vfiprintf_r+0x1a2>
 800ae62:	b1b0      	cbz	r0, 800ae92 <_vfiprintf_r+0x13a>
 800ae64:	9207      	str	r2, [sp, #28]
 800ae66:	e014      	b.n	800ae92 <_vfiprintf_r+0x13a>
 800ae68:	eba0 0308 	sub.w	r3, r0, r8
 800ae6c:	fa09 f303 	lsl.w	r3, r9, r3
 800ae70:	4313      	orrs	r3, r2
 800ae72:	9304      	str	r3, [sp, #16]
 800ae74:	46a2      	mov	sl, r4
 800ae76:	e7d2      	b.n	800ae1e <_vfiprintf_r+0xc6>
 800ae78:	9b03      	ldr	r3, [sp, #12]
 800ae7a:	1d19      	adds	r1, r3, #4
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	9103      	str	r1, [sp, #12]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	bfbb      	ittet	lt
 800ae84:	425b      	neglt	r3, r3
 800ae86:	f042 0202 	orrlt.w	r2, r2, #2
 800ae8a:	9307      	strge	r3, [sp, #28]
 800ae8c:	9307      	strlt	r3, [sp, #28]
 800ae8e:	bfb8      	it	lt
 800ae90:	9204      	strlt	r2, [sp, #16]
 800ae92:	7823      	ldrb	r3, [r4, #0]
 800ae94:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae96:	d10a      	bne.n	800aeae <_vfiprintf_r+0x156>
 800ae98:	7863      	ldrb	r3, [r4, #1]
 800ae9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae9c:	d132      	bne.n	800af04 <_vfiprintf_r+0x1ac>
 800ae9e:	9b03      	ldr	r3, [sp, #12]
 800aea0:	1d1a      	adds	r2, r3, #4
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	9203      	str	r2, [sp, #12]
 800aea6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aeaa:	3402      	adds	r4, #2
 800aeac:	9305      	str	r3, [sp, #20]
 800aeae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800af84 <_vfiprintf_r+0x22c>
 800aeb2:	7821      	ldrb	r1, [r4, #0]
 800aeb4:	2203      	movs	r2, #3
 800aeb6:	4650      	mov	r0, sl
 800aeb8:	f7f5 f98a 	bl	80001d0 <memchr>
 800aebc:	b138      	cbz	r0, 800aece <_vfiprintf_r+0x176>
 800aebe:	9b04      	ldr	r3, [sp, #16]
 800aec0:	eba0 000a 	sub.w	r0, r0, sl
 800aec4:	2240      	movs	r2, #64	@ 0x40
 800aec6:	4082      	lsls	r2, r0
 800aec8:	4313      	orrs	r3, r2
 800aeca:	3401      	adds	r4, #1
 800aecc:	9304      	str	r3, [sp, #16]
 800aece:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aed2:	4829      	ldr	r0, [pc, #164]	@ (800af78 <_vfiprintf_r+0x220>)
 800aed4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aed8:	2206      	movs	r2, #6
 800aeda:	f7f5 f979 	bl	80001d0 <memchr>
 800aede:	2800      	cmp	r0, #0
 800aee0:	d03f      	beq.n	800af62 <_vfiprintf_r+0x20a>
 800aee2:	4b26      	ldr	r3, [pc, #152]	@ (800af7c <_vfiprintf_r+0x224>)
 800aee4:	bb1b      	cbnz	r3, 800af2e <_vfiprintf_r+0x1d6>
 800aee6:	9b03      	ldr	r3, [sp, #12]
 800aee8:	3307      	adds	r3, #7
 800aeea:	f023 0307 	bic.w	r3, r3, #7
 800aeee:	3308      	adds	r3, #8
 800aef0:	9303      	str	r3, [sp, #12]
 800aef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aef4:	443b      	add	r3, r7
 800aef6:	9309      	str	r3, [sp, #36]	@ 0x24
 800aef8:	e76a      	b.n	800add0 <_vfiprintf_r+0x78>
 800aefa:	fb0c 3202 	mla	r2, ip, r2, r3
 800aefe:	460c      	mov	r4, r1
 800af00:	2001      	movs	r0, #1
 800af02:	e7a8      	b.n	800ae56 <_vfiprintf_r+0xfe>
 800af04:	2300      	movs	r3, #0
 800af06:	3401      	adds	r4, #1
 800af08:	9305      	str	r3, [sp, #20]
 800af0a:	4619      	mov	r1, r3
 800af0c:	f04f 0c0a 	mov.w	ip, #10
 800af10:	4620      	mov	r0, r4
 800af12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af16:	3a30      	subs	r2, #48	@ 0x30
 800af18:	2a09      	cmp	r2, #9
 800af1a:	d903      	bls.n	800af24 <_vfiprintf_r+0x1cc>
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d0c6      	beq.n	800aeae <_vfiprintf_r+0x156>
 800af20:	9105      	str	r1, [sp, #20]
 800af22:	e7c4      	b.n	800aeae <_vfiprintf_r+0x156>
 800af24:	fb0c 2101 	mla	r1, ip, r1, r2
 800af28:	4604      	mov	r4, r0
 800af2a:	2301      	movs	r3, #1
 800af2c:	e7f0      	b.n	800af10 <_vfiprintf_r+0x1b8>
 800af2e:	ab03      	add	r3, sp, #12
 800af30:	9300      	str	r3, [sp, #0]
 800af32:	462a      	mov	r2, r5
 800af34:	4b12      	ldr	r3, [pc, #72]	@ (800af80 <_vfiprintf_r+0x228>)
 800af36:	a904      	add	r1, sp, #16
 800af38:	4630      	mov	r0, r6
 800af3a:	f7fb fd7d 	bl	8006a38 <_printf_float>
 800af3e:	4607      	mov	r7, r0
 800af40:	1c78      	adds	r0, r7, #1
 800af42:	d1d6      	bne.n	800aef2 <_vfiprintf_r+0x19a>
 800af44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af46:	07d9      	lsls	r1, r3, #31
 800af48:	d405      	bmi.n	800af56 <_vfiprintf_r+0x1fe>
 800af4a:	89ab      	ldrh	r3, [r5, #12]
 800af4c:	059a      	lsls	r2, r3, #22
 800af4e:	d402      	bmi.n	800af56 <_vfiprintf_r+0x1fe>
 800af50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af52:	f7fd fb0f 	bl	8008574 <__retarget_lock_release_recursive>
 800af56:	89ab      	ldrh	r3, [r5, #12]
 800af58:	065b      	lsls	r3, r3, #25
 800af5a:	f53f af1f 	bmi.w	800ad9c <_vfiprintf_r+0x44>
 800af5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af60:	e71e      	b.n	800ada0 <_vfiprintf_r+0x48>
 800af62:	ab03      	add	r3, sp, #12
 800af64:	9300      	str	r3, [sp, #0]
 800af66:	462a      	mov	r2, r5
 800af68:	4b05      	ldr	r3, [pc, #20]	@ (800af80 <_vfiprintf_r+0x228>)
 800af6a:	a904      	add	r1, sp, #16
 800af6c:	4630      	mov	r0, r6
 800af6e:	f7fb fffb 	bl	8006f68 <_printf_i>
 800af72:	e7e4      	b.n	800af3e <_vfiprintf_r+0x1e6>
 800af74:	0800b5fe 	.word	0x0800b5fe
 800af78:	0800b608 	.word	0x0800b608
 800af7c:	08006a39 	.word	0x08006a39
 800af80:	0800ad35 	.word	0x0800ad35
 800af84:	0800b604 	.word	0x0800b604

0800af88 <_raise_r>:
 800af88:	291f      	cmp	r1, #31
 800af8a:	b538      	push	{r3, r4, r5, lr}
 800af8c:	4605      	mov	r5, r0
 800af8e:	460c      	mov	r4, r1
 800af90:	d904      	bls.n	800af9c <_raise_r+0x14>
 800af92:	2316      	movs	r3, #22
 800af94:	6003      	str	r3, [r0, #0]
 800af96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af9a:	bd38      	pop	{r3, r4, r5, pc}
 800af9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800af9e:	b112      	cbz	r2, 800afa6 <_raise_r+0x1e>
 800afa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afa4:	b94b      	cbnz	r3, 800afba <_raise_r+0x32>
 800afa6:	4628      	mov	r0, r5
 800afa8:	f000 f830 	bl	800b00c <_getpid_r>
 800afac:	4622      	mov	r2, r4
 800afae:	4601      	mov	r1, r0
 800afb0:	4628      	mov	r0, r5
 800afb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afb6:	f000 b817 	b.w	800afe8 <_kill_r>
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d00a      	beq.n	800afd4 <_raise_r+0x4c>
 800afbe:	1c59      	adds	r1, r3, #1
 800afc0:	d103      	bne.n	800afca <_raise_r+0x42>
 800afc2:	2316      	movs	r3, #22
 800afc4:	6003      	str	r3, [r0, #0]
 800afc6:	2001      	movs	r0, #1
 800afc8:	e7e7      	b.n	800af9a <_raise_r+0x12>
 800afca:	2100      	movs	r1, #0
 800afcc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800afd0:	4620      	mov	r0, r4
 800afd2:	4798      	blx	r3
 800afd4:	2000      	movs	r0, #0
 800afd6:	e7e0      	b.n	800af9a <_raise_r+0x12>

0800afd8 <raise>:
 800afd8:	4b02      	ldr	r3, [pc, #8]	@ (800afe4 <raise+0xc>)
 800afda:	4601      	mov	r1, r0
 800afdc:	6818      	ldr	r0, [r3, #0]
 800afde:	f7ff bfd3 	b.w	800af88 <_raise_r>
 800afe2:	bf00      	nop
 800afe4:	2000019c 	.word	0x2000019c

0800afe8 <_kill_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	4d07      	ldr	r5, [pc, #28]	@ (800b008 <_kill_r+0x20>)
 800afec:	2300      	movs	r3, #0
 800afee:	4604      	mov	r4, r0
 800aff0:	4608      	mov	r0, r1
 800aff2:	4611      	mov	r1, r2
 800aff4:	602b      	str	r3, [r5, #0]
 800aff6:	f7f6 fc79 	bl	80018ec <_kill>
 800affa:	1c43      	adds	r3, r0, #1
 800affc:	d102      	bne.n	800b004 <_kill_r+0x1c>
 800affe:	682b      	ldr	r3, [r5, #0]
 800b000:	b103      	cbz	r3, 800b004 <_kill_r+0x1c>
 800b002:	6023      	str	r3, [r4, #0]
 800b004:	bd38      	pop	{r3, r4, r5, pc}
 800b006:	bf00      	nop
 800b008:	200008e8 	.word	0x200008e8

0800b00c <_getpid_r>:
 800b00c:	f7f6 bc66 	b.w	80018dc <_getpid>

0800b010 <sqrt>:
 800b010:	b538      	push	{r3, r4, r5, lr}
 800b012:	ed2d 8b02 	vpush	{d8}
 800b016:	ec55 4b10 	vmov	r4, r5, d0
 800b01a:	f000 f825 	bl	800b068 <__ieee754_sqrt>
 800b01e:	4622      	mov	r2, r4
 800b020:	462b      	mov	r3, r5
 800b022:	4620      	mov	r0, r4
 800b024:	4629      	mov	r1, r5
 800b026:	eeb0 8a40 	vmov.f32	s16, s0
 800b02a:	eef0 8a60 	vmov.f32	s17, s1
 800b02e:	f7f5 fd7d 	bl	8000b2c <__aeabi_dcmpun>
 800b032:	b990      	cbnz	r0, 800b05a <sqrt+0x4a>
 800b034:	2200      	movs	r2, #0
 800b036:	2300      	movs	r3, #0
 800b038:	4620      	mov	r0, r4
 800b03a:	4629      	mov	r1, r5
 800b03c:	f7f5 fd4e 	bl	8000adc <__aeabi_dcmplt>
 800b040:	b158      	cbz	r0, 800b05a <sqrt+0x4a>
 800b042:	f7fd fa6b 	bl	800851c <__errno>
 800b046:	2321      	movs	r3, #33	@ 0x21
 800b048:	6003      	str	r3, [r0, #0]
 800b04a:	2200      	movs	r2, #0
 800b04c:	2300      	movs	r3, #0
 800b04e:	4610      	mov	r0, r2
 800b050:	4619      	mov	r1, r3
 800b052:	f7f5 fbfb 	bl	800084c <__aeabi_ddiv>
 800b056:	ec41 0b18 	vmov	d8, r0, r1
 800b05a:	eeb0 0a48 	vmov.f32	s0, s16
 800b05e:	eef0 0a68 	vmov.f32	s1, s17
 800b062:	ecbd 8b02 	vpop	{d8}
 800b066:	bd38      	pop	{r3, r4, r5, pc}

0800b068 <__ieee754_sqrt>:
 800b068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06c:	4a68      	ldr	r2, [pc, #416]	@ (800b210 <__ieee754_sqrt+0x1a8>)
 800b06e:	ec55 4b10 	vmov	r4, r5, d0
 800b072:	43aa      	bics	r2, r5
 800b074:	462b      	mov	r3, r5
 800b076:	4621      	mov	r1, r4
 800b078:	d110      	bne.n	800b09c <__ieee754_sqrt+0x34>
 800b07a:	4622      	mov	r2, r4
 800b07c:	4620      	mov	r0, r4
 800b07e:	4629      	mov	r1, r5
 800b080:	f7f5 faba 	bl	80005f8 <__aeabi_dmul>
 800b084:	4602      	mov	r2, r0
 800b086:	460b      	mov	r3, r1
 800b088:	4620      	mov	r0, r4
 800b08a:	4629      	mov	r1, r5
 800b08c:	f7f5 f8fe 	bl	800028c <__adddf3>
 800b090:	4604      	mov	r4, r0
 800b092:	460d      	mov	r5, r1
 800b094:	ec45 4b10 	vmov	d0, r4, r5
 800b098:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b09c:	2d00      	cmp	r5, #0
 800b09e:	dc0e      	bgt.n	800b0be <__ieee754_sqrt+0x56>
 800b0a0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b0a4:	4322      	orrs	r2, r4
 800b0a6:	d0f5      	beq.n	800b094 <__ieee754_sqrt+0x2c>
 800b0a8:	b19d      	cbz	r5, 800b0d2 <__ieee754_sqrt+0x6a>
 800b0aa:	4622      	mov	r2, r4
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	f7f5 f8ea 	bl	8000288 <__aeabi_dsub>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	f7f5 fbc8 	bl	800084c <__aeabi_ddiv>
 800b0bc:	e7e8      	b.n	800b090 <__ieee754_sqrt+0x28>
 800b0be:	152a      	asrs	r2, r5, #20
 800b0c0:	d115      	bne.n	800b0ee <__ieee754_sqrt+0x86>
 800b0c2:	2000      	movs	r0, #0
 800b0c4:	e009      	b.n	800b0da <__ieee754_sqrt+0x72>
 800b0c6:	0acb      	lsrs	r3, r1, #11
 800b0c8:	3a15      	subs	r2, #21
 800b0ca:	0549      	lsls	r1, r1, #21
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d0fa      	beq.n	800b0c6 <__ieee754_sqrt+0x5e>
 800b0d0:	e7f7      	b.n	800b0c2 <__ieee754_sqrt+0x5a>
 800b0d2:	462a      	mov	r2, r5
 800b0d4:	e7fa      	b.n	800b0cc <__ieee754_sqrt+0x64>
 800b0d6:	005b      	lsls	r3, r3, #1
 800b0d8:	3001      	adds	r0, #1
 800b0da:	02dc      	lsls	r4, r3, #11
 800b0dc:	d5fb      	bpl.n	800b0d6 <__ieee754_sqrt+0x6e>
 800b0de:	1e44      	subs	r4, r0, #1
 800b0e0:	1b12      	subs	r2, r2, r4
 800b0e2:	f1c0 0420 	rsb	r4, r0, #32
 800b0e6:	fa21 f404 	lsr.w	r4, r1, r4
 800b0ea:	4323      	orrs	r3, r4
 800b0ec:	4081      	lsls	r1, r0
 800b0ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0f2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b0f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b0fa:	07d2      	lsls	r2, r2, #31
 800b0fc:	bf5c      	itt	pl
 800b0fe:	005b      	lslpl	r3, r3, #1
 800b100:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b104:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b108:	bf58      	it	pl
 800b10a:	0049      	lslpl	r1, r1, #1
 800b10c:	2600      	movs	r6, #0
 800b10e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b112:	106d      	asrs	r5, r5, #1
 800b114:	0049      	lsls	r1, r1, #1
 800b116:	2016      	movs	r0, #22
 800b118:	4632      	mov	r2, r6
 800b11a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b11e:	1917      	adds	r7, r2, r4
 800b120:	429f      	cmp	r7, r3
 800b122:	bfde      	ittt	le
 800b124:	193a      	addle	r2, r7, r4
 800b126:	1bdb      	suble	r3, r3, r7
 800b128:	1936      	addle	r6, r6, r4
 800b12a:	0fcf      	lsrs	r7, r1, #31
 800b12c:	3801      	subs	r0, #1
 800b12e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b132:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b136:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b13a:	d1f0      	bne.n	800b11e <__ieee754_sqrt+0xb6>
 800b13c:	4604      	mov	r4, r0
 800b13e:	2720      	movs	r7, #32
 800b140:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b144:	429a      	cmp	r2, r3
 800b146:	eb00 0e0c 	add.w	lr, r0, ip
 800b14a:	db02      	blt.n	800b152 <__ieee754_sqrt+0xea>
 800b14c:	d113      	bne.n	800b176 <__ieee754_sqrt+0x10e>
 800b14e:	458e      	cmp	lr, r1
 800b150:	d811      	bhi.n	800b176 <__ieee754_sqrt+0x10e>
 800b152:	f1be 0f00 	cmp.w	lr, #0
 800b156:	eb0e 000c 	add.w	r0, lr, ip
 800b15a:	da42      	bge.n	800b1e2 <__ieee754_sqrt+0x17a>
 800b15c:	2800      	cmp	r0, #0
 800b15e:	db40      	blt.n	800b1e2 <__ieee754_sqrt+0x17a>
 800b160:	f102 0801 	add.w	r8, r2, #1
 800b164:	1a9b      	subs	r3, r3, r2
 800b166:	458e      	cmp	lr, r1
 800b168:	bf88      	it	hi
 800b16a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800b16e:	eba1 010e 	sub.w	r1, r1, lr
 800b172:	4464      	add	r4, ip
 800b174:	4642      	mov	r2, r8
 800b176:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b17a:	3f01      	subs	r7, #1
 800b17c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b180:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b184:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b188:	d1dc      	bne.n	800b144 <__ieee754_sqrt+0xdc>
 800b18a:	4319      	orrs	r1, r3
 800b18c:	d01b      	beq.n	800b1c6 <__ieee754_sqrt+0x15e>
 800b18e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800b214 <__ieee754_sqrt+0x1ac>
 800b192:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800b218 <__ieee754_sqrt+0x1b0>
 800b196:	e9da 0100 	ldrd	r0, r1, [sl]
 800b19a:	e9db 2300 	ldrd	r2, r3, [fp]
 800b19e:	f7f5 f873 	bl	8000288 <__aeabi_dsub>
 800b1a2:	e9da 8900 	ldrd	r8, r9, [sl]
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	4640      	mov	r0, r8
 800b1ac:	4649      	mov	r1, r9
 800b1ae:	f7f5 fc9f 	bl	8000af0 <__aeabi_dcmple>
 800b1b2:	b140      	cbz	r0, 800b1c6 <__ieee754_sqrt+0x15e>
 800b1b4:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800b1b8:	e9da 0100 	ldrd	r0, r1, [sl]
 800b1bc:	e9db 2300 	ldrd	r2, r3, [fp]
 800b1c0:	d111      	bne.n	800b1e6 <__ieee754_sqrt+0x17e>
 800b1c2:	3601      	adds	r6, #1
 800b1c4:	463c      	mov	r4, r7
 800b1c6:	1072      	asrs	r2, r6, #1
 800b1c8:	0863      	lsrs	r3, r4, #1
 800b1ca:	07f1      	lsls	r1, r6, #31
 800b1cc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b1d0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b1d4:	bf48      	it	mi
 800b1d6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b1da:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b1de:	4618      	mov	r0, r3
 800b1e0:	e756      	b.n	800b090 <__ieee754_sqrt+0x28>
 800b1e2:	4690      	mov	r8, r2
 800b1e4:	e7be      	b.n	800b164 <__ieee754_sqrt+0xfc>
 800b1e6:	f7f5 f851 	bl	800028c <__adddf3>
 800b1ea:	e9da 8900 	ldrd	r8, r9, [sl]
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	4640      	mov	r0, r8
 800b1f4:	4649      	mov	r1, r9
 800b1f6:	f7f5 fc71 	bl	8000adc <__aeabi_dcmplt>
 800b1fa:	b120      	cbz	r0, 800b206 <__ieee754_sqrt+0x19e>
 800b1fc:	1ca0      	adds	r0, r4, #2
 800b1fe:	bf08      	it	eq
 800b200:	3601      	addeq	r6, #1
 800b202:	3402      	adds	r4, #2
 800b204:	e7df      	b.n	800b1c6 <__ieee754_sqrt+0x15e>
 800b206:	1c63      	adds	r3, r4, #1
 800b208:	f023 0401 	bic.w	r4, r3, #1
 800b20c:	e7db      	b.n	800b1c6 <__ieee754_sqrt+0x15e>
 800b20e:	bf00      	nop
 800b210:	7ff00000 	.word	0x7ff00000
 800b214:	200001f8 	.word	0x200001f8
 800b218:	200001f0 	.word	0x200001f0

0800b21c <_init>:
 800b21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b21e:	bf00      	nop
 800b220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b222:	bc08      	pop	{r3}
 800b224:	469e      	mov	lr, r3
 800b226:	4770      	bx	lr

0800b228 <_fini>:
 800b228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b22a:	bf00      	nop
 800b22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b22e:	bc08      	pop	{r3}
 800b230:	469e      	mov	lr, r3
 800b232:	4770      	bx	lr
