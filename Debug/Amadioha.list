
Amadioha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068cc  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006a5c  08006a5c  00007a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006aa4  08006aa4  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006aa4  08006aa4  00007aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006aac  08006aac  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006aac  08006aac  00007aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ab0  08006ab0  00007ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006ab4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  2000000c  08006ac0  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08006ac0  00008228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001639a  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ff6  00000000  00000000  0001e3d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  000213d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f93  00000000  00000000  000227c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022af5  00000000  00000000  00023753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ce4  00000000  00000000  00046248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d88c3  00000000  00000000  0005df2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001367ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005540  00000000  00000000  00136834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0013bd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a44 	.word	0x08006a44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08006a44 	.word	0x08006a44

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a20:	f000 b96a 	b.w	8000cf8 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	460c      	mov	r4, r1
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d14e      	bne.n	8000ae6 <__udivmoddi4+0xaa>
 8000a48:	4694      	mov	ip, r2
 8000a4a:	458c      	cmp	ip, r1
 8000a4c:	4686      	mov	lr, r0
 8000a4e:	fab2 f282 	clz	r2, r2
 8000a52:	d962      	bls.n	8000b1a <__udivmoddi4+0xde>
 8000a54:	b14a      	cbz	r2, 8000a6a <__udivmoddi4+0x2e>
 8000a56:	f1c2 0320 	rsb	r3, r2, #32
 8000a5a:	4091      	lsls	r1, r2
 8000a5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a64:	4319      	orrs	r1, r3
 8000a66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a6e:	fa1f f68c 	uxth.w	r6, ip
 8000a72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a82:	fb04 f106 	mul.w	r1, r4, r6
 8000a86:	4299      	cmp	r1, r3
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x64>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a92:	f080 8112 	bcs.w	8000cba <__udivmoddi4+0x27e>
 8000a96:	4299      	cmp	r1, r3
 8000a98:	f240 810f 	bls.w	8000cba <__udivmoddi4+0x27e>
 8000a9c:	3c02      	subs	r4, #2
 8000a9e:	4463      	add	r3, ip
 8000aa0:	1a59      	subs	r1, r3, r1
 8000aa2:	fa1f f38e 	uxth.w	r3, lr
 8000aa6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aaa:	fb07 1110 	mls	r1, r7, r0, r1
 8000aae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ab2:	fb00 f606 	mul.w	r6, r0, r6
 8000ab6:	429e      	cmp	r6, r3
 8000ab8:	d90a      	bls.n	8000ad0 <__udivmoddi4+0x94>
 8000aba:	eb1c 0303 	adds.w	r3, ip, r3
 8000abe:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ac2:	f080 80fc 	bcs.w	8000cbe <__udivmoddi4+0x282>
 8000ac6:	429e      	cmp	r6, r3
 8000ac8:	f240 80f9 	bls.w	8000cbe <__udivmoddi4+0x282>
 8000acc:	4463      	add	r3, ip
 8000ace:	3802      	subs	r0, #2
 8000ad0:	1b9b      	subs	r3, r3, r6
 8000ad2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	b11d      	cbz	r5, 8000ae2 <__udivmoddi4+0xa6>
 8000ada:	40d3      	lsrs	r3, r2
 8000adc:	2200      	movs	r2, #0
 8000ade:	e9c5 3200 	strd	r3, r2, [r5]
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d905      	bls.n	8000af6 <__udivmoddi4+0xba>
 8000aea:	b10d      	cbz	r5, 8000af0 <__udivmoddi4+0xb4>
 8000aec:	e9c5 0100 	strd	r0, r1, [r5]
 8000af0:	2100      	movs	r1, #0
 8000af2:	4608      	mov	r0, r1
 8000af4:	e7f5      	b.n	8000ae2 <__udivmoddi4+0xa6>
 8000af6:	fab3 f183 	clz	r1, r3
 8000afa:	2900      	cmp	r1, #0
 8000afc:	d146      	bne.n	8000b8c <__udivmoddi4+0x150>
 8000afe:	42a3      	cmp	r3, r4
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xcc>
 8000b02:	4290      	cmp	r0, r2
 8000b04:	f0c0 80f0 	bcc.w	8000ce8 <__udivmoddi4+0x2ac>
 8000b08:	1a86      	subs	r6, r0, r2
 8000b0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	2d00      	cmp	r5, #0
 8000b12:	d0e6      	beq.n	8000ae2 <__udivmoddi4+0xa6>
 8000b14:	e9c5 6300 	strd	r6, r3, [r5]
 8000b18:	e7e3      	b.n	8000ae2 <__udivmoddi4+0xa6>
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	f040 8090 	bne.w	8000c40 <__udivmoddi4+0x204>
 8000b20:	eba1 040c 	sub.w	r4, r1, ip
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	fa1f f78c 	uxth.w	r7, ip
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b36:	fb08 4416 	mls	r4, r8, r6, r4
 8000b3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b3e:	fb07 f006 	mul.w	r0, r7, r6
 8000b42:	4298      	cmp	r0, r3
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x11c>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x11a>
 8000b50:	4298      	cmp	r0, r3
 8000b52:	f200 80cd 	bhi.w	8000cf0 <__udivmoddi4+0x2b4>
 8000b56:	4626      	mov	r6, r4
 8000b58:	1a1c      	subs	r4, r3, r0
 8000b5a:	fa1f f38e 	uxth.w	r3, lr
 8000b5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b62:	fb08 4410 	mls	r4, r8, r0, r4
 8000b66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b6a:	fb00 f707 	mul.w	r7, r0, r7
 8000b6e:	429f      	cmp	r7, r3
 8000b70:	d908      	bls.n	8000b84 <__udivmoddi4+0x148>
 8000b72:	eb1c 0303 	adds.w	r3, ip, r3
 8000b76:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b7a:	d202      	bcs.n	8000b82 <__udivmoddi4+0x146>
 8000b7c:	429f      	cmp	r7, r3
 8000b7e:	f200 80b0 	bhi.w	8000ce2 <__udivmoddi4+0x2a6>
 8000b82:	4620      	mov	r0, r4
 8000b84:	1bdb      	subs	r3, r3, r7
 8000b86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b8a:	e7a5      	b.n	8000ad8 <__udivmoddi4+0x9c>
 8000b8c:	f1c1 0620 	rsb	r6, r1, #32
 8000b90:	408b      	lsls	r3, r1
 8000b92:	fa22 f706 	lsr.w	r7, r2, r6
 8000b96:	431f      	orrs	r7, r3
 8000b98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000ba0:	ea43 030c 	orr.w	r3, r3, ip
 8000ba4:	40f4      	lsrs	r4, r6
 8000ba6:	fa00 f801 	lsl.w	r8, r0, r1
 8000baa:	0c38      	lsrs	r0, r7, #16
 8000bac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bb0:	fbb4 fef0 	udiv	lr, r4, r0
 8000bb4:	fa1f fc87 	uxth.w	ip, r7
 8000bb8:	fb00 441e 	mls	r4, r0, lr, r4
 8000bbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000bc4:	45a1      	cmp	r9, r4
 8000bc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000bca:	d90a      	bls.n	8000be2 <__udivmoddi4+0x1a6>
 8000bcc:	193c      	adds	r4, r7, r4
 8000bce:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000bd2:	f080 8084 	bcs.w	8000cde <__udivmoddi4+0x2a2>
 8000bd6:	45a1      	cmp	r9, r4
 8000bd8:	f240 8081 	bls.w	8000cde <__udivmoddi4+0x2a2>
 8000bdc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000be0:	443c      	add	r4, r7
 8000be2:	eba4 0409 	sub.w	r4, r4, r9
 8000be6:	fa1f f983 	uxth.w	r9, r3
 8000bea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bee:	fb00 4413 	mls	r4, r0, r3, r4
 8000bf2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bf6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bfa:	45a4      	cmp	ip, r4
 8000bfc:	d907      	bls.n	8000c0e <__udivmoddi4+0x1d2>
 8000bfe:	193c      	adds	r4, r7, r4
 8000c00:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c04:	d267      	bcs.n	8000cd6 <__udivmoddi4+0x29a>
 8000c06:	45a4      	cmp	ip, r4
 8000c08:	d965      	bls.n	8000cd6 <__udivmoddi4+0x29a>
 8000c0a:	3b02      	subs	r3, #2
 8000c0c:	443c      	add	r4, r7
 8000c0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c12:	fba0 9302 	umull	r9, r3, r0, r2
 8000c16:	eba4 040c 	sub.w	r4, r4, ip
 8000c1a:	429c      	cmp	r4, r3
 8000c1c:	46ce      	mov	lr, r9
 8000c1e:	469c      	mov	ip, r3
 8000c20:	d351      	bcc.n	8000cc6 <__udivmoddi4+0x28a>
 8000c22:	d04e      	beq.n	8000cc2 <__udivmoddi4+0x286>
 8000c24:	b155      	cbz	r5, 8000c3c <__udivmoddi4+0x200>
 8000c26:	ebb8 030e 	subs.w	r3, r8, lr
 8000c2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c32:	40cb      	lsrs	r3, r1
 8000c34:	431e      	orrs	r6, r3
 8000c36:	40cc      	lsrs	r4, r1
 8000c38:	e9c5 6400 	strd	r6, r4, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	e750      	b.n	8000ae2 <__udivmoddi4+0xa6>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f103 	lsr.w	r1, r0, r3
 8000c48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c50:	4094      	lsls	r4, r2
 8000c52:	430c      	orrs	r4, r1
 8000c54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c5c:	fa1f f78c 	uxth.w	r7, ip
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3110 	mls	r1, r8, r0, r3
 8000c68:	0c23      	lsrs	r3, r4, #16
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f107 	mul.w	r1, r0, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x24c>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c7e:	d22c      	bcs.n	8000cda <__udivmoddi4+0x29e>
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d92a      	bls.n	8000cda <__udivmoddi4+0x29e>
 8000c84:	3802      	subs	r0, #2
 8000c86:	4463      	add	r3, ip
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c90:	fb08 3311 	mls	r3, r8, r1, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb01 f307 	mul.w	r3, r1, r7
 8000c9c:	42a3      	cmp	r3, r4
 8000c9e:	d908      	bls.n	8000cb2 <__udivmoddi4+0x276>
 8000ca0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ca8:	d213      	bcs.n	8000cd2 <__udivmoddi4+0x296>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d911      	bls.n	8000cd2 <__udivmoddi4+0x296>
 8000cae:	3902      	subs	r1, #2
 8000cb0:	4464      	add	r4, ip
 8000cb2:	1ae4      	subs	r4, r4, r3
 8000cb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb8:	e739      	b.n	8000b2e <__udivmoddi4+0xf2>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	e6f0      	b.n	8000aa0 <__udivmoddi4+0x64>
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e706      	b.n	8000ad0 <__udivmoddi4+0x94>
 8000cc2:	45c8      	cmp	r8, r9
 8000cc4:	d2ae      	bcs.n	8000c24 <__udivmoddi4+0x1e8>
 8000cc6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cce:	3801      	subs	r0, #1
 8000cd0:	e7a8      	b.n	8000c24 <__udivmoddi4+0x1e8>
 8000cd2:	4631      	mov	r1, r6
 8000cd4:	e7ed      	b.n	8000cb2 <__udivmoddi4+0x276>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	e799      	b.n	8000c0e <__udivmoddi4+0x1d2>
 8000cda:	4630      	mov	r0, r6
 8000cdc:	e7d4      	b.n	8000c88 <__udivmoddi4+0x24c>
 8000cde:	46d6      	mov	lr, sl
 8000ce0:	e77f      	b.n	8000be2 <__udivmoddi4+0x1a6>
 8000ce2:	4463      	add	r3, ip
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	e74d      	b.n	8000b84 <__udivmoddi4+0x148>
 8000ce8:	4606      	mov	r6, r0
 8000cea:	4623      	mov	r3, r4
 8000cec:	4608      	mov	r0, r1
 8000cee:	e70f      	b.n	8000b10 <__udivmoddi4+0xd4>
 8000cf0:	3e02      	subs	r6, #2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	e730      	b.n	8000b58 <__udivmoddi4+0x11c>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d02:	463b      	mov	r3, r7
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
 8000d10:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d12:	4b29      	ldr	r3, [pc, #164]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d14:	4a29      	ldr	r2, [pc, #164]	@ (8000dbc <MX_ADC1_Init+0xc0>)
 8000d16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d18:	4b27      	ldr	r3, [pc, #156]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d1e:	4b26      	ldr	r3, [pc, #152]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d24:	4b24      	ldr	r3, [pc, #144]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2a:	4b23      	ldr	r3, [pc, #140]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d30:	4b21      	ldr	r3, [pc, #132]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d32:	2204      	movs	r2, #4
 8000d34:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d36:	4b20      	ldr	r3, [pc, #128]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d42:	4b1d      	ldr	r3, [pc, #116]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d48:	4b1b      	ldr	r3, [pc, #108]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d50:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d56:	4b18      	ldr	r3, [pc, #96]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d5c:	4b16      	ldr	r3, [pc, #88]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d64:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d72:	4811      	ldr	r0, [pc, #68]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d74:	f000 ffe4 	bl	8001d40 <HAL_ADC_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000d7e:	f000 fa93 	bl	80012a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d82:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <MX_ADC1_Init+0xc4>)
 8000d84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d86:	2306      	movs	r3, #6
 8000d88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d8e:	237f      	movs	r3, #127	@ 0x7f
 8000d90:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d92:	2304      	movs	r3, #4
 8000d94:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4806      	ldr	r0, [pc, #24]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000da0:	f001 fa42 	bl	8002228 <HAL_ADC_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000daa:	f000 fa7d 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000028 	.word	0x20000028
 8000dbc:	50040000 	.word	0x50040000
 8000dc0:	1d500080 	.word	0x1d500080

08000dc4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b09e      	sub	sp, #120	@ 0x78
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	2254      	movs	r2, #84	@ 0x54
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f005 fe01 	bl	80069ec <memset>
  if(adcHandle->Instance==ADC1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a25      	ldr	r2, [pc, #148]	@ (8000e84 <HAL_ADC_MspInit+0xc0>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d143      	bne.n	8000e7c <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000df4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000df8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000dfa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000dfe:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000e00:	2301      	movs	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e08:	2308      	movs	r3, #8
 8000e0a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4618      	mov	r0, r3
 8000e24:	f003 f94a 	bl	80040bc <HAL_RCCEx_PeriphCLKConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000e2e:	f000 fa3b 	bl	80012a8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <HAL_ADC_MspInit+0xc4>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e36:	4a14      	ldr	r2, [pc, #80]	@ (8000e88 <HAL_ADC_MspInit+0xc4>)
 8000e38:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3e:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <HAL_ADC_MspInit+0xc4>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <HAL_ADC_MspInit+0xc4>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e88 <HAL_ADC_MspInit+0xc4>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e56:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <HAL_ADC_MspInit+0xc4>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e62:	2304      	movs	r3, #4
 8000e64:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e66:	230b      	movs	r3, #11
 8000e68:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e72:	4619      	mov	r1, r3
 8000e74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e78:	f002 f8ea 	bl	8003050 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3778      	adds	r7, #120	@ 0x78
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	50040000 	.word	0x50040000
 8000e88:	40021000 	.word	0x40021000

08000e8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	4b2c      	ldr	r3, [pc, #176]	@ (8000f54 <MX_GPIO_Init+0xc8>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea6:	4a2b      	ldr	r2, [pc, #172]	@ (8000f54 <MX_GPIO_Init+0xc8>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eae:	4b29      	ldr	r3, [pc, #164]	@ (8000f54 <MX_GPIO_Init+0xc8>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	4b26      	ldr	r3, [pc, #152]	@ (8000f54 <MX_GPIO_Init+0xc8>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebe:	4a25      	ldr	r2, [pc, #148]	@ (8000f54 <MX_GPIO_Init+0xc8>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec6:	4b23      	ldr	r3, [pc, #140]	@ (8000f54 <MX_GPIO_Init+0xc8>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VBase_Pin|Sense_CuttOff_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2118      	movs	r1, #24
 8000ed6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eda:	f002 fa23 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	481d      	ldr	r0, [pc, #116]	@ (8000f58 <MX_GPIO_Init+0xcc>)
 8000ee4:	f002 fa1e 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VBase_Pin|Sense_CuttOff_Pin;
 8000ee8:	2318      	movs	r3, #24
 8000eea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	4619      	mov	r1, r3
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f02:	f002 f8a5 	bl	8003050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Switch_Pin;
 8000f06:	2301      	movs	r3, #1
 8000f08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Switch_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480f      	ldr	r0, [pc, #60]	@ (8000f58 <MX_GPIO_Init+0xcc>)
 8000f1c:	f002 f898 	bl	8003050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f20:	2302      	movs	r3, #2
 8000f22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	4619      	mov	r1, r3
 8000f36:	4808      	ldr	r0, [pc, #32]	@ (8000f58 <MX_GPIO_Init+0xcc>)
 8000f38:	f002 f88a 	bl	8003050 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2006      	movs	r0, #6
 8000f42:	f001 ffd0 	bl	8002ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f46:	2006      	movs	r0, #6
 8000f48:	f001 ffe9 	bl	8002f1e <HAL_NVIC_EnableIRQ>

}
 8000f4c:	bf00      	nop
 8000f4e:	3720      	adds	r7, #32
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40021000 	.word	0x40021000
 8000f58:	48000400 	.word	0x48000400

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f60:	f000 fc63 	bl	800182a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f64:	f000 f842 	bl	8000fec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f68:	f7ff ff90 	bl	8000e8c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f6c:	f7ff fec6 	bl	8000cfc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000f70:	f000 fba2 	bl	80016b8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000f74:	f000 fae8 	bl	8001548 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f78:	f000 fa92 	bl	80014a0 <MX_TIM1_Init>
  MX_SPI1_Init();
 8000f7c:	f000 f99a 	bl	80012b4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 8000f80:	4812      	ldr	r0, [pc, #72]	@ (8000fcc <main+0x70>)
 8000f82:	f003 fc7d 	bl	8004880 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_buffer, 6);
 8000f86:	2206      	movs	r2, #6
 8000f88:	4911      	ldr	r1, [pc, #68]	@ (8000fd0 <main+0x74>)
 8000f8a:	4812      	ldr	r0, [pc, #72]	@ (8000fd4 <main+0x78>)
 8000f8c:	f004 faa8 	bl	80054e0 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if(data_received_flag){
 8000f90:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <main+0x7c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d008      	beq.n	8000fac <main+0x50>
			// called parse received data
			S_Addy = Parse_RxSLData(&rxData);
 8000f9a:	4810      	ldr	r0, [pc, #64]	@ (8000fdc <main+0x80>)
 8000f9c:	f000 f900 	bl	80011a0 <Parse_RxSLData>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe0 <main+0x84>)
 8000fa4:	6013      	str	r3, [r2, #0]

			data_received_flag = 0;
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <main+0x7c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
		}

		CurrentRead = Read_ADC();
 8000fac:	f000 f866 	bl	800107c <Read_ADC>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe4 <main+0x88>)
 8000fb4:	6013      	str	r3, [r2, #0]
		txCurrentValue = Calculate_Current(CurrentRead);
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe4 <main+0x88>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f878 	bl	80010b0 <Calculate_Current>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <main+0x8c>)
 8000fc6:	701a      	strb	r2, [r3, #0]
		if(data_received_flag){
 8000fc8:	e7e2      	b.n	8000f90 <main+0x34>
 8000fca:	bf00      	nop
 8000fcc:	20000104 	.word	0x20000104
 8000fd0:	20000090 	.word	0x20000090
 8000fd4:	2000019c 	.word	0x2000019c
 8000fd8:	2000008d 	.word	0x2000008d
 8000fdc:	2000008e 	.word	0x2000008e
 8000fe0:	2000009c 	.word	0x2000009c
 8000fe4:	20000098 	.word	0x20000098
 8000fe8:	20000096 	.word	0x20000096

08000fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b096      	sub	sp, #88	@ 0x58
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	2244      	movs	r2, #68	@ 0x44
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f005 fcf6 	bl	80069ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	463b      	mov	r3, r7
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800100e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001012:	f002 f9c5 	bl	80033a0 <HAL_PWREx_ControlVoltageScaling>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800101c:	f000 f944 	bl	80012a8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001020:	2310      	movs	r3, #16
 8001022:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001024:	2301      	movs	r3, #1
 8001026:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 800102c:	2380      	movs	r3, #128	@ 0x80
 800102e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001030:	2300      	movs	r3, #0
 8001032:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4618      	mov	r0, r3
 800103a:	f002 fa07 	bl	800344c <HAL_RCC_OscConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001044:	f000 f930 	bl	80012a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001048:	230f      	movs	r3, #15
 800104a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001054:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001058:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f002 fe06 	bl	8003c74 <HAL_RCC_ClockConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800106e:	f000 f91b 	bl	80012a8 <Error_Handler>
  }
}
 8001072:	bf00      	nop
 8001074:	3758      	adds	r7, #88	@ 0x58
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <Read_ADC>:

/* USER CODE BEGIN 4 */

// Function to read ADC value
uint32_t Read_ADC(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);  // Start ADC conversion
 8001082:	480a      	ldr	r0, [pc, #40]	@ (80010ac <Read_ADC+0x30>)
 8001084:	f000 ff9e 	bl	8001fc4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);  // Wait for conversion to finish
 8001088:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800108c:	4807      	ldr	r0, [pc, #28]	@ (80010ac <Read_ADC+0x30>)
 800108e:	f001 f82f 	bl	80020f0 <HAL_ADC_PollForConversion>
    uint32_t adcValue = HAL_ADC_GetValue(&hadc1);  // Get the ADC value
 8001092:	4806      	ldr	r0, [pc, #24]	@ (80010ac <Read_ADC+0x30>)
 8001094:	f001 f8bb 	bl	800220e <HAL_ADC_GetValue>
 8001098:	6078      	str	r0, [r7, #4]
    HAL_ADC_Stop(&hadc1);  // Stop the ADC
 800109a:	4804      	ldr	r0, [pc, #16]	@ (80010ac <Read_ADC+0x30>)
 800109c:	f000 fff5 	bl	800208a <HAL_ADC_Stop>
    return adcValue;
 80010a0:	687b      	ldr	r3, [r7, #4]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000028 	.word	0x20000028

080010b0 <Calculate_Current>:

// Function to calculate current based on ADC value
uint8_t Calculate_Current(uint32_t adcValue) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    // Convert ADC value to voltage
    float voltage = (adcValue * V_REF) / ADC_RESOLUTION;
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff f9cb 	bl	8000454 <__aeabi_ui2d>
 80010be:	a320      	add	r3, pc, #128	@ (adr r3, 8001140 <Calculate_Current+0x90>)
 80010c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c4:	f7ff fa40 	bl	8000548 <__aeabi_dmul>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <Calculate_Current+0x80>)
 80010d6:	f7ff fb61 	bl	800079c <__aeabi_ddiv>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	f7ff fc43 	bl	800096c <__aeabi_d2f>
 80010e6:	4603      	mov	r3, r0
 80010e8:	617b      	str	r3, [r7, #20]
    // Sensor outputs 0.5 * Vcc at zero current
    float zeroCurrentVoltage = V_REF / 2.0;
 80010ea:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <Calculate_Current+0x84>)
 80010ec:	613b      	str	r3, [r7, #16]
    // Calculate current using sensor sensitivity (mV/A)
    float current = (voltage - zeroCurrentVoltage) * 1000 / SENSITIVITY;  // in Amps
 80010ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80010f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80010f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fa:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001138 <Calculate_Current+0x88>
 80010fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001102:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800113c <Calculate_Current+0x8c>
 8001106:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800110a:	edc7 7a03 	vstr	s15, [r7, #12]
    uint8_t mAmps = current * 1000; //current in mA
 800110e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001112:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001138 <Calculate_Current+0x88>
 8001116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800111e:	edc7 7a00 	vstr	s15, [r7]
 8001122:	783b      	ldrb	r3, [r7, #0]
 8001124:	72fb      	strb	r3, [r7, #11]

    return mAmps;
 8001126:	7afb      	ldrb	r3, [r7, #11]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40b00000 	.word	0x40b00000
 8001134:	3fd33333 	.word	0x3fd33333
 8001138:	447a0000 	.word	0x447a0000
 800113c:	42480000 	.word	0x42480000
 8001140:	66666666 	.word	0x66666666
 8001144:	400a6666 	.word	0x400a6666

08001148 <Enable_Load>:
/*
 * Enable Load when Load is disabled
 * Turn on Onboard LED
 */
void Enable_Load(void){
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	loadActive = 1;
 800114c:	4b07      	ldr	r3, [pc, #28]	@ (800116c <Enable_Load+0x24>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8001152:	2201      	movs	r2, #1
 8001154:	2102      	movs	r1, #2
 8001156:	4806      	ldr	r0, [pc, #24]	@ (8001170 <Enable_Load+0x28>)
 8001158:	f002 f8e4 	bl	8003324 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, VBase_Pin, SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2108      	movs	r1, #8
 8001160:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001164:	f002 f8de 	bl	8003324 <HAL_GPIO_WritePin>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	2000008c 	.word	0x2000008c
 8001170:	48000400 	.word	0x48000400

08001174 <Disable_Load>:
/*
 * Disable Load when Load is active
 * Turn off Onboard LED
 */
void Disable_Load(void){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	loadActive = 0;
 8001178:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <Disable_Load+0x24>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	2102      	movs	r1, #2
 8001182:	4806      	ldr	r0, [pc, #24]	@ (800119c <Disable_Load+0x28>)
 8001184:	f002 f8ce 	bl	8003324 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, VBase_Pin, RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2108      	movs	r1, #8
 800118c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001190:	f002 f8c8 	bl	8003324 <HAL_GPIO_WritePin>
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	2000008c 	.word	0x2000008c
 800119c:	48000400 	.word	0x48000400

080011a0 <Parse_RxSLData>:
/*
 * Parse Received Data for ATSL
 *
 */
uint32_t Parse_RxSLData(uint8_t data[]){
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	uint32_t address = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
    // Shift and merge the 4 bytes into a 32-bit integer
    address |= ((uint32_t)data[0] << 24);  // Most significant byte
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	061b      	lsls	r3, r3, #24
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]
    address |= ((uint32_t)data[1] << 16);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3301      	adds	r3, #1
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	041b      	lsls	r3, r3, #16
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
    address |= ((uint32_t)data[2] << 8);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3302      	adds	r3, #2
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]
    address |= ((uint32_t)data[3] << 0);   // Least significant byte
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3303      	adds	r3, #3
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4313      	orrs	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]

    return address;
 80011e2:	68fb      	ldr	r3, [r7, #12]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_GPIO_EXTI_Callback>:

 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	80fb      	strh	r3, [r7, #6]
  /* Check if the power on button is pushed
   * if pushed when the load is active, it turns off the load and vice-versa
   *  */
  if((GPIO_Pin = Switch_Pin)){
 80011fa:	2301      	movs	r3, #1
 80011fc:	80fb      	strh	r3, [r7, #6]
	  if(loadActive){
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <HAL_GPIO_EXTI_Callback+0x28>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <HAL_GPIO_EXTI_Callback+0x1c>
		  Disable_Load();
 8001206:	f7ff ffb5 	bl	8001174 <Disable_Load>
	  }

  }


}
 800120a:	e001      	b.n	8001210 <HAL_GPIO_EXTI_Callback+0x20>
		  Enable_Load();
 800120c:	f7ff ff9c 	bl	8001148 <Enable_Load>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	2000008c 	.word	0x2000008c

0800121c <HAL_UART_RxCpltCallback>:
 /*
  * Receive interrupt callback function
  */

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

 	if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE))  // Check if data is received
 8001224:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <HAL_UART_RxCpltCallback+0x7c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f003 0320 	and.w	r3, r3, #32
 800122e:	2b20      	cmp	r3, #32
 8001230:	d129      	bne.n	8001286 <HAL_UART_RxCpltCallback+0x6a>
 	    {
 	        char received_char = (uint8_t)(huart1.Instance->RDR & 0xFF);  // Read the received character
 8001232:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <HAL_UART_RxCpltCallback+0x7c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001238:	b29b      	uxth	r3, r3
 800123a:	73fb      	strb	r3, [r7, #15]
 	        if (rxIndex < sizeof(rx_buffer) - 1) {
 800123c:	4b17      	ldr	r3, [pc, #92]	@ (800129c <HAL_UART_RxCpltCallback+0x80>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b04      	cmp	r3, #4
 8001244:	d80a      	bhi.n	800125c <HAL_UART_RxCpltCallback+0x40>
 	            rx_buffer[rxIndex++] = received_char;
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <HAL_UART_RxCpltCallback+0x80>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	b2d1      	uxtb	r1, r2
 8001250:	4a12      	ldr	r2, [pc, #72]	@ (800129c <HAL_UART_RxCpltCallback+0x80>)
 8001252:	7011      	strb	r1, [r2, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	4a12      	ldr	r2, [pc, #72]	@ (80012a0 <HAL_UART_RxCpltCallback+0x84>)
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	5453      	strb	r3, [r2, r1]
 	        }

 	        // Check for newline or carriage return as end of response
 	        if ((rxIndex == sizeof(rx_buffer)) || received_char == '\r') {
 800125c:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <HAL_UART_RxCpltCallback+0x80>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b06      	cmp	r3, #6
 8001264:	d002      	beq.n	800126c <HAL_UART_RxCpltCallback+0x50>
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	2b0d      	cmp	r3, #13
 800126a:	d10c      	bne.n	8001286 <HAL_UART_RxCpltCallback+0x6a>
 	            rx_buffer[rxIndex] = '\0';  // Null terminate the string
 800126c:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <HAL_UART_RxCpltCallback+0x80>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	461a      	mov	r2, r3
 8001274:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <HAL_UART_RxCpltCallback+0x84>)
 8001276:	2100      	movs	r1, #0
 8001278:	5499      	strb	r1, [r3, r2]
 	            rxIndex = 0;
 800127a:	4b08      	ldr	r3, [pc, #32]	@ (800129c <HAL_UART_RxCpltCallback+0x80>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
 	            data_received_flag = 1;  // Set flag to indicate that data is fully received
 8001280:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <HAL_UART_RxCpltCallback+0x88>)
 8001282:	2201      	movs	r2, #1
 8001284:	701a      	strb	r2, [r3, #0]
 	        }

 	    }
 	 HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_buffer, 6);
 8001286:	2206      	movs	r2, #6
 8001288:	4905      	ldr	r1, [pc, #20]	@ (80012a0 <HAL_UART_RxCpltCallback+0x84>)
 800128a:	4803      	ldr	r0, [pc, #12]	@ (8001298 <HAL_UART_RxCpltCallback+0x7c>)
 800128c:	f004 f928 	bl	80054e0 <HAL_UART_Receive_IT>
 }
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2000019c 	.word	0x2000019c
 800129c:	2000008f 	.word	0x2000008f
 80012a0:	20000090 	.word	0x20000090
 80012a4:	2000008d 	.word	0x2000008d

080012a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ac:	b672      	cpsid	i
}
 80012ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <Error_Handler+0x8>

080012b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <MX_SPI1_Init+0x74>)
 80012ba:	4a1c      	ldr	r2, [pc, #112]	@ (800132c <MX_SPI1_Init+0x78>)
 80012bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012be:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <MX_SPI1_Init+0x74>)
 80012c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012c6:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <MX_SPI1_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80012cc:	4b16      	ldr	r3, [pc, #88]	@ (8001328 <MX_SPI1_Init+0x74>)
 80012ce:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80012d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012d4:	4b14      	ldr	r3, [pc, #80]	@ (8001328 <MX_SPI1_Init+0x74>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012da:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <MX_SPI1_Init+0x74>)
 80012dc:	2200      	movs	r2, #0
 80012de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012e0:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <MX_SPI1_Init+0x74>)
 80012e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <MX_SPI1_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <MX_SPI1_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <MX_SPI1_Init+0x74>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <MX_SPI1_Init+0x74>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001300:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <MX_SPI1_Init+0x74>)
 8001302:	2207      	movs	r2, #7
 8001304:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001306:	4b08      	ldr	r3, [pc, #32]	@ (8001328 <MX_SPI1_Init+0x74>)
 8001308:	2200      	movs	r2, #0
 800130a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <MX_SPI1_Init+0x74>)
 800130e:	2208      	movs	r2, #8
 8001310:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001312:	4805      	ldr	r0, [pc, #20]	@ (8001328 <MX_SPI1_Init+0x74>)
 8001314:	f003 f9ba 	bl	800468c <HAL_SPI_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800131e:	f7ff ffc3 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200000a0 	.word	0x200000a0
 800132c:	40013000 	.word	0x40013000

08001330 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	@ 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a17      	ldr	r2, [pc, #92]	@ (80013ac <HAL_SPI_MspInit+0x7c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d128      	bne.n	80013a4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001352:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <HAL_SPI_MspInit+0x80>)
 8001354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001356:	4a16      	ldr	r2, [pc, #88]	@ (80013b0 <HAL_SPI_MspInit+0x80>)
 8001358:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800135c:	6613      	str	r3, [r2, #96]	@ 0x60
 800135e:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <HAL_SPI_MspInit+0x80>)
 8001360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001362:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <HAL_SPI_MspInit+0x80>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	4a10      	ldr	r2, [pc, #64]	@ (80013b0 <HAL_SPI_MspInit+0x80>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <HAL_SPI_MspInit+0x80>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001382:	23e0      	movs	r3, #224	@ 0xe0
 8001384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001392:	2305      	movs	r3, #5
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a0:	f001 fe56 	bl	8003050 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	@ 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40013000 	.word	0x40013000
 80013b0:	40021000 	.word	0x40021000

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <HAL_MspInit+0x44>)
 80013bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013be:	4a0e      	ldr	r2, [pc, #56]	@ (80013f8 <HAL_MspInit+0x44>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80013c6:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <HAL_MspInit+0x44>)
 80013c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <HAL_MspInit+0x44>)
 80013d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d6:	4a08      	ldr	r2, [pc, #32]	@ (80013f8 <HAL_MspInit+0x44>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80013de:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <HAL_MspInit+0x44>)
 80013e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <NMI_Handler+0x4>

08001404 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <MemManage_Handler+0x4>

08001414 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <BusFault_Handler+0x4>

0800141c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <UsageFault_Handler+0x4>

08001424 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001452:	f000 fa3f 	bl	80018d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}

0800145a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Switch_Pin);
 800145e:	2001      	movs	r0, #1
 8001460:	f001 ff78 	bl	8003354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}

08001468 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800146c:	4802      	ldr	r0, [pc, #8]	@ (8001478 <USART1_IRQHandler+0x10>)
 800146e:	f004 f883 	bl	8005578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2000019c 	.word	0x2000019c

0800147c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <SystemInit+0x20>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001486:	4a05      	ldr	r2, [pc, #20]	@ (800149c <SystemInit+0x20>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014be:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <MX_TIM1_Init+0xa0>)
 80014c0:	4a20      	ldr	r2, [pc, #128]	@ (8001544 <MX_TIM1_Init+0xa4>)
 80014c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 80014c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001540 <MX_TIM1_Init+0xa0>)
 80014c6:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80014ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001540 <MX_TIM1_Init+0xa0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 80014d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <MX_TIM1_Init+0xa0>)
 80014d4:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80014d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014da:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <MX_TIM1_Init+0xa0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014e0:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <MX_TIM1_Init+0xa0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e6:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <MX_TIM1_Init+0xa0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014ec:	4814      	ldr	r0, [pc, #80]	@ (8001540 <MX_TIM1_Init+0xa0>)
 80014ee:	f003 f970 	bl	80047d2 <HAL_TIM_Base_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80014f8:	f7ff fed6 	bl	80012a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001500:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001502:	f107 0310 	add.w	r3, r7, #16
 8001506:	4619      	mov	r1, r3
 8001508:	480d      	ldr	r0, [pc, #52]	@ (8001540 <MX_TIM1_Init+0xa0>)
 800150a:	f003 fc2f 	bl	8004d6c <HAL_TIM_ConfigClockSource>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001514:	f7ff fec8 	bl	80012a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	@ (8001540 <MX_TIM1_Init+0xa0>)
 800152a:	f003 ff25 	bl	8005378 <HAL_TIMEx_MasterConfigSynchronization>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001534:	f7ff feb8 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	3720      	adds	r7, #32
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000104 	.word	0x20000104
 8001544:	40012c00 	.word	0x40012c00

08001548 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001566:	4b23      	ldr	r3, [pc, #140]	@ (80015f4 <MX_TIM2_Init+0xac>)
 8001568:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800156c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800156e:	4b21      	ldr	r3, [pc, #132]	@ (80015f4 <MX_TIM2_Init+0xac>)
 8001570:	2200      	movs	r2, #0
 8001572:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b1f      	ldr	r3, [pc, #124]	@ (80015f4 <MX_TIM2_Init+0xac>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800157a:	4b1e      	ldr	r3, [pc, #120]	@ (80015f4 <MX_TIM2_Init+0xac>)
 800157c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001580:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001582:	4b1c      	ldr	r3, [pc, #112]	@ (80015f4 <MX_TIM2_Init+0xac>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001588:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <MX_TIM2_Init+0xac>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800158e:	4819      	ldr	r0, [pc, #100]	@ (80015f4 <MX_TIM2_Init+0xac>)
 8001590:	f003 f9ca 	bl	8004928 <HAL_TIM_IC_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800159a:	f7ff fe85 	bl	80012a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	4811      	ldr	r0, [pc, #68]	@ (80015f4 <MX_TIM2_Init+0xac>)
 80015ae:	f003 fee3 	bl	8005378 <HAL_TIMEx_MasterConfigSynchronization>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80015b8:	f7ff fe76 	bl	80012a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015c0:	2301      	movs	r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	2204      	movs	r2, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	4808      	ldr	r0, [pc, #32]	@ (80015f4 <MX_TIM2_Init+0xac>)
 80015d4:	f003 fb2e 	bl	8004c34 <HAL_TIM_IC_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80015de:	f7ff fe63 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2); //start input capture with interrupts
 80015e2:	2104      	movs	r1, #4
 80015e4:	4803      	ldr	r0, [pc, #12]	@ (80015f4 <MX_TIM2_Init+0xac>)
 80015e6:	f003 f9f7 	bl	80049d8 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	3720      	adds	r7, #32
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000150 	.word	0x20000150

080015f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0a      	ldr	r2, [pc, #40]	@ (8001630 <HAL_TIM_Base_MspInit+0x38>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d10b      	bne.n	8001622 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800160a:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <HAL_TIM_Base_MspInit+0x3c>)
 800160c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160e:	4a09      	ldr	r2, [pc, #36]	@ (8001634 <HAL_TIM_Base_MspInit+0x3c>)
 8001610:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001614:	6613      	str	r3, [r2, #96]	@ 0x60
 8001616:	4b07      	ldr	r3, [pc, #28]	@ (8001634 <HAL_TIM_Base_MspInit+0x3c>)
 8001618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800161a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40012c00 	.word	0x40012c00
 8001634:	40021000 	.word	0x40021000

08001638 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001658:	d128      	bne.n	80016ac <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800165a:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <HAL_TIM_IC_MspInit+0x7c>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165e:	4a15      	ldr	r2, [pc, #84]	@ (80016b4 <HAL_TIM_IC_MspInit+0x7c>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6593      	str	r3, [r2, #88]	@ 0x58
 8001666:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <HAL_TIM_IC_MspInit+0x7c>)
 8001668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <HAL_TIM_IC_MspInit+0x7c>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001676:	4a0f      	ldr	r2, [pc, #60]	@ (80016b4 <HAL_TIM_IC_MspInit+0x7c>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800167e:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <HAL_TIM_IC_MspInit+0x7c>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800168a:	2302      	movs	r3, #2
 800168c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	2302      	movs	r3, #2
 8001690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800169a:	2301      	movs	r3, #1
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a8:	f001 fcd2 	bl	8003050 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80016ac:	bf00      	nop
 80016ae:	3728      	adds	r7, #40	@ 0x28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40021000 	.word	0x40021000

080016b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016bc:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <MX_USART1_UART_Init+0x58>)
 80016be:	4a15      	ldr	r2, [pc, #84]	@ (8001714 <MX_USART1_UART_Init+0x5c>)
 80016c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80016c2:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <MX_USART1_UART_Init+0x58>)
 80016c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80016c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ca:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <MX_USART1_UART_Init+0x58>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <MX_USART1_UART_Init+0x58>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001710 <MX_USART1_UART_Init+0x58>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <MX_USART1_UART_Init+0x58>)
 80016de:	220c      	movs	r2, #12
 80016e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <MX_USART1_UART_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e8:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <MX_USART1_UART_Init+0x58>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <MX_USART1_UART_Init+0x58>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f4:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <MX_USART1_UART_Init+0x58>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	@ (8001710 <MX_USART1_UART_Init+0x58>)
 80016fc:	f003 fea2 	bl	8005444 <HAL_UART_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001706:	f7ff fdcf 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2000019c 	.word	0x2000019c
 8001714:	40013800 	.word	0x40013800

08001718 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b09e      	sub	sp, #120	@ 0x78
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	2254      	movs	r2, #84	@ 0x54
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f005 f957 	bl	80069ec <memset>
  if(uartHandle->Instance==USART1)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a23      	ldr	r2, [pc, #140]	@ (80017d0 <HAL_UART_MspInit+0xb8>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d13f      	bne.n	80017c8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001748:	2301      	movs	r3, #1
 800174a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800174c:	2300      	movs	r3, #0
 800174e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	4618      	mov	r0, r3
 8001756:	f002 fcb1 	bl	80040bc <HAL_RCCEx_PeriphCLKConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001760:	f7ff fda2 	bl	80012a8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001764:	4b1b      	ldr	r3, [pc, #108]	@ (80017d4 <HAL_UART_MspInit+0xbc>)
 8001766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001768:	4a1a      	ldr	r2, [pc, #104]	@ (80017d4 <HAL_UART_MspInit+0xbc>)
 800176a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800176e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001770:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <HAL_UART_MspInit+0xbc>)
 8001772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001774:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177c:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <HAL_UART_MspInit+0xbc>)
 800177e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001780:	4a14      	ldr	r2, [pc, #80]	@ (80017d4 <HAL_UART_MspInit+0xbc>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001788:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <HAL_UART_MspInit+0xbc>)
 800178a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001794:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001798:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017a6:	2307      	movs	r3, #7
 80017a8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017aa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017ae:	4619      	mov	r1, r3
 80017b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b4:	f001 fc4c 	bl	8003050 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2100      	movs	r1, #0
 80017bc:	2025      	movs	r0, #37	@ 0x25
 80017be:	f001 fb92 	bl	8002ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017c2:	2025      	movs	r0, #37	@ 0x25
 80017c4:	f001 fbab 	bl	8002f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017c8:	bf00      	nop
 80017ca:	3778      	adds	r7, #120	@ 0x78
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40013800 	.word	0x40013800
 80017d4:	40021000 	.word	0x40021000

080017d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001810 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017dc:	f7ff fe4e 	bl	800147c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e0:	480c      	ldr	r0, [pc, #48]	@ (8001814 <LoopForever+0x6>)
  ldr r1, =_edata
 80017e2:	490d      	ldr	r1, [pc, #52]	@ (8001818 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017e4:	4a0d      	ldr	r2, [pc, #52]	@ (800181c <LoopForever+0xe>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e8:	e002      	b.n	80017f0 <LoopCopyDataInit>

080017ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ee:	3304      	adds	r3, #4

080017f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f4:	d3f9      	bcc.n	80017ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001824 <LoopForever+0x16>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017fc:	e001      	b.n	8001802 <LoopFillZerobss>

080017fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001800:	3204      	adds	r2, #4

08001802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001804:	d3fb      	bcc.n	80017fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001806:	f005 f8f9 	bl	80069fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800180a:	f7ff fba7 	bl	8000f5c <main>

0800180e <LoopForever>:

LoopForever:
    b LoopForever
 800180e:	e7fe      	b.n	800180e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001810:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001818:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800181c:	08006ab4 	.word	0x08006ab4
  ldr r2, =_sbss
 8001820:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001824:	20000228 	.word	0x20000228

08001828 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <ADC1_IRQHandler>

0800182a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001834:	2003      	movs	r0, #3
 8001836:	f001 fb4b 	bl	8002ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800183a:	200f      	movs	r0, #15
 800183c:	f000 f80e 	bl	800185c <HAL_InitTick>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	71fb      	strb	r3, [r7, #7]
 800184a:	e001      	b.n	8001850 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800184c:	f7ff fdb2 	bl	80013b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001850:	79fb      	ldrb	r3, [r7, #7]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001868:	4b17      	ldr	r3, [pc, #92]	@ (80018c8 <HAL_InitTick+0x6c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d023      	beq.n	80018b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001870:	4b16      	ldr	r3, [pc, #88]	@ (80018cc <HAL_InitTick+0x70>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <HAL_InitTick+0x6c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800187e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f001 fb57 	bl	8002f3a <HAL_SYSTICK_Config>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10f      	bne.n	80018b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b0f      	cmp	r3, #15
 8001896:	d809      	bhi.n	80018ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001898:	2200      	movs	r2, #0
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018a0:	f001 fb21 	bl	8002ee6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018a4:	4a0a      	ldr	r2, [pc, #40]	@ (80018d0 <HAL_InitTick+0x74>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e007      	b.n	80018bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
 80018b0:	e004      	b.n	80018bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	73fb      	strb	r3, [r7, #15]
 80018b6:	e001      	b.n	80018bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000008 	.word	0x20000008
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000004 	.word	0x20000004

080018d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <HAL_IncTick+0x20>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <HAL_IncTick+0x24>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a04      	ldr	r2, [pc, #16]	@ (80018f8 <HAL_IncTick+0x24>)
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000008 	.word	0x20000008
 80018f8:	20000224 	.word	0x20000224

080018fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b03      	ldr	r3, [pc, #12]	@ (8001910 <HAL_GetTick+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000224 	.word	0x20000224

08001914 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	431a      	orrs	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	609a      	str	r2, [r3, #8]
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	609a      	str	r2, [r3, #8]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	3360      	adds	r3, #96	@ 0x60
 800198e:	461a      	mov	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b08      	ldr	r3, [pc, #32]	@ (80019c0 <LL_ADC_SetOffset+0x44>)
 800199e:	4013      	ands	r3, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	4313      	orrs	r3, r2
 80019ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019b4:	bf00      	nop
 80019b6:	371c      	adds	r7, #28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	03fff000 	.word	0x03fff000

080019c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3360      	adds	r3, #96	@ 0x60
 80019d2:	461a      	mov	r2, r3
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3360      	adds	r3, #96	@ 0x60
 8001a00:	461a      	mov	r2, r3
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	431a      	orrs	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a1a:	bf00      	nop
 8001a1c:	371c      	adds	r7, #28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	3330      	adds	r3, #48	@ 0x30
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	0a1b      	lsrs	r3, r3, #8
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	f003 030c 	and.w	r3, r3, #12
 8001a68:	4413      	add	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	211f      	movs	r1, #31
 8001a78:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	401a      	ands	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	0e9b      	lsrs	r3, r3, #26
 8001a84:	f003 011f 	and.w	r1, r3, #31
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	f003 031f 	and.w	r3, r3, #31
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	431a      	orrs	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a98:	bf00      	nop
 8001a9a:	371c      	adds	r7, #28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	3314      	adds	r3, #20
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	0e5b      	lsrs	r3, r3, #25
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	4413      	add	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	0d1b      	lsrs	r3, r3, #20
 8001acc:	f003 031f 	and.w	r3, r3, #31
 8001ad0:	2107      	movs	r1, #7
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	401a      	ands	r2, r3
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	0d1b      	lsrs	r3, r3, #20
 8001ade:	f003 031f 	and.w	r3, r3, #31
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001aee:	bf00      	nop
 8001af0:	371c      	adds	r7, #28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b14:	43db      	mvns	r3, r3
 8001b16:	401a      	ands	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0318 	and.w	r3, r3, #24
 8001b1e:	4908      	ldr	r1, [pc, #32]	@ (8001b40 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b20:	40d9      	lsrs	r1, r3
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	400b      	ands	r3, r1
 8001b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b32:	bf00      	nop
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	0007ffff 	.word	0x0007ffff

08001b44 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001b54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6093      	str	r3, [r2, #8]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b7c:	d101      	bne.n	8001b82 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ba0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ba4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001bcc:	d101      	bne.n	8001bd2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bf4:	f043 0201 	orr.w	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c1c:	f043 0202 	orr.w	r2, r3, #2
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <LL_ADC_IsEnabled+0x18>
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <LL_ADC_IsEnabled+0x1a>
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d101      	bne.n	8001c6e <LL_ADC_IsDisableOngoing+0x18>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <LL_ADC_IsDisableOngoing+0x1a>
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c90:	f043 0204 	orr.w	r2, r3, #4
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cb8:	f043 0210 	orr.w	r2, r3, #16
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d101      	bne.n	8001ce4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d02:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d06:	f043 0220 	orr.w	r2, r3, #32
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d101      	bne.n	8001d32 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e126      	b.n	8001fa8 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d109      	bne.n	8001d7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff f82b 	bl	8000dc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fef1 	bl	8001b68 <LL_ADC_IsDeepPowerDownEnabled>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d004      	beq.n	8001d96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fed7 	bl	8001b44 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff ff0c 	bl	8001bb8 <LL_ADC_IsInternalRegulatorEnabled>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d115      	bne.n	8001dd2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff fef0 	bl	8001b90 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001db0:	4b7f      	ldr	r3, [pc, #508]	@ (8001fb0 <HAL_ADC_Init+0x270>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	099b      	lsrs	r3, r3, #6
 8001db6:	4a7f      	ldr	r2, [pc, #508]	@ (8001fb4 <HAL_ADC_Init+0x274>)
 8001db8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbc:	099b      	lsrs	r3, r3, #6
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001dc4:	e002      	b.n	8001dcc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f9      	bne.n	8001dc6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff feee 	bl	8001bb8 <LL_ADC_IsInternalRegulatorEnabled>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10d      	bne.n	8001dfe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de6:	f043 0210 	orr.w	r2, r3, #16
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df2:	f043 0201 	orr.w	r2, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff62 	bl	8001ccc <LL_ADC_REG_IsConversionOngoing>
 8001e08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f040 80bf 	bne.w	8001f96 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f040 80bb 	bne.w	8001f96 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e24:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e28:	f043 0202 	orr.w	r2, r3, #2
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fefb 	bl	8001c30 <LL_ADC_IsEnabled>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10b      	bne.n	8001e58 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e40:	485d      	ldr	r0, [pc, #372]	@ (8001fb8 <HAL_ADC_Init+0x278>)
 8001e42:	f7ff fef5 	bl	8001c30 <LL_ADC_IsEnabled>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d105      	bne.n	8001e58 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	4619      	mov	r1, r3
 8001e52:	485a      	ldr	r0, [pc, #360]	@ (8001fbc <HAL_ADC_Init+0x27c>)
 8001e54:	f7ff fd5e 	bl	8001914 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7e5b      	ldrb	r3, [r3, #25]
 8001e5c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e62:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e68:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e6e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e76:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d106      	bne.n	8001e94 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	045b      	lsls	r3, r3, #17
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d009      	beq.n	8001eb0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	4b42      	ldr	r3, [pc, #264]	@ (8001fc0 <HAL_ADC_Init+0x280>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6812      	ldr	r2, [r2, #0]
 8001ebe:	69b9      	ldr	r1, [r7, #24]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff26 	bl	8001d1a <LL_ADC_INJ_IsConversionOngoing>
 8001ece:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d13d      	bne.n	8001f52 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d13a      	bne.n	8001f52 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ee0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ee8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ef8:	f023 0302 	bic.w	r3, r3, #2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	69b9      	ldr	r1, [r7, #24]
 8001f02:	430b      	orrs	r3, r1
 8001f04:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d118      	bne.n	8001f42 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f1a:	f023 0304 	bic.w	r3, r3, #4
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f26:	4311      	orrs	r1, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f2c:	4311      	orrs	r1, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f32:	430a      	orrs	r2, r1
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	611a      	str	r2, [r3, #16]
 8001f40:	e007      	b.n	8001f52 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d10c      	bne.n	8001f74 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f60:	f023 010f 	bic.w	r1, r3, #15
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	1e5a      	subs	r2, r3, #1
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f72:	e007      	b.n	8001f84 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 020f 	bic.w	r2, r2, #15
 8001f82:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f88:	f023 0303 	bic.w	r3, r3, #3
 8001f8c:	f043 0201 	orr.w	r2, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f94:	e007      	b.n	8001fa6 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f9a:	f043 0210 	orr.w	r2, r3, #16
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fa6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	053e2d63 	.word	0x053e2d63
 8001fb8:	50040000 	.word	0x50040000
 8001fbc:	50040300 	.word	0x50040300
 8001fc0:	fff0c007 	.word	0xfff0c007

08001fc4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fe7b 	bl	8001ccc <LL_ADC_REG_IsConversionOngoing>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d14f      	bne.n	800207c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_Start+0x26>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e04b      	b.n	8002082 <HAL_ADC_Start+0xbe>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 fdb6 	bl	8002b64 <ADC_Enable>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d137      	bne.n	8002072 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002006:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800200a:	f023 0301 	bic.w	r3, r3, #1
 800200e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800201a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800201e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002022:	d106      	bne.n	8002032 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002028:	f023 0206 	bic.w	r2, r3, #6
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002030:	e002      	b.n	8002038 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	221c      	movs	r2, #28
 800203e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d007      	beq.n	8002066 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800205e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fe06 	bl	8001c7c <LL_ADC_REG_StartConversion>
 8002070:	e006      	b.n	8002080 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800207a:	e001      	b.n	8002080 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800207c:	2302      	movs	r3, #2
 800207e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_ADC_Stop+0x16>
 800209c:	2302      	movs	r3, #2
 800209e:	e023      	b.n	80020e8 <HAL_ADC_Stop+0x5e>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80020a8:	2103      	movs	r1, #3
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fc9e 	bl	80029ec <ADC_ConversionStop>
 80020b0:	4603      	mov	r3, r0
 80020b2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d111      	bne.n	80020de <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 fdd8 	bl	8002c70 <ADC_Disable>
 80020c0:	4603      	mov	r3, r0
 80020c2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d109      	bne.n	80020de <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	f043 0201 	orr.w	r2, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d102      	bne.n	8002108 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002102:	2308      	movs	r3, #8
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	e010      	b.n	800212a <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d007      	beq.n	8002126 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211a:	f043 0220 	orr.w	r2, r3, #32
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e06f      	b.n	8002206 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002126:	2304      	movs	r3, #4
 8002128:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800212a:	f7ff fbe7 	bl	80018fc <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002130:	e021      	b.n	8002176 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002138:	d01d      	beq.n	8002176 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800213a:	f7ff fbdf 	bl	80018fc <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d302      	bcc.n	8002150 <HAL_ADC_PollForConversion+0x60>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d112      	bne.n	8002176 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	4013      	ands	r3, r2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10b      	bne.n	8002176 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002162:	f043 0204 	orr.w	r2, r3, #4
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e047      	b.n	8002206 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0d6      	beq.n	8002132 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002188:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fc46 	bl	8001a26 <LL_ADC_REG_IsTriggerSourceSWStart>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d01c      	beq.n	80021da <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	7e5b      	ldrb	r3, [r3, #25]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d118      	bne.n	80021da <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d111      	bne.n	80021da <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d105      	bne.n	80021da <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d2:	f043 0201 	orr.w	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d104      	bne.n	80021f2 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2208      	movs	r2, #8
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	e008      	b.n	8002204 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d103      	bne.n	8002204 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	220c      	movs	r2, #12
 8002202:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b0b6      	sub	sp, #216	@ 0xd8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002238:	2300      	movs	r3, #0
 800223a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_ADC_ConfigChannel+0x22>
 8002246:	2302      	movs	r3, #2
 8002248:	e3bb      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x79a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff fd38 	bl	8001ccc <LL_ADC_REG_IsConversionOngoing>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	f040 83a0 	bne.w	80029a4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b05      	cmp	r3, #5
 8002272:	d824      	bhi.n	80022be <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	3b02      	subs	r3, #2
 800227a:	2b03      	cmp	r3, #3
 800227c:	d81b      	bhi.n	80022b6 <HAL_ADC_ConfigChannel+0x8e>
 800227e:	a201      	add	r2, pc, #4	@ (adr r2, 8002284 <HAL_ADC_ConfigChannel+0x5c>)
 8002280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002284:	08002295 	.word	0x08002295
 8002288:	0800229d 	.word	0x0800229d
 800228c:	080022a5 	.word	0x080022a5
 8002290:	080022ad 	.word	0x080022ad
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002294:	230c      	movs	r3, #12
 8002296:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800229a:	e010      	b.n	80022be <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800229c:	2312      	movs	r3, #18
 800229e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022a2:	e00c      	b.n	80022be <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80022a4:	2318      	movs	r3, #24
 80022a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022aa:	e008      	b.n	80022be <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80022ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022b4:	e003      	b.n	80022be <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80022b6:	2306      	movs	r3, #6
 80022b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022bc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6818      	ldr	r0, [r3, #0]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80022cc:	f7ff fbbe 	bl	8001a4c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fcf9 	bl	8001ccc <LL_ADC_REG_IsConversionOngoing>
 80022da:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fd19 	bl	8001d1a <LL_ADC_INJ_IsConversionOngoing>
 80022e8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f040 81a4 	bne.w	800263e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f040 819f 	bne.w	800263e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6819      	ldr	r1, [r3, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	461a      	mov	r2, r3
 800230e:	f7ff fbc9 	bl	8001aa4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	08db      	lsrs	r3, r3, #3
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	2b04      	cmp	r3, #4
 8002332:	d00a      	beq.n	800234a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	6919      	ldr	r1, [r3, #16]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002344:	f7ff fb1a 	bl	800197c <LL_ADC_SetOffset>
 8002348:	e179      	b.n	800263e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fb37 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10a      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x14e>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fb2c 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 800236c:	4603      	mov	r3, r0
 800236e:	0e9b      	lsrs	r3, r3, #26
 8002370:	f003 021f 	and.w	r2, r3, #31
 8002374:	e01e      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x18c>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2100      	movs	r1, #0
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fb21 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 8002382:	4603      	mov	r3, r0
 8002384:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002394:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002398:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800239c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80023a4:	2320      	movs	r3, #32
 80023a6:	e004      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80023a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023ac:	fab3 f383 	clz	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d105      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x1a4>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	0e9b      	lsrs	r3, r3, #26
 80023c6:	f003 031f 	and.w	r3, r3, #31
 80023ca:	e018      	b.n	80023fe <HAL_ADC_ConfigChannel+0x1d6>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023d8:	fa93 f3a3 	rbit	r3, r3
 80023dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80023e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80023e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80023f0:	2320      	movs	r3, #32
 80023f2:	e004      	b.n	80023fe <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80023f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80023f8:	fab3 f383 	clz	r3, r3
 80023fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023fe:	429a      	cmp	r2, r3
 8002400:	d106      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2200      	movs	r2, #0
 8002408:	2100      	movs	r1, #0
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff faf0 	bl	80019f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2101      	movs	r1, #1
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fad4 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 800241c:	4603      	mov	r3, r0
 800241e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10a      	bne.n	800243c <HAL_ADC_ConfigChannel+0x214>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2101      	movs	r1, #1
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fac9 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 8002432:	4603      	mov	r3, r0
 8002434:	0e9b      	lsrs	r3, r3, #26
 8002436:	f003 021f 	and.w	r2, r3, #31
 800243a:	e01e      	b.n	800247a <HAL_ADC_ConfigChannel+0x252>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2101      	movs	r1, #1
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fabe 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 8002448:	4603      	mov	r3, r0
 800244a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800245a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800245e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002462:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800246a:	2320      	movs	r3, #32
 800246c:	e004      	b.n	8002478 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800246e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002482:	2b00      	cmp	r3, #0
 8002484:	d105      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x26a>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	0e9b      	lsrs	r3, r3, #26
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	e018      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x29c>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80024a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80024ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80024b6:	2320      	movs	r3, #32
 80024b8:	e004      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80024ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d106      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2200      	movs	r2, #0
 80024ce:	2101      	movs	r1, #1
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fa8d 	bl	80019f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2102      	movs	r1, #2
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fa71 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 80024e2:	4603      	mov	r3, r0
 80024e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10a      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x2da>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2102      	movs	r1, #2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fa66 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 80024f8:	4603      	mov	r3, r0
 80024fa:	0e9b      	lsrs	r3, r3, #26
 80024fc:	f003 021f 	and.w	r2, r3, #31
 8002500:	e01e      	b.n	8002540 <HAL_ADC_ConfigChannel+0x318>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2102      	movs	r1, #2
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fa5b 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002514:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002518:	fa93 f3a3 	rbit	r3, r3
 800251c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002520:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002524:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002528:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002530:	2320      	movs	r3, #32
 8002532:	e004      	b.n	800253e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002534:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002548:	2b00      	cmp	r3, #0
 800254a:	d105      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x330>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0e9b      	lsrs	r3, r3, #26
 8002552:	f003 031f 	and.w	r3, r3, #31
 8002556:	e014      	b.n	8002582 <HAL_ADC_ConfigChannel+0x35a>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002566:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002568:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800256c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002574:	2320      	movs	r3, #32
 8002576:	e004      	b.n	8002582 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002578:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800257c:	fab3 f383 	clz	r3, r3
 8002580:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002582:	429a      	cmp	r2, r3
 8002584:	d106      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2200      	movs	r2, #0
 800258c:	2102      	movs	r1, #2
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fa2e 	bl	80019f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2103      	movs	r1, #3
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fa12 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10a      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x398>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2103      	movs	r1, #3
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fa07 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 80025b6:	4603      	mov	r3, r0
 80025b8:	0e9b      	lsrs	r3, r3, #26
 80025ba:	f003 021f 	and.w	r2, r3, #31
 80025be:	e017      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x3c8>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2103      	movs	r1, #3
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff f9fc 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 80025cc:	4603      	mov	r3, r0
 80025ce:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80025d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025da:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80025dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80025e2:	2320      	movs	r3, #32
 80025e4:	e003      	b.n	80025ee <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80025e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d105      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x3e0>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0e9b      	lsrs	r3, r3, #26
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	e011      	b.n	800262c <HAL_ADC_ConfigChannel+0x404>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002616:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002618:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800261a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002620:	2320      	movs	r3, #32
 8002622:	e003      	b.n	800262c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002624:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800262c:	429a      	cmp	r2, r3
 800262e:	d106      	bne.n	800263e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2200      	movs	r2, #0
 8002636:	2103      	movs	r1, #3
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff f9d9 	bl	80019f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff faf4 	bl	8001c30 <LL_ADC_IsEnabled>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	f040 8140 	bne.w	80028d0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6819      	ldr	r1, [r3, #0]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	461a      	mov	r2, r3
 800265e:	f7ff fa4d 	bl	8001afc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	4a8f      	ldr	r2, [pc, #572]	@ (80028a4 <HAL_ADC_ConfigChannel+0x67c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	f040 8131 	bne.w	80028d0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10b      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x46e>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	0e9b      	lsrs	r3, r3, #26
 8002684:	3301      	adds	r3, #1
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	2b09      	cmp	r3, #9
 800268c:	bf94      	ite	ls
 800268e:	2301      	movls	r3, #1
 8002690:	2300      	movhi	r3, #0
 8002692:	b2db      	uxtb	r3, r3
 8002694:	e019      	b.n	80026ca <HAL_ADC_ConfigChannel+0x4a2>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80026a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80026a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80026ae:	2320      	movs	r3, #32
 80026b0:	e003      	b.n	80026ba <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80026b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	3301      	adds	r3, #1
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	2b09      	cmp	r3, #9
 80026c2:	bf94      	ite	ls
 80026c4:	2301      	movls	r3, #1
 80026c6:	2300      	movhi	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d079      	beq.n	80027c2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d107      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x4c2>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	0e9b      	lsrs	r3, r3, #26
 80026e0:	3301      	adds	r3, #1
 80026e2:	069b      	lsls	r3, r3, #26
 80026e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026e8:	e015      	b.n	8002716 <HAL_ADC_ConfigChannel+0x4ee>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80026f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026fa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80026fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002702:	2320      	movs	r3, #32
 8002704:	e003      	b.n	800270e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	3301      	adds	r3, #1
 8002710:	069b      	lsls	r3, r3, #26
 8002712:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x50e>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	0e9b      	lsrs	r3, r3, #26
 8002728:	3301      	adds	r3, #1
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	2101      	movs	r1, #1
 8002730:	fa01 f303 	lsl.w	r3, r1, r3
 8002734:	e017      	b.n	8002766 <HAL_ADC_ConfigChannel+0x53e>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002746:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800274e:	2320      	movs	r3, #32
 8002750:	e003      	b.n	800275a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	b2db      	uxtb	r3, r3
 800275a:	3301      	adds	r3, #1
 800275c:	f003 031f 	and.w	r3, r3, #31
 8002760:	2101      	movs	r1, #1
 8002762:	fa01 f303 	lsl.w	r3, r1, r3
 8002766:	ea42 0103 	orr.w	r1, r2, r3
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10a      	bne.n	800278c <HAL_ADC_ConfigChannel+0x564>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	0e9b      	lsrs	r3, r3, #26
 800277c:	3301      	adds	r3, #1
 800277e:	f003 021f 	and.w	r2, r3, #31
 8002782:	4613      	mov	r3, r2
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	4413      	add	r3, r2
 8002788:	051b      	lsls	r3, r3, #20
 800278a:	e018      	b.n	80027be <HAL_ADC_ConfigChannel+0x596>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800279a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800279c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800279e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80027a4:	2320      	movs	r3, #32
 80027a6:	e003      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80027a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	3301      	adds	r3, #1
 80027b2:	f003 021f 	and.w	r2, r3, #31
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027be:	430b      	orrs	r3, r1
 80027c0:	e081      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d107      	bne.n	80027de <HAL_ADC_ConfigChannel+0x5b6>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	0e9b      	lsrs	r3, r3, #26
 80027d4:	3301      	adds	r3, #1
 80027d6:	069b      	lsls	r3, r3, #26
 80027d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027dc:	e015      	b.n	800280a <HAL_ADC_ConfigChannel+0x5e2>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80027f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80027f6:	2320      	movs	r3, #32
 80027f8:	e003      	b.n	8002802 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80027fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	3301      	adds	r3, #1
 8002804:	069b      	lsls	r3, r3, #26
 8002806:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <HAL_ADC_ConfigChannel+0x602>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	0e9b      	lsrs	r3, r3, #26
 800281c:	3301      	adds	r3, #1
 800281e:	f003 031f 	and.w	r3, r3, #31
 8002822:	2101      	movs	r1, #1
 8002824:	fa01 f303 	lsl.w	r3, r1, r3
 8002828:	e017      	b.n	800285a <HAL_ADC_ConfigChannel+0x632>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	61bb      	str	r3, [r7, #24]
  return result;
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002842:	2320      	movs	r3, #32
 8002844:	e003      	b.n	800284e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	3301      	adds	r3, #1
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	2101      	movs	r1, #1
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	ea42 0103 	orr.w	r1, r2, r3
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10d      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x65e>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	0e9b      	lsrs	r3, r3, #26
 8002870:	3301      	adds	r3, #1
 8002872:	f003 021f 	and.w	r2, r3, #31
 8002876:	4613      	mov	r3, r2
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	4413      	add	r3, r2
 800287c:	3b1e      	subs	r3, #30
 800287e:	051b      	lsls	r3, r3, #20
 8002880:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002884:	e01e      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x69c>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	60fb      	str	r3, [r7, #12]
  return result;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d104      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800289e:	2320      	movs	r3, #32
 80028a0:	e006      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x688>
 80028a2:	bf00      	nop
 80028a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	3301      	adds	r3, #1
 80028b2:	f003 021f 	and.w	r2, r3, #31
 80028b6:	4613      	mov	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4413      	add	r3, r2
 80028bc:	3b1e      	subs	r3, #30
 80028be:	051b      	lsls	r3, r3, #20
 80028c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028c4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ca:	4619      	mov	r1, r3
 80028cc:	f7ff f8ea 	bl	8001aa4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b3d      	ldr	r3, [pc, #244]	@ (80029cc <HAL_ADC_ConfigChannel+0x7a4>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d06c      	beq.n	80029b6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028dc:	483c      	ldr	r0, [pc, #240]	@ (80029d0 <HAL_ADC_ConfigChannel+0x7a8>)
 80028de:	f7ff f83f 	bl	8001960 <LL_ADC_GetCommonPathInternalCh>
 80028e2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a3a      	ldr	r2, [pc, #232]	@ (80029d4 <HAL_ADC_ConfigChannel+0x7ac>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d127      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d121      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a35      	ldr	r2, [pc, #212]	@ (80029d8 <HAL_ADC_ConfigChannel+0x7b0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d157      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002906:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800290a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800290e:	4619      	mov	r1, r3
 8002910:	482f      	ldr	r0, [pc, #188]	@ (80029d0 <HAL_ADC_ConfigChannel+0x7a8>)
 8002912:	f7ff f812 	bl	800193a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002916:	4b31      	ldr	r3, [pc, #196]	@ (80029dc <HAL_ADC_ConfigChannel+0x7b4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	099b      	lsrs	r3, r3, #6
 800291c:	4a30      	ldr	r2, [pc, #192]	@ (80029e0 <HAL_ADC_ConfigChannel+0x7b8>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	099b      	lsrs	r3, r3, #6
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002930:	e002      	b.n	8002938 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	3b01      	subs	r3, #1
 8002936:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f9      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800293e:	e03a      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a27      	ldr	r2, [pc, #156]	@ (80029e4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d113      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800294a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800294e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10d      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1f      	ldr	r2, [pc, #124]	@ (80029d8 <HAL_ADC_ConfigChannel+0x7b0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d12a      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002960:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002964:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002968:	4619      	mov	r1, r3
 800296a:	4819      	ldr	r0, [pc, #100]	@ (80029d0 <HAL_ADC_ConfigChannel+0x7a8>)
 800296c:	f7fe ffe5 	bl	800193a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002970:	e021      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1c      	ldr	r2, [pc, #112]	@ (80029e8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d11c      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800297c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002980:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d116      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a12      	ldr	r2, [pc, #72]	@ (80029d8 <HAL_ADC_ConfigChannel+0x7b0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d111      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002992:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002996:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800299a:	4619      	mov	r1, r3
 800299c:	480c      	ldr	r0, [pc, #48]	@ (80029d0 <HAL_ADC_ConfigChannel+0x7a8>)
 800299e:	f7fe ffcc 	bl	800193a <LL_ADC_SetCommonPathInternalCh>
 80029a2:	e008      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a8:	f043 0220 	orr.w	r2, r3, #32
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80029be:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	37d8      	adds	r7, #216	@ 0xd8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	80080000 	.word	0x80080000
 80029d0:	50040300 	.word	0x50040300
 80029d4:	c7520000 	.word	0xc7520000
 80029d8:	50040000 	.word	0x50040000
 80029dc:	20000000 	.word	0x20000000
 80029e0:	053e2d63 	.word	0x053e2d63
 80029e4:	cb840000 	.word	0xcb840000
 80029e8:	80000001 	.word	0x80000001

080029ec <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff f962 	bl	8001ccc <LL_ADC_REG_IsConversionOngoing>
 8002a08:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff f983 	bl	8001d1a <LL_ADC_INJ_IsConversionOngoing>
 8002a14:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d103      	bne.n	8002a24 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 8098 	beq.w	8002b54 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d02a      	beq.n	8002a88 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	7e5b      	ldrb	r3, [r3, #25]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d126      	bne.n	8002a88 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	7e1b      	ldrb	r3, [r3, #24]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d122      	bne.n	8002a88 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002a42:	2301      	movs	r3, #1
 8002a44:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a46:	e014      	b.n	8002a72 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	4a45      	ldr	r2, [pc, #276]	@ (8002b60 <ADC_ConversionStop+0x174>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d90d      	bls.n	8002a6c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a54:	f043 0210 	orr.w	r2, r3, #16
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a60:	f043 0201 	orr.w	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e074      	b.n	8002b56 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7c:	2b40      	cmp	r3, #64	@ 0x40
 8002a7e:	d1e3      	bne.n	8002a48 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2240      	movs	r2, #64	@ 0x40
 8002a86:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d014      	beq.n	8002ab8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff f91a 	bl	8001ccc <LL_ADC_REG_IsConversionOngoing>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00c      	beq.n	8002ab8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff f8d7 	bl	8001c56 <LL_ADC_IsDisableOngoing>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d104      	bne.n	8002ab8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff f8f6 	bl	8001ca4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d014      	beq.n	8002ae8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff f929 	bl	8001d1a <LL_ADC_INJ_IsConversionOngoing>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00c      	beq.n	8002ae8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff f8bf 	bl	8001c56 <LL_ADC_IsDisableOngoing>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d104      	bne.n	8002ae8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff f905 	bl	8001cf2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d005      	beq.n	8002afa <ADC_ConversionStop+0x10e>
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d105      	bne.n	8002b00 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002af4:	230c      	movs	r3, #12
 8002af6:	617b      	str	r3, [r7, #20]
        break;
 8002af8:	e005      	b.n	8002b06 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002afa:	2308      	movs	r3, #8
 8002afc:	617b      	str	r3, [r7, #20]
        break;
 8002afe:	e002      	b.n	8002b06 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002b00:	2304      	movs	r3, #4
 8002b02:	617b      	str	r3, [r7, #20]
        break;
 8002b04:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002b06:	f7fe fef9 	bl	80018fc <HAL_GetTick>
 8002b0a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b0c:	e01b      	b.n	8002b46 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002b0e:	f7fe fef5 	bl	80018fc <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b05      	cmp	r3, #5
 8002b1a:	d914      	bls.n	8002b46 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00d      	beq.n	8002b46 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2e:	f043 0210 	orr.w	r2, r3, #16
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3a:	f043 0201 	orr.w	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e007      	b.n	8002b56 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1dc      	bne.n	8002b0e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	a33fffff 	.word	0xa33fffff

08002b64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff f85b 	bl	8001c30 <LL_ADC_IsEnabled>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d169      	bne.n	8002c54 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	4b36      	ldr	r3, [pc, #216]	@ (8002c60 <ADC_Enable+0xfc>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00d      	beq.n	8002baa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b92:	f043 0210 	orr.w	r2, r3, #16
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9e:	f043 0201 	orr.w	r2, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e055      	b.n	8002c56 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff f816 	bl	8001be0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002bb4:	482b      	ldr	r0, [pc, #172]	@ (8002c64 <ADC_Enable+0x100>)
 8002bb6:	f7fe fed3 	bl	8001960 <LL_ADC_GetCommonPathInternalCh>
 8002bba:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002bbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d013      	beq.n	8002bec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bc4:	4b28      	ldr	r3, [pc, #160]	@ (8002c68 <ADC_Enable+0x104>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	099b      	lsrs	r3, r3, #6
 8002bca:	4a28      	ldr	r2, [pc, #160]	@ (8002c6c <ADC_Enable+0x108>)
 8002bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd0:	099b      	lsrs	r3, r3, #6
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bde:	e002      	b.n	8002be6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1f9      	bne.n	8002be0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002bec:	f7fe fe86 	bl	80018fc <HAL_GetTick>
 8002bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bf2:	e028      	b.n	8002c46 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff f819 	bl	8001c30 <LL_ADC_IsEnabled>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d104      	bne.n	8002c0e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fe ffe9 	bl	8001be0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c0e:	f7fe fe75 	bl	80018fc <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d914      	bls.n	8002c46 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d00d      	beq.n	8002c46 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c2e:	f043 0210 	orr.w	r2, r3, #16
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3a:	f043 0201 	orr.w	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e007      	b.n	8002c56 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d1cf      	bne.n	8002bf4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	8000003f 	.word	0x8000003f
 8002c64:	50040300 	.word	0x50040300
 8002c68:	20000000 	.word	0x20000000
 8002c6c:	053e2d63 	.word	0x053e2d63

08002c70 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe ffea 	bl	8001c56 <LL_ADC_IsDisableOngoing>
 8002c82:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe ffd1 	bl	8001c30 <LL_ADC_IsEnabled>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d047      	beq.n	8002d24 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d144      	bne.n	8002d24 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 030d 	and.w	r3, r3, #13
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d10c      	bne.n	8002cc2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe ffab 	bl	8001c08 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cba:	f7fe fe1f 	bl	80018fc <HAL_GetTick>
 8002cbe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cc0:	e029      	b.n	8002d16 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc6:	f043 0210 	orr.w	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd2:	f043 0201 	orr.w	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e023      	b.n	8002d26 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cde:	f7fe fe0d 	bl	80018fc <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d914      	bls.n	8002d16 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00d      	beq.n	8002d16 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cfe:	f043 0210 	orr.w	r2, r3, #16
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0a:	f043 0201 	orr.w	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e007      	b.n	8002d26 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1dc      	bne.n	8002cde <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d40:	4b0c      	ldr	r3, [pc, #48]	@ (8002d74 <__NVIC_SetPriorityGrouping+0x44>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d62:	4a04      	ldr	r2, [pc, #16]	@ (8002d74 <__NVIC_SetPriorityGrouping+0x44>)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	60d3      	str	r3, [r2, #12]
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d7c:	4b04      	ldr	r3, [pc, #16]	@ (8002d90 <__NVIC_GetPriorityGrouping+0x18>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	0a1b      	lsrs	r3, r3, #8
 8002d82:	f003 0307 	and.w	r3, r3, #7
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	db0b      	blt.n	8002dbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	f003 021f 	and.w	r2, r3, #31
 8002dac:	4907      	ldr	r1, [pc, #28]	@ (8002dcc <__NVIC_EnableIRQ+0x38>)
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	2001      	movs	r0, #1
 8002db6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	e000e100 	.word	0xe000e100

08002dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	6039      	str	r1, [r7, #0]
 8002dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	db0a      	blt.n	8002dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	490c      	ldr	r1, [pc, #48]	@ (8002e1c <__NVIC_SetPriority+0x4c>)
 8002dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dee:	0112      	lsls	r2, r2, #4
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	440b      	add	r3, r1
 8002df4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002df8:	e00a      	b.n	8002e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	4908      	ldr	r1, [pc, #32]	@ (8002e20 <__NVIC_SetPriority+0x50>)
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	3b04      	subs	r3, #4
 8002e08:	0112      	lsls	r2, r2, #4
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	761a      	strb	r2, [r3, #24]
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	e000e100 	.word	0xe000e100
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b089      	sub	sp, #36	@ 0x24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f1c3 0307 	rsb	r3, r3, #7
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	bf28      	it	cs
 8002e42:	2304      	movcs	r3, #4
 8002e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	2b06      	cmp	r3, #6
 8002e4c:	d902      	bls.n	8002e54 <NVIC_EncodePriority+0x30>
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	3b03      	subs	r3, #3
 8002e52:	e000      	b.n	8002e56 <NVIC_EncodePriority+0x32>
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43da      	mvns	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	401a      	ands	r2, r3
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	fa01 f303 	lsl.w	r3, r1, r3
 8002e76:	43d9      	mvns	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e7c:	4313      	orrs	r3, r2
         );
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3724      	adds	r7, #36	@ 0x24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e9c:	d301      	bcc.n	8002ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e00f      	b.n	8002ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ecc <SysTick_Config+0x40>)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eaa:	210f      	movs	r1, #15
 8002eac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002eb0:	f7ff ff8e 	bl	8002dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ecc <SysTick_Config+0x40>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eba:	4b04      	ldr	r3, [pc, #16]	@ (8002ecc <SysTick_Config+0x40>)
 8002ebc:	2207      	movs	r2, #7
 8002ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	e000e010 	.word	0xe000e010

08002ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff ff29 	bl	8002d30 <__NVIC_SetPriorityGrouping>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	4603      	mov	r3, r0
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ef8:	f7ff ff3e 	bl	8002d78 <__NVIC_GetPriorityGrouping>
 8002efc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	68b9      	ldr	r1, [r7, #8]
 8002f02:	6978      	ldr	r0, [r7, #20]
 8002f04:	f7ff ff8e 	bl	8002e24 <NVIC_EncodePriority>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff ff5d 	bl	8002dd0 <__NVIC_SetPriority>
}
 8002f16:	bf00      	nop
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b082      	sub	sp, #8
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	4603      	mov	r3, r0
 8002f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff ff31 	bl	8002d94 <__NVIC_EnableIRQ>
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff ffa2 	bl	8002e8c <SysTick_Config>
 8002f48:	4603      	mov	r3, r0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b085      	sub	sp, #20
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d008      	beq.n	8002f7c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e022      	b.n	8002fc2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 020e 	bic.w	r2, r2, #14
 8002f8a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa0:	f003 021c 	and.w	r2, r3, #28
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa8:	2101      	movs	r1, #1
 8002faa:	fa01 f202 	lsl.w	r2, r1, r2
 8002fae:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d005      	beq.n	8002ff2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2204      	movs	r2, #4
 8002fea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	73fb      	strb	r3, [r7, #15]
 8002ff0:	e029      	b.n	8003046 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 020e 	bic.w	r2, r2, #14
 8003000:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0201 	bic.w	r2, r2, #1
 8003010:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003016:	f003 021c 	and.w	r2, r3, #28
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301e:	2101      	movs	r1, #1
 8003020:	fa01 f202 	lsl.w	r2, r1, r2
 8003024:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	4798      	blx	r3
    }
  }
  return status;
 8003046:	7bfb      	ldrb	r3, [r7, #15]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800305e:	e148      	b.n	80032f2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	2101      	movs	r1, #1
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	fa01 f303 	lsl.w	r3, r1, r3
 800306c:	4013      	ands	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 813a 	beq.w	80032ec <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	2b01      	cmp	r3, #1
 8003082:	d005      	beq.n	8003090 <HAL_GPIO_Init+0x40>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d130      	bne.n	80030f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	2203      	movs	r2, #3
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4013      	ands	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030c6:	2201      	movs	r2, #1
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4013      	ands	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	091b      	lsrs	r3, r3, #4
 80030dc:	f003 0201 	and.w	r2, r3, #1
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d017      	beq.n	800312e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	2203      	movs	r2, #3
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4013      	ands	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d123      	bne.n	8003182 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	08da      	lsrs	r2, r3, #3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3208      	adds	r2, #8
 8003142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003146:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	220f      	movs	r2, #15
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4013      	ands	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	691a      	ldr	r2, [r3, #16]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	08da      	lsrs	r2, r3, #3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3208      	adds	r2, #8
 800317c:	6939      	ldr	r1, [r7, #16]
 800317e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	2203      	movs	r2, #3
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43db      	mvns	r3, r3
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4013      	ands	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 0203 	and.w	r2, r3, #3
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 8094 	beq.w	80032ec <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c4:	4b52      	ldr	r3, [pc, #328]	@ (8003310 <HAL_GPIO_Init+0x2c0>)
 80031c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c8:	4a51      	ldr	r2, [pc, #324]	@ (8003310 <HAL_GPIO_Init+0x2c0>)
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80031d0:	4b4f      	ldr	r3, [pc, #316]	@ (8003310 <HAL_GPIO_Init+0x2c0>)
 80031d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031dc:	4a4d      	ldr	r2, [pc, #308]	@ (8003314 <HAL_GPIO_Init+0x2c4>)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	089b      	lsrs	r3, r3, #2
 80031e2:	3302      	adds	r3, #2
 80031e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	220f      	movs	r2, #15
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4013      	ands	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003206:	d00d      	beq.n	8003224 <HAL_GPIO_Init+0x1d4>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a43      	ldr	r2, [pc, #268]	@ (8003318 <HAL_GPIO_Init+0x2c8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d007      	beq.n	8003220 <HAL_GPIO_Init+0x1d0>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a42      	ldr	r2, [pc, #264]	@ (800331c <HAL_GPIO_Init+0x2cc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d101      	bne.n	800321c <HAL_GPIO_Init+0x1cc>
 8003218:	2302      	movs	r3, #2
 800321a:	e004      	b.n	8003226 <HAL_GPIO_Init+0x1d6>
 800321c:	2307      	movs	r3, #7
 800321e:	e002      	b.n	8003226 <HAL_GPIO_Init+0x1d6>
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <HAL_GPIO_Init+0x1d6>
 8003224:	2300      	movs	r3, #0
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	f002 0203 	and.w	r2, r2, #3
 800322c:	0092      	lsls	r2, r2, #2
 800322e:	4093      	lsls	r3, r2
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003236:	4937      	ldr	r1, [pc, #220]	@ (8003314 <HAL_GPIO_Init+0x2c4>)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	3302      	adds	r3, #2
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003244:	4b36      	ldr	r3, [pc, #216]	@ (8003320 <HAL_GPIO_Init+0x2d0>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	43db      	mvns	r3, r3
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4013      	ands	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003268:	4a2d      	ldr	r2, [pc, #180]	@ (8003320 <HAL_GPIO_Init+0x2d0>)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800326e:	4b2c      	ldr	r3, [pc, #176]	@ (8003320 <HAL_GPIO_Init+0x2d0>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	43db      	mvns	r3, r3
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4013      	ands	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003292:	4a23      	ldr	r2, [pc, #140]	@ (8003320 <HAL_GPIO_Init+0x2d0>)
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003298:	4b21      	ldr	r3, [pc, #132]	@ (8003320 <HAL_GPIO_Init+0x2d0>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4013      	ands	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032bc:	4a18      	ldr	r2, [pc, #96]	@ (8003320 <HAL_GPIO_Init+0x2d0>)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032c2:	4b17      	ldr	r3, [pc, #92]	@ (8003320 <HAL_GPIO_Init+0x2d0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4013      	ands	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003320 <HAL_GPIO_Init+0x2d0>)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	3301      	adds	r3, #1
 80032f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f47f aeaf 	bne.w	8003060 <HAL_GPIO_Init+0x10>
  }
}
 8003302:	bf00      	nop
 8003304:	bf00      	nop
 8003306:	371c      	adds	r7, #28
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	40021000 	.word	0x40021000
 8003314:	40010000 	.word	0x40010000
 8003318:	48000400 	.word	0x48000400
 800331c:	48000800 	.word	0x48000800
 8003320:	40010400 	.word	0x40010400

08003324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	807b      	strh	r3, [r7, #2]
 8003330:	4613      	mov	r3, r2
 8003332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003334:	787b      	ldrb	r3, [r7, #1]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800333a:	887a      	ldrh	r2, [r7, #2]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003340:	e002      	b.n	8003348 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003342:	887a      	ldrh	r2, [r7, #2]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800335e:	4b08      	ldr	r3, [pc, #32]	@ (8003380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	88fb      	ldrh	r3, [r7, #6]
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d006      	beq.n	8003378 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800336a:	4a05      	ldr	r2, [pc, #20]	@ (8003380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800336c:	88fb      	ldrh	r3, [r7, #6]
 800336e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd ff3c 	bl	80011f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003378:	bf00      	nop
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40010400 	.word	0x40010400

08003384 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003388:	4b04      	ldr	r3, [pc, #16]	@ (800339c <HAL_PWREx_GetVoltageRange+0x18>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40007000 	.word	0x40007000

080033a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033ae:	d130      	bne.n	8003412 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033b0:	4b23      	ldr	r3, [pc, #140]	@ (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033bc:	d038      	beq.n	8003430 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033be:	4b20      	ldr	r3, [pc, #128]	@ (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003444 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2232      	movs	r2, #50	@ 0x32
 80033d4:	fb02 f303 	mul.w	r3, r2, r3
 80033d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003448 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	0c9b      	lsrs	r3, r3, #18
 80033e0:	3301      	adds	r3, #1
 80033e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033e4:	e002      	b.n	80033ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	3b01      	subs	r3, #1
 80033ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ec:	4b14      	ldr	r3, [pc, #80]	@ (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033f8:	d102      	bne.n	8003400 <HAL_PWREx_ControlVoltageScaling+0x60>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f2      	bne.n	80033e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003400:	4b0f      	ldr	r3, [pc, #60]	@ (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003408:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800340c:	d110      	bne.n	8003430 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e00f      	b.n	8003432 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003412:	4b0b      	ldr	r3, [pc, #44]	@ (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800341a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800341e:	d007      	beq.n	8003430 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003420:	4b07      	ldr	r3, [pc, #28]	@ (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003428:	4a05      	ldr	r2, [pc, #20]	@ (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800342a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800342e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40007000 	.word	0x40007000
 8003444:	20000000 	.word	0x20000000
 8003448:	431bde83 	.word	0x431bde83

0800344c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d102      	bne.n	8003460 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	f000 bc02 	b.w	8003c64 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003460:	4b96      	ldr	r3, [pc, #600]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 030c 	and.w	r3, r3, #12
 8003468:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800346a:	4b94      	ldr	r3, [pc, #592]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80e4 	beq.w	800364a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d007      	beq.n	8003498 <HAL_RCC_OscConfig+0x4c>
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	2b0c      	cmp	r3, #12
 800348c:	f040 808b 	bne.w	80035a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2b01      	cmp	r3, #1
 8003494:	f040 8087 	bne.w	80035a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003498:	4b88      	ldr	r3, [pc, #544]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_RCC_OscConfig+0x64>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e3d9      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1a      	ldr	r2, [r3, #32]
 80034b4:	4b81      	ldr	r3, [pc, #516]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d004      	beq.n	80034ca <HAL_RCC_OscConfig+0x7e>
 80034c0:	4b7e      	ldr	r3, [pc, #504]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034c8:	e005      	b.n	80034d6 <HAL_RCC_OscConfig+0x8a>
 80034ca:	4b7c      	ldr	r3, [pc, #496]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80034cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d223      	bcs.n	8003522 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fd8c 	bl	8003ffc <RCC_SetFlashLatencyFromMSIRange>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e3ba      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034ee:	4b73      	ldr	r3, [pc, #460]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a72      	ldr	r2, [pc, #456]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80034f4:	f043 0308 	orr.w	r3, r3, #8
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	4b70      	ldr	r3, [pc, #448]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	496d      	ldr	r1, [pc, #436]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 8003508:	4313      	orrs	r3, r2
 800350a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800350c:	4b6b      	ldr	r3, [pc, #428]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	4968      	ldr	r1, [pc, #416]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]
 8003520:	e025      	b.n	800356e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003522:	4b66      	ldr	r3, [pc, #408]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a65      	ldr	r2, [pc, #404]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 8003528:	f043 0308 	orr.w	r3, r3, #8
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	4b63      	ldr	r3, [pc, #396]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	4960      	ldr	r1, [pc, #384]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 800353c:	4313      	orrs	r3, r2
 800353e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003540:	4b5e      	ldr	r3, [pc, #376]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	495b      	ldr	r1, [pc, #364]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d109      	bne.n	800356e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fd4c 	bl	8003ffc <RCC_SetFlashLatencyFromMSIRange>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e37a      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800356e:	f000 fc81 	bl	8003e74 <HAL_RCC_GetSysClockFreq>
 8003572:	4602      	mov	r2, r0
 8003574:	4b51      	ldr	r3, [pc, #324]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	091b      	lsrs	r3, r3, #4
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	4950      	ldr	r1, [pc, #320]	@ (80036c0 <HAL_RCC_OscConfig+0x274>)
 8003580:	5ccb      	ldrb	r3, [r1, r3]
 8003582:	f003 031f 	and.w	r3, r3, #31
 8003586:	fa22 f303 	lsr.w	r3, r2, r3
 800358a:	4a4e      	ldr	r2, [pc, #312]	@ (80036c4 <HAL_RCC_OscConfig+0x278>)
 800358c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800358e:	4b4e      	ldr	r3, [pc, #312]	@ (80036c8 <HAL_RCC_OscConfig+0x27c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7fe f962 	bl	800185c <HAL_InitTick>
 8003598:	4603      	mov	r3, r0
 800359a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d052      	beq.n	8003648 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	e35e      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d032      	beq.n	8003614 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035ae:	4b43      	ldr	r3, [pc, #268]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a42      	ldr	r2, [pc, #264]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035ba:	f7fe f99f 	bl	80018fc <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035c2:	f7fe f99b 	bl	80018fc <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e347      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035d4:	4b39      	ldr	r3, [pc, #228]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035e0:	4b36      	ldr	r3, [pc, #216]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a35      	ldr	r2, [pc, #212]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80035e6:	f043 0308 	orr.w	r3, r3, #8
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	4b33      	ldr	r3, [pc, #204]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	4930      	ldr	r1, [pc, #192]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035fe:	4b2f      	ldr	r3, [pc, #188]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	021b      	lsls	r3, r3, #8
 800360c:	492b      	ldr	r1, [pc, #172]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 800360e:	4313      	orrs	r3, r2
 8003610:	604b      	str	r3, [r1, #4]
 8003612:	e01a      	b.n	800364a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003614:	4b29      	ldr	r3, [pc, #164]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a28      	ldr	r2, [pc, #160]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003620:	f7fe f96c 	bl	80018fc <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003628:	f7fe f968 	bl	80018fc <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e314      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800363a:	4b20      	ldr	r3, [pc, #128]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x1dc>
 8003646:	e000      	b.n	800364a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003648:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d073      	beq.n	800373e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	2b08      	cmp	r3, #8
 800365a:	d005      	beq.n	8003668 <HAL_RCC_OscConfig+0x21c>
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b0c      	cmp	r3, #12
 8003660:	d10e      	bne.n	8003680 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d10b      	bne.n	8003680 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003668:	4b14      	ldr	r3, [pc, #80]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d063      	beq.n	800373c <HAL_RCC_OscConfig+0x2f0>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d15f      	bne.n	800373c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e2f1      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003688:	d106      	bne.n	8003698 <HAL_RCC_OscConfig+0x24c>
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a0b      	ldr	r2, [pc, #44]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 8003690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	e025      	b.n	80036e4 <HAL_RCC_OscConfig+0x298>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036a0:	d114      	bne.n	80036cc <HAL_RCC_OscConfig+0x280>
 80036a2:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a05      	ldr	r2, [pc, #20]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80036a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	4b03      	ldr	r3, [pc, #12]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a02      	ldr	r2, [pc, #8]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80036b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e013      	b.n	80036e4 <HAL_RCC_OscConfig+0x298>
 80036bc:	40021000 	.word	0x40021000
 80036c0:	08006a5c 	.word	0x08006a5c
 80036c4:	20000000 	.word	0x20000000
 80036c8:	20000004 	.word	0x20000004
 80036cc:	4ba0      	ldr	r3, [pc, #640]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a9f      	ldr	r2, [pc, #636]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80036d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	4b9d      	ldr	r3, [pc, #628]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a9c      	ldr	r2, [pc, #624]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80036de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d013      	beq.n	8003714 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fe f906 	bl	80018fc <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f4:	f7fe f902 	bl	80018fc <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b64      	cmp	r3, #100	@ 0x64
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e2ae      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003706:	4b92      	ldr	r3, [pc, #584]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0x2a8>
 8003712:	e014      	b.n	800373e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7fe f8f2 	bl	80018fc <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800371c:	f7fe f8ee 	bl	80018fc <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	@ 0x64
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e29a      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800372e:	4b88      	ldr	r3, [pc, #544]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x2d0>
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d060      	beq.n	800380c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b04      	cmp	r3, #4
 800374e:	d005      	beq.n	800375c <HAL_RCC_OscConfig+0x310>
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b0c      	cmp	r3, #12
 8003754:	d119      	bne.n	800378a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b02      	cmp	r3, #2
 800375a:	d116      	bne.n	800378a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800375c:	4b7c      	ldr	r3, [pc, #496]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_RCC_OscConfig+0x328>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e277      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003774:	4b76      	ldr	r3, [pc, #472]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	061b      	lsls	r3, r3, #24
 8003782:	4973      	ldr	r1, [pc, #460]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003784:	4313      	orrs	r3, r2
 8003786:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003788:	e040      	b.n	800380c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d023      	beq.n	80037da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003792:	4b6f      	ldr	r3, [pc, #444]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a6e      	ldr	r2, [pc, #440]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800379c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379e:	f7fe f8ad 	bl	80018fc <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a6:	f7fe f8a9 	bl	80018fc <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e255      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037b8:	4b65      	ldr	r3, [pc, #404]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c4:	4b62      	ldr	r3, [pc, #392]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	061b      	lsls	r3, r3, #24
 80037d2:	495f      	ldr	r1, [pc, #380]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]
 80037d8:	e018      	b.n	800380c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037da:	4b5d      	ldr	r3, [pc, #372]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a5c      	ldr	r2, [pc, #368]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80037e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e6:	f7fe f889 	bl	80018fc <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ee:	f7fe f885 	bl	80018fc <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e231      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003800:	4b53      	ldr	r3, [pc, #332]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f0      	bne.n	80037ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d03c      	beq.n	8003892 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01c      	beq.n	800385a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003820:	4b4b      	ldr	r3, [pc, #300]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003822:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003826:	4a4a      	ldr	r2, [pc, #296]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003828:	f043 0301 	orr.w	r3, r3, #1
 800382c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7fe f864 	bl	80018fc <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003838:	f7fe f860 	bl	80018fc <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e20c      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800384a:	4b41      	ldr	r3, [pc, #260]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 800384c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0ef      	beq.n	8003838 <HAL_RCC_OscConfig+0x3ec>
 8003858:	e01b      	b.n	8003892 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800385a:	4b3d      	ldr	r3, [pc, #244]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 800385c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003860:	4a3b      	ldr	r2, [pc, #236]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003862:	f023 0301 	bic.w	r3, r3, #1
 8003866:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386a:	f7fe f847 	bl	80018fc <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003872:	f7fe f843 	bl	80018fc <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e1ef      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003884:	4b32      	ldr	r3, [pc, #200]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1ef      	bne.n	8003872 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80a6 	beq.w	80039ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a0:	2300      	movs	r3, #0
 80038a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80038a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10d      	bne.n	80038cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b0:	4b27      	ldr	r3, [pc, #156]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80038b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b4:	4a26      	ldr	r2, [pc, #152]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80038b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80038bc:	4b24      	ldr	r3, [pc, #144]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80038be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038c8:	2301      	movs	r3, #1
 80038ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038cc:	4b21      	ldr	r3, [pc, #132]	@ (8003954 <HAL_RCC_OscConfig+0x508>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d118      	bne.n	800390a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003954 <HAL_RCC_OscConfig+0x508>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003954 <HAL_RCC_OscConfig+0x508>)
 80038de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e4:	f7fe f80a 	bl	80018fc <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ec:	f7fe f806 	bl	80018fc <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e1b2      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038fe:	4b15      	ldr	r3, [pc, #84]	@ (8003954 <HAL_RCC_OscConfig+0x508>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d108      	bne.n	8003924 <HAL_RCC_OscConfig+0x4d8>
 8003912:	4b0f      	ldr	r3, [pc, #60]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003918:	4a0d      	ldr	r2, [pc, #52]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003922:	e029      	b.n	8003978 <HAL_RCC_OscConfig+0x52c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b05      	cmp	r3, #5
 800392a:	d115      	bne.n	8003958 <HAL_RCC_OscConfig+0x50c>
 800392c:	4b08      	ldr	r3, [pc, #32]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 800392e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003932:	4a07      	ldr	r2, [pc, #28]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003934:	f043 0304 	orr.w	r3, r3, #4
 8003938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800393c:	4b04      	ldr	r3, [pc, #16]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003942:	4a03      	ldr	r2, [pc, #12]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800394c:	e014      	b.n	8003978 <HAL_RCC_OscConfig+0x52c>
 800394e:	bf00      	nop
 8003950:	40021000 	.word	0x40021000
 8003954:	40007000 	.word	0x40007000
 8003958:	4b9a      	ldr	r3, [pc, #616]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800395e:	4a99      	ldr	r2, [pc, #612]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003960:	f023 0301 	bic.w	r3, r3, #1
 8003964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003968:	4b96      	ldr	r3, [pc, #600]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800396e:	4a95      	ldr	r2, [pc, #596]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003970:	f023 0304 	bic.w	r3, r3, #4
 8003974:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d016      	beq.n	80039ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7fd ffbc 	bl	80018fc <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003986:	e00a      	b.n	800399e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003988:	f7fd ffb8 	bl	80018fc <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e162      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800399e:	4b89      	ldr	r3, [pc, #548]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0ed      	beq.n	8003988 <HAL_RCC_OscConfig+0x53c>
 80039ac:	e015      	b.n	80039da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ae:	f7fd ffa5 	bl	80018fc <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039b4:	e00a      	b.n	80039cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b6:	f7fd ffa1 	bl	80018fc <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e14b      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039cc:	4b7d      	ldr	r3, [pc, #500]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1ed      	bne.n	80039b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039da:	7ffb      	ldrb	r3, [r7, #31]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d105      	bne.n	80039ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e0:	4b78      	ldr	r3, [pc, #480]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 80039e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e4:	4a77      	ldr	r2, [pc, #476]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 80039e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d03c      	beq.n	8003a72 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01c      	beq.n	8003a3a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a00:	4b70      	ldr	r3, [pc, #448]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a06:	4a6f      	ldr	r2, [pc, #444]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a10:	f7fd ff74 	bl	80018fc <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a18:	f7fd ff70 	bl	80018fc <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e11c      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a2a:	4b66      	ldr	r3, [pc, #408]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0ef      	beq.n	8003a18 <HAL_RCC_OscConfig+0x5cc>
 8003a38:	e01b      	b.n	8003a72 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a3a:	4b62      	ldr	r3, [pc, #392]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a40:	4a60      	ldr	r2, [pc, #384]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003a42:	f023 0301 	bic.w	r3, r3, #1
 8003a46:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4a:	f7fd ff57 	bl	80018fc <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a52:	f7fd ff53 	bl	80018fc <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e0ff      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a64:	4b57      	ldr	r3, [pc, #348]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1ef      	bne.n	8003a52 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 80f3 	beq.w	8003c62 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	f040 80c9 	bne.w	8003c18 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a86:	4b4f      	ldr	r3, [pc, #316]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f003 0203 	and.w	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d12c      	bne.n	8003af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d123      	bne.n	8003af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d11b      	bne.n	8003af4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d113      	bne.n	8003af4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad6:	085b      	lsrs	r3, r3, #1
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d109      	bne.n	8003af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aea:	085b      	lsrs	r3, r3, #1
 8003aec:	3b01      	subs	r3, #1
 8003aee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d06b      	beq.n	8003bcc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	2b0c      	cmp	r3, #12
 8003af8:	d062      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003afa:	4b32      	ldr	r3, [pc, #200]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e0ac      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003b10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b16:	f7fd fef1 	bl	80018fc <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b1e:	f7fd feed 	bl	80018fc <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e099      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b30:	4b24      	ldr	r3, [pc, #144]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1f0      	bne.n	8003b1e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b3c:	4b21      	ldr	r3, [pc, #132]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	4b21      	ldr	r3, [pc, #132]	@ (8003bc8 <HAL_RCC_OscConfig+0x77c>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b4c:	3a01      	subs	r2, #1
 8003b4e:	0112      	lsls	r2, r2, #4
 8003b50:	4311      	orrs	r1, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b56:	0212      	lsls	r2, r2, #8
 8003b58:	4311      	orrs	r1, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b5e:	0852      	lsrs	r2, r2, #1
 8003b60:	3a01      	subs	r2, #1
 8003b62:	0552      	lsls	r2, r2, #21
 8003b64:	4311      	orrs	r1, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003b6a:	0852      	lsrs	r2, r2, #1
 8003b6c:	3a01      	subs	r2, #1
 8003b6e:	0652      	lsls	r2, r2, #25
 8003b70:	4311      	orrs	r1, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b76:	06d2      	lsls	r2, r2, #27
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	4912      	ldr	r1, [pc, #72]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b80:	4b10      	ldr	r3, [pc, #64]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a0f      	ldr	r2, [pc, #60]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003b86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	4a0c      	ldr	r2, [pc, #48]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003b92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b98:	f7fd feb0 	bl	80018fc <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fd feac 	bl	80018fc <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e058      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb2:	4b04      	ldr	r3, [pc, #16]	@ (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bbe:	e050      	b.n	8003c62 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e04f      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bcc:	4b27      	ldr	r3, [pc, #156]	@ (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d144      	bne.n	8003c62 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003bd8:	4b24      	ldr	r3, [pc, #144]	@ (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a23      	ldr	r2, [pc, #140]	@ (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003bde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003be2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003be4:	4b21      	ldr	r3, [pc, #132]	@ (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	4a20      	ldr	r2, [pc, #128]	@ (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003bea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bf0:	f7fd fe84 	bl	80018fc <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf8:	f7fd fe80 	bl	80018fc <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e02c      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c0a:	4b18      	ldr	r3, [pc, #96]	@ (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x7ac>
 8003c16:	e024      	b.n	8003c62 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	2b0c      	cmp	r3, #12
 8003c1c:	d01f      	beq.n	8003c5e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1e:	4b13      	ldr	r3, [pc, #76]	@ (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a12      	ldr	r2, [pc, #72]	@ (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003c24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2a:	f7fd fe67 	bl	80018fc <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c32:	f7fd fe63 	bl	80018fc <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e00f      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c44:	4b09      	ldr	r3, [pc, #36]	@ (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1f0      	bne.n	8003c32 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003c50:	4b06      	ldr	r3, [pc, #24]	@ (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	4905      	ldr	r1, [pc, #20]	@ (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003c56:	4b06      	ldr	r3, [pc, #24]	@ (8003c70 <HAL_RCC_OscConfig+0x824>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	60cb      	str	r3, [r1, #12]
 8003c5c:	e001      	b.n	8003c62 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3720      	adds	r7, #32
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	feeefffc 	.word	0xfeeefffc

08003c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0e7      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c88:	4b75      	ldr	r3, [pc, #468]	@ (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d910      	bls.n	8003cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c96:	4b72      	ldr	r3, [pc, #456]	@ (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 0207 	bic.w	r2, r3, #7
 8003c9e:	4970      	ldr	r1, [pc, #448]	@ (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca6:	4b6e      	ldr	r3, [pc, #440]	@ (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0cf      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d010      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	4b66      	ldr	r3, [pc, #408]	@ (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d908      	bls.n	8003ce6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd4:	4b63      	ldr	r3, [pc, #396]	@ (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4960      	ldr	r1, [pc, #384]	@ (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d04c      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d107      	bne.n	8003d0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cfa:	4b5a      	ldr	r3, [pc, #360]	@ (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d121      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e0a6      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d107      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d12:	4b54      	ldr	r3, [pc, #336]	@ (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d115      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e09a      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d107      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d2a:	4b4e      	ldr	r3, [pc, #312]	@ (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e08e      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e086      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d4a:	4b46      	ldr	r3, [pc, #280]	@ (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f023 0203 	bic.w	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	4943      	ldr	r1, [pc, #268]	@ (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5c:	f7fd fdce 	bl	80018fc <HAL_GetTick>
 8003d60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d62:	e00a      	b.n	8003d7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d64:	f7fd fdca 	bl	80018fc <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e06e      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 020c 	and.w	r2, r3, #12
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d1eb      	bne.n	8003d64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d010      	beq.n	8003dba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	4b31      	ldr	r3, [pc, #196]	@ (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d208      	bcs.n	8003dba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da8:	4b2e      	ldr	r3, [pc, #184]	@ (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	492b      	ldr	r1, [pc, #172]	@ (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dba:	4b29      	ldr	r3, [pc, #164]	@ (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d210      	bcs.n	8003dea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc8:	4b25      	ldr	r3, [pc, #148]	@ (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f023 0207 	bic.w	r2, r3, #7
 8003dd0:	4923      	ldr	r1, [pc, #140]	@ (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd8:	4b21      	ldr	r3, [pc, #132]	@ (8003e60 <HAL_RCC_ClockConfig+0x1ec>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d001      	beq.n	8003dea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e036      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d008      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	4918      	ldr	r1, [pc, #96]	@ (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d009      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e14:	4b13      	ldr	r3, [pc, #76]	@ (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4910      	ldr	r1, [pc, #64]	@ (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e28:	f000 f824 	bl	8003e74 <HAL_RCC_GetSysClockFreq>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e64 <HAL_RCC_ClockConfig+0x1f0>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	091b      	lsrs	r3, r3, #4
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	490b      	ldr	r1, [pc, #44]	@ (8003e68 <HAL_RCC_ClockConfig+0x1f4>)
 8003e3a:	5ccb      	ldrb	r3, [r1, r3]
 8003e3c:	f003 031f 	and.w	r3, r3, #31
 8003e40:	fa22 f303 	lsr.w	r3, r2, r3
 8003e44:	4a09      	ldr	r2, [pc, #36]	@ (8003e6c <HAL_RCC_ClockConfig+0x1f8>)
 8003e46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e48:	4b09      	ldr	r3, [pc, #36]	@ (8003e70 <HAL_RCC_ClockConfig+0x1fc>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fd fd05 	bl	800185c <HAL_InitTick>
 8003e52:	4603      	mov	r3, r0
 8003e54:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e56:	7afb      	ldrb	r3, [r7, #11]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40022000 	.word	0x40022000
 8003e64:	40021000 	.word	0x40021000
 8003e68:	08006a5c 	.word	0x08006a5c
 8003e6c:	20000000 	.word	0x20000000
 8003e70:	20000004 	.word	0x20000004

08003e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b089      	sub	sp, #36	@ 0x24
 8003e78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e82:	4b3e      	ldr	r3, [pc, #248]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 030c 	and.w	r3, r3, #12
 8003e8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b0c      	cmp	r3, #12
 8003ea0:	d121      	bne.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d11e      	bne.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ea8:	4b34      	ldr	r3, [pc, #208]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d107      	bne.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003eb4:	4b31      	ldr	r3, [pc, #196]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eba:	0a1b      	lsrs	r3, r3, #8
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	e005      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ed0:	4a2b      	ldr	r2, [pc, #172]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10d      	bne.n	8003efc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ee4:	e00a      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d102      	bne.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003eec:	4b25      	ldr	r3, [pc, #148]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x110>)
 8003eee:	61bb      	str	r3, [r7, #24]
 8003ef0:	e004      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d101      	bne.n	8003efc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ef8:	4b23      	ldr	r3, [pc, #140]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x114>)
 8003efa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b0c      	cmp	r3, #12
 8003f00:	d134      	bne.n	8003f6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f02:	4b1e      	ldr	r3, [pc, #120]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d003      	beq.n	8003f1a <HAL_RCC_GetSysClockFreq+0xa6>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d003      	beq.n	8003f20 <HAL_RCC_GetSysClockFreq+0xac>
 8003f18:	e005      	b.n	8003f26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f1c:	617b      	str	r3, [r7, #20]
      break;
 8003f1e:	e005      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f20:	4b19      	ldr	r3, [pc, #100]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f22:	617b      	str	r3, [r7, #20]
      break;
 8003f24:	e002      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	617b      	str	r3, [r7, #20]
      break;
 8003f2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f2c:	4b13      	ldr	r3, [pc, #76]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	091b      	lsrs	r3, r3, #4
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	3301      	adds	r3, #1
 8003f38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f3a:	4b10      	ldr	r3, [pc, #64]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	0a1b      	lsrs	r3, r3, #8
 8003f40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	fb03 f202 	mul.w	r2, r3, r2
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f52:	4b0a      	ldr	r3, [pc, #40]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	0e5b      	lsrs	r3, r3, #25
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f6c:	69bb      	ldr	r3, [r7, #24]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3724      	adds	r7, #36	@ 0x24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	08006a74 	.word	0x08006a74
 8003f84:	00f42400 	.word	0x00f42400
 8003f88:	007a1200 	.word	0x007a1200

08003f8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f90:	4b03      	ldr	r3, [pc, #12]	@ (8003fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f92:	681b      	ldr	r3, [r3, #0]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	20000000 	.word	0x20000000

08003fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fa8:	f7ff fff0 	bl	8003f8c <HAL_RCC_GetHCLKFreq>
 8003fac:	4602      	mov	r2, r0
 8003fae:	4b06      	ldr	r3, [pc, #24]	@ (8003fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	0a1b      	lsrs	r3, r3, #8
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	4904      	ldr	r1, [pc, #16]	@ (8003fcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fba:	5ccb      	ldrb	r3, [r1, r3]
 8003fbc:	f003 031f 	and.w	r3, r3, #31
 8003fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	08006a6c 	.word	0x08006a6c

08003fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003fd4:	f7ff ffda 	bl	8003f8c <HAL_RCC_GetHCLKFreq>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	4b06      	ldr	r3, [pc, #24]	@ (8003ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	0adb      	lsrs	r3, r3, #11
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	4904      	ldr	r1, [pc, #16]	@ (8003ff8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fe6:	5ccb      	ldrb	r3, [r1, r3]
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	08006a6c 	.word	0x08006a6c

08003ffc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004004:	2300      	movs	r3, #0
 8004006:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004008:	4b2a      	ldr	r3, [pc, #168]	@ (80040b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800400a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004014:	f7ff f9b6 	bl	8003384 <HAL_PWREx_GetVoltageRange>
 8004018:	6178      	str	r0, [r7, #20]
 800401a:	e014      	b.n	8004046 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800401c:	4b25      	ldr	r3, [pc, #148]	@ (80040b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800401e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004020:	4a24      	ldr	r2, [pc, #144]	@ (80040b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004026:	6593      	str	r3, [r2, #88]	@ 0x58
 8004028:	4b22      	ldr	r3, [pc, #136]	@ (80040b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800402a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004034:	f7ff f9a6 	bl	8003384 <HAL_PWREx_GetVoltageRange>
 8004038:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800403a:	4b1e      	ldr	r3, [pc, #120]	@ (80040b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800403c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403e:	4a1d      	ldr	r2, [pc, #116]	@ (80040b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004040:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004044:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800404c:	d10b      	bne.n	8004066 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b80      	cmp	r3, #128	@ 0x80
 8004052:	d919      	bls.n	8004088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2ba0      	cmp	r3, #160	@ 0xa0
 8004058:	d902      	bls.n	8004060 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800405a:	2302      	movs	r3, #2
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	e013      	b.n	8004088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004060:	2301      	movs	r3, #1
 8004062:	613b      	str	r3, [r7, #16]
 8004064:	e010      	b.n	8004088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b80      	cmp	r3, #128	@ 0x80
 800406a:	d902      	bls.n	8004072 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800406c:	2303      	movs	r3, #3
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	e00a      	b.n	8004088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b80      	cmp	r3, #128	@ 0x80
 8004076:	d102      	bne.n	800407e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004078:	2302      	movs	r3, #2
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	e004      	b.n	8004088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b70      	cmp	r3, #112	@ 0x70
 8004082:	d101      	bne.n	8004088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004084:	2301      	movs	r3, #1
 8004086:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004088:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f023 0207 	bic.w	r2, r3, #7
 8004090:	4909      	ldr	r1, [pc, #36]	@ (80040b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004098:	4b07      	ldr	r3, [pc, #28]	@ (80040b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d001      	beq.n	80040aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40021000 	.word	0x40021000
 80040b8:	40022000 	.word	0x40022000

080040bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040c4:	2300      	movs	r3, #0
 80040c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040c8:	2300      	movs	r3, #0
 80040ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d031      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80040e0:	d01a      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80040e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80040e6:	d814      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d009      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80040f0:	d10f      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80040f2:	4b5d      	ldr	r3, [pc, #372]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	4a5c      	ldr	r2, [pc, #368]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040fc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040fe:	e00c      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3304      	adds	r3, #4
 8004104:	2100      	movs	r1, #0
 8004106:	4618      	mov	r0, r3
 8004108:	f000 f9ce 	bl	80044a8 <RCCEx_PLLSAI1_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004110:	e003      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	74fb      	strb	r3, [r7, #19]
      break;
 8004116:	e000      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004118:	bf00      	nop
    }

    if(ret == HAL_OK)
 800411a:	7cfb      	ldrb	r3, [r7, #19]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10b      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004120:	4b51      	ldr	r3, [pc, #324]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004126:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800412e:	494e      	ldr	r1, [pc, #312]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004136:	e001      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 809e 	beq.w	8004286 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800414a:	2300      	movs	r3, #0
 800414c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800414e:	4b46      	ldr	r3, [pc, #280]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800415e:	2300      	movs	r3, #0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00d      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004164:	4b40      	ldr	r3, [pc, #256]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004168:	4a3f      	ldr	r2, [pc, #252]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800416a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800416e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004170:	4b3d      	ldr	r3, [pc, #244]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800417c:	2301      	movs	r3, #1
 800417e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004180:	4b3a      	ldr	r3, [pc, #232]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a39      	ldr	r2, [pc, #228]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004186:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800418a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800418c:	f7fd fbb6 	bl	80018fc <HAL_GetTick>
 8004190:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004192:	e009      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004194:	f7fd fbb2 	bl	80018fc <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d902      	bls.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	74fb      	strb	r3, [r7, #19]
        break;
 80041a6:	e005      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041a8:	4b30      	ldr	r3, [pc, #192]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0ef      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80041b4:	7cfb      	ldrb	r3, [r7, #19]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d15a      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041ba:	4b2b      	ldr	r3, [pc, #172]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01e      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d019      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041d6:	4b24      	ldr	r3, [pc, #144]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041e2:	4b21      	ldr	r3, [pc, #132]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004202:	4a19      	ldr	r2, [pc, #100]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d016      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7fd fb72 	bl	80018fc <HAL_GetTick>
 8004218:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800421a:	e00b      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800421c:	f7fd fb6e 	bl	80018fc <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800422a:	4293      	cmp	r3, r2
 800422c:	d902      	bls.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	74fb      	strb	r3, [r7, #19]
            break;
 8004232:	e006      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004234:	4b0c      	ldr	r3, [pc, #48]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0ec      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004242:	7cfb      	ldrb	r3, [r7, #19]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10b      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004248:	4b07      	ldr	r3, [pc, #28]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800424e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004256:	4904      	ldr	r1, [pc, #16]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800425e:	e009      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004260:	7cfb      	ldrb	r3, [r7, #19]
 8004262:	74bb      	strb	r3, [r7, #18]
 8004264:	e006      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004266:	bf00      	nop
 8004268:	40021000 	.word	0x40021000
 800426c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004270:	7cfb      	ldrb	r3, [r7, #19]
 8004272:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004274:	7c7b      	ldrb	r3, [r7, #17]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d105      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800427a:	4b8a      	ldr	r3, [pc, #552]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800427c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800427e:	4a89      	ldr	r2, [pc, #548]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004280:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004284:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004292:	4b84      	ldr	r3, [pc, #528]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004298:	f023 0203 	bic.w	r2, r3, #3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	4980      	ldr	r1, [pc, #512]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042b4:	4b7b      	ldr	r3, [pc, #492]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ba:	f023 020c 	bic.w	r2, r3, #12
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c2:	4978      	ldr	r1, [pc, #480]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042d6:	4b73      	ldr	r3, [pc, #460]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042dc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e4:	496f      	ldr	r1, [pc, #444]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042f8:	4b6a      	ldr	r3, [pc, #424]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042fe:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004306:	4967      	ldr	r1, [pc, #412]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800431a:	4b62      	ldr	r3, [pc, #392]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004320:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004328:	495e      	ldr	r1, [pc, #376]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800433c:	4b59      	ldr	r3, [pc, #356]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004342:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434a:	4956      	ldr	r1, [pc, #344]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800435e:	4b51      	ldr	r3, [pc, #324]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004364:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436c:	494d      	ldr	r1, [pc, #308]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d028      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004380:	4b48      	ldr	r3, [pc, #288]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004386:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438e:	4945      	ldr	r1, [pc, #276]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800439e:	d106      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043a0:	4b40      	ldr	r3, [pc, #256]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	4a3f      	ldr	r2, [pc, #252]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043aa:	60d3      	str	r3, [r2, #12]
 80043ac:	e011      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043b6:	d10c      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3304      	adds	r3, #4
 80043bc:	2101      	movs	r1, #1
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f872 	bl	80044a8 <RCCEx_PLLSAI1_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80043c8:	7cfb      	ldrb	r3, [r7, #19]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80043ce:	7cfb      	ldrb	r3, [r7, #19]
 80043d0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d028      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043de:	4b31      	ldr	r3, [pc, #196]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ec:	492d      	ldr	r1, [pc, #180]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043fc:	d106      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043fe:	4b29      	ldr	r3, [pc, #164]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	4a28      	ldr	r2, [pc, #160]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004404:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004408:	60d3      	str	r3, [r2, #12]
 800440a:	e011      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004410:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004414:	d10c      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3304      	adds	r3, #4
 800441a:	2101      	movs	r1, #1
 800441c:	4618      	mov	r0, r3
 800441e:	f000 f843 	bl	80044a8 <RCCEx_PLLSAI1_Config>
 8004422:	4603      	mov	r3, r0
 8004424:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004426:	7cfb      	ldrb	r3, [r7, #19]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800442c:	7cfb      	ldrb	r3, [r7, #19]
 800442e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01c      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800443c:	4b19      	ldr	r3, [pc, #100]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004442:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800444a:	4916      	ldr	r1, [pc, #88]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004456:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800445a:	d10c      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3304      	adds	r3, #4
 8004460:	2102      	movs	r1, #2
 8004462:	4618      	mov	r0, r3
 8004464:	f000 f820 	bl	80044a8 <RCCEx_PLLSAI1_Config>
 8004468:	4603      	mov	r3, r0
 800446a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800446c:	7cfb      	ldrb	r3, [r7, #19]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004472:	7cfb      	ldrb	r3, [r7, #19]
 8004474:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004482:	4b08      	ldr	r3, [pc, #32]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004488:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004490:	4904      	ldr	r1, [pc, #16]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004492:	4313      	orrs	r3, r2
 8004494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004498:	7cbb      	ldrb	r3, [r7, #18]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40021000 	.word	0x40021000

080044a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044b6:	4b74      	ldr	r3, [pc, #464]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d018      	beq.n	80044f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044c2:	4b71      	ldr	r3, [pc, #452]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f003 0203 	and.w	r2, r3, #3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d10d      	bne.n	80044ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
       ||
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d009      	beq.n	80044ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044da:	4b6b      	ldr	r3, [pc, #428]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	091b      	lsrs	r3, r3, #4
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
       ||
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d047      	beq.n	800457e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	73fb      	strb	r3, [r7, #15]
 80044f2:	e044      	b.n	800457e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d018      	beq.n	800452e <RCCEx_PLLSAI1_Config+0x86>
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d825      	bhi.n	800454c <RCCEx_PLLSAI1_Config+0xa4>
 8004500:	2b01      	cmp	r3, #1
 8004502:	d002      	beq.n	800450a <RCCEx_PLLSAI1_Config+0x62>
 8004504:	2b02      	cmp	r3, #2
 8004506:	d009      	beq.n	800451c <RCCEx_PLLSAI1_Config+0x74>
 8004508:	e020      	b.n	800454c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800450a:	4b5f      	ldr	r3, [pc, #380]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d11d      	bne.n	8004552 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800451a:	e01a      	b.n	8004552 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800451c:	4b5a      	ldr	r3, [pc, #360]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004524:	2b00      	cmp	r3, #0
 8004526:	d116      	bne.n	8004556 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800452c:	e013      	b.n	8004556 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800452e:	4b56      	ldr	r3, [pc, #344]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10f      	bne.n	800455a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800453a:	4b53      	ldr	r3, [pc, #332]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d109      	bne.n	800455a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800454a:	e006      	b.n	800455a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	73fb      	strb	r3, [r7, #15]
      break;
 8004550:	e004      	b.n	800455c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004552:	bf00      	nop
 8004554:	e002      	b.n	800455c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004556:	bf00      	nop
 8004558:	e000      	b.n	800455c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800455a:	bf00      	nop
    }

    if(status == HAL_OK)
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10d      	bne.n	800457e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004562:	4b49      	ldr	r3, [pc, #292]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6819      	ldr	r1, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	3b01      	subs	r3, #1
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	430b      	orrs	r3, r1
 8004578:	4943      	ldr	r1, [pc, #268]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800457a:	4313      	orrs	r3, r2
 800457c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800457e:	7bfb      	ldrb	r3, [r7, #15]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d17c      	bne.n	800467e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004584:	4b40      	ldr	r3, [pc, #256]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a3f      	ldr	r2, [pc, #252]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800458a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800458e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004590:	f7fd f9b4 	bl	80018fc <HAL_GetTick>
 8004594:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004596:	e009      	b.n	80045ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004598:	f7fd f9b0 	bl	80018fc <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d902      	bls.n	80045ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	73fb      	strb	r3, [r7, #15]
        break;
 80045aa:	e005      	b.n	80045b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045ac:	4b36      	ldr	r3, [pc, #216]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1ef      	bne.n	8004598 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d15f      	bne.n	800467e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d110      	bne.n	80045e6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045c4:	4b30      	ldr	r3, [pc, #192]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80045cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6892      	ldr	r2, [r2, #8]
 80045d4:	0211      	lsls	r1, r2, #8
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	68d2      	ldr	r2, [r2, #12]
 80045da:	06d2      	lsls	r2, r2, #27
 80045dc:	430a      	orrs	r2, r1
 80045de:	492a      	ldr	r1, [pc, #168]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	610b      	str	r3, [r1, #16]
 80045e4:	e027      	b.n	8004636 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d112      	bne.n	8004612 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045ec:	4b26      	ldr	r3, [pc, #152]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80045f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6892      	ldr	r2, [r2, #8]
 80045fc:	0211      	lsls	r1, r2, #8
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6912      	ldr	r2, [r2, #16]
 8004602:	0852      	lsrs	r2, r2, #1
 8004604:	3a01      	subs	r2, #1
 8004606:	0552      	lsls	r2, r2, #21
 8004608:	430a      	orrs	r2, r1
 800460a:	491f      	ldr	r1, [pc, #124]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800460c:	4313      	orrs	r3, r2
 800460e:	610b      	str	r3, [r1, #16]
 8004610:	e011      	b.n	8004636 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004612:	4b1d      	ldr	r3, [pc, #116]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800461a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6892      	ldr	r2, [r2, #8]
 8004622:	0211      	lsls	r1, r2, #8
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6952      	ldr	r2, [r2, #20]
 8004628:	0852      	lsrs	r2, r2, #1
 800462a:	3a01      	subs	r2, #1
 800462c:	0652      	lsls	r2, r2, #25
 800462e:	430a      	orrs	r2, r1
 8004630:	4915      	ldr	r1, [pc, #84]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004632:	4313      	orrs	r3, r2
 8004634:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004636:	4b14      	ldr	r3, [pc, #80]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a13      	ldr	r2, [pc, #76]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800463c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004640:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004642:	f7fd f95b 	bl	80018fc <HAL_GetTick>
 8004646:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004648:	e009      	b.n	800465e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800464a:	f7fd f957 	bl	80018fc <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d902      	bls.n	800465e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	73fb      	strb	r3, [r7, #15]
          break;
 800465c:	e005      	b.n	800466a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800465e:	4b0a      	ldr	r3, [pc, #40]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0ef      	beq.n	800464a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800466a:	7bfb      	ldrb	r3, [r7, #15]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d106      	bne.n	800467e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004670:	4b05      	ldr	r3, [pc, #20]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	4903      	ldr	r1, [pc, #12]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800467a:	4313      	orrs	r3, r2
 800467c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800467e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40021000 	.word	0x40021000

0800468c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e095      	b.n	80047ca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d108      	bne.n	80046b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046ae:	d009      	beq.n	80046c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	61da      	str	r2, [r3, #28]
 80046b6:	e005      	b.n	80046c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7fc fe26 	bl	8001330 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004704:	d902      	bls.n	800470c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	e002      	b.n	8004712 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800470c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004710:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800471a:	d007      	beq.n	800472c <HAL_SPI_Init+0xa0>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004724:	d002      	beq.n	800472c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004764:	431a      	orrs	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800476e:	ea42 0103 	orr.w	r1, r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004776:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	0c1b      	lsrs	r3, r3, #16
 8004788:	f003 0204 	and.w	r2, r3, #4
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80047a8:	ea42 0103 	orr.w	r1, r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b082      	sub	sp, #8
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e049      	b.n	8004878 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d106      	bne.n	80047fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7fc fefd 	bl	80015f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2202      	movs	r2, #2
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3304      	adds	r3, #4
 800480e:	4619      	mov	r1, r3
 8004810:	4610      	mov	r0, r2
 8004812:	f000 fb75 	bl	8004f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	d001      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e03b      	b.n	8004910 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a19      	ldr	r2, [pc, #100]	@ (800491c <HAL_TIM_Base_Start_IT+0x9c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d009      	beq.n	80048ce <HAL_TIM_Base_Start_IT+0x4e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048c2:	d004      	beq.n	80048ce <HAL_TIM_Base_Start_IT+0x4e>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a15      	ldr	r2, [pc, #84]	@ (8004920 <HAL_TIM_Base_Start_IT+0xa0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d115      	bne.n	80048fa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	4b13      	ldr	r3, [pc, #76]	@ (8004924 <HAL_TIM_Base_Start_IT+0xa4>)
 80048d6:	4013      	ands	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b06      	cmp	r3, #6
 80048de:	d015      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x8c>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048e6:	d011      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f8:	e008      	b.n	800490c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f042 0201 	orr.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	e000      	b.n	800490e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	40012c00 	.word	0x40012c00
 8004920:	40014000 	.word	0x40014000
 8004924:	00010007 	.word	0x00010007

08004928 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e049      	b.n	80049ce <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d106      	bne.n	8004954 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fc fe72 	bl	8001638 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3304      	adds	r3, #4
 8004964:	4619      	mov	r1, r3
 8004966:	4610      	mov	r0, r2
 8004968:	f000 faca 	bl	8004f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d104      	bne.n	80049f6 <HAL_TIM_IC_Start_IT+0x1e>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	e023      	b.n	8004a3e <HAL_TIM_IC_Start_IT+0x66>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d104      	bne.n	8004a06 <HAL_TIM_IC_Start_IT+0x2e>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	e01b      	b.n	8004a3e <HAL_TIM_IC_Start_IT+0x66>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d104      	bne.n	8004a16 <HAL_TIM_IC_Start_IT+0x3e>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	e013      	b.n	8004a3e <HAL_TIM_IC_Start_IT+0x66>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b0c      	cmp	r3, #12
 8004a1a:	d104      	bne.n	8004a26 <HAL_TIM_IC_Start_IT+0x4e>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	e00b      	b.n	8004a3e <HAL_TIM_IC_Start_IT+0x66>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b10      	cmp	r3, #16
 8004a2a:	d104      	bne.n	8004a36 <HAL_TIM_IC_Start_IT+0x5e>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	e003      	b.n	8004a3e <HAL_TIM_IC_Start_IT+0x66>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d104      	bne.n	8004a50 <HAL_TIM_IC_Start_IT+0x78>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	e013      	b.n	8004a78 <HAL_TIM_IC_Start_IT+0xa0>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d104      	bne.n	8004a60 <HAL_TIM_IC_Start_IT+0x88>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	e00b      	b.n	8004a78 <HAL_TIM_IC_Start_IT+0xa0>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d104      	bne.n	8004a70 <HAL_TIM_IC_Start_IT+0x98>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	e003      	b.n	8004a78 <HAL_TIM_IC_Start_IT+0xa0>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a7a:	7bbb      	ldrb	r3, [r7, #14]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d102      	bne.n	8004a86 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a80:	7b7b      	ldrb	r3, [r7, #13]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d001      	beq.n	8004a8a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e0c9      	b.n	8004c1e <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d104      	bne.n	8004a9a <HAL_TIM_IC_Start_IT+0xc2>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a98:	e023      	b.n	8004ae2 <HAL_TIM_IC_Start_IT+0x10a>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d104      	bne.n	8004aaa <HAL_TIM_IC_Start_IT+0xd2>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aa8:	e01b      	b.n	8004ae2 <HAL_TIM_IC_Start_IT+0x10a>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d104      	bne.n	8004aba <HAL_TIM_IC_Start_IT+0xe2>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ab8:	e013      	b.n	8004ae2 <HAL_TIM_IC_Start_IT+0x10a>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b0c      	cmp	r3, #12
 8004abe:	d104      	bne.n	8004aca <HAL_TIM_IC_Start_IT+0xf2>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ac8:	e00b      	b.n	8004ae2 <HAL_TIM_IC_Start_IT+0x10a>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b10      	cmp	r3, #16
 8004ace:	d104      	bne.n	8004ada <HAL_TIM_IC_Start_IT+0x102>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ad8:	e003      	b.n	8004ae2 <HAL_TIM_IC_Start_IT+0x10a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d104      	bne.n	8004af2 <HAL_TIM_IC_Start_IT+0x11a>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004af0:	e013      	b.n	8004b1a <HAL_TIM_IC_Start_IT+0x142>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d104      	bne.n	8004b02 <HAL_TIM_IC_Start_IT+0x12a>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b00:	e00b      	b.n	8004b1a <HAL_TIM_IC_Start_IT+0x142>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d104      	bne.n	8004b12 <HAL_TIM_IC_Start_IT+0x13a>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b10:	e003      	b.n	8004b1a <HAL_TIM_IC_Start_IT+0x142>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2202      	movs	r2, #2
 8004b16:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b0c      	cmp	r3, #12
 8004b1e:	d841      	bhi.n	8004ba4 <HAL_TIM_IC_Start_IT+0x1cc>
 8004b20:	a201      	add	r2, pc, #4	@ (adr r2, 8004b28 <HAL_TIM_IC_Start_IT+0x150>)
 8004b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b26:	bf00      	nop
 8004b28:	08004b5d 	.word	0x08004b5d
 8004b2c:	08004ba5 	.word	0x08004ba5
 8004b30:	08004ba5 	.word	0x08004ba5
 8004b34:	08004ba5 	.word	0x08004ba5
 8004b38:	08004b6f 	.word	0x08004b6f
 8004b3c:	08004ba5 	.word	0x08004ba5
 8004b40:	08004ba5 	.word	0x08004ba5
 8004b44:	08004ba5 	.word	0x08004ba5
 8004b48:	08004b81 	.word	0x08004b81
 8004b4c:	08004ba5 	.word	0x08004ba5
 8004b50:	08004ba5 	.word	0x08004ba5
 8004b54:	08004ba5 	.word	0x08004ba5
 8004b58:	08004b93 	.word	0x08004b93
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0202 	orr.w	r2, r2, #2
 8004b6a:	60da      	str	r2, [r3, #12]
      break;
 8004b6c:	e01d      	b.n	8004baa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f042 0204 	orr.w	r2, r2, #4
 8004b7c:	60da      	str	r2, [r3, #12]
      break;
 8004b7e:	e014      	b.n	8004baa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0208 	orr.w	r2, r2, #8
 8004b8e:	60da      	str	r2, [r3, #12]
      break;
 8004b90:	e00b      	b.n	8004baa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0210 	orr.w	r2, r2, #16
 8004ba0:	60da      	str	r2, [r3, #12]
      break;
 8004ba2:	e002      	b.n	8004baa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ba8:	bf00      	nop
  }

  if (status == HAL_OK)
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d135      	bne.n	8004c1c <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	6839      	ldr	r1, [r7, #0]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fbb7 	bl	800532c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a19      	ldr	r2, [pc, #100]	@ (8004c28 <HAL_TIM_IC_Start_IT+0x250>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d009      	beq.n	8004bdc <HAL_TIM_IC_Start_IT+0x204>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bd0:	d004      	beq.n	8004bdc <HAL_TIM_IC_Start_IT+0x204>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a15      	ldr	r2, [pc, #84]	@ (8004c2c <HAL_TIM_IC_Start_IT+0x254>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d115      	bne.n	8004c08 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	4b13      	ldr	r3, [pc, #76]	@ (8004c30 <HAL_TIM_IC_Start_IT+0x258>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b06      	cmp	r3, #6
 8004bec:	d015      	beq.n	8004c1a <HAL_TIM_IC_Start_IT+0x242>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bf4:	d011      	beq.n	8004c1a <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f042 0201 	orr.w	r2, r2, #1
 8004c04:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c06:	e008      	b.n	8004c1a <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0201 	orr.w	r2, r2, #1
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	e000      	b.n	8004c1c <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	40012c00 	.word	0x40012c00
 8004c2c:	40014000 	.word	0x40014000
 8004c30:	00010007 	.word	0x00010007

08004c34 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d101      	bne.n	8004c52 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e088      	b.n	8004d64 <HAL_TIM_IC_ConfigChannel+0x130>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d11b      	bne.n	8004c98 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004c70:	f000 f9b6 	bl	8004fe0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699a      	ldr	r2, [r3, #24]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 020c 	bic.w	r2, r2, #12
 8004c82:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6999      	ldr	r1, [r3, #24]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	619a      	str	r2, [r3, #24]
 8004c96:	e060      	b.n	8004d5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d11c      	bne.n	8004cd8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004cae:	f000 fa1c 	bl	80050ea <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699a      	ldr	r2, [r3, #24]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004cc0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6999      	ldr	r1, [r3, #24]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	021a      	lsls	r2, r3, #8
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	619a      	str	r2, [r3, #24]
 8004cd6:	e040      	b.n	8004d5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d11b      	bne.n	8004d16 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004cee:	f000 fa69 	bl	80051c4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 020c 	bic.w	r2, r2, #12
 8004d00:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69d9      	ldr	r1, [r3, #28]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	61da      	str	r2, [r3, #28]
 8004d14:	e021      	b.n	8004d5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b0c      	cmp	r3, #12
 8004d1a:	d11c      	bne.n	8004d56 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004d2c:	f000 fa86 	bl	800523c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69da      	ldr	r2, [r3, #28]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004d3e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69d9      	ldr	r1, [r3, #28]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	021a      	lsls	r2, r3, #8
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	61da      	str	r2, [r3, #28]
 8004d54:	e001      	b.n	8004d5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_TIM_ConfigClockSource+0x1c>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e0b6      	b.n	8004ef6 <HAL_TIM_ConfigClockSource+0x18a>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004da6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004db2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dc4:	d03e      	beq.n	8004e44 <HAL_TIM_ConfigClockSource+0xd8>
 8004dc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dca:	f200 8087 	bhi.w	8004edc <HAL_TIM_ConfigClockSource+0x170>
 8004dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dd2:	f000 8086 	beq.w	8004ee2 <HAL_TIM_ConfigClockSource+0x176>
 8004dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dda:	d87f      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x170>
 8004ddc:	2b70      	cmp	r3, #112	@ 0x70
 8004dde:	d01a      	beq.n	8004e16 <HAL_TIM_ConfigClockSource+0xaa>
 8004de0:	2b70      	cmp	r3, #112	@ 0x70
 8004de2:	d87b      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x170>
 8004de4:	2b60      	cmp	r3, #96	@ 0x60
 8004de6:	d050      	beq.n	8004e8a <HAL_TIM_ConfigClockSource+0x11e>
 8004de8:	2b60      	cmp	r3, #96	@ 0x60
 8004dea:	d877      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x170>
 8004dec:	2b50      	cmp	r3, #80	@ 0x50
 8004dee:	d03c      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0xfe>
 8004df0:	2b50      	cmp	r3, #80	@ 0x50
 8004df2:	d873      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x170>
 8004df4:	2b40      	cmp	r3, #64	@ 0x40
 8004df6:	d058      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x13e>
 8004df8:	2b40      	cmp	r3, #64	@ 0x40
 8004dfa:	d86f      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x170>
 8004dfc:	2b30      	cmp	r3, #48	@ 0x30
 8004dfe:	d064      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x15e>
 8004e00:	2b30      	cmp	r3, #48	@ 0x30
 8004e02:	d86b      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x170>
 8004e04:	2b20      	cmp	r3, #32
 8004e06:	d060      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x15e>
 8004e08:	2b20      	cmp	r3, #32
 8004e0a:	d867      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x170>
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d05c      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x15e>
 8004e10:	2b10      	cmp	r3, #16
 8004e12:	d05a      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x15e>
 8004e14:	e062      	b.n	8004edc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e26:	f000 fa61 	bl	80052ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	609a      	str	r2, [r3, #8]
      break;
 8004e42:	e04f      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e54:	f000 fa4a 	bl	80052ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e66:	609a      	str	r2, [r3, #8]
      break;
 8004e68:	e03c      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e76:	461a      	mov	r2, r3
 8004e78:	f000 f908 	bl	800508c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2150      	movs	r1, #80	@ 0x50
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fa17 	bl	80052b6 <TIM_ITRx_SetConfig>
      break;
 8004e88:	e02c      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e96:	461a      	mov	r2, r3
 8004e98:	f000 f964 	bl	8005164 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2160      	movs	r1, #96	@ 0x60
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fa07 	bl	80052b6 <TIM_ITRx_SetConfig>
      break;
 8004ea8:	e01c      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	f000 f8e8 	bl	800508c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2140      	movs	r1, #64	@ 0x40
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 f9f7 	bl	80052b6 <TIM_ITRx_SetConfig>
      break;
 8004ec8:	e00c      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	f000 f9ee 	bl	80052b6 <TIM_ITRx_SetConfig>
      break;
 8004eda:	e003      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee0:	e000      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004ee2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a30      	ldr	r2, [pc, #192]	@ (8004fd4 <TIM_Base_SetConfig+0xd4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d003      	beq.n	8004f20 <TIM_Base_SetConfig+0x20>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f1e:	d108      	bne.n	8004f32 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a27      	ldr	r2, [pc, #156]	@ (8004fd4 <TIM_Base_SetConfig+0xd4>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d00b      	beq.n	8004f52 <TIM_Base_SetConfig+0x52>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f40:	d007      	beq.n	8004f52 <TIM_Base_SetConfig+0x52>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a24      	ldr	r2, [pc, #144]	@ (8004fd8 <TIM_Base_SetConfig+0xd8>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d003      	beq.n	8004f52 <TIM_Base_SetConfig+0x52>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a23      	ldr	r2, [pc, #140]	@ (8004fdc <TIM_Base_SetConfig+0xdc>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d108      	bne.n	8004f64 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a12      	ldr	r2, [pc, #72]	@ (8004fd4 <TIM_Base_SetConfig+0xd4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d007      	beq.n	8004fa0 <TIM_Base_SetConfig+0xa0>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a11      	ldr	r2, [pc, #68]	@ (8004fd8 <TIM_Base_SetConfig+0xd8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_Base_SetConfig+0xa0>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a10      	ldr	r2, [pc, #64]	@ (8004fdc <TIM_Base_SetConfig+0xdc>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d103      	bne.n	8004fa8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	691a      	ldr	r2, [r3, #16]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d105      	bne.n	8004fc6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f023 0201 	bic.w	r2, r3, #1
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	611a      	str	r2, [r3, #16]
  }
}
 8004fc6:	bf00      	nop
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40012c00 	.word	0x40012c00
 8004fd8:	40014000 	.word	0x40014000
 8004fdc:	40014400 	.word	0x40014400

08004fe0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
 8004fec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	f023 0201 	bic.w	r2, r3, #1
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4a1e      	ldr	r2, [pc, #120]	@ (8005084 <TIM_TI1_SetConfig+0xa4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d007      	beq.n	800501e <TIM_TI1_SetConfig+0x3e>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005014:	d003      	beq.n	800501e <TIM_TI1_SetConfig+0x3e>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4a1b      	ldr	r2, [pc, #108]	@ (8005088 <TIM_TI1_SetConfig+0xa8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d101      	bne.n	8005022 <TIM_TI1_SetConfig+0x42>
 800501e:	2301      	movs	r3, #1
 8005020:	e000      	b.n	8005024 <TIM_TI1_SetConfig+0x44>
 8005022:	2300      	movs	r3, #0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f023 0303 	bic.w	r3, r3, #3
 800502e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	e003      	b.n	8005042 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005048:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	b2db      	uxtb	r3, r3
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f023 030a 	bic.w	r3, r3, #10
 800505c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f003 030a 	and.w	r3, r3, #10
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40012c00 	.word	0x40012c00
 8005088:	40014000 	.word	0x40014000

0800508c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f023 0201 	bic.w	r2, r3, #1
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f023 030a 	bic.w	r3, r3, #10
 80050c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	621a      	str	r2, [r3, #32]
}
 80050de:	bf00      	nop
 80050e0:	371c      	adds	r7, #28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b087      	sub	sp, #28
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	607a      	str	r2, [r7, #4]
 80050f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	f023 0210 	bic.w	r2, r3, #16
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005128:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	031b      	lsls	r3, r3, #12
 800512e:	b29b      	uxth	r3, r3
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800513c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	621a      	str	r2, [r3, #32]
}
 8005158:	bf00      	nop
 800515a:	371c      	adds	r7, #28
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	f023 0210 	bic.w	r2, r3, #16
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800518e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	031b      	lsls	r3, r3, #12
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	621a      	str	r2, [r3, #32]
}
 80051b8:	bf00      	nop
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f023 0303 	bic.w	r3, r3, #3
 80051f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005200:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	b2db      	uxtb	r3, r3
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005214:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	621a      	str	r2, [r3, #32]
}
 8005230:	bf00      	nop
 8005232:	371c      	adds	r7, #28
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005268:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	021b      	lsls	r3, r3, #8
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800527a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	031b      	lsls	r3, r3, #12
 8005280:	b29b      	uxth	r3, r3
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800528e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	031b      	lsls	r3, r3, #12
 8005294:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	621a      	str	r2, [r3, #32]
}
 80052aa:	bf00      	nop
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b085      	sub	sp, #20
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f043 0307 	orr.w	r3, r3, #7
 80052d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	609a      	str	r2, [r3, #8]
}
 80052e0:	bf00      	nop
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005306:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	021a      	lsls	r2, r3, #8
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	431a      	orrs	r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4313      	orrs	r3, r2
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	609a      	str	r2, [r3, #8]
}
 8005320:	bf00      	nop
 8005322:	371c      	adds	r7, #28
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f003 031f 	and.w	r3, r3, #31
 800533e:	2201      	movs	r2, #1
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a1a      	ldr	r2, [r3, #32]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	43db      	mvns	r3, r3
 800534e:	401a      	ands	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a1a      	ldr	r2, [r3, #32]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f003 031f 	and.w	r3, r3, #31
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	fa01 f303 	lsl.w	r3, r1, r3
 8005364:	431a      	orrs	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
	...

08005378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005388:	2b01      	cmp	r3, #1
 800538a:	d101      	bne.n	8005390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800538c:	2302      	movs	r3, #2
 800538e:	e04f      	b.n	8005430 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a21      	ldr	r2, [pc, #132]	@ (800543c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d108      	bne.n	80053cc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80053c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a14      	ldr	r2, [pc, #80]	@ (800543c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d009      	beq.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053f8:	d004      	beq.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a10      	ldr	r2, [pc, #64]	@ (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d10c      	bne.n	800541e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800540a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	4313      	orrs	r3, r2
 8005414:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40014000 	.word	0x40014000

08005444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e040      	b.n	80054d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fc f956 	bl	8001718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2224      	movs	r2, #36	@ 0x24
 8005470:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0201 	bic.w	r2, r2, #1
 8005480:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fdc6 	bl	800601c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fb97 	bl	8005bc4 <UART_SetConfig>
 8005496:	4603      	mov	r3, r0
 8005498:	2b01      	cmp	r3, #1
 800549a:	d101      	bne.n	80054a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e01b      	b.n	80054d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f042 0201 	orr.w	r2, r2, #1
 80054ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fe45 	bl	8006160 <UART_CheckIdleState>
 80054d6:	4603      	mov	r3, r0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08a      	sub	sp, #40	@ 0x28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	4613      	mov	r3, r2
 80054ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054f4:	2b20      	cmp	r3, #32
 80054f6:	d137      	bne.n	8005568 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <HAL_UART_Receive_IT+0x24>
 80054fe:	88fb      	ldrh	r3, [r7, #6]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e030      	b.n	800556a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a18      	ldr	r2, [pc, #96]	@ (8005574 <HAL_UART_Receive_IT+0x94>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d01f      	beq.n	8005558 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d018      	beq.n	8005558 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	e853 3f00 	ldrex	r3, [r3]
 8005532:	613b      	str	r3, [r7, #16]
   return(result);
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800553a:	627b      	str	r3, [r7, #36]	@ 0x24
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	461a      	mov	r2, r3
 8005542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005544:	623b      	str	r3, [r7, #32]
 8005546:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005548:	69f9      	ldr	r1, [r7, #28]
 800554a:	6a3a      	ldr	r2, [r7, #32]
 800554c:	e841 2300 	strex	r3, r2, [r1]
 8005550:	61bb      	str	r3, [r7, #24]
   return(result);
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1e6      	bne.n	8005526 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005558:	88fb      	ldrh	r3, [r7, #6]
 800555a:	461a      	mov	r2, r3
 800555c:	68b9      	ldr	r1, [r7, #8]
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 ff14 	bl	800638c <UART_Start_Receive_IT>
 8005564:	4603      	mov	r3, r0
 8005566:	e000      	b.n	800556a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005568:	2302      	movs	r3, #2
  }
}
 800556a:	4618      	mov	r0, r3
 800556c:	3728      	adds	r7, #40	@ 0x28
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	40008000 	.word	0x40008000

08005578 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b0ba      	sub	sp, #232	@ 0xe8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800559e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80055a2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80055a6:	4013      	ands	r3, r2
 80055a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80055ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d115      	bne.n	80055e0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80055b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055b8:	f003 0320 	and.w	r3, r3, #32
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00f      	beq.n	80055e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d009      	beq.n	80055e0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 82ca 	beq.w	8005b6a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	4798      	blx	r3
      }
      return;
 80055de:	e2c4      	b.n	8005b6a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80055e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 8117 	beq.w	8005818 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80055ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d106      	bne.n	8005604 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80055f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80055fa:	4b85      	ldr	r3, [pc, #532]	@ (8005810 <HAL_UART_IRQHandler+0x298>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 810a 	beq.w	8005818 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	d011      	beq.n	8005634 <HAL_UART_IRQHandler+0xbc>
 8005610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00b      	beq.n	8005634 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2201      	movs	r2, #1
 8005622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800562a:	f043 0201 	orr.w	r2, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d011      	beq.n	8005664 <HAL_UART_IRQHandler+0xec>
 8005640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00b      	beq.n	8005664 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2202      	movs	r2, #2
 8005652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800565a:	f043 0204 	orr.w	r2, r3, #4
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d011      	beq.n	8005694 <HAL_UART_IRQHandler+0x11c>
 8005670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00b      	beq.n	8005694 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2204      	movs	r2, #4
 8005682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800568a:	f043 0202 	orr.w	r2, r3, #2
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005698:	f003 0308 	and.w	r3, r3, #8
 800569c:	2b00      	cmp	r3, #0
 800569e:	d017      	beq.n	80056d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056a4:	f003 0320 	and.w	r3, r3, #32
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d105      	bne.n	80056b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80056ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00b      	beq.n	80056d0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2208      	movs	r2, #8
 80056be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056c6:	f043 0208 	orr.w	r2, r3, #8
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80056d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d012      	beq.n	8005702 <HAL_UART_IRQHandler+0x18a>
 80056dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00c      	beq.n	8005702 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056f8:	f043 0220 	orr.w	r2, r3, #32
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 8230 	beq.w	8005b6e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800570e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005712:	f003 0320 	and.w	r3, r3, #32
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00d      	beq.n	8005736 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800571a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800573c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800574a:	2b40      	cmp	r3, #64	@ 0x40
 800574c:	d005      	beq.n	800575a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800574e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005752:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005756:	2b00      	cmp	r3, #0
 8005758:	d04f      	beq.n	80057fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fedc 	bl	8006518 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800576a:	2b40      	cmp	r3, #64	@ 0x40
 800576c:	d141      	bne.n	80057f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3308      	adds	r3, #8
 8005774:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005778:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005784:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800578c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3308      	adds	r3, #8
 8005796:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800579a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800579e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80057a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80057b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1d9      	bne.n	800576e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d013      	beq.n	80057ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057c6:	4a13      	ldr	r2, [pc, #76]	@ (8005814 <HAL_UART_IRQHandler+0x29c>)
 80057c8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fd fbfd 	bl	8002fce <HAL_DMA_Abort_IT>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d017      	beq.n	800580a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80057e4:	4610      	mov	r0, r2
 80057e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e8:	e00f      	b.n	800580a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f9d4 	bl	8005b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f0:	e00b      	b.n	800580a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f9d0 	bl	8005b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f8:	e007      	b.n	800580a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f9cc 	bl	8005b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005808:	e1b1      	b.n	8005b6e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800580a:	bf00      	nop
    return;
 800580c:	e1af      	b.n	8005b6e <HAL_UART_IRQHandler+0x5f6>
 800580e:	bf00      	nop
 8005810:	04000120 	.word	0x04000120
 8005814:	080065e1 	.word	0x080065e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800581c:	2b01      	cmp	r3, #1
 800581e:	f040 816a 	bne.w	8005af6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005826:	f003 0310 	and.w	r3, r3, #16
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 8163 	beq.w	8005af6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005834:	f003 0310 	and.w	r3, r3, #16
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 815c 	beq.w	8005af6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2210      	movs	r2, #16
 8005844:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005850:	2b40      	cmp	r3, #64	@ 0x40
 8005852:	f040 80d4 	bne.w	80059fe <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005862:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 80ad 	beq.w	80059c6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005876:	429a      	cmp	r2, r3
 8005878:	f080 80a5 	bcs.w	80059c6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005882:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b00      	cmp	r3, #0
 8005894:	f040 8086 	bne.w	80059a4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80058ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80058c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80058c6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80058ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80058d2:	e841 2300 	strex	r3, r2, [r1]
 80058d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80058da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1da      	bne.n	8005898 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	3308      	adds	r3, #8
 80058e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058ec:	e853 3f00 	ldrex	r3, [r3]
 80058f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80058f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058f4:	f023 0301 	bic.w	r3, r3, #1
 80058f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3308      	adds	r3, #8
 8005902:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005906:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800590a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800590e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005918:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e1      	bne.n	80058e2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3308      	adds	r3, #8
 8005924:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005926:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005928:	e853 3f00 	ldrex	r3, [r3]
 800592c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800592e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005930:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005934:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3308      	adds	r3, #8
 800593e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005942:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005944:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005948:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005950:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e3      	bne.n	800591e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2220      	movs	r2, #32
 800595a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005974:	f023 0310 	bic.w	r3, r3, #16
 8005978:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	461a      	mov	r2, r3
 8005982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005986:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005988:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800598c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e4      	bne.n	8005964 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fd fad7 	bl	8002f52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	4619      	mov	r1, r3
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f8f4 	bl	8005bac <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80059c4:	e0d5      	b.n	8005b72 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80059cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059d0:	429a      	cmp	r2, r3
 80059d2:	f040 80ce 	bne.w	8005b72 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b20      	cmp	r3, #32
 80059e4:	f040 80c5 	bne.w	8005b72 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80059f4:	4619      	mov	r1, r3
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f8d8 	bl	8005bac <HAL_UARTEx_RxEventCallback>
      return;
 80059fc:	e0b9      	b.n	8005b72 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 80ab 	beq.w	8005b76 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005a20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 80a6 	beq.w	8005b76 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a32:	e853 3f00 	ldrex	r3, [r3]
 8005a36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	461a      	mov	r2, r3
 8005a48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a54:	e841 2300 	strex	r3, r2, [r1]
 8005a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e4      	bne.n	8005a2a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3308      	adds	r3, #8
 8005a66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	623b      	str	r3, [r7, #32]
   return(result);
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	f023 0301 	bic.w	r3, r3, #1
 8005a76:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3308      	adds	r3, #8
 8005a80:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a84:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a8c:	e841 2300 	strex	r3, r2, [r1]
 8005a90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1e3      	bne.n	8005a60 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f023 0310 	bic.w	r3, r3, #16
 8005ac0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005ace:	61fb      	str	r3, [r7, #28]
 8005ad0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad2:	69b9      	ldr	r1, [r7, #24]
 8005ad4:	69fa      	ldr	r2, [r7, #28]
 8005ad6:	e841 2300 	strex	r3, r2, [r1]
 8005ada:	617b      	str	r3, [r7, #20]
   return(result);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e4      	bne.n	8005aac <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ae8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005aec:	4619      	mov	r1, r3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f85c 	bl	8005bac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005af4:	e03f      	b.n	8005b76 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00e      	beq.n	8005b20 <HAL_UART_IRQHandler+0x5a8>
 8005b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d008      	beq.n	8005b20 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005b16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 ff5d 	bl	80069d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b1e:	e02d      	b.n	8005b7c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00e      	beq.n	8005b4a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d008      	beq.n	8005b4a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01c      	beq.n	8005b7a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	4798      	blx	r3
    }
    return;
 8005b48:	e017      	b.n	8005b7a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d012      	beq.n	8005b7c <HAL_UART_IRQHandler+0x604>
 8005b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00c      	beq.n	8005b7c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fd52 	bl	800660c <UART_EndTransmit_IT>
    return;
 8005b68:	e008      	b.n	8005b7c <HAL_UART_IRQHandler+0x604>
      return;
 8005b6a:	bf00      	nop
 8005b6c:	e006      	b.n	8005b7c <HAL_UART_IRQHandler+0x604>
    return;
 8005b6e:	bf00      	nop
 8005b70:	e004      	b.n	8005b7c <HAL_UART_IRQHandler+0x604>
      return;
 8005b72:	bf00      	nop
 8005b74:	e002      	b.n	8005b7c <HAL_UART_IRQHandler+0x604>
      return;
 8005b76:	bf00      	nop
 8005b78:	e000      	b.n	8005b7c <HAL_UART_IRQHandler+0x604>
    return;
 8005b7a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005b7c:	37e8      	adds	r7, #232	@ 0xe8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop

08005b84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bc8:	b08a      	sub	sp, #40	@ 0x28
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	431a      	orrs	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	4bb4      	ldr	r3, [pc, #720]	@ (8005ec4 <UART_SetConfig+0x300>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	6812      	ldr	r2, [r2, #0]
 8005bfa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4aa9      	ldr	r2, [pc, #676]	@ (8005ec8 <UART_SetConfig+0x304>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d004      	beq.n	8005c30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c40:	430a      	orrs	r2, r1
 8005c42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4aa0      	ldr	r2, [pc, #640]	@ (8005ecc <UART_SetConfig+0x308>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d126      	bne.n	8005c9c <UART_SetConfig+0xd8>
 8005c4e:	4ba0      	ldr	r3, [pc, #640]	@ (8005ed0 <UART_SetConfig+0x30c>)
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c54:	f003 0303 	and.w	r3, r3, #3
 8005c58:	2b03      	cmp	r3, #3
 8005c5a:	d81b      	bhi.n	8005c94 <UART_SetConfig+0xd0>
 8005c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c64 <UART_SetConfig+0xa0>)
 8005c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c62:	bf00      	nop
 8005c64:	08005c75 	.word	0x08005c75
 8005c68:	08005c85 	.word	0x08005c85
 8005c6c:	08005c7d 	.word	0x08005c7d
 8005c70:	08005c8d 	.word	0x08005c8d
 8005c74:	2301      	movs	r3, #1
 8005c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c7a:	e080      	b.n	8005d7e <UART_SetConfig+0x1ba>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c82:	e07c      	b.n	8005d7e <UART_SetConfig+0x1ba>
 8005c84:	2304      	movs	r3, #4
 8005c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c8a:	e078      	b.n	8005d7e <UART_SetConfig+0x1ba>
 8005c8c:	2308      	movs	r3, #8
 8005c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c92:	e074      	b.n	8005d7e <UART_SetConfig+0x1ba>
 8005c94:	2310      	movs	r3, #16
 8005c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c9a:	e070      	b.n	8005d7e <UART_SetConfig+0x1ba>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a8c      	ldr	r2, [pc, #560]	@ (8005ed4 <UART_SetConfig+0x310>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d138      	bne.n	8005d18 <UART_SetConfig+0x154>
 8005ca6:	4b8a      	ldr	r3, [pc, #552]	@ (8005ed0 <UART_SetConfig+0x30c>)
 8005ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cac:	f003 030c 	and.w	r3, r3, #12
 8005cb0:	2b0c      	cmp	r3, #12
 8005cb2:	d82d      	bhi.n	8005d10 <UART_SetConfig+0x14c>
 8005cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8005cbc <UART_SetConfig+0xf8>)
 8005cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cba:	bf00      	nop
 8005cbc:	08005cf1 	.word	0x08005cf1
 8005cc0:	08005d11 	.word	0x08005d11
 8005cc4:	08005d11 	.word	0x08005d11
 8005cc8:	08005d11 	.word	0x08005d11
 8005ccc:	08005d01 	.word	0x08005d01
 8005cd0:	08005d11 	.word	0x08005d11
 8005cd4:	08005d11 	.word	0x08005d11
 8005cd8:	08005d11 	.word	0x08005d11
 8005cdc:	08005cf9 	.word	0x08005cf9
 8005ce0:	08005d11 	.word	0x08005d11
 8005ce4:	08005d11 	.word	0x08005d11
 8005ce8:	08005d11 	.word	0x08005d11
 8005cec:	08005d09 	.word	0x08005d09
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cf6:	e042      	b.n	8005d7e <UART_SetConfig+0x1ba>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cfe:	e03e      	b.n	8005d7e <UART_SetConfig+0x1ba>
 8005d00:	2304      	movs	r3, #4
 8005d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d06:	e03a      	b.n	8005d7e <UART_SetConfig+0x1ba>
 8005d08:	2308      	movs	r3, #8
 8005d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d0e:	e036      	b.n	8005d7e <UART_SetConfig+0x1ba>
 8005d10:	2310      	movs	r3, #16
 8005d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d16:	e032      	b.n	8005d7e <UART_SetConfig+0x1ba>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a6a      	ldr	r2, [pc, #424]	@ (8005ec8 <UART_SetConfig+0x304>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d12a      	bne.n	8005d78 <UART_SetConfig+0x1b4>
 8005d22:	4b6b      	ldr	r3, [pc, #428]	@ (8005ed0 <UART_SetConfig+0x30c>)
 8005d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005d2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d30:	d01a      	beq.n	8005d68 <UART_SetConfig+0x1a4>
 8005d32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d36:	d81b      	bhi.n	8005d70 <UART_SetConfig+0x1ac>
 8005d38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d3c:	d00c      	beq.n	8005d58 <UART_SetConfig+0x194>
 8005d3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d42:	d815      	bhi.n	8005d70 <UART_SetConfig+0x1ac>
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <UART_SetConfig+0x18c>
 8005d48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d4c:	d008      	beq.n	8005d60 <UART_SetConfig+0x19c>
 8005d4e:	e00f      	b.n	8005d70 <UART_SetConfig+0x1ac>
 8005d50:	2300      	movs	r3, #0
 8005d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d56:	e012      	b.n	8005d7e <UART_SetConfig+0x1ba>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d5e:	e00e      	b.n	8005d7e <UART_SetConfig+0x1ba>
 8005d60:	2304      	movs	r3, #4
 8005d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d66:	e00a      	b.n	8005d7e <UART_SetConfig+0x1ba>
 8005d68:	2308      	movs	r3, #8
 8005d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d6e:	e006      	b.n	8005d7e <UART_SetConfig+0x1ba>
 8005d70:	2310      	movs	r3, #16
 8005d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d76:	e002      	b.n	8005d7e <UART_SetConfig+0x1ba>
 8005d78:	2310      	movs	r3, #16
 8005d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a51      	ldr	r2, [pc, #324]	@ (8005ec8 <UART_SetConfig+0x304>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d17a      	bne.n	8005e7e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d824      	bhi.n	8005dda <UART_SetConfig+0x216>
 8005d90:	a201      	add	r2, pc, #4	@ (adr r2, 8005d98 <UART_SetConfig+0x1d4>)
 8005d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d96:	bf00      	nop
 8005d98:	08005dbd 	.word	0x08005dbd
 8005d9c:	08005ddb 	.word	0x08005ddb
 8005da0:	08005dc5 	.word	0x08005dc5
 8005da4:	08005ddb 	.word	0x08005ddb
 8005da8:	08005dcb 	.word	0x08005dcb
 8005dac:	08005ddb 	.word	0x08005ddb
 8005db0:	08005ddb 	.word	0x08005ddb
 8005db4:	08005ddb 	.word	0x08005ddb
 8005db8:	08005dd3 	.word	0x08005dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dbc:	f7fe f8f2 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
 8005dc0:	61f8      	str	r0, [r7, #28]
        break;
 8005dc2:	e010      	b.n	8005de6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dc4:	4b44      	ldr	r3, [pc, #272]	@ (8005ed8 <UART_SetConfig+0x314>)
 8005dc6:	61fb      	str	r3, [r7, #28]
        break;
 8005dc8:	e00d      	b.n	8005de6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dca:	f7fe f853 	bl	8003e74 <HAL_RCC_GetSysClockFreq>
 8005dce:	61f8      	str	r0, [r7, #28]
        break;
 8005dd0:	e009      	b.n	8005de6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dd6:	61fb      	str	r3, [r7, #28]
        break;
 8005dd8:	e005      	b.n	8005de6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005de4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 8107 	beq.w	8005ffc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	4613      	mov	r3, r2
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	4413      	add	r3, r2
 8005df8:	69fa      	ldr	r2, [r7, #28]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d305      	bcc.n	8005e0a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e04:	69fa      	ldr	r2, [r7, #28]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d903      	bls.n	8005e12 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005e10:	e0f4      	b.n	8005ffc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	2200      	movs	r2, #0
 8005e16:	461c      	mov	r4, r3
 8005e18:	4615      	mov	r5, r2
 8005e1a:	f04f 0200 	mov.w	r2, #0
 8005e1e:	f04f 0300 	mov.w	r3, #0
 8005e22:	022b      	lsls	r3, r5, #8
 8005e24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005e28:	0222      	lsls	r2, r4, #8
 8005e2a:	68f9      	ldr	r1, [r7, #12]
 8005e2c:	6849      	ldr	r1, [r1, #4]
 8005e2e:	0849      	lsrs	r1, r1, #1
 8005e30:	2000      	movs	r0, #0
 8005e32:	4688      	mov	r8, r1
 8005e34:	4681      	mov	r9, r0
 8005e36:	eb12 0a08 	adds.w	sl, r2, r8
 8005e3a:	eb43 0b09 	adc.w	fp, r3, r9
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	603b      	str	r3, [r7, #0]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e4c:	4650      	mov	r0, sl
 8005e4e:	4659      	mov	r1, fp
 8005e50:	f7fa fddc 	bl	8000a0c <__aeabi_uldivmod>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4613      	mov	r3, r2
 8005e5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e62:	d308      	bcc.n	8005e76 <UART_SetConfig+0x2b2>
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e6a:	d204      	bcs.n	8005e76 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	60da      	str	r2, [r3, #12]
 8005e74:	e0c2      	b.n	8005ffc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005e7c:	e0be      	b.n	8005ffc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e86:	d16a      	bne.n	8005f5e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005e88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d834      	bhi.n	8005efa <UART_SetConfig+0x336>
 8005e90:	a201      	add	r2, pc, #4	@ (adr r2, 8005e98 <UART_SetConfig+0x2d4>)
 8005e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e96:	bf00      	nop
 8005e98:	08005ebd 	.word	0x08005ebd
 8005e9c:	08005edd 	.word	0x08005edd
 8005ea0:	08005ee5 	.word	0x08005ee5
 8005ea4:	08005efb 	.word	0x08005efb
 8005ea8:	08005eeb 	.word	0x08005eeb
 8005eac:	08005efb 	.word	0x08005efb
 8005eb0:	08005efb 	.word	0x08005efb
 8005eb4:	08005efb 	.word	0x08005efb
 8005eb8:	08005ef3 	.word	0x08005ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ebc:	f7fe f872 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
 8005ec0:	61f8      	str	r0, [r7, #28]
        break;
 8005ec2:	e020      	b.n	8005f06 <UART_SetConfig+0x342>
 8005ec4:	efff69f3 	.word	0xefff69f3
 8005ec8:	40008000 	.word	0x40008000
 8005ecc:	40013800 	.word	0x40013800
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	40004400 	.word	0x40004400
 8005ed8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005edc:	f7fe f878 	bl	8003fd0 <HAL_RCC_GetPCLK2Freq>
 8005ee0:	61f8      	str	r0, [r7, #28]
        break;
 8005ee2:	e010      	b.n	8005f06 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ee4:	4b4c      	ldr	r3, [pc, #304]	@ (8006018 <UART_SetConfig+0x454>)
 8005ee6:	61fb      	str	r3, [r7, #28]
        break;
 8005ee8:	e00d      	b.n	8005f06 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eea:	f7fd ffc3 	bl	8003e74 <HAL_RCC_GetSysClockFreq>
 8005eee:	61f8      	str	r0, [r7, #28]
        break;
 8005ef0:	e009      	b.n	8005f06 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ef2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ef6:	61fb      	str	r3, [r7, #28]
        break;
 8005ef8:	e005      	b.n	8005f06 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d077      	beq.n	8005ffc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	005a      	lsls	r2, r3, #1
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	085b      	lsrs	r3, r3, #1
 8005f16:	441a      	add	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f20:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	2b0f      	cmp	r3, #15
 8005f26:	d916      	bls.n	8005f56 <UART_SetConfig+0x392>
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f2e:	d212      	bcs.n	8005f56 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	f023 030f 	bic.w	r3, r3, #15
 8005f38:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	085b      	lsrs	r3, r3, #1
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	f003 0307 	and.w	r3, r3, #7
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	8afb      	ldrh	r3, [r7, #22]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	8afa      	ldrh	r2, [r7, #22]
 8005f52:	60da      	str	r2, [r3, #12]
 8005f54:	e052      	b.n	8005ffc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f5c:	e04e      	b.n	8005ffc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	d827      	bhi.n	8005fb6 <UART_SetConfig+0x3f2>
 8005f66:	a201      	add	r2, pc, #4	@ (adr r2, 8005f6c <UART_SetConfig+0x3a8>)
 8005f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6c:	08005f91 	.word	0x08005f91
 8005f70:	08005f99 	.word	0x08005f99
 8005f74:	08005fa1 	.word	0x08005fa1
 8005f78:	08005fb7 	.word	0x08005fb7
 8005f7c:	08005fa7 	.word	0x08005fa7
 8005f80:	08005fb7 	.word	0x08005fb7
 8005f84:	08005fb7 	.word	0x08005fb7
 8005f88:	08005fb7 	.word	0x08005fb7
 8005f8c:	08005faf 	.word	0x08005faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f90:	f7fe f808 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
 8005f94:	61f8      	str	r0, [r7, #28]
        break;
 8005f96:	e014      	b.n	8005fc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f98:	f7fe f81a 	bl	8003fd0 <HAL_RCC_GetPCLK2Freq>
 8005f9c:	61f8      	str	r0, [r7, #28]
        break;
 8005f9e:	e010      	b.n	8005fc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8006018 <UART_SetConfig+0x454>)
 8005fa2:	61fb      	str	r3, [r7, #28]
        break;
 8005fa4:	e00d      	b.n	8005fc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fa6:	f7fd ff65 	bl	8003e74 <HAL_RCC_GetSysClockFreq>
 8005faa:	61f8      	str	r0, [r7, #28]
        break;
 8005fac:	e009      	b.n	8005fc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fb2:	61fb      	str	r3, [r7, #28]
        break;
 8005fb4:	e005      	b.n	8005fc2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005fc0:	bf00      	nop
    }

    if (pclk != 0U)
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d019      	beq.n	8005ffc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	085a      	lsrs	r2, r3, #1
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	441a      	add	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fda:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	2b0f      	cmp	r3, #15
 8005fe0:	d909      	bls.n	8005ff6 <UART_SetConfig+0x432>
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fe8:	d205      	bcs.n	8005ff6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60da      	str	r2, [r3, #12]
 8005ff4:	e002      	b.n	8005ffc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006008:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800600c:	4618      	mov	r0, r3
 800600e:	3728      	adds	r7, #40	@ 0x28
 8006010:	46bd      	mov	sp, r7
 8006012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006016:	bf00      	nop
 8006018:	00f42400 	.word	0x00f42400

0800601c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006028:	f003 0308 	and.w	r3, r3, #8
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00a      	beq.n	8006046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	430a      	orrs	r2, r1
 8006044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00a      	beq.n	8006068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	430a      	orrs	r2, r1
 8006066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00a      	beq.n	800608a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608e:	f003 0304 	and.w	r3, r3, #4
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00a      	beq.n	80060ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d01a      	beq.n	8006132 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800611a:	d10a      	bne.n	8006132 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00a      	beq.n	8006154 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	605a      	str	r2, [r3, #4]
  }
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b098      	sub	sp, #96	@ 0x60
 8006164:	af02      	add	r7, sp, #8
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006170:	f7fb fbc4 	bl	80018fc <HAL_GetTick>
 8006174:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0308 	and.w	r3, r3, #8
 8006180:	2b08      	cmp	r3, #8
 8006182:	d12e      	bne.n	80061e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006184:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800618c:	2200      	movs	r2, #0
 800618e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f88c 	bl	80062b0 <UART_WaitOnFlagUntilTimeout>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d021      	beq.n	80061e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a6:	e853 3f00 	ldrex	r3, [r3]
 80061aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	461a      	mov	r2, r3
 80061ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80061be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061c4:	e841 2300 	strex	r3, r2, [r1]
 80061c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1e6      	bne.n	800619e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2220      	movs	r2, #32
 80061d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e062      	b.n	80062a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d149      	bne.n	8006284 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061f8:	2200      	movs	r2, #0
 80061fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f856 	bl	80062b0 <UART_WaitOnFlagUntilTimeout>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d03c      	beq.n	8006284 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006212:	e853 3f00 	ldrex	r3, [r3]
 8006216:	623b      	str	r3, [r7, #32]
   return(result);
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800621e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	461a      	mov	r2, r3
 8006226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006228:	633b      	str	r3, [r7, #48]	@ 0x30
 800622a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800622e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006230:	e841 2300 	strex	r3, r2, [r1]
 8006234:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1e6      	bne.n	800620a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3308      	adds	r3, #8
 8006242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	e853 3f00 	ldrex	r3, [r3]
 800624a:	60fb      	str	r3, [r7, #12]
   return(result);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 0301 	bic.w	r3, r3, #1
 8006252:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3308      	adds	r3, #8
 800625a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800625c:	61fa      	str	r2, [r7, #28]
 800625e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006260:	69b9      	ldr	r1, [r7, #24]
 8006262:	69fa      	ldr	r2, [r7, #28]
 8006264:	e841 2300 	strex	r3, r2, [r1]
 8006268:	617b      	str	r3, [r7, #20]
   return(result);
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1e5      	bne.n	800623c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2220      	movs	r2, #32
 8006274:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e011      	b.n	80062a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2220      	movs	r2, #32
 8006288:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2220      	movs	r2, #32
 800628e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3758      	adds	r7, #88	@ 0x58
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	603b      	str	r3, [r7, #0]
 80062bc:	4613      	mov	r3, r2
 80062be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062c0:	e04f      	b.n	8006362 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062c8:	d04b      	beq.n	8006362 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ca:	f7fb fb17 	bl	80018fc <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d302      	bcc.n	80062e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e04e      	b.n	8006382 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0304 	and.w	r3, r3, #4
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d037      	beq.n	8006362 <UART_WaitOnFlagUntilTimeout+0xb2>
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2b80      	cmp	r3, #128	@ 0x80
 80062f6:	d034      	beq.n	8006362 <UART_WaitOnFlagUntilTimeout+0xb2>
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2b40      	cmp	r3, #64	@ 0x40
 80062fc:	d031      	beq.n	8006362 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	f003 0308 	and.w	r3, r3, #8
 8006308:	2b08      	cmp	r3, #8
 800630a:	d110      	bne.n	800632e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2208      	movs	r2, #8
 8006312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 f8ff 	bl	8006518 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2208      	movs	r2, #8
 800631e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e029      	b.n	8006382 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006338:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800633c:	d111      	bne.n	8006362 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006346:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 f8e5 	bl	8006518 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2220      	movs	r2, #32
 8006352:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e00f      	b.n	8006382 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	69da      	ldr	r2, [r3, #28]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	4013      	ands	r3, r2
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	429a      	cmp	r2, r3
 8006370:	bf0c      	ite	eq
 8006372:	2301      	moveq	r3, #1
 8006374:	2300      	movne	r3, #0
 8006376:	b2db      	uxtb	r3, r3
 8006378:	461a      	mov	r2, r3
 800637a:	79fb      	ldrb	r3, [r7, #7]
 800637c:	429a      	cmp	r2, r3
 800637e:	d0a0      	beq.n	80062c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
	...

0800638c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800638c:	b480      	push	{r7}
 800638e:	b097      	sub	sp, #92	@ 0x5c
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	4613      	mov	r3, r2
 8006398:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	88fa      	ldrh	r2, [r7, #6]
 80063a4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	88fa      	ldrh	r2, [r7, #6]
 80063ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063be:	d10e      	bne.n	80063de <UART_Start_Receive_IT+0x52>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d105      	bne.n	80063d4 <UART_Start_Receive_IT+0x48>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80063ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80063d2:	e02d      	b.n	8006430 <UART_Start_Receive_IT+0xa4>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	22ff      	movs	r2, #255	@ 0xff
 80063d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80063dc:	e028      	b.n	8006430 <UART_Start_Receive_IT+0xa4>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d10d      	bne.n	8006402 <UART_Start_Receive_IT+0x76>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d104      	bne.n	80063f8 <UART_Start_Receive_IT+0x6c>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	22ff      	movs	r2, #255	@ 0xff
 80063f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80063f6:	e01b      	b.n	8006430 <UART_Start_Receive_IT+0xa4>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	227f      	movs	r2, #127	@ 0x7f
 80063fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006400:	e016      	b.n	8006430 <UART_Start_Receive_IT+0xa4>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800640a:	d10d      	bne.n	8006428 <UART_Start_Receive_IT+0x9c>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d104      	bne.n	800641e <UART_Start_Receive_IT+0x92>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	227f      	movs	r2, #127	@ 0x7f
 8006418:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800641c:	e008      	b.n	8006430 <UART_Start_Receive_IT+0xa4>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	223f      	movs	r2, #63	@ 0x3f
 8006422:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006426:	e003      	b.n	8006430 <UART_Start_Receive_IT+0xa4>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2222      	movs	r2, #34	@ 0x22
 800643c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3308      	adds	r3, #8
 8006446:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800644a:	e853 3f00 	ldrex	r3, [r3]
 800644e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006452:	f043 0301 	orr.w	r3, r3, #1
 8006456:	657b      	str	r3, [r7, #84]	@ 0x54
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3308      	adds	r3, #8
 800645e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006460:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006462:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006464:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006466:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006468:	e841 2300 	strex	r3, r2, [r1]
 800646c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800646e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1e5      	bne.n	8006440 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800647c:	d107      	bne.n	800648e <UART_Start_Receive_IT+0x102>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d103      	bne.n	800648e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	4a21      	ldr	r2, [pc, #132]	@ (8006510 <UART_Start_Receive_IT+0x184>)
 800648a:	669a      	str	r2, [r3, #104]	@ 0x68
 800648c:	e002      	b.n	8006494 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4a20      	ldr	r2, [pc, #128]	@ (8006514 <UART_Start_Receive_IT+0x188>)
 8006492:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d019      	beq.n	80064d0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a4:	e853 3f00 	ldrex	r3, [r3]
 80064a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ac:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80064b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	461a      	mov	r2, r3
 80064b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80064bc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80064c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064c2:	e841 2300 	strex	r3, r2, [r1]
 80064c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80064c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1e6      	bne.n	800649c <UART_Start_Receive_IT+0x110>
 80064ce:	e018      	b.n	8006502 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	e853 3f00 	ldrex	r3, [r3]
 80064dc:	613b      	str	r3, [r7, #16]
   return(result);
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f043 0320 	orr.w	r3, r3, #32
 80064e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	461a      	mov	r2, r3
 80064ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064ee:	623b      	str	r3, [r7, #32]
 80064f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f2:	69f9      	ldr	r1, [r7, #28]
 80064f4:	6a3a      	ldr	r2, [r7, #32]
 80064f6:	e841 2300 	strex	r3, r2, [r1]
 80064fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1e6      	bne.n	80064d0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	375c      	adds	r7, #92	@ 0x5c
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	0800681d 	.word	0x0800681d
 8006514:	08006661 	.word	0x08006661

08006518 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006518:	b480      	push	{r7}
 800651a:	b095      	sub	sp, #84	@ 0x54
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006528:	e853 3f00 	ldrex	r3, [r3]
 800652c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800652e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006530:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006534:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800653e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006540:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006542:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006544:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006546:	e841 2300 	strex	r3, r2, [r1]
 800654a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800654c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1e6      	bne.n	8006520 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3308      	adds	r3, #8
 8006558:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	61fb      	str	r3, [r7, #28]
   return(result);
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	f023 0301 	bic.w	r3, r3, #1
 8006568:	64bb      	str	r3, [r7, #72]	@ 0x48
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3308      	adds	r3, #8
 8006570:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006572:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006574:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006576:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006578:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800657a:	e841 2300 	strex	r3, r2, [r1]
 800657e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1e5      	bne.n	8006552 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800658a:	2b01      	cmp	r3, #1
 800658c:	d118      	bne.n	80065c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	e853 3f00 	ldrex	r3, [r3]
 800659a:	60bb      	str	r3, [r7, #8]
   return(result);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f023 0310 	bic.w	r3, r3, #16
 80065a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065ac:	61bb      	str	r3, [r7, #24]
 80065ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b0:	6979      	ldr	r1, [r7, #20]
 80065b2:	69ba      	ldr	r2, [r7, #24]
 80065b4:	e841 2300 	strex	r3, r2, [r1]
 80065b8:	613b      	str	r3, [r7, #16]
   return(result);
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1e6      	bne.n	800658e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2220      	movs	r2, #32
 80065c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80065d4:	bf00      	nop
 80065d6:	3754      	adds	r7, #84	@ 0x54
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f7ff faca 	bl	8005b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006604:	bf00      	nop
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	e853 3f00 	ldrex	r3, [r3]
 8006620:	60bb      	str	r3, [r7, #8]
   return(result);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006628:	61fb      	str	r3, [r7, #28]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	61bb      	str	r3, [r7, #24]
 8006634:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006636:	6979      	ldr	r1, [r7, #20]
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	e841 2300 	strex	r3, r2, [r1]
 800663e:	613b      	str	r3, [r7, #16]
   return(result);
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1e6      	bne.n	8006614 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2220      	movs	r2, #32
 800664a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7ff fa96 	bl	8005b84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006658:	bf00      	nop
 800665a:	3720      	adds	r7, #32
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b09c      	sub	sp, #112	@ 0x70
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800666e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006678:	2b22      	cmp	r3, #34	@ 0x22
 800667a:	f040 80be 	bne.w	80067fa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006684:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006688:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800668c:	b2d9      	uxtb	r1, r3
 800668e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006692:	b2da      	uxtb	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006698:	400a      	ands	r2, r1
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	3b01      	subs	r3, #1
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f040 80a3 	bne.w	800680e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80066f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e6      	bne.n	80066c8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3308      	adds	r3, #8
 8006700:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006704:	e853 3f00 	ldrex	r3, [r3]
 8006708:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800670a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800670c:	f023 0301 	bic.w	r3, r3, #1
 8006710:	667b      	str	r3, [r7, #100]	@ 0x64
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3308      	adds	r3, #8
 8006718:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800671a:	647a      	str	r2, [r7, #68]	@ 0x44
 800671c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006720:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006722:	e841 2300 	strex	r3, r2, [r1]
 8006726:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e5      	bne.n	80066fa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2220      	movs	r2, #32
 8006732:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a34      	ldr	r2, [pc, #208]	@ (8006818 <UART_RxISR_8BIT+0x1b8>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d01f      	beq.n	800678c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d018      	beq.n	800678c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006762:	e853 3f00 	ldrex	r3, [r3]
 8006766:	623b      	str	r3, [r7, #32]
   return(result);
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800676e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	461a      	mov	r2, r3
 8006776:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006778:	633b      	str	r3, [r7, #48]	@ 0x30
 800677a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800677e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006780:	e841 2300 	strex	r3, r2, [r1]
 8006784:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1e6      	bne.n	800675a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006790:	2b01      	cmp	r3, #1
 8006792:	d12e      	bne.n	80067f2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	e853 3f00 	ldrex	r3, [r3]
 80067a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0310 	bic.w	r3, r3, #16
 80067ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	461a      	mov	r2, r3
 80067b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067b8:	61fb      	str	r3, [r7, #28]
 80067ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	69b9      	ldr	r1, [r7, #24]
 80067be:	69fa      	ldr	r2, [r7, #28]
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	617b      	str	r3, [r7, #20]
   return(result);
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e6      	bne.n	800679a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	f003 0310 	and.w	r3, r3, #16
 80067d6:	2b10      	cmp	r3, #16
 80067d8:	d103      	bne.n	80067e2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2210      	movs	r2, #16
 80067e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80067e8:	4619      	mov	r1, r3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7ff f9de 	bl	8005bac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80067f0:	e00d      	b.n	800680e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7fa fd12 	bl	800121c <HAL_UART_RxCpltCallback>
}
 80067f8:	e009      	b.n	800680e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	8b1b      	ldrh	r3, [r3, #24]
 8006800:	b29a      	uxth	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0208 	orr.w	r2, r2, #8
 800680a:	b292      	uxth	r2, r2
 800680c:	831a      	strh	r2, [r3, #24]
}
 800680e:	bf00      	nop
 8006810:	3770      	adds	r7, #112	@ 0x70
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	40008000 	.word	0x40008000

0800681c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b09c      	sub	sp, #112	@ 0x70
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800682a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006834:	2b22      	cmp	r3, #34	@ 0x22
 8006836:	f040 80be 	bne.w	80069b6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006840:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006848:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800684a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800684e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006852:	4013      	ands	r3, r2
 8006854:	b29a      	uxth	r2, r3
 8006856:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006858:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800685e:	1c9a      	adds	r2, r3, #2
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800686a:	b29b      	uxth	r3, r3
 800686c:	3b01      	subs	r3, #1
 800686e:	b29a      	uxth	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800687c:	b29b      	uxth	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	f040 80a3 	bne.w	80069ca <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006892:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006894:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006898:	667b      	str	r3, [r7, #100]	@ 0x64
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	461a      	mov	r2, r3
 80068a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80068a4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80068a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80068aa:	e841 2300 	strex	r3, r2, [r1]
 80068ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80068b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e6      	bne.n	8006884 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3308      	adds	r3, #8
 80068bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c0:	e853 3f00 	ldrex	r3, [r3]
 80068c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c8:	f023 0301 	bic.w	r3, r3, #1
 80068cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3308      	adds	r3, #8
 80068d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80068d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80068d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068de:	e841 2300 	strex	r3, r2, [r1]
 80068e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1e5      	bne.n	80068b6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2220      	movs	r2, #32
 80068ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a34      	ldr	r2, [pc, #208]	@ (80069d4 <UART_RxISR_16BIT+0x1b8>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d01f      	beq.n	8006948 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d018      	beq.n	8006948 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	e853 3f00 	ldrex	r3, [r3]
 8006922:	61fb      	str	r3, [r7, #28]
   return(result);
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800692a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006934:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006936:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800693a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e6      	bne.n	8006916 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800694c:	2b01      	cmp	r3, #1
 800694e:	d12e      	bne.n	80069ae <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	e853 3f00 	ldrex	r3, [r3]
 8006962:	60bb      	str	r3, [r7, #8]
   return(result);
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f023 0310 	bic.w	r3, r3, #16
 800696a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	461a      	mov	r2, r3
 8006972:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006974:	61bb      	str	r3, [r7, #24]
 8006976:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	6979      	ldr	r1, [r7, #20]
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	e841 2300 	strex	r3, r2, [r1]
 8006980:	613b      	str	r3, [r7, #16]
   return(result);
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1e6      	bne.n	8006956 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	69db      	ldr	r3, [r3, #28]
 800698e:	f003 0310 	and.w	r3, r3, #16
 8006992:	2b10      	cmp	r3, #16
 8006994:	d103      	bne.n	800699e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2210      	movs	r2, #16
 800699c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7ff f900 	bl	8005bac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069ac:	e00d      	b.n	80069ca <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fa fc34 	bl	800121c <HAL_UART_RxCpltCallback>
}
 80069b4:	e009      	b.n	80069ca <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	8b1b      	ldrh	r3, [r3, #24]
 80069bc:	b29a      	uxth	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0208 	orr.w	r2, r2, #8
 80069c6:	b292      	uxth	r2, r2
 80069c8:	831a      	strh	r2, [r3, #24]
}
 80069ca:	bf00      	nop
 80069cc:	3770      	adds	r7, #112	@ 0x70
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	40008000 	.word	0x40008000

080069d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <memset>:
 80069ec:	4402      	add	r2, r0
 80069ee:	4603      	mov	r3, r0
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d100      	bne.n	80069f6 <memset+0xa>
 80069f4:	4770      	bx	lr
 80069f6:	f803 1b01 	strb.w	r1, [r3], #1
 80069fa:	e7f9      	b.n	80069f0 <memset+0x4>

080069fc <__libc_init_array>:
 80069fc:	b570      	push	{r4, r5, r6, lr}
 80069fe:	4d0d      	ldr	r5, [pc, #52]	@ (8006a34 <__libc_init_array+0x38>)
 8006a00:	4c0d      	ldr	r4, [pc, #52]	@ (8006a38 <__libc_init_array+0x3c>)
 8006a02:	1b64      	subs	r4, r4, r5
 8006a04:	10a4      	asrs	r4, r4, #2
 8006a06:	2600      	movs	r6, #0
 8006a08:	42a6      	cmp	r6, r4
 8006a0a:	d109      	bne.n	8006a20 <__libc_init_array+0x24>
 8006a0c:	4d0b      	ldr	r5, [pc, #44]	@ (8006a3c <__libc_init_array+0x40>)
 8006a0e:	4c0c      	ldr	r4, [pc, #48]	@ (8006a40 <__libc_init_array+0x44>)
 8006a10:	f000 f818 	bl	8006a44 <_init>
 8006a14:	1b64      	subs	r4, r4, r5
 8006a16:	10a4      	asrs	r4, r4, #2
 8006a18:	2600      	movs	r6, #0
 8006a1a:	42a6      	cmp	r6, r4
 8006a1c:	d105      	bne.n	8006a2a <__libc_init_array+0x2e>
 8006a1e:	bd70      	pop	{r4, r5, r6, pc}
 8006a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a24:	4798      	blx	r3
 8006a26:	3601      	adds	r6, #1
 8006a28:	e7ee      	b.n	8006a08 <__libc_init_array+0xc>
 8006a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a2e:	4798      	blx	r3
 8006a30:	3601      	adds	r6, #1
 8006a32:	e7f2      	b.n	8006a1a <__libc_init_array+0x1e>
 8006a34:	08006aac 	.word	0x08006aac
 8006a38:	08006aac 	.word	0x08006aac
 8006a3c:	08006aac 	.word	0x08006aac
 8006a40:	08006ab0 	.word	0x08006ab0

08006a44 <_init>:
 8006a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a46:	bf00      	nop
 8006a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a4a:	bc08      	pop	{r3}
 8006a4c:	469e      	mov	lr, r3
 8006a4e:	4770      	bx	lr

08006a50 <_fini>:
 8006a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a52:	bf00      	nop
 8006a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a56:	bc08      	pop	{r3}
 8006a58:	469e      	mov	lr, r3
 8006a5a:	4770      	bx	lr
