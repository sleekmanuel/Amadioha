
Amadioha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066d0  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006860  08006860  00007860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068a8  080068a8  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  080068a8  080068a8  000078a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068b0  080068b0  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068b0  080068b0  000078b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068b4  080068b4  000078b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080068b8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  2000000c  080068c4  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080068c4  000081c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144eb  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b9c  00000000  00000000  0001c527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  0001f0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dfb  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022232  00000000  00000000  000210ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015139  00000000  00000000  000432dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6603  00000000  00000000  00058416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ea19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c6c  00000000  00000000  0012ea5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001336c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006848 	.word	0x08006848

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08006848 	.word	0x08006848

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a20:	f000 b96a 	b.w	8000cf8 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	460c      	mov	r4, r1
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d14e      	bne.n	8000ae6 <__udivmoddi4+0xaa>
 8000a48:	4694      	mov	ip, r2
 8000a4a:	458c      	cmp	ip, r1
 8000a4c:	4686      	mov	lr, r0
 8000a4e:	fab2 f282 	clz	r2, r2
 8000a52:	d962      	bls.n	8000b1a <__udivmoddi4+0xde>
 8000a54:	b14a      	cbz	r2, 8000a6a <__udivmoddi4+0x2e>
 8000a56:	f1c2 0320 	rsb	r3, r2, #32
 8000a5a:	4091      	lsls	r1, r2
 8000a5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a64:	4319      	orrs	r1, r3
 8000a66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a6e:	fa1f f68c 	uxth.w	r6, ip
 8000a72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a82:	fb04 f106 	mul.w	r1, r4, r6
 8000a86:	4299      	cmp	r1, r3
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x64>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a92:	f080 8112 	bcs.w	8000cba <__udivmoddi4+0x27e>
 8000a96:	4299      	cmp	r1, r3
 8000a98:	f240 810f 	bls.w	8000cba <__udivmoddi4+0x27e>
 8000a9c:	3c02      	subs	r4, #2
 8000a9e:	4463      	add	r3, ip
 8000aa0:	1a59      	subs	r1, r3, r1
 8000aa2:	fa1f f38e 	uxth.w	r3, lr
 8000aa6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aaa:	fb07 1110 	mls	r1, r7, r0, r1
 8000aae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ab2:	fb00 f606 	mul.w	r6, r0, r6
 8000ab6:	429e      	cmp	r6, r3
 8000ab8:	d90a      	bls.n	8000ad0 <__udivmoddi4+0x94>
 8000aba:	eb1c 0303 	adds.w	r3, ip, r3
 8000abe:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ac2:	f080 80fc 	bcs.w	8000cbe <__udivmoddi4+0x282>
 8000ac6:	429e      	cmp	r6, r3
 8000ac8:	f240 80f9 	bls.w	8000cbe <__udivmoddi4+0x282>
 8000acc:	4463      	add	r3, ip
 8000ace:	3802      	subs	r0, #2
 8000ad0:	1b9b      	subs	r3, r3, r6
 8000ad2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	b11d      	cbz	r5, 8000ae2 <__udivmoddi4+0xa6>
 8000ada:	40d3      	lsrs	r3, r2
 8000adc:	2200      	movs	r2, #0
 8000ade:	e9c5 3200 	strd	r3, r2, [r5]
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d905      	bls.n	8000af6 <__udivmoddi4+0xba>
 8000aea:	b10d      	cbz	r5, 8000af0 <__udivmoddi4+0xb4>
 8000aec:	e9c5 0100 	strd	r0, r1, [r5]
 8000af0:	2100      	movs	r1, #0
 8000af2:	4608      	mov	r0, r1
 8000af4:	e7f5      	b.n	8000ae2 <__udivmoddi4+0xa6>
 8000af6:	fab3 f183 	clz	r1, r3
 8000afa:	2900      	cmp	r1, #0
 8000afc:	d146      	bne.n	8000b8c <__udivmoddi4+0x150>
 8000afe:	42a3      	cmp	r3, r4
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xcc>
 8000b02:	4290      	cmp	r0, r2
 8000b04:	f0c0 80f0 	bcc.w	8000ce8 <__udivmoddi4+0x2ac>
 8000b08:	1a86      	subs	r6, r0, r2
 8000b0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	2d00      	cmp	r5, #0
 8000b12:	d0e6      	beq.n	8000ae2 <__udivmoddi4+0xa6>
 8000b14:	e9c5 6300 	strd	r6, r3, [r5]
 8000b18:	e7e3      	b.n	8000ae2 <__udivmoddi4+0xa6>
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	f040 8090 	bne.w	8000c40 <__udivmoddi4+0x204>
 8000b20:	eba1 040c 	sub.w	r4, r1, ip
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	fa1f f78c 	uxth.w	r7, ip
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b36:	fb08 4416 	mls	r4, r8, r6, r4
 8000b3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b3e:	fb07 f006 	mul.w	r0, r7, r6
 8000b42:	4298      	cmp	r0, r3
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x11c>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x11a>
 8000b50:	4298      	cmp	r0, r3
 8000b52:	f200 80cd 	bhi.w	8000cf0 <__udivmoddi4+0x2b4>
 8000b56:	4626      	mov	r6, r4
 8000b58:	1a1c      	subs	r4, r3, r0
 8000b5a:	fa1f f38e 	uxth.w	r3, lr
 8000b5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b62:	fb08 4410 	mls	r4, r8, r0, r4
 8000b66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b6a:	fb00 f707 	mul.w	r7, r0, r7
 8000b6e:	429f      	cmp	r7, r3
 8000b70:	d908      	bls.n	8000b84 <__udivmoddi4+0x148>
 8000b72:	eb1c 0303 	adds.w	r3, ip, r3
 8000b76:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b7a:	d202      	bcs.n	8000b82 <__udivmoddi4+0x146>
 8000b7c:	429f      	cmp	r7, r3
 8000b7e:	f200 80b0 	bhi.w	8000ce2 <__udivmoddi4+0x2a6>
 8000b82:	4620      	mov	r0, r4
 8000b84:	1bdb      	subs	r3, r3, r7
 8000b86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b8a:	e7a5      	b.n	8000ad8 <__udivmoddi4+0x9c>
 8000b8c:	f1c1 0620 	rsb	r6, r1, #32
 8000b90:	408b      	lsls	r3, r1
 8000b92:	fa22 f706 	lsr.w	r7, r2, r6
 8000b96:	431f      	orrs	r7, r3
 8000b98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000ba0:	ea43 030c 	orr.w	r3, r3, ip
 8000ba4:	40f4      	lsrs	r4, r6
 8000ba6:	fa00 f801 	lsl.w	r8, r0, r1
 8000baa:	0c38      	lsrs	r0, r7, #16
 8000bac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bb0:	fbb4 fef0 	udiv	lr, r4, r0
 8000bb4:	fa1f fc87 	uxth.w	ip, r7
 8000bb8:	fb00 441e 	mls	r4, r0, lr, r4
 8000bbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000bc4:	45a1      	cmp	r9, r4
 8000bc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000bca:	d90a      	bls.n	8000be2 <__udivmoddi4+0x1a6>
 8000bcc:	193c      	adds	r4, r7, r4
 8000bce:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000bd2:	f080 8084 	bcs.w	8000cde <__udivmoddi4+0x2a2>
 8000bd6:	45a1      	cmp	r9, r4
 8000bd8:	f240 8081 	bls.w	8000cde <__udivmoddi4+0x2a2>
 8000bdc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000be0:	443c      	add	r4, r7
 8000be2:	eba4 0409 	sub.w	r4, r4, r9
 8000be6:	fa1f f983 	uxth.w	r9, r3
 8000bea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bee:	fb00 4413 	mls	r4, r0, r3, r4
 8000bf2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bf6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bfa:	45a4      	cmp	ip, r4
 8000bfc:	d907      	bls.n	8000c0e <__udivmoddi4+0x1d2>
 8000bfe:	193c      	adds	r4, r7, r4
 8000c00:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c04:	d267      	bcs.n	8000cd6 <__udivmoddi4+0x29a>
 8000c06:	45a4      	cmp	ip, r4
 8000c08:	d965      	bls.n	8000cd6 <__udivmoddi4+0x29a>
 8000c0a:	3b02      	subs	r3, #2
 8000c0c:	443c      	add	r4, r7
 8000c0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c12:	fba0 9302 	umull	r9, r3, r0, r2
 8000c16:	eba4 040c 	sub.w	r4, r4, ip
 8000c1a:	429c      	cmp	r4, r3
 8000c1c:	46ce      	mov	lr, r9
 8000c1e:	469c      	mov	ip, r3
 8000c20:	d351      	bcc.n	8000cc6 <__udivmoddi4+0x28a>
 8000c22:	d04e      	beq.n	8000cc2 <__udivmoddi4+0x286>
 8000c24:	b155      	cbz	r5, 8000c3c <__udivmoddi4+0x200>
 8000c26:	ebb8 030e 	subs.w	r3, r8, lr
 8000c2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c32:	40cb      	lsrs	r3, r1
 8000c34:	431e      	orrs	r6, r3
 8000c36:	40cc      	lsrs	r4, r1
 8000c38:	e9c5 6400 	strd	r6, r4, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	e750      	b.n	8000ae2 <__udivmoddi4+0xa6>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f103 	lsr.w	r1, r0, r3
 8000c48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c50:	4094      	lsls	r4, r2
 8000c52:	430c      	orrs	r4, r1
 8000c54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c5c:	fa1f f78c 	uxth.w	r7, ip
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3110 	mls	r1, r8, r0, r3
 8000c68:	0c23      	lsrs	r3, r4, #16
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f107 	mul.w	r1, r0, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x24c>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c7e:	d22c      	bcs.n	8000cda <__udivmoddi4+0x29e>
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d92a      	bls.n	8000cda <__udivmoddi4+0x29e>
 8000c84:	3802      	subs	r0, #2
 8000c86:	4463      	add	r3, ip
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c90:	fb08 3311 	mls	r3, r8, r1, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb01 f307 	mul.w	r3, r1, r7
 8000c9c:	42a3      	cmp	r3, r4
 8000c9e:	d908      	bls.n	8000cb2 <__udivmoddi4+0x276>
 8000ca0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ca8:	d213      	bcs.n	8000cd2 <__udivmoddi4+0x296>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d911      	bls.n	8000cd2 <__udivmoddi4+0x296>
 8000cae:	3902      	subs	r1, #2
 8000cb0:	4464      	add	r4, ip
 8000cb2:	1ae4      	subs	r4, r4, r3
 8000cb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb8:	e739      	b.n	8000b2e <__udivmoddi4+0xf2>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	e6f0      	b.n	8000aa0 <__udivmoddi4+0x64>
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e706      	b.n	8000ad0 <__udivmoddi4+0x94>
 8000cc2:	45c8      	cmp	r8, r9
 8000cc4:	d2ae      	bcs.n	8000c24 <__udivmoddi4+0x1e8>
 8000cc6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cce:	3801      	subs	r0, #1
 8000cd0:	e7a8      	b.n	8000c24 <__udivmoddi4+0x1e8>
 8000cd2:	4631      	mov	r1, r6
 8000cd4:	e7ed      	b.n	8000cb2 <__udivmoddi4+0x276>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	e799      	b.n	8000c0e <__udivmoddi4+0x1d2>
 8000cda:	4630      	mov	r0, r6
 8000cdc:	e7d4      	b.n	8000c88 <__udivmoddi4+0x24c>
 8000cde:	46d6      	mov	lr, sl
 8000ce0:	e77f      	b.n	8000be2 <__udivmoddi4+0x1a6>
 8000ce2:	4463      	add	r3, ip
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	e74d      	b.n	8000b84 <__udivmoddi4+0x148>
 8000ce8:	4606      	mov	r6, r0
 8000cea:	4623      	mov	r3, r4
 8000cec:	4608      	mov	r0, r1
 8000cee:	e70f      	b.n	8000b10 <__udivmoddi4+0xd4>
 8000cf0:	3e02      	subs	r6, #2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	e730      	b.n	8000b58 <__udivmoddi4+0x11c>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d02:	463b      	mov	r3, r7
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
 8000d10:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d12:	4b29      	ldr	r3, [pc, #164]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d14:	4a29      	ldr	r2, [pc, #164]	@ (8000dbc <MX_ADC1_Init+0xc0>)
 8000d16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d18:	4b27      	ldr	r3, [pc, #156]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d1e:	4b26      	ldr	r3, [pc, #152]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d24:	4b24      	ldr	r3, [pc, #144]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2a:	4b23      	ldr	r3, [pc, #140]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d30:	4b21      	ldr	r3, [pc, #132]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d32:	2204      	movs	r2, #4
 8000d34:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d36:	4b20      	ldr	r3, [pc, #128]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d42:	4b1d      	ldr	r3, [pc, #116]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d48:	4b1b      	ldr	r3, [pc, #108]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d50:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d56:	4b18      	ldr	r3, [pc, #96]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d5c:	4b16      	ldr	r3, [pc, #88]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d64:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d72:	4811      	ldr	r0, [pc, #68]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000d74:	f000 ff88 	bl	8001c88 <HAL_ADC_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000d7e:	f000 fab7 	bl	80012f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d82:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <MX_ADC1_Init+0xc4>)
 8000d84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d86:	2306      	movs	r3, #6
 8000d88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d8e:	237f      	movs	r3, #127	@ 0x7f
 8000d90:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d92:	2304      	movs	r3, #4
 8000d94:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4806      	ldr	r0, [pc, #24]	@ (8000db8 <MX_ADC1_Init+0xbc>)
 8000da0:	f001 f9e6 	bl	8002170 <HAL_ADC_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000daa:	f000 faa1 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000028 	.word	0x20000028
 8000dbc:	50040000 	.word	0x50040000
 8000dc0:	1d500080 	.word	0x1d500080

08000dc4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b09e      	sub	sp, #120	@ 0x78
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	2254      	movs	r2, #84	@ 0x54
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f005 fd03 	bl	80067f0 <memset>
  if(adcHandle->Instance==ADC1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a25      	ldr	r2, [pc, #148]	@ (8000e84 <HAL_ADC_MspInit+0xc0>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d143      	bne.n	8000e7c <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000df4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000df8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000dfa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000dfe:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000e00:	2301      	movs	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e08:	2308      	movs	r3, #8
 8000e0a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4618      	mov	r0, r3
 8000e24:	f003 f8ee 	bl	8004004 <HAL_RCCEx_PeriphCLKConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000e2e:	f000 fa5f 	bl	80012f0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <HAL_ADC_MspInit+0xc4>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e36:	4a14      	ldr	r2, [pc, #80]	@ (8000e88 <HAL_ADC_MspInit+0xc4>)
 8000e38:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3e:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <HAL_ADC_MspInit+0xc4>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <HAL_ADC_MspInit+0xc4>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e88 <HAL_ADC_MspInit+0xc4>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e56:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <HAL_ADC_MspInit+0xc4>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e62:	2304      	movs	r3, #4
 8000e64:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e66:	230b      	movs	r3, #11
 8000e68:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e72:	4619      	mov	r1, r3
 8000e74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e78:	f002 f88e 	bl	8002f98 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3778      	adds	r7, #120	@ 0x78
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	50040000 	.word	0x50040000
 8000e88:	40021000 	.word	0x40021000

08000e8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	4b2c      	ldr	r3, [pc, #176]	@ (8000f54 <MX_GPIO_Init+0xc8>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea6:	4a2b      	ldr	r2, [pc, #172]	@ (8000f54 <MX_GPIO_Init+0xc8>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eae:	4b29      	ldr	r3, [pc, #164]	@ (8000f54 <MX_GPIO_Init+0xc8>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	4b26      	ldr	r3, [pc, #152]	@ (8000f54 <MX_GPIO_Init+0xc8>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebe:	4a25      	ldr	r2, [pc, #148]	@ (8000f54 <MX_GPIO_Init+0xc8>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec6:	4b23      	ldr	r3, [pc, #140]	@ (8000f54 <MX_GPIO_Init+0xc8>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VBase_Pin|Sense_CuttOff_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2118      	movs	r1, #24
 8000ed6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eda:	f002 f9c7 	bl	800326c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	481d      	ldr	r0, [pc, #116]	@ (8000f58 <MX_GPIO_Init+0xcc>)
 8000ee4:	f002 f9c2 	bl	800326c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VBase_Pin|Sense_CuttOff_Pin;
 8000ee8:	2318      	movs	r3, #24
 8000eea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	4619      	mov	r1, r3
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f02:	f002 f849 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Switch_Pin;
 8000f06:	2301      	movs	r3, #1
 8000f08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Switch_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480f      	ldr	r0, [pc, #60]	@ (8000f58 <MX_GPIO_Init+0xcc>)
 8000f1c:	f002 f83c 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f20:	2302      	movs	r3, #2
 8000f22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	4619      	mov	r1, r3
 8000f36:	4808      	ldr	r0, [pc, #32]	@ (8000f58 <MX_GPIO_Init+0xcc>)
 8000f38:	f002 f82e 	bl	8002f98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2006      	movs	r0, #6
 8000f42:	f001 ff74 	bl	8002e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f46:	2006      	movs	r0, #6
 8000f48:	f001 ff8d 	bl	8002e66 <HAL_NVIC_EnableIRQ>

}
 8000f4c:	bf00      	nop
 8000f4e:	3720      	adds	r7, #32
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40021000 	.word	0x40021000
 8000f58:	48000400 	.word	0x48000400

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f60:	f000 fc07 	bl	8001772 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f64:	f000 f864 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f68:	f7ff ff90 	bl	8000e8c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f6c:	f7ff fec6 	bl	8000cfc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000f70:	f000 fb46 	bl	8001600 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000f74:	f000 fa8c 	bl	8001490 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f78:	f000 fa36 	bl	80013e8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 8000f7c:	4822      	ldr	r0, [pc, #136]	@ (8001008 <main+0xac>)
 8000f7e:	f003 fb81 	bl	8004684 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_buffer, 6);
 8000f82:	2206      	movs	r2, #6
 8000f84:	4921      	ldr	r1, [pc, #132]	@ (800100c <main+0xb0>)
 8000f86:	4822      	ldr	r0, [pc, #136]	@ (8001010 <main+0xb4>)
 8000f88:	f004 f9ac 	bl	80052e4 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		if(data_received_flag)
 8000f8c:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <main+0xb8>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d029      	beq.n	8000fea <main+0x8e>
		{
			// called parse received data
			slAddress = Parse_RxSLData((uint8_t*)rx_buffer);
 8000f96:	481d      	ldr	r0, [pc, #116]	@ (800100c <main+0xb0>)
 8000f98:	f000 f926 	bl	80011e8 <Parse_RxSLData>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8001018 <main+0xbc>)
 8000fa0:	6013      	str	r3, [r2, #0]
			Control = rx_buffer[4];   // extract command information
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <main+0xb0>)
 8000fa4:	791a      	ldrb	r2, [r3, #4]
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <main+0xc0>)
 8000fa8:	701a      	strb	r2, [r3, #0]
			Data = rx_buffer[5];
 8000faa:	4b18      	ldr	r3, [pc, #96]	@ (800100c <main+0xb0>)
 8000fac:	795a      	ldrb	r2, [r3, #5]
 8000fae:	4b1c      	ldr	r3, [pc, #112]	@ (8001020 <main+0xc4>)
 8000fb0:	701a      	strb	r2, [r3, #0]
			if(Control == 0xC0){
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <main+0xc0>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8000fb8:	d114      	bne.n	8000fe4 <main+0x88>
				if(Data == 0x0F){
 8000fba:	4b19      	ldr	r3, [pc, #100]	@ (8001020 <main+0xc4>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b0f      	cmp	r3, #15
 8000fc0:	d106      	bne.n	8000fd0 <main+0x74>
					  if(loadActive){
 8000fc2:	4b18      	ldr	r3, [pc, #96]	@ (8001024 <main+0xc8>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10c      	bne.n	8000fe4 <main+0x88>
						  ;
					  }else{
						  Enable_Load();
 8000fca:	f000 f8e1 	bl	8001190 <Enable_Load>
 8000fce:	e009      	b.n	8000fe4 <main+0x88>
					  }
				}else if(Data == 0x0F){
 8000fd0:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <main+0xc4>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b0f      	cmp	r3, #15
 8000fd6:	d105      	bne.n	8000fe4 <main+0x88>
					  if(loadActive){
 8000fd8:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <main+0xc8>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <main+0x88>
						  Disable_Load();
 8000fe0:	f000 f8ec 	bl	80011bc <Disable_Load>
					  }else{
						  ;
					  }
				}
			}
			data_received_flag = 0;  // resets received status to expect new data
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <main+0xb8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
		}

		CurrentRead = Read_ADC();
 8000fea:	f000 f869 	bl	80010c0 <Read_ADC>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <main+0xcc>)
 8000ff2:	6013      	str	r3, [r2, #0]
		txCurrentValue = Calculate_Current(CurrentRead);
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <main+0xcc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 f87d 	bl	80010f8 <Calculate_Current>
 8000ffe:	4603      	mov	r3, r0
 8001000:	461a      	mov	r2, r3
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <main+0xd0>)
 8001004:	701a      	strb	r2, [r3, #0]
		if(data_received_flag)
 8001006:	e7c1      	b.n	8000f8c <main+0x30>
 8001008:	200000a4 	.word	0x200000a4
 800100c:	20000090 	.word	0x20000090
 8001010:	2000013c 	.word	0x2000013c
 8001014:	2000008d 	.word	0x2000008d
 8001018:	20000098 	.word	0x20000098
 800101c:	2000009c 	.word	0x2000009c
 8001020:	2000009d 	.word	0x2000009d
 8001024:	2000008c 	.word	0x2000008c
 8001028:	200000a0 	.word	0x200000a0
 800102c:	2000009e 	.word	0x2000009e

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b096      	sub	sp, #88	@ 0x58
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	2244      	movs	r2, #68	@ 0x44
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f005 fbd6 	bl	80067f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001052:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001056:	f002 f947 	bl	80032e8 <HAL_PWREx_ControlVoltageScaling>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001060:	f000 f946 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001064:	2310      	movs	r3, #16
 8001066:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001068:	2301      	movs	r3, #1
 800106a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8001070:	2380      	movs	r3, #128	@ 0x80
 8001072:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001074:	2300      	movs	r3, #0
 8001076:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4618      	mov	r0, r3
 800107e:	f002 f989 	bl	8003394 <HAL_RCC_OscConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001088:	f000 f932 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108c:	230f      	movs	r3, #15
 800108e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001098:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800109c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f002 fd88 	bl	8003bbc <HAL_RCC_ClockConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80010b2:	f000 f91d 	bl	80012f0 <Error_Handler>
  }
}
 80010b6:	bf00      	nop
 80010b8:	3758      	adds	r7, #88	@ 0x58
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <Read_ADC>:

/* USER CODE BEGIN 4 */

// Function to read ADC value
uint32_t Read_ADC(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);  // Start ADC conversion
 80010c6:	480a      	ldr	r0, [pc, #40]	@ (80010f0 <Read_ADC+0x30>)
 80010c8:	f000 ff20 	bl	8001f0c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);  // Wait for conversion to finish
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010d0:	4807      	ldr	r0, [pc, #28]	@ (80010f0 <Read_ADC+0x30>)
 80010d2:	f000 ffb1 	bl	8002038 <HAL_ADC_PollForConversion>
    uint32_t adcValue = HAL_ADC_GetValue(&hadc1);  // Get the ADC value
 80010d6:	4806      	ldr	r0, [pc, #24]	@ (80010f0 <Read_ADC+0x30>)
 80010d8:	f001 f83d 	bl	8002156 <HAL_ADC_GetValue>
 80010dc:	6078      	str	r0, [r7, #4]
    HAL_ADC_Stop(&hadc1);  // Stop the ADC
 80010de:	4804      	ldr	r0, [pc, #16]	@ (80010f0 <Read_ADC+0x30>)
 80010e0:	f000 ff77 	bl	8001fd2 <HAL_ADC_Stop>
    return adcValue;
 80010e4:	687b      	ldr	r3, [r7, #4]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000028 	.word	0x20000028
 80010f4:	00000000 	.word	0x00000000

080010f8 <Calculate_Current>:

// Function to calculate current based on ADC value
uint8_t Calculate_Current(uint32_t adcValue)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    // Convert ADC value to voltage
    float voltage = (adcValue * V_REF) / ADC_RESOLUTION;
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff f9a7 	bl	8000454 <__aeabi_ui2d>
 8001106:	a320      	add	r3, pc, #128	@ (adr r3, 8001188 <Calculate_Current+0x90>)
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	f7ff fa1c 	bl	8000548 <__aeabi_dmul>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4610      	mov	r0, r2
 8001116:	4619      	mov	r1, r3
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	4b16      	ldr	r3, [pc, #88]	@ (8001178 <Calculate_Current+0x80>)
 800111e:	f7ff fb3d 	bl	800079c <__aeabi_ddiv>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff fc1f 	bl	800096c <__aeabi_d2f>
 800112e:	4603      	mov	r3, r0
 8001130:	617b      	str	r3, [r7, #20]
    // Sensor outputs 0.5 * Vcc at zero current
    float zeroCurrentVoltage = V_REF / 2.0;
 8001132:	4b12      	ldr	r3, [pc, #72]	@ (800117c <Calculate_Current+0x84>)
 8001134:	613b      	str	r3, [r7, #16]
    // Calculate current using sensor sensitivity (mV/A)
    float current = (voltage - zeroCurrentVoltage) * 1000 / SENSITIVITY;  // in Amps
 8001136:	ed97 7a05 	vldr	s14, [r7, #20]
 800113a:	edd7 7a04 	vldr	s15, [r7, #16]
 800113e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001142:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001180 <Calculate_Current+0x88>
 8001146:	ee27 7a87 	vmul.f32	s14, s15, s14
 800114a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001184 <Calculate_Current+0x8c>
 800114e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001152:	edc7 7a03 	vstr	s15, [r7, #12]
    uint8_t mAmps = current * 1000; //current in mA
 8001156:	edd7 7a03 	vldr	s15, [r7, #12]
 800115a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001180 <Calculate_Current+0x88>
 800115e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001166:	edc7 7a00 	vstr	s15, [r7]
 800116a:	783b      	ldrb	r3, [r7, #0]
 800116c:	72fb      	strb	r3, [r7, #11]

    return mAmps;
 800116e:	7afb      	ldrb	r3, [r7, #11]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40b00000 	.word	0x40b00000
 800117c:	3fd33333 	.word	0x3fd33333
 8001180:	447a0000 	.word	0x447a0000
 8001184:	42480000 	.word	0x42480000
 8001188:	66666666 	.word	0x66666666
 800118c:	400a6666 	.word	0x400a6666

08001190 <Enable_Load>:
/*
 * Enable Load when Load is disabled
 * Turn on Onboard LED
 */
void Enable_Load(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	loadActive = 1;
 8001194:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <Enable_Load+0x24>)
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET); //engage relay
 800119a:	2201      	movs	r2, #1
 800119c:	2102      	movs	r1, #2
 800119e:	4806      	ldr	r0, [pc, #24]	@ (80011b8 <Enable_Load+0x28>)
 80011a0:	f002 f864 	bl	800326c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, VBase_Pin, SET); // turn on LEDs
 80011a4:	2201      	movs	r2, #1
 80011a6:	2108      	movs	r1, #8
 80011a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ac:	f002 f85e 	bl	800326c <HAL_GPIO_WritePin>
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	2000008c 	.word	0x2000008c
 80011b8:	48000400 	.word	0x48000400

080011bc <Disable_Load>:
/*
 * Disable Load when Load is active
 * Turn off Onboard LED
 */
void Disable_Load(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	loadActive = 0;
 80011c0:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <Disable_Load+0x24>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET); // disengage relay
 80011c6:	2200      	movs	r2, #0
 80011c8:	2102      	movs	r1, #2
 80011ca:	4806      	ldr	r0, [pc, #24]	@ (80011e4 <Disable_Load+0x28>)
 80011cc:	f002 f84e 	bl	800326c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, VBase_Pin, RESET); // turn off LEDs
 80011d0:	2200      	movs	r2, #0
 80011d2:	2108      	movs	r1, #8
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d8:	f002 f848 	bl	800326c <HAL_GPIO_WritePin>
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	2000008c 	.word	0x2000008c
 80011e4:	48000400 	.word	0x48000400

080011e8 <Parse_RxSLData>:
/*
 * Parse Received Data for ATSL
 *
 */
uint32_t Parse_RxSLData(uint8_t data[])
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	uint32_t address = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
    // Shift and merge the 4 bytes into a 32-bit integer
    address |= ((uint32_t)data[0] << 24);  // Most significant byte
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	061b      	lsls	r3, r3, #24
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]
    address |= ((uint32_t)data[1] << 16);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3301      	adds	r3, #1
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	041b      	lsls	r3, r3, #16
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	4313      	orrs	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
    address |= ((uint32_t)data[2] << 8);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3302      	adds	r3, #2
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	4313      	orrs	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]
    address |= ((uint32_t)data[3] << 0);   // Least significant byte
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3303      	adds	r3, #3
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4313      	orrs	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]

    return address;
 800122a:	68fb      	ldr	r3, [r7, #12]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <HAL_GPIO_EXTI_Callback>:

 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
  /* Check if the power on button is pushed
   * if pushed when the load is active, it turns off the load and vice-versa
   *  */
  if((GPIO_Pin = Switch_Pin)){
 8001242:	2301      	movs	r3, #1
 8001244:	80fb      	strh	r3, [r7, #6]
	  if(loadActive){
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <HAL_GPIO_EXTI_Callback+0x28>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <HAL_GPIO_EXTI_Callback+0x1c>
		  Disable_Load();
 800124e:	f7ff ffb5 	bl	80011bc <Disable_Load>
	  }

  }


}
 8001252:	e001      	b.n	8001258 <HAL_GPIO_EXTI_Callback+0x20>
		  Enable_Load();
 8001254:	f7ff ff9c 	bl	8001190 <Enable_Load>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000008c 	.word	0x2000008c

08001264 <HAL_UART_RxCpltCallback>:
 /*
  * Receive interrupt callback function
  */

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

 	if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE))  // Check if data is received
 800126c:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <HAL_UART_RxCpltCallback+0x7c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	f003 0320 	and.w	r3, r3, #32
 8001276:	2b20      	cmp	r3, #32
 8001278:	d129      	bne.n	80012ce <HAL_UART_RxCpltCallback+0x6a>
 	    {
 	        char received_char = (uint8_t)(huart1.Instance->RDR & 0xFF);  // Read the received character
 800127a:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <HAL_UART_RxCpltCallback+0x7c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001280:	b29b      	uxth	r3, r3
 8001282:	73fb      	strb	r3, [r7, #15]
 	        if (rxIndex < sizeof(rx_buffer) - 1) {
 8001284:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <HAL_UART_RxCpltCallback+0x80>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b04      	cmp	r3, #4
 800128c:	d80a      	bhi.n	80012a4 <HAL_UART_RxCpltCallback+0x40>
 	            rx_buffer[rxIndex++] = received_char;
 800128e:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <HAL_UART_RxCpltCallback+0x80>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	1c5a      	adds	r2, r3, #1
 8001296:	b2d1      	uxtb	r1, r2
 8001298:	4a12      	ldr	r2, [pc, #72]	@ (80012e4 <HAL_UART_RxCpltCallback+0x80>)
 800129a:	7011      	strb	r1, [r2, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	4a12      	ldr	r2, [pc, #72]	@ (80012e8 <HAL_UART_RxCpltCallback+0x84>)
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	5453      	strb	r3, [r2, r1]
 	        }

 	        // Check for newline or carriage return as end of response
 	        if ((rxIndex == sizeof(rx_buffer)) || received_char == '\r') {
 80012a4:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <HAL_UART_RxCpltCallback+0x80>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d002      	beq.n	80012b4 <HAL_UART_RxCpltCallback+0x50>
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	2b0d      	cmp	r3, #13
 80012b2:	d10c      	bne.n	80012ce <HAL_UART_RxCpltCallback+0x6a>
 	            rx_buffer[rxIndex] = '\0';  // Null terminate the string
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <HAL_UART_RxCpltCallback+0x80>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <HAL_UART_RxCpltCallback+0x84>)
 80012be:	2100      	movs	r1, #0
 80012c0:	5499      	strb	r1, [r3, r2]
 	            rxIndex = 0;
 80012c2:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <HAL_UART_RxCpltCallback+0x80>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
 	            data_received_flag = 1;  // Set flag to indicate that data is fully received
 80012c8:	4b08      	ldr	r3, [pc, #32]	@ (80012ec <HAL_UART_RxCpltCallback+0x88>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
 	        }

 	    }
 	 HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_buffer, 6);
 80012ce:	2206      	movs	r2, #6
 80012d0:	4905      	ldr	r1, [pc, #20]	@ (80012e8 <HAL_UART_RxCpltCallback+0x84>)
 80012d2:	4803      	ldr	r0, [pc, #12]	@ (80012e0 <HAL_UART_RxCpltCallback+0x7c>)
 80012d4:	f004 f806 	bl	80052e4 <HAL_UART_Receive_IT>
 }
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	2000013c 	.word	0x2000013c
 80012e4:	2000008e 	.word	0x2000008e
 80012e8:	20000090 	.word	0x20000090
 80012ec:	2000008d 	.word	0x2000008d

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <Error_Handler+0x8>

080012fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <HAL_MspInit+0x44>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001306:	4a0e      	ldr	r2, [pc, #56]	@ (8001340 <HAL_MspInit+0x44>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6613      	str	r3, [r2, #96]	@ 0x60
 800130e:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <HAL_MspInit+0x44>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <HAL_MspInit+0x44>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131e:	4a08      	ldr	r2, [pc, #32]	@ (8001340 <HAL_MspInit+0x44>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001324:	6593      	str	r3, [r2, #88]	@ 0x58
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <HAL_MspInit+0x44>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000

08001344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <NMI_Handler+0x4>

0800134c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <MemManage_Handler+0x4>

0800135c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <BusFault_Handler+0x4>

08001364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <UsageFault_Handler+0x4>

0800136c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800139a:	f000 fa3f 	bl	800181c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Switch_Pin);
 80013a6:	2001      	movs	r0, #1
 80013a8:	f001 ff78 	bl	800329c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013b4:	4802      	ldr	r0, [pc, #8]	@ (80013c0 <USART1_IRQHandler+0x10>)
 80013b6:	f003 ffe1 	bl	800537c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2000013c 	.word	0x2000013c

080013c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <SystemInit+0x20>)
 80013ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ce:	4a05      	ldr	r2, [pc, #20]	@ (80013e4 <SystemInit+0x20>)
 80013d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001406:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <MX_TIM1_Init+0xa0>)
 8001408:	4a20      	ldr	r2, [pc, #128]	@ (800148c <MX_TIM1_Init+0xa4>)
 800140a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 800140c:	4b1e      	ldr	r3, [pc, #120]	@ (8001488 <MX_TIM1_Init+0xa0>)
 800140e:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001412:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001414:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <MX_TIM1_Init+0xa0>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 800141a:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <MX_TIM1_Init+0xa0>)
 800141c:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001420:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001422:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <MX_TIM1_Init+0xa0>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001428:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <MX_TIM1_Init+0xa0>)
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142e:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <MX_TIM1_Init+0xa0>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001434:	4814      	ldr	r0, [pc, #80]	@ (8001488 <MX_TIM1_Init+0xa0>)
 8001436:	f003 f8cd 	bl	80045d4 <HAL_TIM_Base_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001440:	f7ff ff56 	bl	80012f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001444:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001448:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800144a:	f107 0310 	add.w	r3, r7, #16
 800144e:	4619      	mov	r1, r3
 8001450:	480d      	ldr	r0, [pc, #52]	@ (8001488 <MX_TIM1_Init+0xa0>)
 8001452:	f003 fb8d 	bl	8004b70 <HAL_TIM_ConfigClockSource>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800145c:	f7ff ff48 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001460:	2300      	movs	r3, #0
 8001462:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	@ (8001488 <MX_TIM1_Init+0xa0>)
 8001472:	f003 fe83 	bl	800517c <HAL_TIMEx_MasterConfigSynchronization>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800147c:	f7ff ff38 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200000a4 	.word	0x200000a4
 800148c:	40012c00 	.word	0x40012c00

08001490 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014ae:	4b23      	ldr	r3, [pc, #140]	@ (800153c <MX_TIM2_Init+0xac>)
 80014b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014b6:	4b21      	ldr	r3, [pc, #132]	@ (800153c <MX_TIM2_Init+0xac>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014bc:	4b1f      	ldr	r3, [pc, #124]	@ (800153c <MX_TIM2_Init+0xac>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014c2:	4b1e      	ldr	r3, [pc, #120]	@ (800153c <MX_TIM2_Init+0xac>)
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ca:	4b1c      	ldr	r3, [pc, #112]	@ (800153c <MX_TIM2_Init+0xac>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d0:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <MX_TIM2_Init+0xac>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80014d6:	4819      	ldr	r0, [pc, #100]	@ (800153c <MX_TIM2_Init+0xac>)
 80014d8:	f003 f928 	bl	800472c <HAL_TIM_IC_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014e2:	f7ff ff05 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	4811      	ldr	r0, [pc, #68]	@ (800153c <MX_TIM2_Init+0xac>)
 80014f6:	f003 fe41 	bl	800517c <HAL_TIMEx_MasterConfigSynchronization>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001500:	f7ff fef6 	bl	80012f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001504:	2300      	movs	r3, #0
 8001506:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001508:	2301      	movs	r3, #1
 800150a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2204      	movs	r2, #4
 8001518:	4619      	mov	r1, r3
 800151a:	4808      	ldr	r0, [pc, #32]	@ (800153c <MX_TIM2_Init+0xac>)
 800151c:	f003 fa8c 	bl	8004a38 <HAL_TIM_IC_ConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001526:	f7ff fee3 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2); //start input capture with interrupts
 800152a:	2104      	movs	r1, #4
 800152c:	4803      	ldr	r0, [pc, #12]	@ (800153c <MX_TIM2_Init+0xac>)
 800152e:	f003 f955 	bl	80047dc <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	3720      	adds	r7, #32
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200000f0 	.word	0x200000f0

08001540 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0a      	ldr	r2, [pc, #40]	@ (8001578 <HAL_TIM_Base_MspInit+0x38>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d10b      	bne.n	800156a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001552:	4b0a      	ldr	r3, [pc, #40]	@ (800157c <HAL_TIM_Base_MspInit+0x3c>)
 8001554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001556:	4a09      	ldr	r2, [pc, #36]	@ (800157c <HAL_TIM_Base_MspInit+0x3c>)
 8001558:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800155c:	6613      	str	r3, [r2, #96]	@ 0x60
 800155e:	4b07      	ldr	r3, [pc, #28]	@ (800157c <HAL_TIM_Base_MspInit+0x3c>)
 8001560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001562:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40012c00 	.word	0x40012c00
 800157c:	40021000 	.word	0x40021000

08001580 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	@ 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015a0:	d128      	bne.n	80015f4 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015a2:	4b16      	ldr	r3, [pc, #88]	@ (80015fc <HAL_TIM_IC_MspInit+0x7c>)
 80015a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a6:	4a15      	ldr	r2, [pc, #84]	@ (80015fc <HAL_TIM_IC_MspInit+0x7c>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ae:	4b13      	ldr	r3, [pc, #76]	@ (80015fc <HAL_TIM_IC_MspInit+0x7c>)
 80015b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <HAL_TIM_IC_MspInit+0x7c>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015be:	4a0f      	ldr	r2, [pc, #60]	@ (80015fc <HAL_TIM_IC_MspInit+0x7c>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c6:	4b0d      	ldr	r3, [pc, #52]	@ (80015fc <HAL_TIM_IC_MspInit+0x7c>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015d2:	2302      	movs	r3, #2
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015e2:	2301      	movs	r3, #1
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f0:	f001 fcd2 	bl	8002f98 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80015f4:	bf00      	nop
 80015f6:	3728      	adds	r7, #40	@ 0x28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40021000 	.word	0x40021000

08001600 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001604:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <MX_USART1_UART_Init+0x58>)
 8001606:	4a15      	ldr	r2, [pc, #84]	@ (800165c <MX_USART1_UART_Init+0x5c>)
 8001608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800160a:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <MX_USART1_UART_Init+0x58>)
 800160c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <MX_USART1_UART_Init+0x58>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <MX_USART1_UART_Init+0x58>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800161e:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <MX_USART1_UART_Init+0x58>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <MX_USART1_UART_Init+0x58>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <MX_USART1_UART_Init+0x58>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <MX_USART1_UART_Init+0x58>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001636:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <MX_USART1_UART_Init+0x58>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <MX_USART1_UART_Init+0x58>)
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001642:	4805      	ldr	r0, [pc, #20]	@ (8001658 <MX_USART1_UART_Init+0x58>)
 8001644:	f003 fe00 	bl	8005248 <HAL_UART_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800164e:	f7ff fe4f 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000013c 	.word	0x2000013c
 800165c:	40013800 	.word	0x40013800

08001660 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b09e      	sub	sp, #120	@ 0x78
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001678:	f107 0310 	add.w	r3, r7, #16
 800167c:	2254      	movs	r2, #84	@ 0x54
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f005 f8b5 	bl	80067f0 <memset>
  if(uartHandle->Instance==USART1)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a23      	ldr	r2, [pc, #140]	@ (8001718 <HAL_UART_MspInit+0xb8>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d13f      	bne.n	8001710 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001690:	2301      	movs	r3, #1
 8001692:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001694:	2300      	movs	r3, #0
 8001696:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	4618      	mov	r0, r3
 800169e:	f002 fcb1 	bl	8004004 <HAL_RCCEx_PeriphCLKConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016a8:	f7ff fe22 	bl	80012f0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016ac:	4b1b      	ldr	r3, [pc, #108]	@ (800171c <HAL_UART_MspInit+0xbc>)
 80016ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016b0:	4a1a      	ldr	r2, [pc, #104]	@ (800171c <HAL_UART_MspInit+0xbc>)
 80016b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80016b8:	4b18      	ldr	r3, [pc, #96]	@ (800171c <HAL_UART_MspInit+0xbc>)
 80016ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	4b15      	ldr	r3, [pc, #84]	@ (800171c <HAL_UART_MspInit+0xbc>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c8:	4a14      	ldr	r2, [pc, #80]	@ (800171c <HAL_UART_MspInit+0xbc>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d0:	4b12      	ldr	r3, [pc, #72]	@ (800171c <HAL_UART_MspInit+0xbc>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016dc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016e0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016ee:	2307      	movs	r3, #7
 80016f0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016f6:	4619      	mov	r1, r3
 80016f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016fc:	f001 fc4c 	bl	8002f98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2100      	movs	r1, #0
 8001704:	2025      	movs	r0, #37	@ 0x25
 8001706:	f001 fb92 	bl	8002e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800170a:	2025      	movs	r0, #37	@ 0x25
 800170c:	f001 fbab 	bl	8002e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001710:	bf00      	nop
 8001712:	3778      	adds	r7, #120	@ 0x78
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40013800 	.word	0x40013800
 800171c:	40021000 	.word	0x40021000

08001720 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001720:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001758 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001724:	f7ff fe4e 	bl	80013c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001728:	480c      	ldr	r0, [pc, #48]	@ (800175c <LoopForever+0x6>)
  ldr r1, =_edata
 800172a:	490d      	ldr	r1, [pc, #52]	@ (8001760 <LoopForever+0xa>)
  ldr r2, =_sidata
 800172c:	4a0d      	ldr	r2, [pc, #52]	@ (8001764 <LoopForever+0xe>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001730:	e002      	b.n	8001738 <LoopCopyDataInit>

08001732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001736:	3304      	adds	r3, #4

08001738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800173c:	d3f9      	bcc.n	8001732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173e:	4a0a      	ldr	r2, [pc, #40]	@ (8001768 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001740:	4c0a      	ldr	r4, [pc, #40]	@ (800176c <LoopForever+0x16>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001744:	e001      	b.n	800174a <LoopFillZerobss>

08001746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001748:	3204      	adds	r2, #4

0800174a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800174c:	d3fb      	bcc.n	8001746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800174e:	f005 f857 	bl	8006800 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001752:	f7ff fc03 	bl	8000f5c <main>

08001756 <LoopForever>:

LoopForever:
    b LoopForever
 8001756:	e7fe      	b.n	8001756 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001758:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800175c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001760:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001764:	080068b8 	.word	0x080068b8
  ldr r2, =_sbss
 8001768:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800176c:	200001c8 	.word	0x200001c8

08001770 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001770:	e7fe      	b.n	8001770 <ADC1_IRQHandler>

08001772 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800177c:	2003      	movs	r0, #3
 800177e:	f001 fb4b 	bl	8002e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001782:	200f      	movs	r0, #15
 8001784:	f000 f80e 	bl	80017a4 <HAL_InitTick>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d002      	beq.n	8001794 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	71fb      	strb	r3, [r7, #7]
 8001792:	e001      	b.n	8001798 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001794:	f7ff fdb2 	bl	80012fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001798:	79fb      	ldrb	r3, [r7, #7]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017b0:	4b17      	ldr	r3, [pc, #92]	@ (8001810 <HAL_InitTick+0x6c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d023      	beq.n	8001800 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017b8:	4b16      	ldr	r3, [pc, #88]	@ (8001814 <HAL_InitTick+0x70>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <HAL_InitTick+0x6c>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f001 fb57 	bl	8002e82 <HAL_SYSTICK_Config>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10f      	bne.n	80017fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b0f      	cmp	r3, #15
 80017de:	d809      	bhi.n	80017f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e0:	2200      	movs	r2, #0
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017e8:	f001 fb21 	bl	8002e2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <HAL_InitTick+0x74>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e007      	b.n	8001804 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
 80017f8:	e004      	b.n	8001804 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
 80017fe:	e001      	b.n	8001804 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001804:	7bfb      	ldrb	r3, [r7, #15]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000008 	.word	0x20000008
 8001814:	20000000 	.word	0x20000000
 8001818:	20000004 	.word	0x20000004

0800181c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001820:	4b06      	ldr	r3, [pc, #24]	@ (800183c <HAL_IncTick+0x20>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <HAL_IncTick+0x24>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4413      	add	r3, r2
 800182c:	4a04      	ldr	r2, [pc, #16]	@ (8001840 <HAL_IncTick+0x24>)
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000008 	.word	0x20000008
 8001840:	200001c4 	.word	0x200001c4

08001844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return uwTick;
 8001848:	4b03      	ldr	r3, [pc, #12]	@ (8001858 <HAL_GetTick+0x14>)
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	200001c4 	.word	0x200001c4

0800185c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	431a      	orrs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	609a      	str	r2, [r3, #8]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	609a      	str	r2, [r3, #8]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b087      	sub	sp, #28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3360      	adds	r3, #96	@ 0x60
 80018d6:	461a      	mov	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <LL_ADC_SetOffset+0x44>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	4313      	orrs	r3, r2
 80018f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018fc:	bf00      	nop
 80018fe:	371c      	adds	r7, #28
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	03fff000 	.word	0x03fff000

0800190c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3360      	adds	r3, #96	@ 0x60
 800191a:	461a      	mov	r2, r3
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800192c:	4618      	mov	r0, r3
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001938:	b480      	push	{r7}
 800193a:	b087      	sub	sp, #28
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	3360      	adds	r3, #96	@ 0x60
 8001948:	461a      	mov	r2, r3
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	431a      	orrs	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001962:	bf00      	nop
 8001964:	371c      	adds	r7, #28
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001994:	b480      	push	{r7}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3330      	adds	r3, #48	@ 0x30
 80019a4:	461a      	mov	r2, r3
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	4413      	add	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	f003 031f 	and.w	r3, r3, #31
 80019be:	211f      	movs	r1, #31
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	401a      	ands	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	0e9b      	lsrs	r3, r3, #26
 80019cc:	f003 011f 	and.w	r1, r3, #31
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	f003 031f 	and.w	r3, r3, #31
 80019d6:	fa01 f303 	lsl.w	r3, r1, r3
 80019da:	431a      	orrs	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019e0:	bf00      	nop
 80019e2:	371c      	adds	r7, #28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b087      	sub	sp, #28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3314      	adds	r3, #20
 80019fc:	461a      	mov	r2, r3
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	0e5b      	lsrs	r3, r3, #25
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	4413      	add	r3, r2
 8001a0a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	0d1b      	lsrs	r3, r3, #20
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	2107      	movs	r1, #7
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	401a      	ands	r2, r3
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	0d1b      	lsrs	r3, r3, #20
 8001a26:	f003 031f 	and.w	r3, r3, #31
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	431a      	orrs	r2, r3
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a36:	bf00      	nop
 8001a38:	371c      	adds	r7, #28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	401a      	ands	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f003 0318 	and.w	r3, r3, #24
 8001a66:	4908      	ldr	r1, [pc, #32]	@ (8001a88 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a68:	40d9      	lsrs	r1, r3
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	400b      	ands	r3, r1
 8001a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a72:	431a      	orrs	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a7a:	bf00      	nop
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	0007ffff 	.word	0x0007ffff

08001a8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001a9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6093      	str	r3, [r2, #8]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ac0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ac4:	d101      	bne.n	8001aca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ae8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001aec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b14:	d101      	bne.n	8001b1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b3c:	f043 0201 	orr.w	r2, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b64:	f043 0202 	orr.w	r2, r3, #2
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <LL_ADC_IsEnabled+0x18>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <LL_ADC_IsEnabled+0x1a>
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d101      	bne.n	8001bb6 <LL_ADC_IsDisableOngoing+0x18>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <LL_ADC_IsDisableOngoing+0x1a>
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bd8:	f043 0204 	orr.w	r2, r3, #4
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bfc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c00:	f043 0210 	orr.w	r2, r3, #16
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d101      	bne.n	8001c2c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c4a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c4e:	f043 0220 	orr.w	r2, r3, #32
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d101      	bne.n	8001c7a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e126      	b.n	8001ef0 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d109      	bne.n	8001cc4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff f887 	bl	8000dc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fef1 	bl	8001ab0 <LL_ADC_IsDeepPowerDownEnabled>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d004      	beq.n	8001cde <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fed7 	bl	8001a8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ff0c 	bl	8001b00 <LL_ADC_IsInternalRegulatorEnabled>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d115      	bne.n	8001d1a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fef0 	bl	8001ad8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cf8:	4b7f      	ldr	r3, [pc, #508]	@ (8001ef8 <HAL_ADC_Init+0x270>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	099b      	lsrs	r3, r3, #6
 8001cfe:	4a7f      	ldr	r2, [pc, #508]	@ (8001efc <HAL_ADC_Init+0x274>)
 8001d00:	fba2 2303 	umull	r2, r3, r2, r3
 8001d04:	099b      	lsrs	r3, r3, #6
 8001d06:	3301      	adds	r3, #1
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d0c:	e002      	b.n	8001d14 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f9      	bne.n	8001d0e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff feee 	bl	8001b00 <LL_ADC_IsInternalRegulatorEnabled>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10d      	bne.n	8001d46 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2e:	f043 0210 	orr.w	r2, r3, #16
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3a:	f043 0201 	orr.w	r2, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff62 	bl	8001c14 <LL_ADC_REG_IsConversionOngoing>
 8001d50:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f040 80bf 	bne.w	8001ede <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f040 80bb 	bne.w	8001ede <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d6c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d70:	f043 0202 	orr.w	r2, r3, #2
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fefb 	bl	8001b78 <LL_ADC_IsEnabled>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10b      	bne.n	8001da0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d88:	485d      	ldr	r0, [pc, #372]	@ (8001f00 <HAL_ADC_Init+0x278>)
 8001d8a:	f7ff fef5 	bl	8001b78 <LL_ADC_IsEnabled>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d105      	bne.n	8001da0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	485a      	ldr	r0, [pc, #360]	@ (8001f04 <HAL_ADC_Init+0x27c>)
 8001d9c:	f7ff fd5e 	bl	800185c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7e5b      	ldrb	r3, [r3, #25]
 8001da4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001daa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001db0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001db6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dbe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d106      	bne.n	8001ddc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	045b      	lsls	r3, r3, #17
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d009      	beq.n	8001df8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	4b42      	ldr	r3, [pc, #264]	@ (8001f08 <HAL_ADC_Init+0x280>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	69b9      	ldr	r1, [r7, #24]
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff26 	bl	8001c62 <LL_ADC_INJ_IsConversionOngoing>
 8001e16:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d13d      	bne.n	8001e9a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d13a      	bne.n	8001e9a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e28:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e30:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e40:	f023 0302 	bic.w	r3, r3, #2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	69b9      	ldr	r1, [r7, #24]
 8001e4a:	430b      	orrs	r3, r1
 8001e4c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d118      	bne.n	8001e8a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001e62:	f023 0304 	bic.w	r3, r3, #4
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e6e:	4311      	orrs	r1, r2
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e74:	4311      	orrs	r1, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	611a      	str	r2, [r3, #16]
 8001e88:	e007      	b.n	8001e9a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0201 	bic.w	r2, r2, #1
 8001e98:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d10c      	bne.n	8001ebc <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea8:	f023 010f 	bic.w	r1, r3, #15
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	1e5a      	subs	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001eba:	e007      	b.n	8001ecc <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 020f 	bic.w	r2, r2, #15
 8001eca:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed0:	f023 0303 	bic.w	r3, r3, #3
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	655a      	str	r2, [r3, #84]	@ 0x54
 8001edc:	e007      	b.n	8001eee <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee2:	f043 0210 	orr.w	r2, r3, #16
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001eee:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3720      	adds	r7, #32
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	053e2d63 	.word	0x053e2d63
 8001f00:	50040000 	.word	0x50040000
 8001f04:	50040300 	.word	0x50040300
 8001f08:	fff0c007 	.word	0xfff0c007

08001f0c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fe7b 	bl	8001c14 <LL_ADC_REG_IsConversionOngoing>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d14f      	bne.n	8001fc4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_Start+0x26>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e04b      	b.n	8001fca <HAL_ADC_Start+0xbe>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fdb6 	bl	8002aac <ADC_Enable>
 8001f40:	4603      	mov	r3, r0
 8001f42:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d137      	bne.n	8001fba <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f4e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f6a:	d106      	bne.n	8001f7a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f70:	f023 0206 	bic.w	r2, r3, #6
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f78:	e002      	b.n	8001f80 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	221c      	movs	r2, #28
 8001f86:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d007      	beq.n	8001fae <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001fa6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fe06 	bl	8001bc4 <LL_ADC_REG_StartConversion>
 8001fb8:	e006      	b.n	8001fc8 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001fc2:	e001      	b.n	8001fc8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_ADC_Stop+0x16>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e023      	b.n	8002030 <HAL_ADC_Stop+0x5e>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001ff0:	2103      	movs	r1, #3
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 fc9e 	bl	8002934 <ADC_ConversionStop>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d111      	bne.n	8002026 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 fdd8 	bl	8002bb8 <ADC_Disable>
 8002008:	4603      	mov	r3, r0
 800200a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002016:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	f043 0201 	orr.w	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800202e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	2b08      	cmp	r3, #8
 8002048:	d102      	bne.n	8002050 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800204a:	2308      	movs	r3, #8
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	e010      	b.n	8002072 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d007      	beq.n	800206e <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002062:	f043 0220 	orr.w	r2, r3, #32
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e06f      	b.n	800214e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800206e:	2304      	movs	r3, #4
 8002070:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002072:	f7ff fbe7 	bl	8001844 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002078:	e021      	b.n	80020be <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002080:	d01d      	beq.n	80020be <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002082:	f7ff fbdf 	bl	8001844 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d302      	bcc.n	8002098 <HAL_ADC_PollForConversion+0x60>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d112      	bne.n	80020be <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10b      	bne.n	80020be <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020aa:	f043 0204 	orr.w	r2, r3, #4
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e047      	b.n	800214e <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0d6      	beq.n	800207a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fc46 	bl	800196e <LL_ADC_REG_IsTriggerSourceSWStart>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01c      	beq.n	8002122 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	7e5b      	ldrb	r3, [r3, #25]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d118      	bne.n	8002122 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d111      	bne.n	8002122 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002102:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800210e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d105      	bne.n	8002122 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211a:	f043 0201 	orr.w	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b08      	cmp	r3, #8
 800212e:	d104      	bne.n	800213a <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2208      	movs	r2, #8
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	e008      	b.n	800214c <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d103      	bne.n	800214c <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	220c      	movs	r2, #12
 800214a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b0b6      	sub	sp, #216	@ 0xd8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002180:	2300      	movs	r3, #0
 8002182:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x22>
 800218e:	2302      	movs	r3, #2
 8002190:	e3bb      	b.n	800290a <HAL_ADC_ConfigChannel+0x79a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fd38 	bl	8001c14 <LL_ADC_REG_IsConversionOngoing>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f040 83a0 	bne.w	80028ec <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b05      	cmp	r3, #5
 80021ba:	d824      	bhi.n	8002206 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	3b02      	subs	r3, #2
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d81b      	bhi.n	80021fe <HAL_ADC_ConfigChannel+0x8e>
 80021c6:	a201      	add	r2, pc, #4	@ (adr r2, 80021cc <HAL_ADC_ConfigChannel+0x5c>)
 80021c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021cc:	080021dd 	.word	0x080021dd
 80021d0:	080021e5 	.word	0x080021e5
 80021d4:	080021ed 	.word	0x080021ed
 80021d8:	080021f5 	.word	0x080021f5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80021dc:	230c      	movs	r3, #12
 80021de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80021e2:	e010      	b.n	8002206 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80021e4:	2312      	movs	r3, #18
 80021e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80021ea:	e00c      	b.n	8002206 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80021ec:	2318      	movs	r3, #24
 80021ee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80021f2:	e008      	b.n	8002206 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80021f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80021fc:	e003      	b.n	8002206 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80021fe:	2306      	movs	r3, #6
 8002200:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002204:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002214:	f7ff fbbe 	bl	8001994 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fcf9 	bl	8001c14 <LL_ADC_REG_IsConversionOngoing>
 8002222:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fd19 	bl	8001c62 <LL_ADC_INJ_IsConversionOngoing>
 8002230:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002234:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002238:	2b00      	cmp	r3, #0
 800223a:	f040 81a4 	bne.w	8002586 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800223e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002242:	2b00      	cmp	r3, #0
 8002244:	f040 819f 	bne.w	8002586 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6819      	ldr	r1, [r3, #0]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	461a      	mov	r2, r3
 8002256:	f7ff fbc9 	bl	80019ec <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	08db      	lsrs	r3, r3, #3
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	2b04      	cmp	r3, #4
 800227a:	d00a      	beq.n	8002292 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	6919      	ldr	r1, [r3, #16]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800228c:	f7ff fb1a 	bl	80018c4 <LL_ADC_SetOffset>
 8002290:	e179      	b.n	8002586 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fb37 	bl	800190c <LL_ADC_GetOffsetChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10a      	bne.n	80022be <HAL_ADC_ConfigChannel+0x14e>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2100      	movs	r1, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fb2c 	bl	800190c <LL_ADC_GetOffsetChannel>
 80022b4:	4603      	mov	r3, r0
 80022b6:	0e9b      	lsrs	r3, r3, #26
 80022b8:	f003 021f 	and.w	r2, r3, #31
 80022bc:	e01e      	b.n	80022fc <HAL_ADC_ConfigChannel+0x18c>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fb21 	bl	800190c <LL_ADC_GetOffsetChannel>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80022d4:	fa93 f3a3 	rbit	r3, r3
 80022d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80022e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80022ec:	2320      	movs	r3, #32
 80022ee:	e004      	b.n	80022fa <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80022f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002304:	2b00      	cmp	r3, #0
 8002306:	d105      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x1a4>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	0e9b      	lsrs	r3, r3, #26
 800230e:	f003 031f 	and.w	r3, r3, #31
 8002312:	e018      	b.n	8002346 <HAL_ADC_ConfigChannel+0x1d6>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002320:	fa93 f3a3 	rbit	r3, r3
 8002324:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002328:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800232c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002330:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002338:	2320      	movs	r3, #32
 800233a:	e004      	b.n	8002346 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800233c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002340:	fab3 f383 	clz	r3, r3
 8002344:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002346:	429a      	cmp	r2, r3
 8002348:	d106      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2200      	movs	r2, #0
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff faf0 	bl	8001938 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2101      	movs	r1, #1
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fad4 	bl	800190c <LL_ADC_GetOffsetChannel>
 8002364:	4603      	mov	r3, r0
 8002366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10a      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x214>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2101      	movs	r1, #1
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fac9 	bl	800190c <LL_ADC_GetOffsetChannel>
 800237a:	4603      	mov	r3, r0
 800237c:	0e9b      	lsrs	r3, r3, #26
 800237e:	f003 021f 	and.w	r2, r3, #31
 8002382:	e01e      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x252>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2101      	movs	r1, #1
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fabe 	bl	800190c <LL_ADC_GetOffsetChannel>
 8002390:	4603      	mov	r3, r0
 8002392:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800239a:	fa93 f3a3 	rbit	r3, r3
 800239e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80023a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80023aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80023b2:	2320      	movs	r3, #32
 80023b4:	e004      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80023b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d105      	bne.n	80023da <HAL_ADC_ConfigChannel+0x26a>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	0e9b      	lsrs	r3, r3, #26
 80023d4:	f003 031f 	and.w	r3, r3, #31
 80023d8:	e018      	b.n	800240c <HAL_ADC_ConfigChannel+0x29c>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80023ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80023f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80023f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80023fe:	2320      	movs	r3, #32
 8002400:	e004      	b.n	800240c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002402:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800240c:	429a      	cmp	r2, r3
 800240e:	d106      	bne.n	800241e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2200      	movs	r2, #0
 8002416:	2101      	movs	r1, #1
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fa8d 	bl	8001938 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2102      	movs	r1, #2
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fa71 	bl	800190c <LL_ADC_GetOffsetChannel>
 800242a:	4603      	mov	r3, r0
 800242c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10a      	bne.n	800244a <HAL_ADC_ConfigChannel+0x2da>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2102      	movs	r1, #2
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fa66 	bl	800190c <LL_ADC_GetOffsetChannel>
 8002440:	4603      	mov	r3, r0
 8002442:	0e9b      	lsrs	r3, r3, #26
 8002444:	f003 021f 	and.w	r2, r3, #31
 8002448:	e01e      	b.n	8002488 <HAL_ADC_ConfigChannel+0x318>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2102      	movs	r1, #2
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fa5b 	bl	800190c <LL_ADC_GetOffsetChannel>
 8002456:	4603      	mov	r3, r0
 8002458:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002468:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800246c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002470:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002478:	2320      	movs	r3, #32
 800247a:	e004      	b.n	8002486 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800247c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002480:	fab3 f383 	clz	r3, r3
 8002484:	b2db      	uxtb	r3, r3
 8002486:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002490:	2b00      	cmp	r3, #0
 8002492:	d105      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x330>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	0e9b      	lsrs	r3, r3, #26
 800249a:	f003 031f 	and.w	r3, r3, #31
 800249e:	e014      	b.n	80024ca <HAL_ADC_ConfigChannel+0x35a>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024a8:	fa93 f3a3 	rbit	r3, r3
 80024ac:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80024ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80024b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80024bc:	2320      	movs	r3, #32
 80024be:	e004      	b.n	80024ca <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80024c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024c4:	fab3 f383 	clz	r3, r3
 80024c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d106      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2200      	movs	r2, #0
 80024d4:	2102      	movs	r1, #2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fa2e 	bl	8001938 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2103      	movs	r1, #3
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fa12 	bl	800190c <LL_ADC_GetOffsetChannel>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10a      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x398>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2103      	movs	r1, #3
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff fa07 	bl	800190c <LL_ADC_GetOffsetChannel>
 80024fe:	4603      	mov	r3, r0
 8002500:	0e9b      	lsrs	r3, r3, #26
 8002502:	f003 021f 	and.w	r2, r3, #31
 8002506:	e017      	b.n	8002538 <HAL_ADC_ConfigChannel+0x3c8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2103      	movs	r1, #3
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff f9fc 	bl	800190c <LL_ADC_GetOffsetChannel>
 8002514:	4603      	mov	r3, r0
 8002516:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800251a:	fa93 f3a3 	rbit	r3, r3
 800251e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002520:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002522:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002524:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800252a:	2320      	movs	r3, #32
 800252c:	e003      	b.n	8002536 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800252e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002530:	fab3 f383 	clz	r3, r3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002540:	2b00      	cmp	r3, #0
 8002542:	d105      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x3e0>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0e9b      	lsrs	r3, r3, #26
 800254a:	f003 031f 	and.w	r3, r3, #31
 800254e:	e011      	b.n	8002574 <HAL_ADC_ConfigChannel+0x404>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800255e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002560:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002562:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002568:	2320      	movs	r3, #32
 800256a:	e003      	b.n	8002574 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800256c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002574:	429a      	cmp	r2, r3
 8002576:	d106      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2200      	movs	r2, #0
 800257e:	2103      	movs	r1, #3
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff f9d9 	bl	8001938 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff faf4 	bl	8001b78 <LL_ADC_IsEnabled>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	f040 8140 	bne.w	8002818 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	6819      	ldr	r1, [r3, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	461a      	mov	r2, r3
 80025a6:	f7ff fa4d 	bl	8001a44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	4a8f      	ldr	r2, [pc, #572]	@ (80027ec <HAL_ADC_ConfigChannel+0x67c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	f040 8131 	bne.w	8002818 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10b      	bne.n	80025de <HAL_ADC_ConfigChannel+0x46e>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	0e9b      	lsrs	r3, r3, #26
 80025cc:	3301      	adds	r3, #1
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	2b09      	cmp	r3, #9
 80025d4:	bf94      	ite	ls
 80025d6:	2301      	movls	r3, #1
 80025d8:	2300      	movhi	r3, #0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	e019      	b.n	8002612 <HAL_ADC_ConfigChannel+0x4a2>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025e6:	fa93 f3a3 	rbit	r3, r3
 80025ea:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80025ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80025f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80025f6:	2320      	movs	r3, #32
 80025f8:	e003      	b.n	8002602 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80025fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025fc:	fab3 f383 	clz	r3, r3
 8002600:	b2db      	uxtb	r3, r3
 8002602:	3301      	adds	r3, #1
 8002604:	f003 031f 	and.w	r3, r3, #31
 8002608:	2b09      	cmp	r3, #9
 800260a:	bf94      	ite	ls
 800260c:	2301      	movls	r3, #1
 800260e:	2300      	movhi	r3, #0
 8002610:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002612:	2b00      	cmp	r3, #0
 8002614:	d079      	beq.n	800270a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800261e:	2b00      	cmp	r3, #0
 8002620:	d107      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x4c2>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	0e9b      	lsrs	r3, r3, #26
 8002628:	3301      	adds	r3, #1
 800262a:	069b      	lsls	r3, r3, #26
 800262c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002630:	e015      	b.n	800265e <HAL_ADC_ConfigChannel+0x4ee>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002640:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002642:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800264a:	2320      	movs	r3, #32
 800264c:	e003      	b.n	8002656 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800264e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	3301      	adds	r3, #1
 8002658:	069b      	lsls	r3, r3, #26
 800265a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002666:	2b00      	cmp	r3, #0
 8002668:	d109      	bne.n	800267e <HAL_ADC_ConfigChannel+0x50e>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	0e9b      	lsrs	r3, r3, #26
 8002670:	3301      	adds	r3, #1
 8002672:	f003 031f 	and.w	r3, r3, #31
 8002676:	2101      	movs	r1, #1
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	e017      	b.n	80026ae <HAL_ADC_ConfigChannel+0x53e>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800268c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800268e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002696:	2320      	movs	r3, #32
 8002698:	e003      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800269a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	3301      	adds	r3, #1
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	2101      	movs	r1, #1
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	ea42 0103 	orr.w	r1, r2, r3
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10a      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x564>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	0e9b      	lsrs	r3, r3, #26
 80026c4:	3301      	adds	r3, #1
 80026c6:	f003 021f 	and.w	r2, r3, #31
 80026ca:	4613      	mov	r3, r2
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4413      	add	r3, r2
 80026d0:	051b      	lsls	r3, r3, #20
 80026d2:	e018      	b.n	8002706 <HAL_ADC_ConfigChannel+0x596>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80026e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80026e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80026ec:	2320      	movs	r3, #32
 80026ee:	e003      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80026f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	f003 021f 	and.w	r2, r3, #31
 80026fe:	4613      	mov	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002706:	430b      	orrs	r3, r1
 8002708:	e081      	b.n	800280e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002712:	2b00      	cmp	r3, #0
 8002714:	d107      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x5b6>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	0e9b      	lsrs	r3, r3, #26
 800271c:	3301      	adds	r3, #1
 800271e:	069b      	lsls	r3, r3, #26
 8002720:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002724:	e015      	b.n	8002752 <HAL_ADC_ConfigChannel+0x5e2>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800272e:	fa93 f3a3 	rbit	r3, r3
 8002732:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800273e:	2320      	movs	r3, #32
 8002740:	e003      	b.n	800274a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002744:	fab3 f383 	clz	r3, r3
 8002748:	b2db      	uxtb	r3, r3
 800274a:	3301      	adds	r3, #1
 800274c:	069b      	lsls	r3, r3, #26
 800274e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275a:	2b00      	cmp	r3, #0
 800275c:	d109      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x602>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	0e9b      	lsrs	r3, r3, #26
 8002764:	3301      	adds	r3, #1
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	2101      	movs	r1, #1
 800276c:	fa01 f303 	lsl.w	r3, r1, r3
 8002770:	e017      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x632>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	fa93 f3a3 	rbit	r3, r3
 800277e:	61bb      	str	r3, [r7, #24]
  return result;
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800278a:	2320      	movs	r3, #32
 800278c:	e003      	b.n	8002796 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	fab3 f383 	clz	r3, r3
 8002794:	b2db      	uxtb	r3, r3
 8002796:	3301      	adds	r3, #1
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	2101      	movs	r1, #1
 800279e:	fa01 f303 	lsl.w	r3, r1, r3
 80027a2:	ea42 0103 	orr.w	r1, r2, r3
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10d      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x65e>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	0e9b      	lsrs	r3, r3, #26
 80027b8:	3301      	adds	r3, #1
 80027ba:	f003 021f 	and.w	r2, r3, #31
 80027be:	4613      	mov	r3, r2
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	4413      	add	r3, r2
 80027c4:	3b1e      	subs	r3, #30
 80027c6:	051b      	lsls	r3, r3, #20
 80027c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027cc:	e01e      	b.n	800280c <HAL_ADC_ConfigChannel+0x69c>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	60fb      	str	r3, [r7, #12]
  return result;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d104      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80027e6:	2320      	movs	r3, #32
 80027e8:	e006      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x688>
 80027ea:	bf00      	nop
 80027ec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	3301      	adds	r3, #1
 80027fa:	f003 021f 	and.w	r2, r3, #31
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	3b1e      	subs	r3, #30
 8002806:	051b      	lsls	r3, r3, #20
 8002808:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800280c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002812:	4619      	mov	r1, r3
 8002814:	f7ff f8ea 	bl	80019ec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b3d      	ldr	r3, [pc, #244]	@ (8002914 <HAL_ADC_ConfigChannel+0x7a4>)
 800281e:	4013      	ands	r3, r2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d06c      	beq.n	80028fe <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002824:	483c      	ldr	r0, [pc, #240]	@ (8002918 <HAL_ADC_ConfigChannel+0x7a8>)
 8002826:	f7ff f83f 	bl	80018a8 <LL_ADC_GetCommonPathInternalCh>
 800282a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a3a      	ldr	r2, [pc, #232]	@ (800291c <HAL_ADC_ConfigChannel+0x7ac>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d127      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002838:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800283c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d121      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a35      	ldr	r2, [pc, #212]	@ (8002920 <HAL_ADC_ConfigChannel+0x7b0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d157      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800284e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002852:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002856:	4619      	mov	r1, r3
 8002858:	482f      	ldr	r0, [pc, #188]	@ (8002918 <HAL_ADC_ConfigChannel+0x7a8>)
 800285a:	f7ff f812 	bl	8001882 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800285e:	4b31      	ldr	r3, [pc, #196]	@ (8002924 <HAL_ADC_ConfigChannel+0x7b4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	099b      	lsrs	r3, r3, #6
 8002864:	4a30      	ldr	r2, [pc, #192]	@ (8002928 <HAL_ADC_ConfigChannel+0x7b8>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	099b      	lsrs	r3, r3, #6
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	4613      	mov	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002878:	e002      	b.n	8002880 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	3b01      	subs	r3, #1
 800287e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f9      	bne.n	800287a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002886:	e03a      	b.n	80028fe <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a27      	ldr	r2, [pc, #156]	@ (800292c <HAL_ADC_ConfigChannel+0x7bc>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d113      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002892:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002896:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10d      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002920 <HAL_ADC_ConfigChannel+0x7b0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d12a      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028b0:	4619      	mov	r1, r3
 80028b2:	4819      	ldr	r0, [pc, #100]	@ (8002918 <HAL_ADC_ConfigChannel+0x7a8>)
 80028b4:	f7fe ffe5 	bl	8001882 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028b8:	e021      	b.n	80028fe <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a1c      	ldr	r2, [pc, #112]	@ (8002930 <HAL_ADC_ConfigChannel+0x7c0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d11c      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d116      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a12      	ldr	r2, [pc, #72]	@ (8002920 <HAL_ADC_ConfigChannel+0x7b0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d111      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028e2:	4619      	mov	r1, r3
 80028e4:	480c      	ldr	r0, [pc, #48]	@ (8002918 <HAL_ADC_ConfigChannel+0x7a8>)
 80028e6:	f7fe ffcc 	bl	8001882 <LL_ADC_SetCommonPathInternalCh>
 80028ea:	e008      	b.n	80028fe <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f0:	f043 0220 	orr.w	r2, r3, #32
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002906:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800290a:	4618      	mov	r0, r3
 800290c:	37d8      	adds	r7, #216	@ 0xd8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	80080000 	.word	0x80080000
 8002918:	50040300 	.word	0x50040300
 800291c:	c7520000 	.word	0xc7520000
 8002920:	50040000 	.word	0x50040000
 8002924:	20000000 	.word	0x20000000
 8002928:	053e2d63 	.word	0x053e2d63
 800292c:	cb840000 	.word	0xcb840000
 8002930:	80000001 	.word	0x80000001

08002934 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff f962 	bl	8001c14 <LL_ADC_REG_IsConversionOngoing>
 8002950:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff f983 	bl	8001c62 <LL_ADC_INJ_IsConversionOngoing>
 800295c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d103      	bne.n	800296c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 8098 	beq.w	8002a9c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d02a      	beq.n	80029d0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	7e5b      	ldrb	r3, [r3, #25]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d126      	bne.n	80029d0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7e1b      	ldrb	r3, [r3, #24]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d122      	bne.n	80029d0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800298a:	2301      	movs	r3, #1
 800298c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800298e:	e014      	b.n	80029ba <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	4a45      	ldr	r2, [pc, #276]	@ (8002aa8 <ADC_ConversionStop+0x174>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d90d      	bls.n	80029b4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299c:	f043 0210 	orr.w	r2, r3, #16
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a8:	f043 0201 	orr.w	r2, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e074      	b.n	8002a9e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	3301      	adds	r3, #1
 80029b8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c4:	2b40      	cmp	r3, #64	@ 0x40
 80029c6:	d1e3      	bne.n	8002990 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2240      	movs	r2, #64	@ 0x40
 80029ce:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d014      	beq.n	8002a00 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff f91a 	bl	8001c14 <LL_ADC_REG_IsConversionOngoing>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00c      	beq.n	8002a00 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff f8d7 	bl	8001b9e <LL_ADC_IsDisableOngoing>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d104      	bne.n	8002a00 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff f8f6 	bl	8001bec <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d014      	beq.n	8002a30 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff f929 	bl	8001c62 <LL_ADC_INJ_IsConversionOngoing>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00c      	beq.n	8002a30 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff f8bf 	bl	8001b9e <LL_ADC_IsDisableOngoing>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d104      	bne.n	8002a30 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff f905 	bl	8001c3a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d005      	beq.n	8002a42 <ADC_ConversionStop+0x10e>
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d105      	bne.n	8002a48 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002a3c:	230c      	movs	r3, #12
 8002a3e:	617b      	str	r3, [r7, #20]
        break;
 8002a40:	e005      	b.n	8002a4e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002a42:	2308      	movs	r3, #8
 8002a44:	617b      	str	r3, [r7, #20]
        break;
 8002a46:	e002      	b.n	8002a4e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002a48:	2304      	movs	r3, #4
 8002a4a:	617b      	str	r3, [r7, #20]
        break;
 8002a4c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002a4e:	f7fe fef9 	bl	8001844 <HAL_GetTick>
 8002a52:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a54:	e01b      	b.n	8002a8e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002a56:	f7fe fef5 	bl	8001844 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b05      	cmp	r3, #5
 8002a62:	d914      	bls.n	8002a8e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00d      	beq.n	8002a8e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a76:	f043 0210 	orr.w	r2, r3, #16
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a82:	f043 0201 	orr.w	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e007      	b.n	8002a9e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1dc      	bne.n	8002a56 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3720      	adds	r7, #32
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	a33fffff 	.word	0xa33fffff

08002aac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff f85b 	bl	8001b78 <LL_ADC_IsEnabled>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d169      	bne.n	8002b9c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	4b36      	ldr	r3, [pc, #216]	@ (8002ba8 <ADC_Enable+0xfc>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00d      	beq.n	8002af2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ada:	f043 0210 	orr.w	r2, r3, #16
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae6:	f043 0201 	orr.w	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e055      	b.n	8002b9e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff f816 	bl	8001b28 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002afc:	482b      	ldr	r0, [pc, #172]	@ (8002bac <ADC_Enable+0x100>)
 8002afe:	f7fe fed3 	bl	80018a8 <LL_ADC_GetCommonPathInternalCh>
 8002b02:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d013      	beq.n	8002b34 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b0c:	4b28      	ldr	r3, [pc, #160]	@ (8002bb0 <ADC_Enable+0x104>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	099b      	lsrs	r3, r3, #6
 8002b12:	4a28      	ldr	r2, [pc, #160]	@ (8002bb4 <ADC_Enable+0x108>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	099b      	lsrs	r3, r3, #6
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b26:	e002      	b.n	8002b2e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f9      	bne.n	8002b28 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b34:	f7fe fe86 	bl	8001844 <HAL_GetTick>
 8002b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b3a:	e028      	b.n	8002b8e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff f819 	bl	8001b78 <LL_ADC_IsEnabled>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d104      	bne.n	8002b56 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe ffe9 	bl	8001b28 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b56:	f7fe fe75 	bl	8001844 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d914      	bls.n	8002b8e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d00d      	beq.n	8002b8e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b76:	f043 0210 	orr.w	r2, r3, #16
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b82:	f043 0201 	orr.w	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e007      	b.n	8002b9e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d1cf      	bne.n	8002b3c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	8000003f 	.word	0x8000003f
 8002bac:	50040300 	.word	0x50040300
 8002bb0:	20000000 	.word	0x20000000
 8002bb4:	053e2d63 	.word	0x053e2d63

08002bb8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe ffea 	bl	8001b9e <LL_ADC_IsDisableOngoing>
 8002bca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fe ffd1 	bl	8001b78 <LL_ADC_IsEnabled>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d047      	beq.n	8002c6c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d144      	bne.n	8002c6c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 030d 	and.w	r3, r3, #13
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d10c      	bne.n	8002c0a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe ffab 	bl	8001b50 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2203      	movs	r2, #3
 8002c00:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c02:	f7fe fe1f 	bl	8001844 <HAL_GetTick>
 8002c06:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c08:	e029      	b.n	8002c5e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0e:	f043 0210 	orr.w	r2, r3, #16
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1a:	f043 0201 	orr.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e023      	b.n	8002c6e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c26:	f7fe fe0d 	bl	8001844 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d914      	bls.n	8002c5e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00d      	beq.n	8002c5e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c46:	f043 0210 	orr.w	r2, r3, #16
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c52:	f043 0201 	orr.w	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e007      	b.n	8002c6e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1dc      	bne.n	8002c26 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c88:	4b0c      	ldr	r3, [pc, #48]	@ (8002cbc <__NVIC_SetPriorityGrouping+0x44>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c94:	4013      	ands	r3, r2
 8002c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ca0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002caa:	4a04      	ldr	r2, [pc, #16]	@ (8002cbc <__NVIC_SetPriorityGrouping+0x44>)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	60d3      	str	r3, [r2, #12]
}
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc4:	4b04      	ldr	r3, [pc, #16]	@ (8002cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	0a1b      	lsrs	r3, r3, #8
 8002cca:	f003 0307 	and.w	r3, r3, #7
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	db0b      	blt.n	8002d06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	f003 021f 	and.w	r2, r3, #31
 8002cf4:	4907      	ldr	r1, [pc, #28]	@ (8002d14 <__NVIC_EnableIRQ+0x38>)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	e000e100 	.word	0xe000e100

08002d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	6039      	str	r1, [r7, #0]
 8002d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	db0a      	blt.n	8002d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	490c      	ldr	r1, [pc, #48]	@ (8002d64 <__NVIC_SetPriority+0x4c>)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	0112      	lsls	r2, r2, #4
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d40:	e00a      	b.n	8002d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	4908      	ldr	r1, [pc, #32]	@ (8002d68 <__NVIC_SetPriority+0x50>)
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	3b04      	subs	r3, #4
 8002d50:	0112      	lsls	r2, r2, #4
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	440b      	add	r3, r1
 8002d56:	761a      	strb	r2, [r3, #24]
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000e100 	.word	0xe000e100
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b089      	sub	sp, #36	@ 0x24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f1c3 0307 	rsb	r3, r3, #7
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	bf28      	it	cs
 8002d8a:	2304      	movcs	r3, #4
 8002d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	3304      	adds	r3, #4
 8002d92:	2b06      	cmp	r3, #6
 8002d94:	d902      	bls.n	8002d9c <NVIC_EncodePriority+0x30>
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	3b03      	subs	r3, #3
 8002d9a:	e000      	b.n	8002d9e <NVIC_EncodePriority+0x32>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43da      	mvns	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	401a      	ands	r2, r3
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002db4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbe:	43d9      	mvns	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc4:	4313      	orrs	r3, r2
         );
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3724      	adds	r7, #36	@ 0x24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002de4:	d301      	bcc.n	8002dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002de6:	2301      	movs	r3, #1
 8002de8:	e00f      	b.n	8002e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dea:	4a0a      	ldr	r2, [pc, #40]	@ (8002e14 <SysTick_Config+0x40>)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002df2:	210f      	movs	r1, #15
 8002df4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002df8:	f7ff ff8e 	bl	8002d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dfc:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <SysTick_Config+0x40>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e02:	4b04      	ldr	r3, [pc, #16]	@ (8002e14 <SysTick_Config+0x40>)
 8002e04:	2207      	movs	r2, #7
 8002e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	e000e010 	.word	0xe000e010

08002e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff ff29 	bl	8002c78 <__NVIC_SetPriorityGrouping>
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b086      	sub	sp, #24
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	4603      	mov	r3, r0
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
 8002e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e40:	f7ff ff3e 	bl	8002cc0 <__NVIC_GetPriorityGrouping>
 8002e44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	6978      	ldr	r0, [r7, #20]
 8002e4c:	f7ff ff8e 	bl	8002d6c <NVIC_EncodePriority>
 8002e50:	4602      	mov	r2, r0
 8002e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e56:	4611      	mov	r1, r2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ff5d 	bl	8002d18 <__NVIC_SetPriority>
}
 8002e5e:	bf00      	nop
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff ff31 	bl	8002cdc <__NVIC_EnableIRQ>
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff ffa2 	bl	8002dd4 <SysTick_Config>
 8002e90:	4603      	mov	r3, r0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b085      	sub	sp, #20
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d008      	beq.n	8002ec4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2204      	movs	r2, #4
 8002eb6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e022      	b.n	8002f0a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 020e 	bic.w	r2, r2, #14
 8002ed2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0201 	bic.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee8:	f003 021c 	and.w	r2, r3, #28
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d005      	beq.n	8002f3a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2204      	movs	r2, #4
 8002f32:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
 8002f38:	e029      	b.n	8002f8e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 020e 	bic.w	r2, r2, #14
 8002f48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5e:	f003 021c 	and.w	r2, r3, #28
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	2101      	movs	r1, #1
 8002f68:	fa01 f202 	lsl.w	r2, r1, r2
 8002f6c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	4798      	blx	r3
    }
  }
  return status;
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fa6:	e148      	b.n	800323a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	2101      	movs	r1, #1
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 813a 	beq.w	8003234 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d005      	beq.n	8002fd8 <HAL_GPIO_Init+0x40>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d130      	bne.n	800303a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4013      	ands	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800300e:	2201      	movs	r2, #1
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43db      	mvns	r3, r3
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4013      	ands	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	091b      	lsrs	r3, r3, #4
 8003024:	f003 0201 	and.w	r2, r3, #1
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b03      	cmp	r3, #3
 8003044:	d017      	beq.n	8003076 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	2203      	movs	r2, #3
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4013      	ands	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d123      	bne.n	80030ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	08da      	lsrs	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3208      	adds	r2, #8
 800308a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800308e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	220f      	movs	r2, #15
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4013      	ands	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	691a      	ldr	r2, [r3, #16]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	08da      	lsrs	r2, r3, #3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3208      	adds	r2, #8
 80030c4:	6939      	ldr	r1, [r7, #16]
 80030c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	2203      	movs	r2, #3
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4013      	ands	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 0203 	and.w	r2, r3, #3
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 8094 	beq.w	8003234 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310c:	4b52      	ldr	r3, [pc, #328]	@ (8003258 <HAL_GPIO_Init+0x2c0>)
 800310e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003110:	4a51      	ldr	r2, [pc, #324]	@ (8003258 <HAL_GPIO_Init+0x2c0>)
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	6613      	str	r3, [r2, #96]	@ 0x60
 8003118:	4b4f      	ldr	r3, [pc, #316]	@ (8003258 <HAL_GPIO_Init+0x2c0>)
 800311a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003124:	4a4d      	ldr	r2, [pc, #308]	@ (800325c <HAL_GPIO_Init+0x2c4>)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	089b      	lsrs	r3, r3, #2
 800312a:	3302      	adds	r3, #2
 800312c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003130:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	220f      	movs	r2, #15
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4013      	ands	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800314e:	d00d      	beq.n	800316c <HAL_GPIO_Init+0x1d4>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a43      	ldr	r2, [pc, #268]	@ (8003260 <HAL_GPIO_Init+0x2c8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d007      	beq.n	8003168 <HAL_GPIO_Init+0x1d0>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a42      	ldr	r2, [pc, #264]	@ (8003264 <HAL_GPIO_Init+0x2cc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d101      	bne.n	8003164 <HAL_GPIO_Init+0x1cc>
 8003160:	2302      	movs	r3, #2
 8003162:	e004      	b.n	800316e <HAL_GPIO_Init+0x1d6>
 8003164:	2307      	movs	r3, #7
 8003166:	e002      	b.n	800316e <HAL_GPIO_Init+0x1d6>
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <HAL_GPIO_Init+0x1d6>
 800316c:	2300      	movs	r3, #0
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	f002 0203 	and.w	r2, r2, #3
 8003174:	0092      	lsls	r2, r2, #2
 8003176:	4093      	lsls	r3, r2
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800317e:	4937      	ldr	r1, [pc, #220]	@ (800325c <HAL_GPIO_Init+0x2c4>)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	3302      	adds	r3, #2
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800318c:	4b36      	ldr	r3, [pc, #216]	@ (8003268 <HAL_GPIO_Init+0x2d0>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	43db      	mvns	r3, r3
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4013      	ands	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003268 <HAL_GPIO_Init+0x2d0>)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031b6:	4b2c      	ldr	r3, [pc, #176]	@ (8003268 <HAL_GPIO_Init+0x2d0>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	43db      	mvns	r3, r3
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4013      	ands	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031da:	4a23      	ldr	r2, [pc, #140]	@ (8003268 <HAL_GPIO_Init+0x2d0>)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031e0:	4b21      	ldr	r3, [pc, #132]	@ (8003268 <HAL_GPIO_Init+0x2d0>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	43db      	mvns	r3, r3
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4013      	ands	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003204:	4a18      	ldr	r2, [pc, #96]	@ (8003268 <HAL_GPIO_Init+0x2d0>)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800320a:	4b17      	ldr	r3, [pc, #92]	@ (8003268 <HAL_GPIO_Init+0x2d0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	43db      	mvns	r3, r3
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4013      	ands	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800322e:	4a0e      	ldr	r2, [pc, #56]	@ (8003268 <HAL_GPIO_Init+0x2d0>)
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	3301      	adds	r3, #1
 8003238:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	f47f aeaf 	bne.w	8002fa8 <HAL_GPIO_Init+0x10>
  }
}
 800324a:	bf00      	nop
 800324c:	bf00      	nop
 800324e:	371c      	adds	r7, #28
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40021000 	.word	0x40021000
 800325c:	40010000 	.word	0x40010000
 8003260:	48000400 	.word	0x48000400
 8003264:	48000800 	.word	0x48000800
 8003268:	40010400 	.word	0x40010400

0800326c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	807b      	strh	r3, [r7, #2]
 8003278:	4613      	mov	r3, r2
 800327a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800327c:	787b      	ldrb	r3, [r7, #1]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003282:	887a      	ldrh	r2, [r7, #2]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003288:	e002      	b.n	8003290 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800328a:	887a      	ldrh	r2, [r7, #2]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032a6:	4b08      	ldr	r3, [pc, #32]	@ (80032c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d006      	beq.n	80032c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032b2:	4a05      	ldr	r2, [pc, #20]	@ (80032c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032b4:	88fb      	ldrh	r3, [r7, #6]
 80032b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd ffbc 	bl	8001238 <HAL_GPIO_EXTI_Callback>
  }
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40010400 	.word	0x40010400

080032cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032d0:	4b04      	ldr	r3, [pc, #16]	@ (80032e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80032d8:	4618      	mov	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40007000 	.word	0x40007000

080032e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032f6:	d130      	bne.n	800335a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032f8:	4b23      	ldr	r3, [pc, #140]	@ (8003388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003304:	d038      	beq.n	8003378 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003306:	4b20      	ldr	r3, [pc, #128]	@ (8003388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800330e:	4a1e      	ldr	r2, [pc, #120]	@ (8003388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003310:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003314:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003316:	4b1d      	ldr	r3, [pc, #116]	@ (800338c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2232      	movs	r2, #50	@ 0x32
 800331c:	fb02 f303 	mul.w	r3, r2, r3
 8003320:	4a1b      	ldr	r2, [pc, #108]	@ (8003390 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	0c9b      	lsrs	r3, r3, #18
 8003328:	3301      	adds	r3, #1
 800332a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800332c:	e002      	b.n	8003334 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	3b01      	subs	r3, #1
 8003332:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003334:	4b14      	ldr	r3, [pc, #80]	@ (8003388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800333c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003340:	d102      	bne.n	8003348 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f2      	bne.n	800332e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003348:	4b0f      	ldr	r3, [pc, #60]	@ (8003388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003354:	d110      	bne.n	8003378 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e00f      	b.n	800337a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800335a:	4b0b      	ldr	r3, [pc, #44]	@ (8003388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003366:	d007      	beq.n	8003378 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003368:	4b07      	ldr	r3, [pc, #28]	@ (8003388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003370:	4a05      	ldr	r2, [pc, #20]	@ (8003388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003372:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003376:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40007000 	.word	0x40007000
 800338c:	20000000 	.word	0x20000000
 8003390:	431bde83 	.word	0x431bde83

08003394 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d102      	bne.n	80033a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f000 bc02 	b.w	8003bac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a8:	4b96      	ldr	r3, [pc, #600]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 030c 	and.w	r3, r3, #12
 80033b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033b2:	4b94      	ldr	r3, [pc, #592]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 80e4 	beq.w	8003592 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <HAL_RCC_OscConfig+0x4c>
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	2b0c      	cmp	r3, #12
 80033d4:	f040 808b 	bne.w	80034ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	f040 8087 	bne.w	80034ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033e0:	4b88      	ldr	r3, [pc, #544]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_RCC_OscConfig+0x64>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e3d9      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a1a      	ldr	r2, [r3, #32]
 80033fc:	4b81      	ldr	r3, [pc, #516]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d004      	beq.n	8003412 <HAL_RCC_OscConfig+0x7e>
 8003408:	4b7e      	ldr	r3, [pc, #504]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003410:	e005      	b.n	800341e <HAL_RCC_OscConfig+0x8a>
 8003412:	4b7c      	ldr	r3, [pc, #496]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003414:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800341e:	4293      	cmp	r3, r2
 8003420:	d223      	bcs.n	800346a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fd8c 	bl	8003f44 <RCC_SetFlashLatencyFromMSIRange>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e3ba      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003436:	4b73      	ldr	r3, [pc, #460]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a72      	ldr	r2, [pc, #456]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 800343c:	f043 0308 	orr.w	r3, r3, #8
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b70      	ldr	r3, [pc, #448]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	496d      	ldr	r1, [pc, #436]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003450:	4313      	orrs	r3, r2
 8003452:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003454:	4b6b      	ldr	r3, [pc, #428]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	4968      	ldr	r1, [pc, #416]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]
 8003468:	e025      	b.n	80034b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800346a:	4b66      	ldr	r3, [pc, #408]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a65      	ldr	r2, [pc, #404]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003470:	f043 0308 	orr.w	r3, r3, #8
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	4b63      	ldr	r3, [pc, #396]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	4960      	ldr	r1, [pc, #384]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003484:	4313      	orrs	r3, r2
 8003486:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003488:	4b5e      	ldr	r3, [pc, #376]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	021b      	lsls	r3, r3, #8
 8003496:	495b      	ldr	r1, [pc, #364]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d109      	bne.n	80034b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fd4c 	bl	8003f44 <RCC_SetFlashLatencyFromMSIRange>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e37a      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034b6:	f000 fc81 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 80034ba:	4602      	mov	r2, r0
 80034bc:	4b51      	ldr	r3, [pc, #324]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	4950      	ldr	r1, [pc, #320]	@ (8003608 <HAL_RCC_OscConfig+0x274>)
 80034c8:	5ccb      	ldrb	r3, [r1, r3]
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	fa22 f303 	lsr.w	r3, r2, r3
 80034d2:	4a4e      	ldr	r2, [pc, #312]	@ (800360c <HAL_RCC_OscConfig+0x278>)
 80034d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003610 <HAL_RCC_OscConfig+0x27c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fe f962 	bl	80017a4 <HAL_InitTick>
 80034e0:	4603      	mov	r3, r0
 80034e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d052      	beq.n	8003590 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	e35e      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d032      	beq.n	800355c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034f6:	4b43      	ldr	r3, [pc, #268]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a42      	ldr	r2, [pc, #264]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003502:	f7fe f99f 	bl	8001844 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800350a:	f7fe f99b 	bl	8001844 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e347      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800351c:	4b39      	ldr	r3, [pc, #228]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f0      	beq.n	800350a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003528:	4b36      	ldr	r3, [pc, #216]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a35      	ldr	r2, [pc, #212]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 800352e:	f043 0308 	orr.w	r3, r3, #8
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	4b33      	ldr	r3, [pc, #204]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	4930      	ldr	r1, [pc, #192]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003546:	4b2f      	ldr	r3, [pc, #188]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	021b      	lsls	r3, r3, #8
 8003554:	492b      	ldr	r1, [pc, #172]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003556:	4313      	orrs	r3, r2
 8003558:	604b      	str	r3, [r1, #4]
 800355a:	e01a      	b.n	8003592 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800355c:	4b29      	ldr	r3, [pc, #164]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a28      	ldr	r2, [pc, #160]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003562:	f023 0301 	bic.w	r3, r3, #1
 8003566:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003568:	f7fe f96c 	bl	8001844 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003570:	f7fe f968 	bl	8001844 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e314      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003582:	4b20      	ldr	r3, [pc, #128]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x1dc>
 800358e:	e000      	b.n	8003592 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003590:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d073      	beq.n	8003686 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_OscConfig+0x21c>
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	2b0c      	cmp	r3, #12
 80035a8:	d10e      	bne.n	80035c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d10b      	bne.n	80035c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b0:	4b14      	ldr	r3, [pc, #80]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d063      	beq.n	8003684 <HAL_RCC_OscConfig+0x2f0>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d15f      	bne.n	8003684 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e2f1      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035d0:	d106      	bne.n	80035e0 <HAL_RCC_OscConfig+0x24c>
 80035d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a0b      	ldr	r2, [pc, #44]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80035d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	e025      	b.n	800362c <HAL_RCC_OscConfig+0x298>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035e8:	d114      	bne.n	8003614 <HAL_RCC_OscConfig+0x280>
 80035ea:	4b06      	ldr	r3, [pc, #24]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a05      	ldr	r2, [pc, #20]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80035f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	4b03      	ldr	r3, [pc, #12]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a02      	ldr	r2, [pc, #8]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80035fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	e013      	b.n	800362c <HAL_RCC_OscConfig+0x298>
 8003604:	40021000 	.word	0x40021000
 8003608:	08006860 	.word	0x08006860
 800360c:	20000000 	.word	0x20000000
 8003610:	20000004 	.word	0x20000004
 8003614:	4ba0      	ldr	r3, [pc, #640]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a9f      	ldr	r2, [pc, #636]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 800361a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	4b9d      	ldr	r3, [pc, #628]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a9c      	ldr	r2, [pc, #624]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800362a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d013      	beq.n	800365c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fe f906 	bl	8001844 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fe f902 	bl	8001844 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	@ 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e2ae      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364e:	4b92      	ldr	r3, [pc, #584]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0x2a8>
 800365a:	e014      	b.n	8003686 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fe f8f2 	bl	8001844 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003664:	f7fe f8ee 	bl	8001844 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	@ 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e29a      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003676:	4b88      	ldr	r3, [pc, #544]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x2d0>
 8003682:	e000      	b.n	8003686 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d060      	beq.n	8003754 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	2b04      	cmp	r3, #4
 8003696:	d005      	beq.n	80036a4 <HAL_RCC_OscConfig+0x310>
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	2b0c      	cmp	r3, #12
 800369c:	d119      	bne.n	80036d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d116      	bne.n	80036d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036a4:	4b7c      	ldr	r3, [pc, #496]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <HAL_RCC_OscConfig+0x328>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e277      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036bc:	4b76      	ldr	r3, [pc, #472]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	061b      	lsls	r3, r3, #24
 80036ca:	4973      	ldr	r1, [pc, #460]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036d0:	e040      	b.n	8003754 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d023      	beq.n	8003722 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036da:	4b6f      	ldr	r3, [pc, #444]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a6e      	ldr	r2, [pc, #440]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 80036e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e6:	f7fe f8ad 	bl	8001844 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ee:	f7fe f8a9 	bl	8001844 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e255      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003700:	4b65      	ldr	r3, [pc, #404]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370c:	4b62      	ldr	r3, [pc, #392]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	061b      	lsls	r3, r3, #24
 800371a:	495f      	ldr	r1, [pc, #380]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]
 8003720:	e018      	b.n	8003754 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003722:	4b5d      	ldr	r3, [pc, #372]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a5c      	ldr	r2, [pc, #368]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003728:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800372c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372e:	f7fe f889 	bl	8001844 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003736:	f7fe f885 	bl	8001844 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e231      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003748:	4b53      	ldr	r3, [pc, #332]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f0      	bne.n	8003736 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d03c      	beq.n	80037da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d01c      	beq.n	80037a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003768:	4b4b      	ldr	r3, [pc, #300]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 800376a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800376e:	4a4a      	ldr	r2, [pc, #296]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003778:	f7fe f864 	bl	8001844 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003780:	f7fe f860 	bl	8001844 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e20c      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003792:	4b41      	ldr	r3, [pc, #260]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003794:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0ef      	beq.n	8003780 <HAL_RCC_OscConfig+0x3ec>
 80037a0:	e01b      	b.n	80037da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 80037a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037a8:	4a3b      	ldr	r2, [pc, #236]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 80037aa:	f023 0301 	bic.w	r3, r3, #1
 80037ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b2:	f7fe f847 	bl	8001844 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ba:	f7fe f843 	bl	8001844 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e1ef      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037cc:	4b32      	ldr	r3, [pc, #200]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 80037ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1ef      	bne.n	80037ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 80a6 	beq.w	8003934 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e8:	2300      	movs	r3, #0
 80037ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 80037ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10d      	bne.n	8003814 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f8:	4b27      	ldr	r3, [pc, #156]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fc:	4a26      	ldr	r2, [pc, #152]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 80037fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003802:	6593      	str	r3, [r2, #88]	@ 0x58
 8003804:	4b24      	ldr	r3, [pc, #144]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003810:	2301      	movs	r3, #1
 8003812:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003814:	4b21      	ldr	r3, [pc, #132]	@ (800389c <HAL_RCC_OscConfig+0x508>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381c:	2b00      	cmp	r3, #0
 800381e:	d118      	bne.n	8003852 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003820:	4b1e      	ldr	r3, [pc, #120]	@ (800389c <HAL_RCC_OscConfig+0x508>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1d      	ldr	r2, [pc, #116]	@ (800389c <HAL_RCC_OscConfig+0x508>)
 8003826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800382a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382c:	f7fe f80a 	bl	8001844 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003834:	f7fe f806 	bl	8001844 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e1b2      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003846:	4b15      	ldr	r3, [pc, #84]	@ (800389c <HAL_RCC_OscConfig+0x508>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0f0      	beq.n	8003834 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d108      	bne.n	800386c <HAL_RCC_OscConfig+0x4d8>
 800385a:	4b0f      	ldr	r3, [pc, #60]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003860:	4a0d      	ldr	r2, [pc, #52]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800386a:	e029      	b.n	80038c0 <HAL_RCC_OscConfig+0x52c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b05      	cmp	r3, #5
 8003872:	d115      	bne.n	80038a0 <HAL_RCC_OscConfig+0x50c>
 8003874:	4b08      	ldr	r3, [pc, #32]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387a:	4a07      	ldr	r2, [pc, #28]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 800387c:	f043 0304 	orr.w	r3, r3, #4
 8003880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003884:	4b04      	ldr	r3, [pc, #16]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388a:	4a03      	ldr	r2, [pc, #12]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003894:	e014      	b.n	80038c0 <HAL_RCC_OscConfig+0x52c>
 8003896:	bf00      	nop
 8003898:	40021000 	.word	0x40021000
 800389c:	40007000 	.word	0x40007000
 80038a0:	4b9a      	ldr	r3, [pc, #616]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a6:	4a99      	ldr	r2, [pc, #612]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 80038a8:	f023 0301 	bic.w	r3, r3, #1
 80038ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038b0:	4b96      	ldr	r3, [pc, #600]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b6:	4a95      	ldr	r2, [pc, #596]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 80038b8:	f023 0304 	bic.w	r3, r3, #4
 80038bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d016      	beq.n	80038f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c8:	f7fd ffbc 	bl	8001844 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ce:	e00a      	b.n	80038e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d0:	f7fd ffb8 	bl	8001844 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e162      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e6:	4b89      	ldr	r3, [pc, #548]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ed      	beq.n	80038d0 <HAL_RCC_OscConfig+0x53c>
 80038f4:	e015      	b.n	8003922 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f6:	f7fd ffa5 	bl	8001844 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038fc:	e00a      	b.n	8003914 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fe:	f7fd ffa1 	bl	8001844 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f241 3288 	movw	r2, #5000	@ 0x1388
 800390c:	4293      	cmp	r3, r2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e14b      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003914:	4b7d      	ldr	r3, [pc, #500]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 8003916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1ed      	bne.n	80038fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003922:	7ffb      	ldrb	r3, [r7, #31]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d105      	bne.n	8003934 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003928:	4b78      	ldr	r3, [pc, #480]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 800392a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392c:	4a77      	ldr	r2, [pc, #476]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 800392e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003932:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b00      	cmp	r3, #0
 800393e:	d03c      	beq.n	80039ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003944:	2b00      	cmp	r3, #0
 8003946:	d01c      	beq.n	8003982 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003948:	4b70      	ldr	r3, [pc, #448]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 800394a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800394e:	4a6f      	ldr	r2, [pc, #444]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003958:	f7fd ff74 	bl	8001844 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003960:	f7fd ff70 	bl	8001844 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e11c      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003972:	4b66      	ldr	r3, [pc, #408]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 8003974:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0ef      	beq.n	8003960 <HAL_RCC_OscConfig+0x5cc>
 8003980:	e01b      	b.n	80039ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003982:	4b62      	ldr	r3, [pc, #392]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 8003984:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003988:	4a60      	ldr	r2, [pc, #384]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 800398a:	f023 0301 	bic.w	r3, r3, #1
 800398e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003992:	f7fd ff57 	bl	8001844 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800399a:	f7fd ff53 	bl	8001844 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e0ff      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039ac:	4b57      	ldr	r3, [pc, #348]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 80039ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1ef      	bne.n	800399a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80f3 	beq.w	8003baa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	f040 80c9 	bne.w	8003b60 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039ce:	4b4f      	ldr	r3, [pc, #316]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f003 0203 	and.w	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039de:	429a      	cmp	r2, r3
 80039e0:	d12c      	bne.n	8003a3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ec:	3b01      	subs	r3, #1
 80039ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d123      	bne.n	8003a3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d11b      	bne.n	8003a3c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a0e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d113      	bne.n	8003a3c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1e:	085b      	lsrs	r3, r3, #1
 8003a20:	3b01      	subs	r3, #1
 8003a22:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d109      	bne.n	8003a3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a32:	085b      	lsrs	r3, r3, #1
 8003a34:	3b01      	subs	r3, #1
 8003a36:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d06b      	beq.n	8003b14 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b0c      	cmp	r3, #12
 8003a40:	d062      	beq.n	8003b08 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a42:	4b32      	ldr	r3, [pc, #200]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e0ac      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a52:	4b2e      	ldr	r3, [pc, #184]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a2d      	ldr	r2, [pc, #180]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 8003a58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a5c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a5e:	f7fd fef1 	bl	8001844 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a66:	f7fd feed 	bl	8001844 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e099      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a78:	4b24      	ldr	r3, [pc, #144]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1f0      	bne.n	8003a66 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a84:	4b21      	ldr	r3, [pc, #132]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	4b21      	ldr	r3, [pc, #132]	@ (8003b10 <HAL_RCC_OscConfig+0x77c>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a94:	3a01      	subs	r2, #1
 8003a96:	0112      	lsls	r2, r2, #4
 8003a98:	4311      	orrs	r1, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a9e:	0212      	lsls	r2, r2, #8
 8003aa0:	4311      	orrs	r1, r2
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003aa6:	0852      	lsrs	r2, r2, #1
 8003aa8:	3a01      	subs	r2, #1
 8003aaa:	0552      	lsls	r2, r2, #21
 8003aac:	4311      	orrs	r1, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003ab2:	0852      	lsrs	r2, r2, #1
 8003ab4:	3a01      	subs	r2, #1
 8003ab6:	0652      	lsls	r2, r2, #25
 8003ab8:	4311      	orrs	r1, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003abe:	06d2      	lsls	r2, r2, #27
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	4912      	ldr	r1, [pc, #72]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ac8:	4b10      	ldr	r3, [pc, #64]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a0f      	ldr	r2, [pc, #60]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 8003ace:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ad2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 8003ada:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ade:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ae0:	f7fd feb0 	bl	8001844 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae8:	f7fd feac 	bl	8001844 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e058      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003afa:	4b04      	ldr	r3, [pc, #16]	@ (8003b0c <HAL_RCC_OscConfig+0x778>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b06:	e050      	b.n	8003baa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e04f      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b14:	4b27      	ldr	r3, [pc, #156]	@ (8003bb4 <HAL_RCC_OscConfig+0x820>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d144      	bne.n	8003baa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b20:	4b24      	ldr	r3, [pc, #144]	@ (8003bb4 <HAL_RCC_OscConfig+0x820>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a23      	ldr	r2, [pc, #140]	@ (8003bb4 <HAL_RCC_OscConfig+0x820>)
 8003b26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b2c:	4b21      	ldr	r3, [pc, #132]	@ (8003bb4 <HAL_RCC_OscConfig+0x820>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4a20      	ldr	r2, [pc, #128]	@ (8003bb4 <HAL_RCC_OscConfig+0x820>)
 8003b32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b38:	f7fd fe84 	bl	8001844 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b40:	f7fd fe80 	bl	8001844 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e02c      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b52:	4b18      	ldr	r3, [pc, #96]	@ (8003bb4 <HAL_RCC_OscConfig+0x820>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f0      	beq.n	8003b40 <HAL_RCC_OscConfig+0x7ac>
 8003b5e:	e024      	b.n	8003baa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	2b0c      	cmp	r3, #12
 8003b64:	d01f      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b66:	4b13      	ldr	r3, [pc, #76]	@ (8003bb4 <HAL_RCC_OscConfig+0x820>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a12      	ldr	r2, [pc, #72]	@ (8003bb4 <HAL_RCC_OscConfig+0x820>)
 8003b6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b72:	f7fd fe67 	bl	8001844 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7a:	f7fd fe63 	bl	8001844 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e00f      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b8c:	4b09      	ldr	r3, [pc, #36]	@ (8003bb4 <HAL_RCC_OscConfig+0x820>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1f0      	bne.n	8003b7a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003b98:	4b06      	ldr	r3, [pc, #24]	@ (8003bb4 <HAL_RCC_OscConfig+0x820>)
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	4905      	ldr	r1, [pc, #20]	@ (8003bb4 <HAL_RCC_OscConfig+0x820>)
 8003b9e:	4b06      	ldr	r3, [pc, #24]	@ (8003bb8 <HAL_RCC_OscConfig+0x824>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	60cb      	str	r3, [r1, #12]
 8003ba4:	e001      	b.n	8003baa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3720      	adds	r7, #32
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	feeefffc 	.word	0xfeeefffc

08003bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0e7      	b.n	8003da0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd0:	4b75      	ldr	r3, [pc, #468]	@ (8003da8 <HAL_RCC_ClockConfig+0x1ec>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d910      	bls.n	8003c00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bde:	4b72      	ldr	r3, [pc, #456]	@ (8003da8 <HAL_RCC_ClockConfig+0x1ec>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f023 0207 	bic.w	r2, r3, #7
 8003be6:	4970      	ldr	r1, [pc, #448]	@ (8003da8 <HAL_RCC_ClockConfig+0x1ec>)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bee:	4b6e      	ldr	r3, [pc, #440]	@ (8003da8 <HAL_RCC_ClockConfig+0x1ec>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0cf      	b.n	8003da0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d010      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	4b66      	ldr	r3, [pc, #408]	@ (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d908      	bls.n	8003c2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c1c:	4b63      	ldr	r3, [pc, #396]	@ (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	4960      	ldr	r1, [pc, #384]	@ (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d04c      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d107      	bne.n	8003c52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c42:	4b5a      	ldr	r3, [pc, #360]	@ (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d121      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e0a6      	b.n	8003da0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d107      	bne.n	8003c6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c5a:	4b54      	ldr	r3, [pc, #336]	@ (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d115      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e09a      	b.n	8003da0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d107      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c72:	4b4e      	ldr	r3, [pc, #312]	@ (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d109      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e08e      	b.n	8003da0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c82:	4b4a      	ldr	r3, [pc, #296]	@ (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e086      	b.n	8003da0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c92:	4b46      	ldr	r3, [pc, #280]	@ (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f023 0203 	bic.w	r2, r3, #3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	4943      	ldr	r1, [pc, #268]	@ (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca4:	f7fd fdce 	bl	8001844 <HAL_GetTick>
 8003ca8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003caa:	e00a      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cac:	f7fd fdca 	bl	8001844 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e06e      	b.n	8003da0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc2:	4b3a      	ldr	r3, [pc, #232]	@ (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 020c 	and.w	r2, r3, #12
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d1eb      	bne.n	8003cac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d010      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	4b31      	ldr	r3, [pc, #196]	@ (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d208      	bcs.n	8003d02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	492b      	ldr	r1, [pc, #172]	@ (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d02:	4b29      	ldr	r3, [pc, #164]	@ (8003da8 <HAL_RCC_ClockConfig+0x1ec>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d210      	bcs.n	8003d32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d10:	4b25      	ldr	r3, [pc, #148]	@ (8003da8 <HAL_RCC_ClockConfig+0x1ec>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f023 0207 	bic.w	r2, r3, #7
 8003d18:	4923      	ldr	r1, [pc, #140]	@ (8003da8 <HAL_RCC_ClockConfig+0x1ec>)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d20:	4b21      	ldr	r3, [pc, #132]	@ (8003da8 <HAL_RCC_ClockConfig+0x1ec>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d001      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e036      	b.n	8003da0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d008      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	4918      	ldr	r1, [pc, #96]	@ (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d009      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d5c:	4b13      	ldr	r3, [pc, #76]	@ (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	4910      	ldr	r1, [pc, #64]	@ (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d70:	f000 f824 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8003d74:	4602      	mov	r2, r0
 8003d76:	4b0d      	ldr	r3, [pc, #52]	@ (8003dac <HAL_RCC_ClockConfig+0x1f0>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	091b      	lsrs	r3, r3, #4
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	490b      	ldr	r1, [pc, #44]	@ (8003db0 <HAL_RCC_ClockConfig+0x1f4>)
 8003d82:	5ccb      	ldrb	r3, [r1, r3]
 8003d84:	f003 031f 	and.w	r3, r3, #31
 8003d88:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8c:	4a09      	ldr	r2, [pc, #36]	@ (8003db4 <HAL_RCC_ClockConfig+0x1f8>)
 8003d8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d90:	4b09      	ldr	r3, [pc, #36]	@ (8003db8 <HAL_RCC_ClockConfig+0x1fc>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fd fd05 	bl	80017a4 <HAL_InitTick>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d9e:	7afb      	ldrb	r3, [r7, #11]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40022000 	.word	0x40022000
 8003dac:	40021000 	.word	0x40021000
 8003db0:	08006860 	.word	0x08006860
 8003db4:	20000000 	.word	0x20000000
 8003db8:	20000004 	.word	0x20000004

08003dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b089      	sub	sp, #36	@ 0x24
 8003dc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dca:	4b3e      	ldr	r3, [pc, #248]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_RCC_GetSysClockFreq+0x34>
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	2b0c      	cmp	r3, #12
 8003de8:	d121      	bne.n	8003e2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d11e      	bne.n	8003e2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003df0:	4b34      	ldr	r3, [pc, #208]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d107      	bne.n	8003e0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003dfc:	4b31      	ldr	r3, [pc, #196]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e02:	0a1b      	lsrs	r3, r3, #8
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	61fb      	str	r3, [r7, #28]
 8003e0a:	e005      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	091b      	lsrs	r3, r3, #4
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e18:	4a2b      	ldr	r2, [pc, #172]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10d      	bne.n	8003e44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e2c:	e00a      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d102      	bne.n	8003e3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e34:	4b25      	ldr	r3, [pc, #148]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x110>)
 8003e36:	61bb      	str	r3, [r7, #24]
 8003e38:	e004      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d101      	bne.n	8003e44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e40:	4b23      	ldr	r3, [pc, #140]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	2b0c      	cmp	r3, #12
 8003e48:	d134      	bne.n	8003eb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d003      	beq.n	8003e62 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d003      	beq.n	8003e68 <HAL_RCC_GetSysClockFreq+0xac>
 8003e60:	e005      	b.n	8003e6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e62:	4b1a      	ldr	r3, [pc, #104]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x110>)
 8003e64:	617b      	str	r3, [r7, #20]
      break;
 8003e66:	e005      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e68:	4b19      	ldr	r3, [pc, #100]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e6a:	617b      	str	r3, [r7, #20]
      break;
 8003e6c:	e002      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	617b      	str	r3, [r7, #20]
      break;
 8003e72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e74:	4b13      	ldr	r3, [pc, #76]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	091b      	lsrs	r3, r3, #4
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	3301      	adds	r3, #1
 8003e80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e82:	4b10      	ldr	r3, [pc, #64]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	0a1b      	lsrs	r3, r3, #8
 8003e88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	fb03 f202 	mul.w	r2, r3, r2
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	0e5b      	lsrs	r3, r3, #25
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003eb4:	69bb      	ldr	r3, [r7, #24]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3724      	adds	r7, #36	@ 0x24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	08006878 	.word	0x08006878
 8003ecc:	00f42400 	.word	0x00f42400
 8003ed0:	007a1200 	.word	0x007a1200

08003ed4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed8:	4b03      	ldr	r3, [pc, #12]	@ (8003ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eda:	681b      	ldr	r3, [r3, #0]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	20000000 	.word	0x20000000

08003eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ef0:	f7ff fff0 	bl	8003ed4 <HAL_RCC_GetHCLKFreq>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	4b06      	ldr	r3, [pc, #24]	@ (8003f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	0a1b      	lsrs	r3, r3, #8
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	4904      	ldr	r1, [pc, #16]	@ (8003f14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f02:	5ccb      	ldrb	r3, [r1, r3]
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40021000 	.word	0x40021000
 8003f14:	08006870 	.word	0x08006870

08003f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f1c:	f7ff ffda 	bl	8003ed4 <HAL_RCC_GetHCLKFreq>
 8003f20:	4602      	mov	r2, r0
 8003f22:	4b06      	ldr	r3, [pc, #24]	@ (8003f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	0adb      	lsrs	r3, r3, #11
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	4904      	ldr	r1, [pc, #16]	@ (8003f40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f2e:	5ccb      	ldrb	r3, [r1, r3]
 8003f30:	f003 031f 	and.w	r3, r3, #31
 8003f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	08006870 	.word	0x08006870

08003f44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f50:	4b2a      	ldr	r3, [pc, #168]	@ (8003ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f5c:	f7ff f9b6 	bl	80032cc <HAL_PWREx_GetVoltageRange>
 8003f60:	6178      	str	r0, [r7, #20]
 8003f62:	e014      	b.n	8003f8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f64:	4b25      	ldr	r3, [pc, #148]	@ (8003ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f68:	4a24      	ldr	r2, [pc, #144]	@ (8003ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f70:	4b22      	ldr	r3, [pc, #136]	@ (8003ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f7c:	f7ff f9a6 	bl	80032cc <HAL_PWREx_GetVoltageRange>
 8003f80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f82:	4b1e      	ldr	r3, [pc, #120]	@ (8003ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f86:	4a1d      	ldr	r2, [pc, #116]	@ (8003ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f94:	d10b      	bne.n	8003fae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b80      	cmp	r3, #128	@ 0x80
 8003f9a:	d919      	bls.n	8003fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003fa0:	d902      	bls.n	8003fa8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	613b      	str	r3, [r7, #16]
 8003fa6:	e013      	b.n	8003fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fa8:	2301      	movs	r3, #1
 8003faa:	613b      	str	r3, [r7, #16]
 8003fac:	e010      	b.n	8003fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b80      	cmp	r3, #128	@ 0x80
 8003fb2:	d902      	bls.n	8003fba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	e00a      	b.n	8003fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b80      	cmp	r3, #128	@ 0x80
 8003fbe:	d102      	bne.n	8003fc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	e004      	b.n	8003fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b70      	cmp	r3, #112	@ 0x70
 8003fca:	d101      	bne.n	8003fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fcc:	2301      	movs	r3, #1
 8003fce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f023 0207 	bic.w	r2, r3, #7
 8003fd8:	4909      	ldr	r1, [pc, #36]	@ (8004000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fe0:	4b07      	ldr	r3, [pc, #28]	@ (8004000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d001      	beq.n	8003ff2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40022000 	.word	0x40022000

08004004 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800400c:	2300      	movs	r3, #0
 800400e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004010:	2300      	movs	r3, #0
 8004012:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800401c:	2b00      	cmp	r3, #0
 800401e:	d031      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004024:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004028:	d01a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800402a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800402e:	d814      	bhi.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004030:	2b00      	cmp	r3, #0
 8004032:	d009      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004034:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004038:	d10f      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800403a:	4b5d      	ldr	r3, [pc, #372]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	4a5c      	ldr	r2, [pc, #368]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004044:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004046:	e00c      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3304      	adds	r3, #4
 800404c:	2100      	movs	r1, #0
 800404e:	4618      	mov	r0, r3
 8004050:	f000 f9ce 	bl	80043f0 <RCCEx_PLLSAI1_Config>
 8004054:	4603      	mov	r3, r0
 8004056:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004058:	e003      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	74fb      	strb	r3, [r7, #19]
      break;
 800405e:	e000      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004060:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004062:	7cfb      	ldrb	r3, [r7, #19]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10b      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004068:	4b51      	ldr	r3, [pc, #324]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800406e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004076:	494e      	ldr	r1, [pc, #312]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800407e:	e001      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004080:	7cfb      	ldrb	r3, [r7, #19]
 8004082:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 809e 	beq.w	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004092:	2300      	movs	r3, #0
 8004094:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004096:	4b46      	ldr	r3, [pc, #280]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80040a6:	2300      	movs	r3, #0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00d      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ac:	4b40      	ldr	r3, [pc, #256]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b0:	4a3f      	ldr	r2, [pc, #252]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80040b8:	4b3d      	ldr	r3, [pc, #244]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040c4:	2301      	movs	r3, #1
 80040c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040c8:	4b3a      	ldr	r3, [pc, #232]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a39      	ldr	r2, [pc, #228]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80040ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040d4:	f7fd fbb6 	bl	8001844 <HAL_GetTick>
 80040d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040da:	e009      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040dc:	f7fd fbb2 	bl	8001844 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d902      	bls.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	74fb      	strb	r3, [r7, #19]
        break;
 80040ee:	e005      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040f0:	4b30      	ldr	r3, [pc, #192]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0ef      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80040fc:	7cfb      	ldrb	r3, [r7, #19]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d15a      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004102:	4b2b      	ldr	r3, [pc, #172]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004108:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800410c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d01e      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	429a      	cmp	r2, r3
 800411c:	d019      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800411e:	4b24      	ldr	r3, [pc, #144]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004124:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004128:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800412a:	4b21      	ldr	r3, [pc, #132]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800412c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004130:	4a1f      	ldr	r2, [pc, #124]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004136:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800413a:	4b1d      	ldr	r3, [pc, #116]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800413c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004140:	4a1b      	ldr	r2, [pc, #108]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004146:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800414a:	4a19      	ldr	r2, [pc, #100]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d016      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415c:	f7fd fb72 	bl	8001844 <HAL_GetTick>
 8004160:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004162:	e00b      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004164:	f7fd fb6e 	bl	8001844 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004172:	4293      	cmp	r3, r2
 8004174:	d902      	bls.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	74fb      	strb	r3, [r7, #19]
            break;
 800417a:	e006      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800417c:	4b0c      	ldr	r3, [pc, #48]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0ec      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800418a:	7cfb      	ldrb	r3, [r7, #19]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10b      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004190:	4b07      	ldr	r3, [pc, #28]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004196:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800419e:	4904      	ldr	r1, [pc, #16]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80041a6:	e009      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041a8:	7cfb      	ldrb	r3, [r7, #19]
 80041aa:	74bb      	strb	r3, [r7, #18]
 80041ac:	e006      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80041ae:	bf00      	nop
 80041b0:	40021000 	.word	0x40021000
 80041b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b8:	7cfb      	ldrb	r3, [r7, #19]
 80041ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041bc:	7c7b      	ldrb	r3, [r7, #17]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d105      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c2:	4b8a      	ldr	r3, [pc, #552]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c6:	4a89      	ldr	r2, [pc, #548]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041da:	4b84      	ldr	r3, [pc, #528]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e0:	f023 0203 	bic.w	r2, r3, #3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	4980      	ldr	r1, [pc, #512]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041fc:	4b7b      	ldr	r3, [pc, #492]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004202:	f023 020c 	bic.w	r2, r3, #12
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	4978      	ldr	r1, [pc, #480]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800421e:	4b73      	ldr	r3, [pc, #460]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004224:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422c:	496f      	ldr	r1, [pc, #444]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004240:	4b6a      	ldr	r3, [pc, #424]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004246:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800424e:	4967      	ldr	r1, [pc, #412]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004262:	4b62      	ldr	r3, [pc, #392]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004268:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004270:	495e      	ldr	r1, [pc, #376]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004284:	4b59      	ldr	r3, [pc, #356]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800428a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004292:	4956      	ldr	r1, [pc, #344]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042a6:	4b51      	ldr	r3, [pc, #324]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b4:	494d      	ldr	r1, [pc, #308]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d028      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042c8:	4b48      	ldr	r3, [pc, #288]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	4945      	ldr	r1, [pc, #276]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042e6:	d106      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042e8:	4b40      	ldr	r3, [pc, #256]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	4a3f      	ldr	r2, [pc, #252]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042f2:	60d3      	str	r3, [r2, #12]
 80042f4:	e011      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042fe:	d10c      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3304      	adds	r3, #4
 8004304:	2101      	movs	r1, #1
 8004306:	4618      	mov	r0, r3
 8004308:	f000 f872 	bl	80043f0 <RCCEx_PLLSAI1_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004310:	7cfb      	ldrb	r3, [r7, #19]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004316:	7cfb      	ldrb	r3, [r7, #19]
 8004318:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d028      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004326:	4b31      	ldr	r3, [pc, #196]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800432c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004334:	492d      	ldr	r1, [pc, #180]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004340:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004344:	d106      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004346:	4b29      	ldr	r3, [pc, #164]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	4a28      	ldr	r2, [pc, #160]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800434c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004350:	60d3      	str	r3, [r2, #12]
 8004352:	e011      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004358:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800435c:	d10c      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3304      	adds	r3, #4
 8004362:	2101      	movs	r1, #1
 8004364:	4618      	mov	r0, r3
 8004366:	f000 f843 	bl	80043f0 <RCCEx_PLLSAI1_Config>
 800436a:	4603      	mov	r3, r0
 800436c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800436e:	7cfb      	ldrb	r3, [r7, #19]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004374:	7cfb      	ldrb	r3, [r7, #19]
 8004376:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d01c      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004384:	4b19      	ldr	r3, [pc, #100]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004392:	4916      	ldr	r1, [pc, #88]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800439e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043a2:	d10c      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	2102      	movs	r1, #2
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 f820 	bl	80043f0 <RCCEx_PLLSAI1_Config>
 80043b0:	4603      	mov	r3, r0
 80043b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80043ba:	7cfb      	ldrb	r3, [r7, #19]
 80043bc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043ca:	4b08      	ldr	r3, [pc, #32]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043d8:	4904      	ldr	r1, [pc, #16]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40021000 	.word	0x40021000

080043f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043fe:	4b74      	ldr	r3, [pc, #464]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d018      	beq.n	800443c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800440a:	4b71      	ldr	r3, [pc, #452]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f003 0203 	and.w	r2, r3, #3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d10d      	bne.n	8004436 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
       ||
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004422:	4b6b      	ldr	r3, [pc, #428]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	091b      	lsrs	r3, r3, #4
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
       ||
 8004432:	429a      	cmp	r2, r3
 8004434:	d047      	beq.n	80044c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	73fb      	strb	r3, [r7, #15]
 800443a:	e044      	b.n	80044c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b03      	cmp	r3, #3
 8004442:	d018      	beq.n	8004476 <RCCEx_PLLSAI1_Config+0x86>
 8004444:	2b03      	cmp	r3, #3
 8004446:	d825      	bhi.n	8004494 <RCCEx_PLLSAI1_Config+0xa4>
 8004448:	2b01      	cmp	r3, #1
 800444a:	d002      	beq.n	8004452 <RCCEx_PLLSAI1_Config+0x62>
 800444c:	2b02      	cmp	r3, #2
 800444e:	d009      	beq.n	8004464 <RCCEx_PLLSAI1_Config+0x74>
 8004450:	e020      	b.n	8004494 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004452:	4b5f      	ldr	r3, [pc, #380]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d11d      	bne.n	800449a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004462:	e01a      	b.n	800449a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004464:	4b5a      	ldr	r3, [pc, #360]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800446c:	2b00      	cmp	r3, #0
 800446e:	d116      	bne.n	800449e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004474:	e013      	b.n	800449e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004476:	4b56      	ldr	r3, [pc, #344]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10f      	bne.n	80044a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004482:	4b53      	ldr	r3, [pc, #332]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004492:	e006      	b.n	80044a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	73fb      	strb	r3, [r7, #15]
      break;
 8004498:	e004      	b.n	80044a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800449a:	bf00      	nop
 800449c:	e002      	b.n	80044a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10d      	bne.n	80044c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044aa:	4b49      	ldr	r3, [pc, #292]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6819      	ldr	r1, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	430b      	orrs	r3, r1
 80044c0:	4943      	ldr	r1, [pc, #268]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d17c      	bne.n	80045c6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044cc:	4b40      	ldr	r3, [pc, #256]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a3f      	ldr	r2, [pc, #252]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80044d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d8:	f7fd f9b4 	bl	8001844 <HAL_GetTick>
 80044dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044de:	e009      	b.n	80044f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044e0:	f7fd f9b0 	bl	8001844 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d902      	bls.n	80044f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	73fb      	strb	r3, [r7, #15]
        break;
 80044f2:	e005      	b.n	8004500 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044f4:	4b36      	ldr	r3, [pc, #216]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1ef      	bne.n	80044e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d15f      	bne.n	80045c6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d110      	bne.n	800452e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800450c:	4b30      	ldr	r3, [pc, #192]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004514:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6892      	ldr	r2, [r2, #8]
 800451c:	0211      	lsls	r1, r2, #8
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	68d2      	ldr	r2, [r2, #12]
 8004522:	06d2      	lsls	r2, r2, #27
 8004524:	430a      	orrs	r2, r1
 8004526:	492a      	ldr	r1, [pc, #168]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004528:	4313      	orrs	r3, r2
 800452a:	610b      	str	r3, [r1, #16]
 800452c:	e027      	b.n	800457e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d112      	bne.n	800455a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004534:	4b26      	ldr	r3, [pc, #152]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800453c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6892      	ldr	r2, [r2, #8]
 8004544:	0211      	lsls	r1, r2, #8
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6912      	ldr	r2, [r2, #16]
 800454a:	0852      	lsrs	r2, r2, #1
 800454c:	3a01      	subs	r2, #1
 800454e:	0552      	lsls	r2, r2, #21
 8004550:	430a      	orrs	r2, r1
 8004552:	491f      	ldr	r1, [pc, #124]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004554:	4313      	orrs	r3, r2
 8004556:	610b      	str	r3, [r1, #16]
 8004558:	e011      	b.n	800457e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800455a:	4b1d      	ldr	r3, [pc, #116]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004562:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6892      	ldr	r2, [r2, #8]
 800456a:	0211      	lsls	r1, r2, #8
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6952      	ldr	r2, [r2, #20]
 8004570:	0852      	lsrs	r2, r2, #1
 8004572:	3a01      	subs	r2, #1
 8004574:	0652      	lsls	r2, r2, #25
 8004576:	430a      	orrs	r2, r1
 8004578:	4915      	ldr	r1, [pc, #84]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800457a:	4313      	orrs	r3, r2
 800457c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800457e:	4b14      	ldr	r3, [pc, #80]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a13      	ldr	r2, [pc, #76]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004584:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004588:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458a:	f7fd f95b 	bl	8001844 <HAL_GetTick>
 800458e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004590:	e009      	b.n	80045a6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004592:	f7fd f957 	bl	8001844 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d902      	bls.n	80045a6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	73fb      	strb	r3, [r7, #15]
          break;
 80045a4:	e005      	b.n	80045b2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045a6:	4b0a      	ldr	r3, [pc, #40]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0ef      	beq.n	8004592 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d106      	bne.n	80045c6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045b8:	4b05      	ldr	r3, [pc, #20]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	4903      	ldr	r1, [pc, #12]	@ (80045d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40021000 	.word	0x40021000

080045d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e049      	b.n	800467a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fc ffa0 	bl	8001540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3304      	adds	r3, #4
 8004610:	4619      	mov	r1, r3
 8004612:	4610      	mov	r0, r2
 8004614:	f000 fb76 	bl	8004d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	d001      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e03b      	b.n	8004714 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a19      	ldr	r2, [pc, #100]	@ (8004720 <HAL_TIM_Base_Start_IT+0x9c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d009      	beq.n	80046d2 <HAL_TIM_Base_Start_IT+0x4e>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c6:	d004      	beq.n	80046d2 <HAL_TIM_Base_Start_IT+0x4e>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a15      	ldr	r2, [pc, #84]	@ (8004724 <HAL_TIM_Base_Start_IT+0xa0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d115      	bne.n	80046fe <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	4b13      	ldr	r3, [pc, #76]	@ (8004728 <HAL_TIM_Base_Start_IT+0xa4>)
 80046da:	4013      	ands	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2b06      	cmp	r3, #6
 80046e2:	d015      	beq.n	8004710 <HAL_TIM_Base_Start_IT+0x8c>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ea:	d011      	beq.n	8004710 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0201 	orr.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fc:	e008      	b.n	8004710 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f042 0201 	orr.w	r2, r2, #1
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	e000      	b.n	8004712 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004710:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	40012c00 	.word	0x40012c00
 8004724:	40014000 	.word	0x40014000
 8004728:	00010007 	.word	0x00010007

0800472c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e049      	b.n	80047d2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fc ff14 	bl	8001580 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3304      	adds	r3, #4
 8004768:	4619      	mov	r1, r3
 800476a:	4610      	mov	r0, r2
 800476c:	f000 faca 	bl	8004d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d104      	bne.n	80047fa <HAL_TIM_IC_Start_IT+0x1e>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	e023      	b.n	8004842 <HAL_TIM_IC_Start_IT+0x66>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d104      	bne.n	800480a <HAL_TIM_IC_Start_IT+0x2e>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004806:	b2db      	uxtb	r3, r3
 8004808:	e01b      	b.n	8004842 <HAL_TIM_IC_Start_IT+0x66>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d104      	bne.n	800481a <HAL_TIM_IC_Start_IT+0x3e>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004816:	b2db      	uxtb	r3, r3
 8004818:	e013      	b.n	8004842 <HAL_TIM_IC_Start_IT+0x66>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b0c      	cmp	r3, #12
 800481e:	d104      	bne.n	800482a <HAL_TIM_IC_Start_IT+0x4e>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004826:	b2db      	uxtb	r3, r3
 8004828:	e00b      	b.n	8004842 <HAL_TIM_IC_Start_IT+0x66>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b10      	cmp	r3, #16
 800482e:	d104      	bne.n	800483a <HAL_TIM_IC_Start_IT+0x5e>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004836:	b2db      	uxtb	r3, r3
 8004838:	e003      	b.n	8004842 <HAL_TIM_IC_Start_IT+0x66>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004840:	b2db      	uxtb	r3, r3
 8004842:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d104      	bne.n	8004854 <HAL_TIM_IC_Start_IT+0x78>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004850:	b2db      	uxtb	r3, r3
 8004852:	e013      	b.n	800487c <HAL_TIM_IC_Start_IT+0xa0>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b04      	cmp	r3, #4
 8004858:	d104      	bne.n	8004864 <HAL_TIM_IC_Start_IT+0x88>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004860:	b2db      	uxtb	r3, r3
 8004862:	e00b      	b.n	800487c <HAL_TIM_IC_Start_IT+0xa0>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b08      	cmp	r3, #8
 8004868:	d104      	bne.n	8004874 <HAL_TIM_IC_Start_IT+0x98>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004870:	b2db      	uxtb	r3, r3
 8004872:	e003      	b.n	800487c <HAL_TIM_IC_Start_IT+0xa0>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800487a:	b2db      	uxtb	r3, r3
 800487c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800487e:	7bbb      	ldrb	r3, [r7, #14]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d102      	bne.n	800488a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004884:	7b7b      	ldrb	r3, [r7, #13]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d001      	beq.n	800488e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e0c9      	b.n	8004a22 <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d104      	bne.n	800489e <HAL_TIM_IC_Start_IT+0xc2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800489c:	e023      	b.n	80048e6 <HAL_TIM_IC_Start_IT+0x10a>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d104      	bne.n	80048ae <HAL_TIM_IC_Start_IT+0xd2>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048ac:	e01b      	b.n	80048e6 <HAL_TIM_IC_Start_IT+0x10a>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d104      	bne.n	80048be <HAL_TIM_IC_Start_IT+0xe2>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048bc:	e013      	b.n	80048e6 <HAL_TIM_IC_Start_IT+0x10a>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b0c      	cmp	r3, #12
 80048c2:	d104      	bne.n	80048ce <HAL_TIM_IC_Start_IT+0xf2>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048cc:	e00b      	b.n	80048e6 <HAL_TIM_IC_Start_IT+0x10a>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b10      	cmp	r3, #16
 80048d2:	d104      	bne.n	80048de <HAL_TIM_IC_Start_IT+0x102>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048dc:	e003      	b.n	80048e6 <HAL_TIM_IC_Start_IT+0x10a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2202      	movs	r2, #2
 80048e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d104      	bne.n	80048f6 <HAL_TIM_IC_Start_IT+0x11a>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048f4:	e013      	b.n	800491e <HAL_TIM_IC_Start_IT+0x142>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d104      	bne.n	8004906 <HAL_TIM_IC_Start_IT+0x12a>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004904:	e00b      	b.n	800491e <HAL_TIM_IC_Start_IT+0x142>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b08      	cmp	r3, #8
 800490a:	d104      	bne.n	8004916 <HAL_TIM_IC_Start_IT+0x13a>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004914:	e003      	b.n	800491e <HAL_TIM_IC_Start_IT+0x142>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2202      	movs	r2, #2
 800491a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b0c      	cmp	r3, #12
 8004922:	d841      	bhi.n	80049a8 <HAL_TIM_IC_Start_IT+0x1cc>
 8004924:	a201      	add	r2, pc, #4	@ (adr r2, 800492c <HAL_TIM_IC_Start_IT+0x150>)
 8004926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492a:	bf00      	nop
 800492c:	08004961 	.word	0x08004961
 8004930:	080049a9 	.word	0x080049a9
 8004934:	080049a9 	.word	0x080049a9
 8004938:	080049a9 	.word	0x080049a9
 800493c:	08004973 	.word	0x08004973
 8004940:	080049a9 	.word	0x080049a9
 8004944:	080049a9 	.word	0x080049a9
 8004948:	080049a9 	.word	0x080049a9
 800494c:	08004985 	.word	0x08004985
 8004950:	080049a9 	.word	0x080049a9
 8004954:	080049a9 	.word	0x080049a9
 8004958:	080049a9 	.word	0x080049a9
 800495c:	08004997 	.word	0x08004997
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0202 	orr.w	r2, r2, #2
 800496e:	60da      	str	r2, [r3, #12]
      break;
 8004970:	e01d      	b.n	80049ae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0204 	orr.w	r2, r2, #4
 8004980:	60da      	str	r2, [r3, #12]
      break;
 8004982:	e014      	b.n	80049ae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0208 	orr.w	r2, r2, #8
 8004992:	60da      	str	r2, [r3, #12]
      break;
 8004994:	e00b      	b.n	80049ae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68da      	ldr	r2, [r3, #12]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f042 0210 	orr.w	r2, r2, #16
 80049a4:	60da      	str	r2, [r3, #12]
      break;
 80049a6:	e002      	b.n	80049ae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	73fb      	strb	r3, [r7, #15]
      break;
 80049ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d135      	bne.n	8004a20 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2201      	movs	r2, #1
 80049ba:	6839      	ldr	r1, [r7, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fbb7 	bl	8005130 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a19      	ldr	r2, [pc, #100]	@ (8004a2c <HAL_TIM_IC_Start_IT+0x250>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d009      	beq.n	80049e0 <HAL_TIM_IC_Start_IT+0x204>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d4:	d004      	beq.n	80049e0 <HAL_TIM_IC_Start_IT+0x204>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a15      	ldr	r2, [pc, #84]	@ (8004a30 <HAL_TIM_IC_Start_IT+0x254>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d115      	bne.n	8004a0c <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	4b13      	ldr	r3, [pc, #76]	@ (8004a34 <HAL_TIM_IC_Start_IT+0x258>)
 80049e8:	4013      	ands	r3, r2
 80049ea:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b06      	cmp	r3, #6
 80049f0:	d015      	beq.n	8004a1e <HAL_TIM_IC_Start_IT+0x242>
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049f8:	d011      	beq.n	8004a1e <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f042 0201 	orr.w	r2, r2, #1
 8004a08:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0a:	e008      	b.n	8004a1e <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0201 	orr.w	r2, r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	e000      	b.n	8004a20 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a1e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40012c00 	.word	0x40012c00
 8004a30:	40014000 	.word	0x40014000
 8004a34:	00010007 	.word	0x00010007

08004a38 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d101      	bne.n	8004a56 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004a52:	2302      	movs	r3, #2
 8004a54:	e088      	b.n	8004b68 <HAL_TIM_IC_ConfigChannel+0x130>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d11b      	bne.n	8004a9c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004a74:	f000 f9b6 	bl	8004de4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 020c 	bic.w	r2, r2, #12
 8004a86:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6999      	ldr	r1, [r3, #24]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	619a      	str	r2, [r3, #24]
 8004a9a:	e060      	b.n	8004b5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d11c      	bne.n	8004adc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004ab2:	f000 fa1c 	bl	8004eee <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	699a      	ldr	r2, [r3, #24]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004ac4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6999      	ldr	r1, [r3, #24]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	021a      	lsls	r2, r3, #8
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	619a      	str	r2, [r3, #24]
 8004ada:	e040      	b.n	8004b5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d11b      	bne.n	8004b1a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004af2:	f000 fa69 	bl	8004fc8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69da      	ldr	r2, [r3, #28]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 020c 	bic.w	r2, r2, #12
 8004b04:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69d9      	ldr	r1, [r3, #28]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	61da      	str	r2, [r3, #28]
 8004b18:	e021      	b.n	8004b5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b0c      	cmp	r3, #12
 8004b1e:	d11c      	bne.n	8004b5a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004b30:	f000 fa86 	bl	8005040 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69da      	ldr	r2, [r3, #28]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004b42:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	69d9      	ldr	r1, [r3, #28]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	021a      	lsls	r2, r3, #8
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	61da      	str	r2, [r3, #28]
 8004b58:	e001      	b.n	8004b5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <HAL_TIM_ConfigClockSource+0x1c>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e0b6      	b.n	8004cfa <HAL_TIM_ConfigClockSource+0x18a>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004baa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bc8:	d03e      	beq.n	8004c48 <HAL_TIM_ConfigClockSource+0xd8>
 8004bca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bce:	f200 8087 	bhi.w	8004ce0 <HAL_TIM_ConfigClockSource+0x170>
 8004bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bd6:	f000 8086 	beq.w	8004ce6 <HAL_TIM_ConfigClockSource+0x176>
 8004bda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bde:	d87f      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x170>
 8004be0:	2b70      	cmp	r3, #112	@ 0x70
 8004be2:	d01a      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0xaa>
 8004be4:	2b70      	cmp	r3, #112	@ 0x70
 8004be6:	d87b      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x170>
 8004be8:	2b60      	cmp	r3, #96	@ 0x60
 8004bea:	d050      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0x11e>
 8004bec:	2b60      	cmp	r3, #96	@ 0x60
 8004bee:	d877      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x170>
 8004bf0:	2b50      	cmp	r3, #80	@ 0x50
 8004bf2:	d03c      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0xfe>
 8004bf4:	2b50      	cmp	r3, #80	@ 0x50
 8004bf6:	d873      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x170>
 8004bf8:	2b40      	cmp	r3, #64	@ 0x40
 8004bfa:	d058      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x13e>
 8004bfc:	2b40      	cmp	r3, #64	@ 0x40
 8004bfe:	d86f      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x170>
 8004c00:	2b30      	cmp	r3, #48	@ 0x30
 8004c02:	d064      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0x15e>
 8004c04:	2b30      	cmp	r3, #48	@ 0x30
 8004c06:	d86b      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x170>
 8004c08:	2b20      	cmp	r3, #32
 8004c0a:	d060      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0x15e>
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	d867      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x170>
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d05c      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0x15e>
 8004c14:	2b10      	cmp	r3, #16
 8004c16:	d05a      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0x15e>
 8004c18:	e062      	b.n	8004ce0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c2a:	f000 fa61 	bl	80050f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	609a      	str	r2, [r3, #8]
      break;
 8004c46:	e04f      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c58:	f000 fa4a 	bl	80050f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c6a:	609a      	str	r2, [r3, #8]
      break;
 8004c6c:	e03c      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f000 f908 	bl	8004e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2150      	movs	r1, #80	@ 0x50
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fa17 	bl	80050ba <TIM_ITRx_SetConfig>
      break;
 8004c8c:	e02c      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f000 f964 	bl	8004f68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2160      	movs	r1, #96	@ 0x60
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fa07 	bl	80050ba <TIM_ITRx_SetConfig>
      break;
 8004cac:	e01c      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f000 f8e8 	bl	8004e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2140      	movs	r1, #64	@ 0x40
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 f9f7 	bl	80050ba <TIM_ITRx_SetConfig>
      break;
 8004ccc:	e00c      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4610      	mov	r0, r2
 8004cda:	f000 f9ee 	bl	80050ba <TIM_ITRx_SetConfig>
      break;
 8004cde:	e003      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce4:	e000      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004ce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a30      	ldr	r2, [pc, #192]	@ (8004dd8 <TIM_Base_SetConfig+0xd4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d003      	beq.n	8004d24 <TIM_Base_SetConfig+0x20>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d22:	d108      	bne.n	8004d36 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a27      	ldr	r2, [pc, #156]	@ (8004dd8 <TIM_Base_SetConfig+0xd4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00b      	beq.n	8004d56 <TIM_Base_SetConfig+0x52>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d44:	d007      	beq.n	8004d56 <TIM_Base_SetConfig+0x52>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a24      	ldr	r2, [pc, #144]	@ (8004ddc <TIM_Base_SetConfig+0xd8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d003      	beq.n	8004d56 <TIM_Base_SetConfig+0x52>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a23      	ldr	r2, [pc, #140]	@ (8004de0 <TIM_Base_SetConfig+0xdc>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d108      	bne.n	8004d68 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a12      	ldr	r2, [pc, #72]	@ (8004dd8 <TIM_Base_SetConfig+0xd4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d007      	beq.n	8004da4 <TIM_Base_SetConfig+0xa0>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a11      	ldr	r2, [pc, #68]	@ (8004ddc <TIM_Base_SetConfig+0xd8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d003      	beq.n	8004da4 <TIM_Base_SetConfig+0xa0>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a10      	ldr	r2, [pc, #64]	@ (8004de0 <TIM_Base_SetConfig+0xdc>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d103      	bne.n	8004dac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	691a      	ldr	r2, [r3, #16]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d105      	bne.n	8004dca <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f023 0201 	bic.w	r2, r3, #1
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	611a      	str	r2, [r3, #16]
  }
}
 8004dca:	bf00      	nop
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	40012c00 	.word	0x40012c00
 8004ddc:	40014000 	.word	0x40014000
 8004de0:	40014400 	.word	0x40014400

08004de4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
 8004df0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	f023 0201 	bic.w	r2, r3, #1
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8004e88 <TIM_TI1_SetConfig+0xa4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d007      	beq.n	8004e22 <TIM_TI1_SetConfig+0x3e>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e18:	d003      	beq.n	8004e22 <TIM_TI1_SetConfig+0x3e>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8004e8c <TIM_TI1_SetConfig+0xa8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d101      	bne.n	8004e26 <TIM_TI1_SetConfig+0x42>
 8004e22:	2301      	movs	r3, #1
 8004e24:	e000      	b.n	8004e28 <TIM_TI1_SetConfig+0x44>
 8004e26:	2300      	movs	r3, #0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f023 0303 	bic.w	r3, r3, #3
 8004e32:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	e003      	b.n	8004e46 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f043 0301 	orr.w	r3, r3, #1
 8004e44:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f023 030a 	bic.w	r3, r3, #10
 8004e60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	f003 030a 	and.w	r3, r3, #10
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	621a      	str	r2, [r3, #32]
}
 8004e7a:	bf00      	nop
 8004e7c:	371c      	adds	r7, #28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	40012c00 	.word	0x40012c00
 8004e8c:	40014000 	.word	0x40014000

08004e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f023 0201 	bic.w	r2, r3, #1
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f023 030a 	bic.w	r3, r3, #10
 8004ecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	621a      	str	r2, [r3, #32]
}
 8004ee2:	bf00      	nop
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b087      	sub	sp, #28
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	607a      	str	r2, [r7, #4]
 8004efa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f023 0210 	bic.w	r2, r3, #16
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	021b      	lsls	r3, r3, #8
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	031b      	lsls	r3, r3, #12
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f40:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	621a      	str	r2, [r3, #32]
}
 8004f5c:	bf00      	nop
 8004f5e:	371c      	adds	r7, #28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	f023 0210 	bic.w	r2, r3, #16
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	031b      	lsls	r3, r3, #12
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	621a      	str	r2, [r3, #32]
}
 8004fbc:	bf00      	nop
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f023 0303 	bic.w	r3, r3, #3
 8004ff4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005004:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	b2db      	uxtb	r3, r3
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005018:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	021b      	lsls	r3, r3, #8
 800501e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4313      	orrs	r3, r2
 8005026:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	621a      	str	r2, [r3, #32]
}
 8005034:	bf00      	nop
 8005036:	371c      	adds	r7, #28
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800506c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	021b      	lsls	r3, r3, #8
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800507e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	031b      	lsls	r3, r3, #12
 8005084:	b29b      	uxth	r3, r3
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4313      	orrs	r3, r2
 800508a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005092:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	031b      	lsls	r3, r3, #12
 8005098:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	621a      	str	r2, [r3, #32]
}
 80050ae:	bf00      	nop
 80050b0:	371c      	adds	r7, #28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b085      	sub	sp, #20
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f043 0307 	orr.w	r3, r3, #7
 80050dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	609a      	str	r2, [r3, #8]
}
 80050e4:	bf00      	nop
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800510a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	021a      	lsls	r2, r3, #8
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	431a      	orrs	r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4313      	orrs	r3, r2
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	609a      	str	r2, [r3, #8]
}
 8005124:	bf00      	nop
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f003 031f 	and.w	r3, r3, #31
 8005142:	2201      	movs	r2, #1
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a1a      	ldr	r2, [r3, #32]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	43db      	mvns	r3, r3
 8005152:	401a      	ands	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a1a      	ldr	r2, [r3, #32]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f003 031f 	and.w	r3, r3, #31
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	fa01 f303 	lsl.w	r3, r1, r3
 8005168:	431a      	orrs	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	621a      	str	r2, [r3, #32]
}
 800516e:	bf00      	nop
 8005170:	371c      	adds	r7, #28
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
	...

0800517c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005190:	2302      	movs	r3, #2
 8005192:	e04f      	b.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a21      	ldr	r2, [pc, #132]	@ (8005240 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d108      	bne.n	80051d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80051c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a14      	ldr	r2, [pc, #80]	@ (8005240 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d009      	beq.n	8005208 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051fc:	d004      	beq.n	8005208 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a10      	ldr	r2, [pc, #64]	@ (8005244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d10c      	bne.n	8005222 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800520e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	4313      	orrs	r3, r2
 8005218:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	40012c00 	.word	0x40012c00
 8005244:	40014000 	.word	0x40014000

08005248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e040      	b.n	80052dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800525e:	2b00      	cmp	r3, #0
 8005260:	d106      	bne.n	8005270 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fc f9f8 	bl	8001660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2224      	movs	r2, #36	@ 0x24
 8005274:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 0201 	bic.w	r2, r2, #1
 8005284:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fdc6 	bl	8005e20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 fb97 	bl	80059c8 <UART_SetConfig>
 800529a:	4603      	mov	r3, r0
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e01b      	b.n	80052dc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fe45 	bl	8005f64 <UART_CheckIdleState>
 80052da:	4603      	mov	r3, r0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08a      	sub	sp, #40	@ 0x28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	4613      	mov	r3, r2
 80052f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052f8:	2b20      	cmp	r3, #32
 80052fa:	d137      	bne.n	800536c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <HAL_UART_Receive_IT+0x24>
 8005302:	88fb      	ldrh	r3, [r7, #6]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e030      	b.n	800536e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a18      	ldr	r2, [pc, #96]	@ (8005378 <HAL_UART_Receive_IT+0x94>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d01f      	beq.n	800535c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d018      	beq.n	800535c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	e853 3f00 	ldrex	r3, [r3]
 8005336:	613b      	str	r3, [r7, #16]
   return(result);
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800533e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	461a      	mov	r2, r3
 8005346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005348:	623b      	str	r3, [r7, #32]
 800534a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534c:	69f9      	ldr	r1, [r7, #28]
 800534e:	6a3a      	ldr	r2, [r7, #32]
 8005350:	e841 2300 	strex	r3, r2, [r1]
 8005354:	61bb      	str	r3, [r7, #24]
   return(result);
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e6      	bne.n	800532a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800535c:	88fb      	ldrh	r3, [r7, #6]
 800535e:	461a      	mov	r2, r3
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 ff14 	bl	8006190 <UART_Start_Receive_IT>
 8005368:	4603      	mov	r3, r0
 800536a:	e000      	b.n	800536e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800536c:	2302      	movs	r3, #2
  }
}
 800536e:	4618      	mov	r0, r3
 8005370:	3728      	adds	r7, #40	@ 0x28
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	40008000 	.word	0x40008000

0800537c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b0ba      	sub	sp, #232	@ 0xe8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80053a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80053a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80053aa:	4013      	ands	r3, r2
 80053ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80053b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d115      	bne.n	80053e4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80053b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053bc:	f003 0320 	and.w	r3, r3, #32
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00f      	beq.n	80053e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d009      	beq.n	80053e4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 82ca 	beq.w	800596e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	4798      	blx	r3
      }
      return;
 80053e2:	e2c4      	b.n	800596e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80053e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 8117 	beq.w	800561c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80053ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80053fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80053fe:	4b85      	ldr	r3, [pc, #532]	@ (8005614 <HAL_UART_IRQHandler+0x298>)
 8005400:	4013      	ands	r3, r2
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 810a 	beq.w	800561c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d011      	beq.n	8005438 <HAL_UART_IRQHandler+0xbc>
 8005414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00b      	beq.n	8005438 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2201      	movs	r2, #1
 8005426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800542e:	f043 0201 	orr.w	r2, r3, #1
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d011      	beq.n	8005468 <HAL_UART_IRQHandler+0xec>
 8005444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00b      	beq.n	8005468 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2202      	movs	r2, #2
 8005456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800545e:	f043 0204 	orr.w	r2, r3, #4
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d011      	beq.n	8005498 <HAL_UART_IRQHandler+0x11c>
 8005474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00b      	beq.n	8005498 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2204      	movs	r2, #4
 8005486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800548e:	f043 0202 	orr.w	r2, r3, #2
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d017      	beq.n	80054d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054a8:	f003 0320 	and.w	r3, r3, #32
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d105      	bne.n	80054bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80054b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00b      	beq.n	80054d4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2208      	movs	r2, #8
 80054c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054ca:	f043 0208 	orr.w	r2, r3, #8
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d012      	beq.n	8005506 <HAL_UART_IRQHandler+0x18a>
 80054e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00c      	beq.n	8005506 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054fc:	f043 0220 	orr.w	r2, r3, #32
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 8230 	beq.w	8005972 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00d      	beq.n	800553a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800551e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	2b00      	cmp	r3, #0
 8005528:	d007      	beq.n	800553a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005540:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800554e:	2b40      	cmp	r3, #64	@ 0x40
 8005550:	d005      	beq.n	800555e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005556:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800555a:	2b00      	cmp	r3, #0
 800555c:	d04f      	beq.n	80055fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fedc 	bl	800631c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800556e:	2b40      	cmp	r3, #64	@ 0x40
 8005570:	d141      	bne.n	80055f6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3308      	adds	r3, #8
 8005578:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005588:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800558c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005590:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3308      	adds	r3, #8
 800559a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800559e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80055a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80055aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80055b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1d9      	bne.n	8005572 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d013      	beq.n	80055ee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055ca:	4a13      	ldr	r2, [pc, #76]	@ (8005618 <HAL_UART_IRQHandler+0x29c>)
 80055cc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fd fc9f 	bl	8002f16 <HAL_DMA_Abort_IT>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d017      	beq.n	800560e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80055e8:	4610      	mov	r0, r2
 80055ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ec:	e00f      	b.n	800560e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f9d4 	bl	800599c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f4:	e00b      	b.n	800560e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f9d0 	bl	800599c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055fc:	e007      	b.n	800560e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f9cc 	bl	800599c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800560c:	e1b1      	b.n	8005972 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800560e:	bf00      	nop
    return;
 8005610:	e1af      	b.n	8005972 <HAL_UART_IRQHandler+0x5f6>
 8005612:	bf00      	nop
 8005614:	04000120 	.word	0x04000120
 8005618:	080063e5 	.word	0x080063e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005620:	2b01      	cmp	r3, #1
 8005622:	f040 816a 	bne.w	80058fa <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800562a:	f003 0310 	and.w	r3, r3, #16
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 8163 	beq.w	80058fa <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005638:	f003 0310 	and.w	r3, r3, #16
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 815c 	beq.w	80058fa <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2210      	movs	r2, #16
 8005648:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005654:	2b40      	cmp	r3, #64	@ 0x40
 8005656:	f040 80d4 	bne.w	8005802 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005666:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 80ad 	beq.w	80057ca <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005676:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800567a:	429a      	cmp	r2, r3
 800567c:	f080 80a5 	bcs.w	80057ca <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005686:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0320 	and.w	r3, r3, #32
 8005696:	2b00      	cmp	r3, #0
 8005698:	f040 8086 	bne.w	80057a8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80056b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	461a      	mov	r2, r3
 80056c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80056c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80056ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80056d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1da      	bne.n	800569c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3308      	adds	r3, #8
 80056ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056f8:	f023 0301 	bic.w	r3, r3, #1
 80056fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3308      	adds	r3, #8
 8005706:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800570a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800570e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005712:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800571c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e1      	bne.n	80056e6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3308      	adds	r3, #8
 8005728:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005732:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005734:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005738:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3308      	adds	r3, #8
 8005742:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005746:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005748:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800574c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800574e:	e841 2300 	strex	r3, r2, [r1]
 8005752:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1e3      	bne.n	8005722 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005770:	e853 3f00 	ldrex	r3, [r3]
 8005774:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005778:	f023 0310 	bic.w	r3, r3, #16
 800577c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	461a      	mov	r2, r3
 8005786:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800578a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800578c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005790:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005792:	e841 2300 	strex	r3, r2, [r1]
 8005796:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1e4      	bne.n	8005768 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fd fb79 	bl	8002e9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	b29b      	uxth	r3, r3
 80057c0:	4619      	mov	r1, r3
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f8f4 	bl	80059b0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80057c8:	e0d5      	b.n	8005976 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80057d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057d4:	429a      	cmp	r2, r3
 80057d6:	f040 80ce 	bne.w	8005976 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	f040 80c5 	bne.w	8005976 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80057f8:	4619      	mov	r1, r3
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f8d8 	bl	80059b0 <HAL_UARTEx_RxEventCallback>
      return;
 8005800:	e0b9      	b.n	8005976 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800580e:	b29b      	uxth	r3, r3
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 80ab 	beq.w	800597a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 80a6 	beq.w	800597a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005836:	e853 3f00 	ldrex	r3, [r3]
 800583a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800583c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800583e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005842:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005850:	647b      	str	r3, [r7, #68]	@ 0x44
 8005852:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005854:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005856:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005858:	e841 2300 	strex	r3, r2, [r1]
 800585c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800585e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1e4      	bne.n	800582e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3308      	adds	r3, #8
 800586a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586e:	e853 3f00 	ldrex	r3, [r3]
 8005872:	623b      	str	r3, [r7, #32]
   return(result);
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	f023 0301 	bic.w	r3, r3, #1
 800587a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3308      	adds	r3, #8
 8005884:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005888:	633a      	str	r2, [r7, #48]	@ 0x30
 800588a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800588e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005890:	e841 2300 	strex	r3, r2, [r1]
 8005894:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1e3      	bne.n	8005864 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2220      	movs	r2, #32
 80058a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	e853 3f00 	ldrex	r3, [r3]
 80058bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f023 0310 	bic.w	r3, r3, #16
 80058c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	461a      	mov	r2, r3
 80058ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80058d2:	61fb      	str	r3, [r7, #28]
 80058d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	69b9      	ldr	r1, [r7, #24]
 80058d8:	69fa      	ldr	r2, [r7, #28]
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	617b      	str	r3, [r7, #20]
   return(result);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e4      	bne.n	80058b0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2202      	movs	r2, #2
 80058ea:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058f0:	4619      	mov	r1, r3
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f85c 	bl	80059b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058f8:	e03f      	b.n	800597a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00e      	beq.n	8005924 <HAL_UART_IRQHandler+0x5a8>
 8005906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800590a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d008      	beq.n	8005924 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800591a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 ff5d 	bl	80067dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005922:	e02d      	b.n	8005980 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00e      	beq.n	800594e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005938:	2b00      	cmp	r3, #0
 800593a:	d008      	beq.n	800594e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01c      	beq.n	800597e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	4798      	blx	r3
    }
    return;
 800594c:	e017      	b.n	800597e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800594e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	d012      	beq.n	8005980 <HAL_UART_IRQHandler+0x604>
 800595a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800595e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00c      	beq.n	8005980 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fd52 	bl	8006410 <UART_EndTransmit_IT>
    return;
 800596c:	e008      	b.n	8005980 <HAL_UART_IRQHandler+0x604>
      return;
 800596e:	bf00      	nop
 8005970:	e006      	b.n	8005980 <HAL_UART_IRQHandler+0x604>
    return;
 8005972:	bf00      	nop
 8005974:	e004      	b.n	8005980 <HAL_UART_IRQHandler+0x604>
      return;
 8005976:	bf00      	nop
 8005978:	e002      	b.n	8005980 <HAL_UART_IRQHandler+0x604>
      return;
 800597a:	bf00      	nop
 800597c:	e000      	b.n	8005980 <HAL_UART_IRQHandler+0x604>
    return;
 800597e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005980:	37e8      	adds	r7, #232	@ 0xe8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop

08005988 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059cc:	b08a      	sub	sp, #40	@ 0x28
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	431a      	orrs	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	431a      	orrs	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	4bb4      	ldr	r3, [pc, #720]	@ (8005cc8 <UART_SetConfig+0x300>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	6812      	ldr	r2, [r2, #0]
 80059fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a00:	430b      	orrs	r3, r1
 8005a02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4aa9      	ldr	r2, [pc, #676]	@ (8005ccc <UART_SetConfig+0x304>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d004      	beq.n	8005a34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a30:	4313      	orrs	r3, r2
 8005a32:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a44:	430a      	orrs	r2, r1
 8005a46:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4aa0      	ldr	r2, [pc, #640]	@ (8005cd0 <UART_SetConfig+0x308>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d126      	bne.n	8005aa0 <UART_SetConfig+0xd8>
 8005a52:	4ba0      	ldr	r3, [pc, #640]	@ (8005cd4 <UART_SetConfig+0x30c>)
 8005a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a58:	f003 0303 	and.w	r3, r3, #3
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	d81b      	bhi.n	8005a98 <UART_SetConfig+0xd0>
 8005a60:	a201      	add	r2, pc, #4	@ (adr r2, 8005a68 <UART_SetConfig+0xa0>)
 8005a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a66:	bf00      	nop
 8005a68:	08005a79 	.word	0x08005a79
 8005a6c:	08005a89 	.word	0x08005a89
 8005a70:	08005a81 	.word	0x08005a81
 8005a74:	08005a91 	.word	0x08005a91
 8005a78:	2301      	movs	r3, #1
 8005a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a7e:	e080      	b.n	8005b82 <UART_SetConfig+0x1ba>
 8005a80:	2302      	movs	r3, #2
 8005a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a86:	e07c      	b.n	8005b82 <UART_SetConfig+0x1ba>
 8005a88:	2304      	movs	r3, #4
 8005a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a8e:	e078      	b.n	8005b82 <UART_SetConfig+0x1ba>
 8005a90:	2308      	movs	r3, #8
 8005a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a96:	e074      	b.n	8005b82 <UART_SetConfig+0x1ba>
 8005a98:	2310      	movs	r3, #16
 8005a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a9e:	e070      	b.n	8005b82 <UART_SetConfig+0x1ba>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a8c      	ldr	r2, [pc, #560]	@ (8005cd8 <UART_SetConfig+0x310>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d138      	bne.n	8005b1c <UART_SetConfig+0x154>
 8005aaa:	4b8a      	ldr	r3, [pc, #552]	@ (8005cd4 <UART_SetConfig+0x30c>)
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab0:	f003 030c 	and.w	r3, r3, #12
 8005ab4:	2b0c      	cmp	r3, #12
 8005ab6:	d82d      	bhi.n	8005b14 <UART_SetConfig+0x14c>
 8005ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac0 <UART_SetConfig+0xf8>)
 8005aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005abe:	bf00      	nop
 8005ac0:	08005af5 	.word	0x08005af5
 8005ac4:	08005b15 	.word	0x08005b15
 8005ac8:	08005b15 	.word	0x08005b15
 8005acc:	08005b15 	.word	0x08005b15
 8005ad0:	08005b05 	.word	0x08005b05
 8005ad4:	08005b15 	.word	0x08005b15
 8005ad8:	08005b15 	.word	0x08005b15
 8005adc:	08005b15 	.word	0x08005b15
 8005ae0:	08005afd 	.word	0x08005afd
 8005ae4:	08005b15 	.word	0x08005b15
 8005ae8:	08005b15 	.word	0x08005b15
 8005aec:	08005b15 	.word	0x08005b15
 8005af0:	08005b0d 	.word	0x08005b0d
 8005af4:	2300      	movs	r3, #0
 8005af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005afa:	e042      	b.n	8005b82 <UART_SetConfig+0x1ba>
 8005afc:	2302      	movs	r3, #2
 8005afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b02:	e03e      	b.n	8005b82 <UART_SetConfig+0x1ba>
 8005b04:	2304      	movs	r3, #4
 8005b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b0a:	e03a      	b.n	8005b82 <UART_SetConfig+0x1ba>
 8005b0c:	2308      	movs	r3, #8
 8005b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b12:	e036      	b.n	8005b82 <UART_SetConfig+0x1ba>
 8005b14:	2310      	movs	r3, #16
 8005b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b1a:	e032      	b.n	8005b82 <UART_SetConfig+0x1ba>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a6a      	ldr	r2, [pc, #424]	@ (8005ccc <UART_SetConfig+0x304>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d12a      	bne.n	8005b7c <UART_SetConfig+0x1b4>
 8005b26:	4b6b      	ldr	r3, [pc, #428]	@ (8005cd4 <UART_SetConfig+0x30c>)
 8005b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b34:	d01a      	beq.n	8005b6c <UART_SetConfig+0x1a4>
 8005b36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b3a:	d81b      	bhi.n	8005b74 <UART_SetConfig+0x1ac>
 8005b3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b40:	d00c      	beq.n	8005b5c <UART_SetConfig+0x194>
 8005b42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b46:	d815      	bhi.n	8005b74 <UART_SetConfig+0x1ac>
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <UART_SetConfig+0x18c>
 8005b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b50:	d008      	beq.n	8005b64 <UART_SetConfig+0x19c>
 8005b52:	e00f      	b.n	8005b74 <UART_SetConfig+0x1ac>
 8005b54:	2300      	movs	r3, #0
 8005b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b5a:	e012      	b.n	8005b82 <UART_SetConfig+0x1ba>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b62:	e00e      	b.n	8005b82 <UART_SetConfig+0x1ba>
 8005b64:	2304      	movs	r3, #4
 8005b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b6a:	e00a      	b.n	8005b82 <UART_SetConfig+0x1ba>
 8005b6c:	2308      	movs	r3, #8
 8005b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b72:	e006      	b.n	8005b82 <UART_SetConfig+0x1ba>
 8005b74:	2310      	movs	r3, #16
 8005b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b7a:	e002      	b.n	8005b82 <UART_SetConfig+0x1ba>
 8005b7c:	2310      	movs	r3, #16
 8005b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a51      	ldr	r2, [pc, #324]	@ (8005ccc <UART_SetConfig+0x304>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d17a      	bne.n	8005c82 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b90:	2b08      	cmp	r3, #8
 8005b92:	d824      	bhi.n	8005bde <UART_SetConfig+0x216>
 8005b94:	a201      	add	r2, pc, #4	@ (adr r2, 8005b9c <UART_SetConfig+0x1d4>)
 8005b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9a:	bf00      	nop
 8005b9c:	08005bc1 	.word	0x08005bc1
 8005ba0:	08005bdf 	.word	0x08005bdf
 8005ba4:	08005bc9 	.word	0x08005bc9
 8005ba8:	08005bdf 	.word	0x08005bdf
 8005bac:	08005bcf 	.word	0x08005bcf
 8005bb0:	08005bdf 	.word	0x08005bdf
 8005bb4:	08005bdf 	.word	0x08005bdf
 8005bb8:	08005bdf 	.word	0x08005bdf
 8005bbc:	08005bd7 	.word	0x08005bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bc0:	f7fe f994 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 8005bc4:	61f8      	str	r0, [r7, #28]
        break;
 8005bc6:	e010      	b.n	8005bea <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bc8:	4b44      	ldr	r3, [pc, #272]	@ (8005cdc <UART_SetConfig+0x314>)
 8005bca:	61fb      	str	r3, [r7, #28]
        break;
 8005bcc:	e00d      	b.n	8005bea <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bce:	f7fe f8f5 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8005bd2:	61f8      	str	r0, [r7, #28]
        break;
 8005bd4:	e009      	b.n	8005bea <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bda:	61fb      	str	r3, [r7, #28]
        break;
 8005bdc:	e005      	b.n	8005bea <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005be8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 8107 	beq.w	8005e00 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	4413      	add	r3, r2
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d305      	bcc.n	8005c0e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d903      	bls.n	8005c16 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005c14:	e0f4      	b.n	8005e00 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	461c      	mov	r4, r3
 8005c1c:	4615      	mov	r5, r2
 8005c1e:	f04f 0200 	mov.w	r2, #0
 8005c22:	f04f 0300 	mov.w	r3, #0
 8005c26:	022b      	lsls	r3, r5, #8
 8005c28:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c2c:	0222      	lsls	r2, r4, #8
 8005c2e:	68f9      	ldr	r1, [r7, #12]
 8005c30:	6849      	ldr	r1, [r1, #4]
 8005c32:	0849      	lsrs	r1, r1, #1
 8005c34:	2000      	movs	r0, #0
 8005c36:	4688      	mov	r8, r1
 8005c38:	4681      	mov	r9, r0
 8005c3a:	eb12 0a08 	adds.w	sl, r2, r8
 8005c3e:	eb43 0b09 	adc.w	fp, r3, r9
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	603b      	str	r3, [r7, #0]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c50:	4650      	mov	r0, sl
 8005c52:	4659      	mov	r1, fp
 8005c54:	f7fa feda 	bl	8000a0c <__aeabi_uldivmod>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c66:	d308      	bcc.n	8005c7a <UART_SetConfig+0x2b2>
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c6e:	d204      	bcs.n	8005c7a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	60da      	str	r2, [r3, #12]
 8005c78:	e0c2      	b.n	8005e00 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005c80:	e0be      	b.n	8005e00 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c8a:	d16a      	bne.n	8005d62 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005c8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d834      	bhi.n	8005cfe <UART_SetConfig+0x336>
 8005c94:	a201      	add	r2, pc, #4	@ (adr r2, 8005c9c <UART_SetConfig+0x2d4>)
 8005c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9a:	bf00      	nop
 8005c9c:	08005cc1 	.word	0x08005cc1
 8005ca0:	08005ce1 	.word	0x08005ce1
 8005ca4:	08005ce9 	.word	0x08005ce9
 8005ca8:	08005cff 	.word	0x08005cff
 8005cac:	08005cef 	.word	0x08005cef
 8005cb0:	08005cff 	.word	0x08005cff
 8005cb4:	08005cff 	.word	0x08005cff
 8005cb8:	08005cff 	.word	0x08005cff
 8005cbc:	08005cf7 	.word	0x08005cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc0:	f7fe f914 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 8005cc4:	61f8      	str	r0, [r7, #28]
        break;
 8005cc6:	e020      	b.n	8005d0a <UART_SetConfig+0x342>
 8005cc8:	efff69f3 	.word	0xefff69f3
 8005ccc:	40008000 	.word	0x40008000
 8005cd0:	40013800 	.word	0x40013800
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	40004400 	.word	0x40004400
 8005cdc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ce0:	f7fe f91a 	bl	8003f18 <HAL_RCC_GetPCLK2Freq>
 8005ce4:	61f8      	str	r0, [r7, #28]
        break;
 8005ce6:	e010      	b.n	8005d0a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ce8:	4b4c      	ldr	r3, [pc, #304]	@ (8005e1c <UART_SetConfig+0x454>)
 8005cea:	61fb      	str	r3, [r7, #28]
        break;
 8005cec:	e00d      	b.n	8005d0a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cee:	f7fe f865 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8005cf2:	61f8      	str	r0, [r7, #28]
        break;
 8005cf4:	e009      	b.n	8005d0a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cfa:	61fb      	str	r3, [r7, #28]
        break;
 8005cfc:	e005      	b.n	8005d0a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005d08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d077      	beq.n	8005e00 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	005a      	lsls	r2, r3, #1
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	085b      	lsrs	r3, r3, #1
 8005d1a:	441a      	add	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d24:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	2b0f      	cmp	r3, #15
 8005d2a:	d916      	bls.n	8005d5a <UART_SetConfig+0x392>
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d32:	d212      	bcs.n	8005d5a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	f023 030f 	bic.w	r3, r3, #15
 8005d3c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	085b      	lsrs	r3, r3, #1
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	8afb      	ldrh	r3, [r7, #22]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	8afa      	ldrh	r2, [r7, #22]
 8005d56:	60da      	str	r2, [r3, #12]
 8005d58:	e052      	b.n	8005e00 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d60:	e04e      	b.n	8005e00 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d66:	2b08      	cmp	r3, #8
 8005d68:	d827      	bhi.n	8005dba <UART_SetConfig+0x3f2>
 8005d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d70 <UART_SetConfig+0x3a8>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005d95 	.word	0x08005d95
 8005d74:	08005d9d 	.word	0x08005d9d
 8005d78:	08005da5 	.word	0x08005da5
 8005d7c:	08005dbb 	.word	0x08005dbb
 8005d80:	08005dab 	.word	0x08005dab
 8005d84:	08005dbb 	.word	0x08005dbb
 8005d88:	08005dbb 	.word	0x08005dbb
 8005d8c:	08005dbb 	.word	0x08005dbb
 8005d90:	08005db3 	.word	0x08005db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d94:	f7fe f8aa 	bl	8003eec <HAL_RCC_GetPCLK1Freq>
 8005d98:	61f8      	str	r0, [r7, #28]
        break;
 8005d9a:	e014      	b.n	8005dc6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d9c:	f7fe f8bc 	bl	8003f18 <HAL_RCC_GetPCLK2Freq>
 8005da0:	61f8      	str	r0, [r7, #28]
        break;
 8005da2:	e010      	b.n	8005dc6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da4:	4b1d      	ldr	r3, [pc, #116]	@ (8005e1c <UART_SetConfig+0x454>)
 8005da6:	61fb      	str	r3, [r7, #28]
        break;
 8005da8:	e00d      	b.n	8005dc6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005daa:	f7fe f807 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8005dae:	61f8      	str	r0, [r7, #28]
        break;
 8005db0:	e009      	b.n	8005dc6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005db2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005db6:	61fb      	str	r3, [r7, #28]
        break;
 8005db8:	e005      	b.n	8005dc6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005dc4:	bf00      	nop
    }

    if (pclk != 0U)
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d019      	beq.n	8005e00 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	085a      	lsrs	r2, r3, #1
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	441a      	add	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dde:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	2b0f      	cmp	r3, #15
 8005de4:	d909      	bls.n	8005dfa <UART_SetConfig+0x432>
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dec:	d205      	bcs.n	8005dfa <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	60da      	str	r2, [r3, #12]
 8005df8:	e002      	b.n	8005e00 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005e0c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3728      	adds	r7, #40	@ 0x28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e1a:	bf00      	nop
 8005e1c:	00f42400 	.word	0x00f42400

08005e20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2c:	f003 0308 	and.w	r3, r3, #8
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00a      	beq.n	8005e4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00a      	beq.n	8005e8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e92:	f003 0304 	and.w	r3, r3, #4
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb4:	f003 0310 	and.w	r3, r3, #16
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00a      	beq.n	8005ed2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01a      	beq.n	8005f36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f1e:	d10a      	bne.n	8005f36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	605a      	str	r2, [r3, #4]
  }
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b098      	sub	sp, #96	@ 0x60
 8005f68:	af02      	add	r7, sp, #8
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f74:	f7fb fc66 	bl	8001844 <HAL_GetTick>
 8005f78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d12e      	bne.n	8005fe6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f90:	2200      	movs	r2, #0
 8005f92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f88c 	bl	80060b4 <UART_WaitOnFlagUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d021      	beq.n	8005fe6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005faa:	e853 3f00 	ldrex	r3, [r3]
 8005fae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fc2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fc8:	e841 2300 	strex	r3, r2, [r1]
 8005fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1e6      	bne.n	8005fa2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e062      	b.n	80060ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d149      	bne.n	8006088 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ff4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f856 	bl	80060b4 <UART_WaitOnFlagUntilTimeout>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d03c      	beq.n	8006088 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006016:	e853 3f00 	ldrex	r3, [r3]
 800601a:	623b      	str	r3, [r7, #32]
   return(result);
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	461a      	mov	r2, r3
 800602a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800602c:	633b      	str	r3, [r7, #48]	@ 0x30
 800602e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006032:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800603a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e6      	bne.n	800600e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3308      	adds	r3, #8
 8006046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	e853 3f00 	ldrex	r3, [r3]
 800604e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 0301 	bic.w	r3, r3, #1
 8006056:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3308      	adds	r3, #8
 800605e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006060:	61fa      	str	r2, [r7, #28]
 8006062:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006064:	69b9      	ldr	r1, [r7, #24]
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	e841 2300 	strex	r3, r2, [r1]
 800606c:	617b      	str	r3, [r7, #20]
   return(result);
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1e5      	bne.n	8006040 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2220      	movs	r2, #32
 8006078:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e011      	b.n	80060ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2220      	movs	r2, #32
 800608c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2220      	movs	r2, #32
 8006092:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3758      	adds	r7, #88	@ 0x58
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	603b      	str	r3, [r7, #0]
 80060c0:	4613      	mov	r3, r2
 80060c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060c4:	e04f      	b.n	8006166 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060cc:	d04b      	beq.n	8006166 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ce:	f7fb fbb9 	bl	8001844 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d302      	bcc.n	80060e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e04e      	b.n	8006186 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0304 	and.w	r3, r3, #4
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d037      	beq.n	8006166 <UART_WaitOnFlagUntilTimeout+0xb2>
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2b80      	cmp	r3, #128	@ 0x80
 80060fa:	d034      	beq.n	8006166 <UART_WaitOnFlagUntilTimeout+0xb2>
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b40      	cmp	r3, #64	@ 0x40
 8006100:	d031      	beq.n	8006166 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	f003 0308 	and.w	r3, r3, #8
 800610c:	2b08      	cmp	r3, #8
 800610e:	d110      	bne.n	8006132 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2208      	movs	r2, #8
 8006116:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 f8ff 	bl	800631c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2208      	movs	r2, #8
 8006122:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e029      	b.n	8006186 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800613c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006140:	d111      	bne.n	8006166 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800614a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 f8e5 	bl	800631c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2220      	movs	r2, #32
 8006156:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e00f      	b.n	8006186 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69da      	ldr	r2, [r3, #28]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	4013      	ands	r3, r2
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	429a      	cmp	r2, r3
 8006174:	bf0c      	ite	eq
 8006176:	2301      	moveq	r3, #1
 8006178:	2300      	movne	r3, #0
 800617a:	b2db      	uxtb	r3, r3
 800617c:	461a      	mov	r2, r3
 800617e:	79fb      	ldrb	r3, [r7, #7]
 8006180:	429a      	cmp	r2, r3
 8006182:	d0a0      	beq.n	80060c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006190:	b480      	push	{r7}
 8006192:	b097      	sub	sp, #92	@ 0x5c
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	4613      	mov	r3, r2
 800619c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	88fa      	ldrh	r2, [r7, #6]
 80061a8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	88fa      	ldrh	r2, [r7, #6]
 80061b0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061c2:	d10e      	bne.n	80061e2 <UART_Start_Receive_IT+0x52>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d105      	bne.n	80061d8 <UART_Start_Receive_IT+0x48>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80061d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061d6:	e02d      	b.n	8006234 <UART_Start_Receive_IT+0xa4>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	22ff      	movs	r2, #255	@ 0xff
 80061dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061e0:	e028      	b.n	8006234 <UART_Start_Receive_IT+0xa4>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10d      	bne.n	8006206 <UART_Start_Receive_IT+0x76>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d104      	bne.n	80061fc <UART_Start_Receive_IT+0x6c>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	22ff      	movs	r2, #255	@ 0xff
 80061f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061fa:	e01b      	b.n	8006234 <UART_Start_Receive_IT+0xa4>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	227f      	movs	r2, #127	@ 0x7f
 8006200:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006204:	e016      	b.n	8006234 <UART_Start_Receive_IT+0xa4>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800620e:	d10d      	bne.n	800622c <UART_Start_Receive_IT+0x9c>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d104      	bne.n	8006222 <UART_Start_Receive_IT+0x92>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	227f      	movs	r2, #127	@ 0x7f
 800621c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006220:	e008      	b.n	8006234 <UART_Start_Receive_IT+0xa4>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	223f      	movs	r2, #63	@ 0x3f
 8006226:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800622a:	e003      	b.n	8006234 <UART_Start_Receive_IT+0xa4>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2222      	movs	r2, #34	@ 0x22
 8006240:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3308      	adds	r3, #8
 800624a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800624e:	e853 3f00 	ldrex	r3, [r3]
 8006252:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006256:	f043 0301 	orr.w	r3, r3, #1
 800625a:	657b      	str	r3, [r7, #84]	@ 0x54
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3308      	adds	r3, #8
 8006262:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006264:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006266:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006268:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800626a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800626c:	e841 2300 	strex	r3, r2, [r1]
 8006270:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006272:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1e5      	bne.n	8006244 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006280:	d107      	bne.n	8006292 <UART_Start_Receive_IT+0x102>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d103      	bne.n	8006292 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4a21      	ldr	r2, [pc, #132]	@ (8006314 <UART_Start_Receive_IT+0x184>)
 800628e:	669a      	str	r2, [r3, #104]	@ 0x68
 8006290:	e002      	b.n	8006298 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4a20      	ldr	r2, [pc, #128]	@ (8006318 <UART_Start_Receive_IT+0x188>)
 8006296:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d019      	beq.n	80062d4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a8:	e853 3f00 	ldrex	r3, [r3]
 80062ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80062b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062be:	637b      	str	r3, [r7, #52]	@ 0x34
 80062c0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80062c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062c6:	e841 2300 	strex	r3, r2, [r1]
 80062ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80062cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1e6      	bne.n	80062a0 <UART_Start_Receive_IT+0x110>
 80062d2:	e018      	b.n	8006306 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	613b      	str	r3, [r7, #16]
   return(result);
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f043 0320 	orr.w	r3, r3, #32
 80062e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062f2:	623b      	str	r3, [r7, #32]
 80062f4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f6:	69f9      	ldr	r1, [r7, #28]
 80062f8:	6a3a      	ldr	r2, [r7, #32]
 80062fa:	e841 2300 	strex	r3, r2, [r1]
 80062fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1e6      	bne.n	80062d4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	375c      	adds	r7, #92	@ 0x5c
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	08006621 	.word	0x08006621
 8006318:	08006465 	.word	0x08006465

0800631c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800631c:	b480      	push	{r7}
 800631e:	b095      	sub	sp, #84	@ 0x54
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006334:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006338:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006342:	643b      	str	r3, [r7, #64]	@ 0x40
 8006344:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006346:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006348:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800634a:	e841 2300 	strex	r3, r2, [r1]
 800634e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1e6      	bne.n	8006324 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3308      	adds	r3, #8
 800635c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	61fb      	str	r3, [r7, #28]
   return(result);
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	f023 0301 	bic.w	r3, r3, #1
 800636c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3308      	adds	r3, #8
 8006374:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006376:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006378:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800637c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e5      	bne.n	8006356 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800638e:	2b01      	cmp	r3, #1
 8006390:	d118      	bne.n	80063c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	e853 3f00 	ldrex	r3, [r3]
 800639e:	60bb      	str	r3, [r7, #8]
   return(result);
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f023 0310 	bic.w	r3, r3, #16
 80063a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	461a      	mov	r2, r3
 80063ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063b0:	61bb      	str	r3, [r7, #24]
 80063b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	6979      	ldr	r1, [r7, #20]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	e841 2300 	strex	r3, r2, [r1]
 80063bc:	613b      	str	r3, [r7, #16]
   return(result);
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1e6      	bne.n	8006392 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80063d8:	bf00      	nop
 80063da:	3754      	adds	r7, #84	@ 0x54
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f7ff faca 	bl	800599c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006408:	bf00      	nop
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b088      	sub	sp, #32
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	e853 3f00 	ldrex	r3, [r3]
 8006424:	60bb      	str	r3, [r7, #8]
   return(result);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800642c:	61fb      	str	r3, [r7, #28]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	461a      	mov	r2, r3
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	61bb      	str	r3, [r7, #24]
 8006438:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643a:	6979      	ldr	r1, [r7, #20]
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	e841 2300 	strex	r3, r2, [r1]
 8006442:	613b      	str	r3, [r7, #16]
   return(result);
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1e6      	bne.n	8006418 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2220      	movs	r2, #32
 800644e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7ff fa96 	bl	8005988 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800645c:	bf00      	nop
 800645e:	3720      	adds	r7, #32
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b09c      	sub	sp, #112	@ 0x70
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006472:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800647c:	2b22      	cmp	r3, #34	@ 0x22
 800647e:	f040 80be 	bne.w	80065fe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006488:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800648c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006490:	b2d9      	uxtb	r1, r3
 8006492:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006496:	b2da      	uxtb	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800649c:	400a      	ands	r2, r1
 800649e:	b2d2      	uxtb	r2, r2
 80064a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	3b01      	subs	r3, #1
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f040 80a3 	bne.w	8006612 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80064da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80064f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e6      	bne.n	80064cc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3308      	adds	r3, #8
 8006504:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006508:	e853 3f00 	ldrex	r3, [r3]
 800650c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800650e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006510:	f023 0301 	bic.w	r3, r3, #1
 8006514:	667b      	str	r3, [r7, #100]	@ 0x64
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3308      	adds	r3, #8
 800651c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800651e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006520:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006524:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800652c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e5      	bne.n	80064fe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2220      	movs	r2, #32
 8006536:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a34      	ldr	r2, [pc, #208]	@ (800661c <UART_RxISR_8BIT+0x1b8>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d01f      	beq.n	8006590 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d018      	beq.n	8006590 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006566:	e853 3f00 	ldrex	r3, [r3]
 800656a:	623b      	str	r3, [r7, #32]
   return(result);
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006572:	663b      	str	r3, [r7, #96]	@ 0x60
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	461a      	mov	r2, r3
 800657a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800657c:	633b      	str	r3, [r7, #48]	@ 0x30
 800657e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006580:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006584:	e841 2300 	strex	r3, r2, [r1]
 8006588:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800658a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1e6      	bne.n	800655e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006594:	2b01      	cmp	r3, #1
 8006596:	d12e      	bne.n	80065f6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	e853 3f00 	ldrex	r3, [r3]
 80065aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 0310 	bic.w	r3, r3, #16
 80065b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	461a      	mov	r2, r3
 80065ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065bc:	61fb      	str	r3, [r7, #28]
 80065be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	69b9      	ldr	r1, [r7, #24]
 80065c2:	69fa      	ldr	r2, [r7, #28]
 80065c4:	e841 2300 	strex	r3, r2, [r1]
 80065c8:	617b      	str	r3, [r7, #20]
   return(result);
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e6      	bne.n	800659e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	f003 0310 	and.w	r3, r3, #16
 80065da:	2b10      	cmp	r3, #16
 80065dc:	d103      	bne.n	80065e6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2210      	movs	r2, #16
 80065e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff f9de 	bl	80059b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065f4:	e00d      	b.n	8006612 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7fa fe34 	bl	8001264 <HAL_UART_RxCpltCallback>
}
 80065fc:	e009      	b.n	8006612 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	8b1b      	ldrh	r3, [r3, #24]
 8006604:	b29a      	uxth	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0208 	orr.w	r2, r2, #8
 800660e:	b292      	uxth	r2, r2
 8006610:	831a      	strh	r2, [r3, #24]
}
 8006612:	bf00      	nop
 8006614:	3770      	adds	r7, #112	@ 0x70
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	40008000 	.word	0x40008000

08006620 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b09c      	sub	sp, #112	@ 0x70
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800662e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006638:	2b22      	cmp	r3, #34	@ 0x22
 800663a:	f040 80be 	bne.w	80067ba <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006644:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800664c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800664e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006652:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006656:	4013      	ands	r3, r2
 8006658:	b29a      	uxth	r2, r3
 800665a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800665c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006662:	1c9a      	adds	r2, r3, #2
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800666e:	b29b      	uxth	r3, r3
 8006670:	3b01      	subs	r3, #1
 8006672:	b29a      	uxth	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	f040 80a3 	bne.w	80067ce <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006690:	e853 3f00 	ldrex	r3, [r3]
 8006694:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006698:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800669c:	667b      	str	r3, [r7, #100]	@ 0x64
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80066a8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80066ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80066ae:	e841 2300 	strex	r3, r2, [r1]
 80066b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80066b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1e6      	bne.n	8006688 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3308      	adds	r3, #8
 80066c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c4:	e853 3f00 	ldrex	r3, [r3]
 80066c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	f023 0301 	bic.w	r3, r3, #1
 80066d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3308      	adds	r3, #8
 80066d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80066da:	643a      	str	r2, [r7, #64]	@ 0x40
 80066dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066e2:	e841 2300 	strex	r3, r2, [r1]
 80066e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1e5      	bne.n	80066ba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a34      	ldr	r2, [pc, #208]	@ (80067d8 <UART_RxISR_16BIT+0x1b8>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d01f      	beq.n	800674c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d018      	beq.n	800674c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	61fb      	str	r3, [r7, #28]
   return(result);
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800672e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	461a      	mov	r2, r3
 8006736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800673a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800673e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006740:	e841 2300 	strex	r3, r2, [r1]
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1e6      	bne.n	800671a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006750:	2b01      	cmp	r3, #1
 8006752:	d12e      	bne.n	80067b2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	e853 3f00 	ldrex	r3, [r3]
 8006766:	60bb      	str	r3, [r7, #8]
   return(result);
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f023 0310 	bic.w	r3, r3, #16
 800676e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	461a      	mov	r2, r3
 8006776:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677c:	6979      	ldr	r1, [r7, #20]
 800677e:	69ba      	ldr	r2, [r7, #24]
 8006780:	e841 2300 	strex	r3, r2, [r1]
 8006784:	613b      	str	r3, [r7, #16]
   return(result);
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1e6      	bne.n	800675a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	f003 0310 	and.w	r3, r3, #16
 8006796:	2b10      	cmp	r3, #16
 8006798:	d103      	bne.n	80067a2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2210      	movs	r2, #16
 80067a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80067a8:	4619      	mov	r1, r3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7ff f900 	bl	80059b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80067b0:	e00d      	b.n	80067ce <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7fa fd56 	bl	8001264 <HAL_UART_RxCpltCallback>
}
 80067b8:	e009      	b.n	80067ce <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	8b1b      	ldrh	r3, [r3, #24]
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0208 	orr.w	r2, r2, #8
 80067ca:	b292      	uxth	r2, r2
 80067cc:	831a      	strh	r2, [r3, #24]
}
 80067ce:	bf00      	nop
 80067d0:	3770      	adds	r7, #112	@ 0x70
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	40008000 	.word	0x40008000

080067dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <memset>:
 80067f0:	4402      	add	r2, r0
 80067f2:	4603      	mov	r3, r0
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d100      	bne.n	80067fa <memset+0xa>
 80067f8:	4770      	bx	lr
 80067fa:	f803 1b01 	strb.w	r1, [r3], #1
 80067fe:	e7f9      	b.n	80067f4 <memset+0x4>

08006800 <__libc_init_array>:
 8006800:	b570      	push	{r4, r5, r6, lr}
 8006802:	4d0d      	ldr	r5, [pc, #52]	@ (8006838 <__libc_init_array+0x38>)
 8006804:	4c0d      	ldr	r4, [pc, #52]	@ (800683c <__libc_init_array+0x3c>)
 8006806:	1b64      	subs	r4, r4, r5
 8006808:	10a4      	asrs	r4, r4, #2
 800680a:	2600      	movs	r6, #0
 800680c:	42a6      	cmp	r6, r4
 800680e:	d109      	bne.n	8006824 <__libc_init_array+0x24>
 8006810:	4d0b      	ldr	r5, [pc, #44]	@ (8006840 <__libc_init_array+0x40>)
 8006812:	4c0c      	ldr	r4, [pc, #48]	@ (8006844 <__libc_init_array+0x44>)
 8006814:	f000 f818 	bl	8006848 <_init>
 8006818:	1b64      	subs	r4, r4, r5
 800681a:	10a4      	asrs	r4, r4, #2
 800681c:	2600      	movs	r6, #0
 800681e:	42a6      	cmp	r6, r4
 8006820:	d105      	bne.n	800682e <__libc_init_array+0x2e>
 8006822:	bd70      	pop	{r4, r5, r6, pc}
 8006824:	f855 3b04 	ldr.w	r3, [r5], #4
 8006828:	4798      	blx	r3
 800682a:	3601      	adds	r6, #1
 800682c:	e7ee      	b.n	800680c <__libc_init_array+0xc>
 800682e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006832:	4798      	blx	r3
 8006834:	3601      	adds	r6, #1
 8006836:	e7f2      	b.n	800681e <__libc_init_array+0x1e>
 8006838:	080068b0 	.word	0x080068b0
 800683c:	080068b0 	.word	0x080068b0
 8006840:	080068b0 	.word	0x080068b0
 8006844:	080068b4 	.word	0x080068b4

08006848 <_init>:
 8006848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684a:	bf00      	nop
 800684c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800684e:	bc08      	pop	{r3}
 8006850:	469e      	mov	lr, r3
 8006852:	4770      	bx	lr

08006854 <_fini>:
 8006854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006856:	bf00      	nop
 8006858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800685a:	bc08      	pop	{r3}
 800685c:	469e      	mov	lr, r3
 800685e:	4770      	bx	lr
